// This module contains a collection of YANG definitions
// for Cisco IOS-XR ipv6-ospfv3 package operational data.
// 
// This module contains definitions
// for the following management objects:
//   ospfv3: OSPFv3 operational information 
// 
// Copyright (c) 2013-2018 by Cisco Systems, Inc.
// All rights reserved.
package ipv6_ospfv3_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ipv6_ospfv3_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv6-ospfv3-oper ospfv3}", reflect.TypeOf(Ospfv3{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3", reflect.TypeOf(Ospfv3{}))
}

// Ospfv3GracefulShutdownState represents Graceful Shutdown state
type Ospfv3GracefulShutdownState string

const (
    // Init
    Ospfv3GracefulShutdownState_init Ospfv3GracefulShutdownState = "init"

    // Normal
    Ospfv3GracefulShutdownState_normal Ospfv3GracefulShutdownState = "normal"

    // Flushing
    Ospfv3GracefulShutdownState_flushing Ospfv3GracefulShutdownState = "flushing"

    // Empty Hellos
    Ospfv3GracefulShutdownState_empty_hellos Ospfv3GracefulShutdownState = "empty-hellos"

    // Quiet
    Ospfv3GracefulShutdownState_quiet Ospfv3GracefulShutdownState = "quiet"
)

// IpfrrTbrkr represents FRR Tiebreakers
type IpfrrTbrkr string

const (
    // Downsteram
    IpfrrTbrkr_downstream IpfrrTbrkr = "downstream"

    // LC Disjoint
    IpfrrTbrkr_line_card_disjoint IpfrrTbrkr = "line-card-disjoint"

    // Backup metric
    IpfrrTbrkr_backup_metric IpfrrTbrkr = "backup-metric"

    // Node protection
    IpfrrTbrkr_node_protect IpfrrTbrkr = "node-protect"

    // Primary path
    IpfrrTbrkr_primary_path IpfrrTbrkr = "primary-path"

    // Secondary path
    IpfrrTbrkr_secondary_path IpfrrTbrkr = "secondary-path"

    // SRLG disjoint
    IpfrrTbrkr_srlg_disjoint IpfrrTbrkr = "srlg-disjoint"

    // Tunnel
    IpfrrTbrkr_tunnel IpfrrTbrkr = "tunnel"
)

// OspfLsaSyncState represents LSA synchronization states
type OspfLsaSyncState string

const (
    // State not set
    OspfLsaSyncState_none OspfLsaSyncState = "none"

    // LSA out of sync with active
    OspfLsaSyncState_out_of_sync OspfLsaSyncState = "out-of-sync"

    // LSA in sync with active
    OspfLsaSyncState_in_sync OspfLsaSyncState = "in-sync"

    // NSR ack pending for LSA sync
    OspfLsaSyncState_nsr_ack_pending OspfLsaSyncState = "nsr-ack-pending"
)

// Ospfv3Lsa1 represents OSPFv3 LSA types
type Ospfv3Lsa1 string

const (
    // Link LSA
    Ospfv3Lsa1_link Ospfv3Lsa1 = "link"

    // Grace LSA
    Ospfv3Lsa1_grace Ospfv3Lsa1 = "grace"

    // Router LSA
    Ospfv3Lsa1_router Ospfv3Lsa1 = "router"

    // Network LSA
    Ospfv3Lsa1_network Ospfv3Lsa1 = "network"

    // Inter area prefix LSA
    Ospfv3Lsa1_inter_area_prefix Ospfv3Lsa1 = "inter-area-prefix"

    // Inter area router LSA
    Ospfv3Lsa1_inter_area_router Ospfv3Lsa1 = "inter-area-router"

    // MOSPF LSA
    Ospfv3Lsa1_mospf Ospfv3Lsa1 = "mospf"

    // Type-7 External LSA
    Ospfv3Lsa1_type7_external Ospfv3Lsa1 = "type7-external"

    // Prefix LSA
    Ospfv3Lsa1_lsa_prefix Ospfv3Lsa1 = "lsa-prefix"

    // AS external LSA
    Ospfv3Lsa1_as_external Ospfv3Lsa1 = "as-external"

    // Unknown link LSA
    Ospfv3Lsa1_unknown_link Ospfv3Lsa1 = "unknown-link"

    // Unknown area LSA
    Ospfv3Lsa1_unknown_area Ospfv3Lsa1 = "unknown-area"

    // Unknown AS LSA
    Ospfv3Lsa1_unknown_as Ospfv3Lsa1 = "unknown-as"

    // Unknown type LSA
    Ospfv3Lsa1_unknown_type Ospfv3Lsa1 = "unknown-type"
)

// OspfNsrSchedPri represents Ospf nsr sched pri
type OspfNsrSchedPri string

const (
    // ospf nsr stats sched pri hi
    OspfNsrSchedPri_ospf_nsr_stats_sched_pri_hi OspfNsrSchedPri = "ospf-nsr-stats-sched-pri-hi"

    // ospf nsr stats sched pri med
    OspfNsrSchedPri_ospf_nsr_stats_sched_pri_med OspfNsrSchedPri = "ospf-nsr-stats-sched-pri-med"

    // ospf nsr stats sched pri low
    OspfNsrSchedPri_ospf_nsr_stats_sched_pri_low OspfNsrSchedPri = "ospf-nsr-stats-sched-pri-low"

    // ospf nsr stats sched pri max
    OspfNsrSchedPri_ospf_nsr_stats_sched_pri_max OspfNsrSchedPri = "ospf-nsr-stats-sched-pri-max"
)

// Ospfv3AreaRangeStatus represents Ospfv3 area range status
type Ospfv3AreaRangeStatus string

const (
    // Advertise this range
    Ospfv3AreaRangeStatus_advertise Ospfv3AreaRangeStatus = "advertise"

    // Do not advertise this range
    Ospfv3AreaRangeStatus_do_not_advertise Ospfv3AreaRangeStatus = "do-not-advertise"
)

// StubRouterTrigger represents Trigger for entering stub router mode
type StubRouterTrigger string

const (
    // Process migration
    StubRouterTrigger_on_proc_migration StubRouterTrigger = "on-proc-migration"

    // Process restart
    StubRouterTrigger_on_proc_restart StubRouterTrigger = "on-proc-restart"

    // RP switchover
    StubRouterTrigger_on_switchover StubRouterTrigger = "on-switchover"

    // Router startup
    StubRouterTrigger_on_startup StubRouterTrigger = "on-startup"

    // Always on
    StubRouterTrigger_always StubRouterTrigger = "always"

    // No trigger
    StubRouterTrigger_none StubRouterTrigger = "none"
)

// Ospfv3Interface represents OSPFv3 neighbor interface types
type Ospfv3Interface string

const (
    // None
    Ospfv3Interface_none Ospfv3Interface = "none"

    // Broadcast
    Ospfv3Interface_broadcast Ospfv3Interface = "broadcast"

    // Non broadcast
    Ospfv3Interface_non_broadcast Ospfv3Interface = "non-broadcast"

    // Point To Point
    Ospfv3Interface_point_to_point Ospfv3Interface = "point-to-point"

    // Point To Multipoint
    Ospfv3Interface_point_to_multipoint Ospfv3Interface = "point-to-multipoint"

    // Point-To-Multipoint Non broadcast
    Ospfv3Interface_point_to_multipoint_non_broadcast Ospfv3Interface = "point-to-multipoint-non-broadcast"

    // Virtual link
    Ospfv3Interface_virtual_link Ospfv3Interface = "virtual-link"

    // Loopback
    Ospfv3Interface_loopback_interface Ospfv3Interface = "loopback-interface"

    // MPLS traffic engineering
    Ospfv3Interface_mpls_traffic_engineering Ospfv3Interface = "mpls-traffic-engineering"

    // Sham link
    Ospfv3Interface_sham_link Ospfv3Interface = "sham-link"
)

// Ospfv3LsaInfoTypes represents OSPFv3 LSA format types
type Ospfv3LsaInfoTypes string

const (
    // Summary information of LSAs
    Ospfv3LsaInfoTypes_mgmt_lsa_lsasum_type Ospfv3LsaInfoTypes = "mgmt-lsa-lsasum-type"

    // Link LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_link_type Ospfv3LsaInfoTypes = "mgmt-lsa-link-type"

    // Grace LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_gr_type Ospfv3LsaInfoTypes = "mgmt-lsa-gr-type"

    // Router LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_rtr_type Ospfv3LsaInfoTypes = "mgmt-lsa-rtr-type"

    // Network LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_net_type Ospfv3LsaInfoTypes = "mgmt-lsa-net-type"

    // Inter Area Prefix Summary LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_iapfx_type Ospfv3LsaInfoTypes = "mgmt-lsa-iapfx-type"

    // Inter Area Router Summay LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_iartr_type Ospfv3LsaInfoTypes = "mgmt-lsa-iartr-type"

    // NSSA external LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_nssaext_type Ospfv3LsaInfoTypes = "mgmt-lsa-nssaext-type"

    // Intra Area Prefix LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_prefix_type Ospfv3LsaInfoTypes = "mgmt-lsa-prefix-type"

    // Type 5 External LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_ext_type Ospfv3LsaInfoTypes = "mgmt-lsa-ext-type"

    // Opaque Link scope LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_unk_link_type Ospfv3LsaInfoTypes = "mgmt-lsa-unk-link-type"

    // Opaque Area scope LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_unk_area_type Ospfv3LsaInfoTypes = "mgmt-lsa-unk-area-type"

    // Opaque AS scope LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_unk_as_type Ospfv3LsaInfoTypes = "mgmt-lsa-unk-as-type"

    // Opaque Reserved scope LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_unk_type Ospfv3LsaInfoTypes = "mgmt-lsa-unk-type"
)

// StubRouterAbrOffReason represents Reason to exiting stub router mode
type StubRouterAbrOffReason string

const (
    // Initial delay when stub router mode is
    // activated
    StubRouterAbrOffReason_init_delay StubRouterAbrOffReason = "init-delay"

    // No neighbor present
    StubRouterAbrOffReason_no_neighbor StubRouterAbrOffReason = "no-neighbor"

    // No neighbor in FULL state present
    StubRouterAbrOffReason_no_full_neighbor StubRouterAbrOffReason = "no-full-neighbor"

    // A new neighbor discovered less than 60 seconds
    // ago
    StubRouterAbrOffReason_new_neighbor StubRouterAbrOffReason = "new-neighbor"

    // A neighbor transitioned to FULL state less than
    // 60 seconds ago
    StubRouterAbrOffReason_full_neighbor StubRouterAbrOffReason = "full-neighbor"
)

// Ospfv3InterfaceState represents OSPFv3 interface states
type Ospfv3InterfaceState string

const (
    // Down
    Ospfv3InterfaceState_down Ospfv3InterfaceState = "down"

    // Loopback
    Ospfv3InterfaceState_loopback Ospfv3InterfaceState = "loopback"

    // Waiting
    Ospfv3InterfaceState_waiting Ospfv3InterfaceState = "waiting"

    // Point To Multipoint
    Ospfv3InterfaceState_point_to_multipoint Ospfv3InterfaceState = "point-to-multipoint"

    // Point To Point
    Ospfv3InterfaceState_point_to_point Ospfv3InterfaceState = "point-to-point"

    // Designated router
    Ospfv3InterfaceState_designated_router Ospfv3InterfaceState = "designated-router"

    // Backup designated router
    Ospfv3InterfaceState_backup_designated_router Ospfv3InterfaceState = "backup-designated-router"

    // Other designated router
    Ospfv3InterfaceState_other_designated_router Ospfv3InterfaceState = "other-designated-router"
)

// Ospfv3BorderRoute represents OSPFv3 border route destination types
type Ospfv3BorderRoute string

const (
    // Area border router
    Ospfv3BorderRoute_abr Ospfv3BorderRoute = "abr"

    // Area system boundary router
    Ospfv3BorderRoute_asbr Ospfv3BorderRoute = "asbr"

    // Area border router and area system boundary
    // router
    Ospfv3BorderRoute_abr_asbr Ospfv3BorderRoute = "abr-asbr"
)

// ImStateEnum represents Im state enum
type ImStateEnum string

const (
    // im state not ready
    ImStateEnum_im_state_not_ready ImStateEnum = "im-state-not-ready"

    // im state admin down
    ImStateEnum_im_state_admin_down ImStateEnum = "im-state-admin-down"

    // im state down
    ImStateEnum_im_state_down ImStateEnum = "im-state-down"

    // im state up
    ImStateEnum_im_state_up ImStateEnum = "im-state-up"

    // im state shutdown
    ImStateEnum_im_state_shutdown ImStateEnum = "im-state-shutdown"

    // im state err disable
    ImStateEnum_im_state_err_disable ImStateEnum = "im-state-err-disable"

    // im state down immediate
    ImStateEnum_im_state_down_immediate ImStateEnum = "im-state-down-immediate"

    // im state down immediate admin
    ImStateEnum_im_state_down_immediate_admin ImStateEnum = "im-state-down-immediate-admin"

    // im state down graceful
    ImStateEnum_im_state_down_graceful ImStateEnum = "im-state-down-graceful"

    // im state begin shutdown
    ImStateEnum_im_state_begin_shutdown ImStateEnum = "im-state-begin-shutdown"

    // im state end shutdown
    ImStateEnum_im_state_end_shutdown ImStateEnum = "im-state-end-shutdown"

    // im state begin error disable
    ImStateEnum_im_state_begin_error_disable ImStateEnum = "im-state-begin-error-disable"

    // im state end error disable
    ImStateEnum_im_state_end_error_disable ImStateEnum = "im-state-end-error-disable"

    // im state begin down graceful
    ImStateEnum_im_state_begin_down_graceful ImStateEnum = "im-state-begin-down-graceful"

    // im state reset
    ImStateEnum_im_state_reset ImStateEnum = "im-state-reset"

    // im state operational
    ImStateEnum_im_state_operational ImStateEnum = "im-state-operational"

    // im state not operational
    ImStateEnum_im_state_not_operational ImStateEnum = "im-state-not-operational"

    // im state unknown
    ImStateEnum_im_state_unknown ImStateEnum = "im-state-unknown"

    // im state last
    ImStateEnum_im_state_last ImStateEnum = "im-state-last"
)

// Ospfv3GracefulRestartReason represents Reason for router restart
type Ospfv3GracefulRestartReason string

const (
    // Grace reason unknown
    Ospfv3GracefulRestartReason_grace_reason_unknown Ospfv3GracefulRestartReason = "grace-reason-unknown"

    // Grace reason software restart
    Ospfv3GracefulRestartReason_grace_reason_software_restart Ospfv3GracefulRestartReason = "grace-reason-software-restart"

    // Software reload/upgrade, RFC 3623
    Ospfv3GracefulRestartReason_grace_reason_software_upgrade Ospfv3GracefulRestartReason = "grace-reason-software-upgrade"

    // Switch to redundant control processor
    Ospfv3GracefulRestartReason_grace_reason_switchover Ospfv3GracefulRestartReason = "grace-reason-switchover"
)

// Ospfv3DefaultMetric represents OSPFv3 default metric types 
type Ospfv3DefaultMetric string

const (
    // OSPFv3 default metric type None 
    Ospfv3DefaultMetric_type_none Ospfv3DefaultMetric = "type-none"

    // OSPFv3 default metric type 1 
    Ospfv3DefaultMetric_type1 Ospfv3DefaultMetric = "type1"

    // OSPFv3 default metric type 2 
    Ospfv3DefaultMetric_type2 Ospfv3DefaultMetric = "type2"
)

// Ospfv3NeighborState represents OSPFv3 neighbor states
type Ospfv3NeighborState string

const (
    // Down
    Ospfv3NeighborState_neigbhor_down Ospfv3NeighborState = "neigbhor-down"

    // Attempting
    Ospfv3NeighborState_attempt Ospfv3NeighborState = "attempt"

    // Initializing
    Ospfv3NeighborState_init Ospfv3NeighborState = "init"

    // 2 Way
    Ospfv3NeighborState_two_way Ospfv3NeighborState = "two-way"

    // Exstart
    Ospfv3NeighborState_exstart Ospfv3NeighborState = "exstart"

    // Exchange
    Ospfv3NeighborState_exchange Ospfv3NeighborState = "exchange"

    // Loading
    Ospfv3NeighborState_loading Ospfv3NeighborState = "loading"

    // Full
    Ospfv3NeighborState_full Ospfv3NeighborState = "full"

    // SCVirtual
    Ospfv3NeighborState_sc_virtual Ospfv3NeighborState = "sc-virtual"
)

// PrefixPriority represents Prefix priority
type PrefixPriority string

const (
    // Critical priority
    PrefixPriority_critical PrefixPriority = "critical"

    // High priority
    PrefixPriority_high PrefixPriority = "high"

    // Medium priority
    PrefixPriority_medium PrefixPriority = "medium"

    // Low priority
    PrefixPriority_low PrefixPriority = "low"
)

// StubRouterMode represents Stub Router mode
type StubRouterMode string

const (
    // Stub Router mode r-bit
    StubRouterMode_rbit StubRouterMode = "rbit"

    // Stub Router mode v6-bit
    StubRouterMode_v6bit StubRouterMode = "v6bit"

    // Stub Router mode max-metric
    StubRouterMode_max_metric StubRouterMode = "max-metric"

    // Stub Router not configured
    StubRouterMode_none StubRouterMode = "none"
)

// Ospfv3Link represents OSPFV3 Link type
type Ospfv3Link string

const (
    // Router link
    Ospfv3Link_link_router Ospfv3Link = "link-router"

    // Transit network link
    Ospfv3Link_link_trans_net Ospfv3Link = "link-trans-net"

    // Virutal link
    Ospfv3Link_link_virtual_link Ospfv3Link = "link-virtual-link"
)

// Ospfv3Lsa represents Ospfv3 lsa
type Ospfv3Lsa string

const (
    // Link LSA
    Ospfv3Lsa_link_lsa Ospfv3Lsa = "link-lsa"

    // Grace LSA
    Ospfv3Lsa_grace_lsa Ospfv3Lsa = "grace-lsa"

    // Router LSA
    Ospfv3Lsa_router Ospfv3Lsa = "router"

    // Network LSA
    Ospfv3Lsa_network Ospfv3Lsa = "network"

    // Inter-Area Prefix LSA
    Ospfv3Lsa_inter_area_prefix Ospfv3Lsa = "inter-area-prefix"

    // Inter-Area Router LSA
    Ospfv3Lsa_inter_area_router Ospfv3Lsa = "inter-area-router"

    // NSSA External LSA
    Ospfv3Lsa_nssa_external Ospfv3Lsa = "nssa-external"

    // Intra-Area Prefix LSA
    Ospfv3Lsa_intra_area_prefix Ospfv3Lsa = "intra-area-prefix"

    // External LSA
    Ospfv3Lsa_external Ospfv3Lsa = "external"

    // Opaque LSALink Scope
    Ospfv3Lsa_opaque_link Ospfv3Lsa = "opaque-link"

    // Opaque LSA Area Scope
    Ospfv3Lsa_opaque_area Ospfv3Lsa = "opaque-area"

    // Opaque LSA AS Scope
    Ospfv3Lsa_opaque_as Ospfv3Lsa = "opaque-as"

    // Unknown Reserved Scope LSAs
    Ospfv3Lsa_unknown Ospfv3Lsa = "unknown"
)

// StubRouterExitReason represents Reason to exiting stub router mode
type StubRouterExitReason string

const (
    // No reason
    StubRouterExitReason_none StubRouterExitReason = "none"

    // BGP has converged
    StubRouterExitReason_bgp StubRouterExitReason = "bgp"

    // Stub Router timer has expired
    StubRouterExitReason_timer StubRouterExitReason = "timer"

    // Configuration has changed
    StubRouterExitReason_configuration StubRouterExitReason = "configuration"

    // Process has been cleared
    StubRouterExitReason_cleared StubRouterExitReason = "cleared"

    // Preempted by always
    StubRouterExitReason_override StubRouterExitReason = "override"
)

// Ospfv3
// OSPFv3 operational information 
type Ospfv3 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 Process Table.
    Processes Ospfv3_Processes
}

func (ospfv3 *Ospfv3) GetEntityData() *types.CommonEntityData {
    ospfv3.EntityData.YFilter = ospfv3.YFilter
    ospfv3.EntityData.YangName = "ospfv3"
    ospfv3.EntityData.BundleName = "cisco_ios_xr"
    ospfv3.EntityData.ParentYangName = "Cisco-IOS-XR-ipv6-ospfv3-oper"
    ospfv3.EntityData.SegmentPath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3"
    ospfv3.EntityData.AbsolutePath = ospfv3.EntityData.SegmentPath
    ospfv3.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ospfv3.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ospfv3.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ospfv3.EntityData.Children = types.NewOrderedMap()
    ospfv3.EntityData.Children.Append("processes", types.YChild{"Processes", &ospfv3.Processes})
    ospfv3.EntityData.Leafs = types.NewOrderedMap()

    ospfv3.EntityData.YListKeys = []string {}

    return &(ospfv3.EntityData)
}

// Ospfv3_Processes
// OSPFv3 Process Table
type Ospfv3_Processes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 Operational data for a particular OSPFv3 process . The type is slice
    // of Ospfv3_Processes_Process.
    Process []*Ospfv3_Processes_Process
}

func (processes *Ospfv3_Processes) GetEntityData() *types.CommonEntityData {
    processes.EntityData.YFilter = processes.YFilter
    processes.EntityData.YangName = "processes"
    processes.EntityData.BundleName = "cisco_ios_xr"
    processes.EntityData.ParentYangName = "ospfv3"
    processes.EntityData.SegmentPath = "processes"
    processes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/" + processes.EntityData.SegmentPath
    processes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    processes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    processes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    processes.EntityData.Children = types.NewOrderedMap()
    processes.EntityData.Children.Append("process", types.YChild{"Process", nil})
    for i := range processes.Process {
        processes.EntityData.Children.Append(types.GetSegmentPath(processes.Process[i]), types.YChild{"Process", processes.Process[i]})
    }
    processes.EntityData.Leafs = types.NewOrderedMap()

    processes.EntityData.YListKeys = []string {}

    return &(processes.EntityData)
}

// Ospfv3_Processes_Process
// OSPFv3 Operational data for a particular OSPFv3
// process 
type Ospfv3_Processes_Process struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Particular OSPFv3 process. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ProcessName interface{}

    // Table for each VRF.
    Vrfs Ospfv3_Processes_Process_Vrfs

    // Container for Statistics.
    Statistics Ospfv3_Processes_Process_Statistics

    // Operational data for the default VRF (instance) in the OSPFv3 process.
    DefaultVrf Ospfv3_Processes_Process_DefaultVrf
}

func (process *Ospfv3_Processes_Process) GetEntityData() *types.CommonEntityData {
    process.EntityData.YFilter = process.YFilter
    process.EntityData.YangName = "process"
    process.EntityData.BundleName = "cisco_ios_xr"
    process.EntityData.ParentYangName = "processes"
    process.EntityData.SegmentPath = "process" + types.AddKeyToken(process.ProcessName, "process-name")
    process.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/" + process.EntityData.SegmentPath
    process.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    process.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    process.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    process.EntityData.Children = types.NewOrderedMap()
    process.EntityData.Children.Append("vrfs", types.YChild{"Vrfs", &process.Vrfs})
    process.EntityData.Children.Append("statistics", types.YChild{"Statistics", &process.Statistics})
    process.EntityData.Children.Append("default-vrf", types.YChild{"DefaultVrf", &process.DefaultVrf})
    process.EntityData.Leafs = types.NewOrderedMap()
    process.EntityData.Leafs.Append("process-name", types.YLeaf{"ProcessName", process.ProcessName})

    process.EntityData.YListKeys = []string {"ProcessName"}

    return &(process.EntityData)
}

// Ospfv3_Processes_Process_Vrfs
// Table for each VRF
type Ospfv3_Processes_Process_Vrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational data for a particular VRF (instance) in the OSPFv3 process. The
    // type is slice of Ospfv3_Processes_Process_Vrfs_Vrf.
    Vrf []*Ospfv3_Processes_Process_Vrfs_Vrf
}

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetEntityData() *types.CommonEntityData {
    vrfs.EntityData.YFilter = vrfs.YFilter
    vrfs.EntityData.YangName = "vrfs"
    vrfs.EntityData.BundleName = "cisco_ios_xr"
    vrfs.EntityData.ParentYangName = "process"
    vrfs.EntityData.SegmentPath = "vrfs"
    vrfs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/" + vrfs.EntityData.SegmentPath
    vrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfs.EntityData.Children = types.NewOrderedMap()
    vrfs.EntityData.Children.Append("vrf", types.YChild{"Vrf", nil})
    for i := range vrfs.Vrf {
        vrfs.EntityData.Children.Append(types.GetSegmentPath(vrfs.Vrf[i]), types.YChild{"Vrf", vrfs.Vrf[i]})
    }
    vrfs.EntityData.Leafs = types.NewOrderedMap()

    vrfs.EntityData.YListKeys = []string {}

    return &(vrfs.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf
// Operational data for a particular VRF
// (instance) in the OSPFv3 process
type Ospfv3_Processes_Process_Vrfs_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. VRF Name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Summary prefix information table.
    SummaryPrefixes Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes

    // OSPFv3 border router information table.
    BorderRouters Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters

    // Sham link information.
    ShamLinkTable Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable

    // OSPFv3 area information table.
    AreaInformations Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations

    // OSPF Link State Database.
    DatabaseTable Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable

    // OSPFv3 interface information table for all areas.
    InterfaceProcessTable Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable

    // Redistribution information table.
    Redistributions Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions

    // OSPFv3 external route information table.
    ExternalRoutes Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes

    // OSPFv3 request list information for all areas.
    RequestListProcessTable Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable

    // Virtual link information.
    VirtualLink Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink

    // OSPFv3 flood list information table for all areas.
    FloodListProcessTable Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable

    // Summarize OSPFv3 local RIB tables.
    RouteSummary Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary

    // OSPFv3 area table.
    Areas Ospfv3_Processes_Process_Vrfs_Vrf_Areas

    // OSPFv3 internal route information table.
    InternalRoutes Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes

    // Protocol area table .
    ProtocolAreas Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas

    // OSPFv3 connected route information table.
    ConnectedRoutes Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes

    // Container for Statistics.
    VrfStatistics Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics

    // OSPFv3 summary.
    Summary Ospfv3_Processes_Process_Vrfs_Vrf_Summary

    // OSPFv3 retransmission list information table for all areas.
    RetransmissionListProcessTable Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable

    // Bad Checksum Packets information table.
    BadChecksums Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums

    // Database summary table.
    DatabaseSummaryTable Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable

    // OSPFv3 neighbor information table for all areas.
    NeighborProcessTable Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable

    // OSPFv3 fast reroute topology information table.
    FastReroutes Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes

    // OSPFv3 interface brief information table for all areas.
    InterfaceBriefProcessTable Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable

    // OSPFv3 neighbor information table for all areas.
    NeighborDetailProcessTable Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable
}

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "vrfs"
    vrf.EntityData.SegmentPath = "vrf" + types.AddKeyToken(vrf.VrfName, "vrf-name")
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Children.Append("summary-prefixes", types.YChild{"SummaryPrefixes", &vrf.SummaryPrefixes})
    vrf.EntityData.Children.Append("border-routers", types.YChild{"BorderRouters", &vrf.BorderRouters})
    vrf.EntityData.Children.Append("sham-link-table", types.YChild{"ShamLinkTable", &vrf.ShamLinkTable})
    vrf.EntityData.Children.Append("area-informations", types.YChild{"AreaInformations", &vrf.AreaInformations})
    vrf.EntityData.Children.Append("database-table", types.YChild{"DatabaseTable", &vrf.DatabaseTable})
    vrf.EntityData.Children.Append("interface-process-table", types.YChild{"InterfaceProcessTable", &vrf.InterfaceProcessTable})
    vrf.EntityData.Children.Append("redistributions", types.YChild{"Redistributions", &vrf.Redistributions})
    vrf.EntityData.Children.Append("external-routes", types.YChild{"ExternalRoutes", &vrf.ExternalRoutes})
    vrf.EntityData.Children.Append("request-list-process-table", types.YChild{"RequestListProcessTable", &vrf.RequestListProcessTable})
    vrf.EntityData.Children.Append("virtual-link", types.YChild{"VirtualLink", &vrf.VirtualLink})
    vrf.EntityData.Children.Append("flood-list-process-table", types.YChild{"FloodListProcessTable", &vrf.FloodListProcessTable})
    vrf.EntityData.Children.Append("route-summary", types.YChild{"RouteSummary", &vrf.RouteSummary})
    vrf.EntityData.Children.Append("areas", types.YChild{"Areas", &vrf.Areas})
    vrf.EntityData.Children.Append("internal-routes", types.YChild{"InternalRoutes", &vrf.InternalRoutes})
    vrf.EntityData.Children.Append("protocol-areas", types.YChild{"ProtocolAreas", &vrf.ProtocolAreas})
    vrf.EntityData.Children.Append("connected-routes", types.YChild{"ConnectedRoutes", &vrf.ConnectedRoutes})
    vrf.EntityData.Children.Append("vrf-statistics", types.YChild{"VrfStatistics", &vrf.VrfStatistics})
    vrf.EntityData.Children.Append("summary", types.YChild{"Summary", &vrf.Summary})
    vrf.EntityData.Children.Append("retransmission-list-process-table", types.YChild{"RetransmissionListProcessTable", &vrf.RetransmissionListProcessTable})
    vrf.EntityData.Children.Append("bad-checksums", types.YChild{"BadChecksums", &vrf.BadChecksums})
    vrf.EntityData.Children.Append("database-summary-table", types.YChild{"DatabaseSummaryTable", &vrf.DatabaseSummaryTable})
    vrf.EntityData.Children.Append("neighbor-process-table", types.YChild{"NeighborProcessTable", &vrf.NeighborProcessTable})
    vrf.EntityData.Children.Append("fast-reroutes", types.YChild{"FastReroutes", &vrf.FastReroutes})
    vrf.EntityData.Children.Append("interface-brief-process-table", types.YChild{"InterfaceBriefProcessTable", &vrf.InterfaceBriefProcessTable})
    vrf.EntityData.Children.Append("neighbor-detail-process-table", types.YChild{"NeighborDetailProcessTable", &vrf.NeighborDetailProcessTable})
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrf.VrfName})

    vrf.EntityData.YListKeys = []string {"VrfName"}

    return &(vrf.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes
// Summary prefix information table
type Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary prefix information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix.
    SummaryPrefix []*Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix
}

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetEntityData() *types.CommonEntityData {
    summaryPrefixes.EntityData.YFilter = summaryPrefixes.YFilter
    summaryPrefixes.EntityData.YangName = "summary-prefixes"
    summaryPrefixes.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefixes.EntityData.ParentYangName = "vrf"
    summaryPrefixes.EntityData.SegmentPath = "summary-prefixes"
    summaryPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + summaryPrefixes.EntityData.SegmentPath
    summaryPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefixes.EntityData.Children = types.NewOrderedMap()
    summaryPrefixes.EntityData.Children.Append("summary-prefix", types.YChild{"SummaryPrefix", nil})
    for i := range summaryPrefixes.SummaryPrefix {
        types.SetYListKey(summaryPrefixes.SummaryPrefix[i], i)
        summaryPrefixes.EntityData.Children.Append(types.GetSegmentPath(summaryPrefixes.SummaryPrefix[i]), types.YChild{"SummaryPrefix", summaryPrefixes.SummaryPrefix[i]})
    }
    summaryPrefixes.EntityData.Leafs = types.NewOrderedMap()

    summaryPrefixes.EntityData.YListKeys = []string {}

    return &(summaryPrefixes.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix
// Summary prefix information
type Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Summary prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Prefix metric. The type is interface{} with range: 0..4294967295.
    PrefixMetric interface{}

    // Prefix metric type. The type is Ospfv3DefaultMetric.
    PrefixMetricType interface{}

    // Tag. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetEntityData() *types.CommonEntityData {
    summaryPrefix.EntityData.YFilter = summaryPrefix.YFilter
    summaryPrefix.EntityData.YangName = "summary-prefix"
    summaryPrefix.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefix.EntityData.ParentYangName = "summary-prefixes"
    summaryPrefix.EntityData.SegmentPath = "summary-prefix" + types.AddNoKeyToken(summaryPrefix)
    summaryPrefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/summary-prefixes/" + summaryPrefix.EntityData.SegmentPath
    summaryPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefix.EntityData.Children = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", summaryPrefix.Prefix})
    summaryPrefix.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", summaryPrefix.PrefixLength})
    summaryPrefix.EntityData.Leafs.Append("prefix-metric", types.YLeaf{"PrefixMetric", summaryPrefix.PrefixMetric})
    summaryPrefix.EntityData.Leafs.Append("prefix-metric-type", types.YLeaf{"PrefixMetricType", summaryPrefix.PrefixMetricType})
    summaryPrefix.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", summaryPrefix.Tag})

    summaryPrefix.EntityData.YListKeys = []string {}

    return &(summaryPrefix.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters
// OSPFv3 border router information table
type Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 border router information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter.
    BorderRouter []*Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter
}

func (borderRouters *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters) GetEntityData() *types.CommonEntityData {
    borderRouters.EntityData.YFilter = borderRouters.YFilter
    borderRouters.EntityData.YangName = "border-routers"
    borderRouters.EntityData.BundleName = "cisco_ios_xr"
    borderRouters.EntityData.ParentYangName = "vrf"
    borderRouters.EntityData.SegmentPath = "border-routers"
    borderRouters.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + borderRouters.EntityData.SegmentPath
    borderRouters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    borderRouters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    borderRouters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    borderRouters.EntityData.Children = types.NewOrderedMap()
    borderRouters.EntityData.Children.Append("border-router", types.YChild{"BorderRouter", nil})
    for i := range borderRouters.BorderRouter {
        borderRouters.EntityData.Children.Append(types.GetSegmentPath(borderRouters.BorderRouter[i]), types.YChild{"BorderRouter", borderRouters.BorderRouter[i]})
    }
    borderRouters.EntityData.Leafs = types.NewOrderedMap()

    borderRouters.EntityData.YListKeys = []string {}

    return &(borderRouters.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter
// OSPFv3 border router information
type Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Router address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BorderRouterId interface{}

    // List of border router paths. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath.
    BorderRouterPath []*Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath
}

func (borderRouter *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter) GetEntityData() *types.CommonEntityData {
    borderRouter.EntityData.YFilter = borderRouter.YFilter
    borderRouter.EntityData.YangName = "border-router"
    borderRouter.EntityData.BundleName = "cisco_ios_xr"
    borderRouter.EntityData.ParentYangName = "border-routers"
    borderRouter.EntityData.SegmentPath = "border-router" + types.AddKeyToken(borderRouter.BorderRouterId, "border-router-id")
    borderRouter.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/border-routers/" + borderRouter.EntityData.SegmentPath
    borderRouter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    borderRouter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    borderRouter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    borderRouter.EntityData.Children = types.NewOrderedMap()
    borderRouter.EntityData.Children.Append("border-router-path", types.YChild{"BorderRouterPath", nil})
    for i := range borderRouter.BorderRouterPath {
        types.SetYListKey(borderRouter.BorderRouterPath[i], i)
        borderRouter.EntityData.Children.Append(types.GetSegmentPath(borderRouter.BorderRouterPath[i]), types.YChild{"BorderRouterPath", borderRouter.BorderRouterPath[i]})
    }
    borderRouter.EntityData.Leafs = types.NewOrderedMap()
    borderRouter.EntityData.Leafs.Append("border-router-id", types.YLeaf{"BorderRouterId", borderRouter.BorderRouterId})

    borderRouter.EntityData.YListKeys = []string {"BorderRouterId"}

    return &(borderRouter.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath
// List of border router paths
type Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If true, intra-area router else inter-area router. The type is bool.
    IsIntraAreaRouter interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BorderRouterRouteMetric interface{}

    // Next hop address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BorderRouterNextHop interface{}

    // Next hop interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Border router type . The type is Ospfv3BorderRoute.
    BorderRouterType interface{}

    // Area string in decimal or dotted-decimal format . The type is string with
    // length: 0..16.
    BorderRouterAreaId interface{}

    // SPF version. The type is interface{} with range: 0..4294967295.
    SpfVersion interface{}
}

func (borderRouterPath *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath) GetEntityData() *types.CommonEntityData {
    borderRouterPath.EntityData.YFilter = borderRouterPath.YFilter
    borderRouterPath.EntityData.YangName = "border-router-path"
    borderRouterPath.EntityData.BundleName = "cisco_ios_xr"
    borderRouterPath.EntityData.ParentYangName = "border-router"
    borderRouterPath.EntityData.SegmentPath = "border-router-path" + types.AddNoKeyToken(borderRouterPath)
    borderRouterPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/border-routers/border-router/" + borderRouterPath.EntityData.SegmentPath
    borderRouterPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    borderRouterPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    borderRouterPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    borderRouterPath.EntityData.Children = types.NewOrderedMap()
    borderRouterPath.EntityData.Leafs = types.NewOrderedMap()
    borderRouterPath.EntityData.Leafs.Append("is-intra-area-router", types.YLeaf{"IsIntraAreaRouter", borderRouterPath.IsIntraAreaRouter})
    borderRouterPath.EntityData.Leafs.Append("border-router-route-metric", types.YLeaf{"BorderRouterRouteMetric", borderRouterPath.BorderRouterRouteMetric})
    borderRouterPath.EntityData.Leafs.Append("border-router-next-hop", types.YLeaf{"BorderRouterNextHop", borderRouterPath.BorderRouterNextHop})
    borderRouterPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", borderRouterPath.InterfaceName})
    borderRouterPath.EntityData.Leafs.Append("border-router-type", types.YLeaf{"BorderRouterType", borderRouterPath.BorderRouterType})
    borderRouterPath.EntityData.Leafs.Append("border-router-area-id", types.YLeaf{"BorderRouterAreaId", borderRouterPath.BorderRouterAreaId})
    borderRouterPath.EntityData.Leafs.Append("spf-version", types.YLeaf{"SpfVersion", borderRouterPath.SpfVersion})

    borderRouterPath.EntityData.YListKeys = []string {}

    return &(borderRouterPath.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable
// Sham link information
type Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor on other end of this sham link. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ShamLinkNeighborId interface{}

    // Sham-link source. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ShamLinkSourceAddress interface{}

    // Sham-link dest. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ShamLinkDestAddress interface{}

    // OSPF interface state for the sham link. The type is Ospfv3InterfaceState.
    ShamLinkState interface{}

    // If true, the link runs as demand circuit. The type is bool.
    ShamLinkDemandCircuit interface{}

    // Number of LSA's with demand circuit bit not set. The type is interface{}
    // with range: 0..4294967295.
    ShamLinkDcBitlessLsa interface{}

    // Sham-link ifindex. The type is interface{} with range: 0..4294967295.
    ShamLinkIfindex interface{}

    // Area id. The type is string.
    ShamLinkArea interface{}

    // Cost of the sham link. The type is interface{} with range: 0..65535.
    ShamLinkCost interface{}

    // Transmission delay in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    ShamLinkTransmissionDelay interface{}

    // Hello interval (s). The type is interface{} with range: 0..4294967295.
    ShamLinkHelloInterval interface{}

    // Dead interval (s). The type is interface{} with range: 0..4294967295.
    ShamLinkDeadInterval interface{}

    // Wait interval (s). The type is interface{} with range: 0..4294967295.
    ShamLinkWaitInterval interface{}

    // Retransmission interval (s). The type is interface{} with range:
    // 0..4294967295.
    ShamLinkRetransmissionInterval interface{}

    // Time until next hello (s). The type is interface{} with range:
    // 0..4294967295.
    ShamLinkNextHello interface{}

    // If true, interface is passive. The type is bool.
    ShamLinkPassive interface{}

    // If true, sham link IP security is required . The type is bool.
    IsShamLinkIpSecurityRequired interface{}

    // If true, Sham link IP security is active . The type is bool.
    IsShamLinkIpSecurityActive interface{}

    // If true, sham link authentication is enabled . The type is bool.
    IsShamLinkAuthenticationEnabled interface{}

    // Sham link authentication spi . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkAuthenticationSpi interface{}

    // Sham link authentication transmit . The type is interface{} with range:
    // 0..4294967295.
    ShamLinkAuthenticationTransmit interface{}

    // If true, sham link encryption is enabled . The type is bool.
    IsShamLinkEncryptionEnabled interface{}

    // Sham link encryption spi. The type is interface{} with range:
    // 0..4294967295.
    ShamLinkEncryptionSpi interface{}

    // Sham link encryption transmitted . The type is interface{} with range:
    // 0..4294967295.
    ShamLinkEncryptionTransmitted interface{}

    // Sham link encrypted authentication transmitted . The type is interface{}
    // with range: 0..4294967295.
    ShamLinkEncryptedAuthenticationTransmitted interface{}

    // If true,  enabled. The type is bool.
    ShamLinkGrEnabled interface{}

    // If true, Gracefule restart in progress. The type is bool.
    ShamLinkGr interface{}

    // Time in seconds since last GR. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ShamLinkLastGr interface{}

    // Neighbor information.
    ShamLinkNeighbor Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor
}

func (shamLinkTable *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable) GetEntityData() *types.CommonEntityData {
    shamLinkTable.EntityData.YFilter = shamLinkTable.YFilter
    shamLinkTable.EntityData.YangName = "sham-link-table"
    shamLinkTable.EntityData.BundleName = "cisco_ios_xr"
    shamLinkTable.EntityData.ParentYangName = "vrf"
    shamLinkTable.EntityData.SegmentPath = "sham-link-table"
    shamLinkTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + shamLinkTable.EntityData.SegmentPath
    shamLinkTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLinkTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLinkTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLinkTable.EntityData.Children = types.NewOrderedMap()
    shamLinkTable.EntityData.Children.Append("sham-link-neighbor", types.YChild{"ShamLinkNeighbor", &shamLinkTable.ShamLinkNeighbor})
    shamLinkTable.EntityData.Leafs = types.NewOrderedMap()
    shamLinkTable.EntityData.Leafs.Append("sham-link-neighbor-id", types.YLeaf{"ShamLinkNeighborId", shamLinkTable.ShamLinkNeighborId})
    shamLinkTable.EntityData.Leafs.Append("sham-link-source-address", types.YLeaf{"ShamLinkSourceAddress", shamLinkTable.ShamLinkSourceAddress})
    shamLinkTable.EntityData.Leafs.Append("sham-link-dest-address", types.YLeaf{"ShamLinkDestAddress", shamLinkTable.ShamLinkDestAddress})
    shamLinkTable.EntityData.Leafs.Append("sham-link-state", types.YLeaf{"ShamLinkState", shamLinkTable.ShamLinkState})
    shamLinkTable.EntityData.Leafs.Append("sham-link-demand-circuit", types.YLeaf{"ShamLinkDemandCircuit", shamLinkTable.ShamLinkDemandCircuit})
    shamLinkTable.EntityData.Leafs.Append("sham-link-dc-bitless-lsa", types.YLeaf{"ShamLinkDcBitlessLsa", shamLinkTable.ShamLinkDcBitlessLsa})
    shamLinkTable.EntityData.Leafs.Append("sham-link-ifindex", types.YLeaf{"ShamLinkIfindex", shamLinkTable.ShamLinkIfindex})
    shamLinkTable.EntityData.Leafs.Append("sham-link-area", types.YLeaf{"ShamLinkArea", shamLinkTable.ShamLinkArea})
    shamLinkTable.EntityData.Leafs.Append("sham-link-cost", types.YLeaf{"ShamLinkCost", shamLinkTable.ShamLinkCost})
    shamLinkTable.EntityData.Leafs.Append("sham-link-transmission-delay", types.YLeaf{"ShamLinkTransmissionDelay", shamLinkTable.ShamLinkTransmissionDelay})
    shamLinkTable.EntityData.Leafs.Append("sham-link-hello-interval", types.YLeaf{"ShamLinkHelloInterval", shamLinkTable.ShamLinkHelloInterval})
    shamLinkTable.EntityData.Leafs.Append("sham-link-dead-interval", types.YLeaf{"ShamLinkDeadInterval", shamLinkTable.ShamLinkDeadInterval})
    shamLinkTable.EntityData.Leafs.Append("sham-link-wait-interval", types.YLeaf{"ShamLinkWaitInterval", shamLinkTable.ShamLinkWaitInterval})
    shamLinkTable.EntityData.Leafs.Append("sham-link-retransmission-interval", types.YLeaf{"ShamLinkRetransmissionInterval", shamLinkTable.ShamLinkRetransmissionInterval})
    shamLinkTable.EntityData.Leafs.Append("sham-link-next-hello", types.YLeaf{"ShamLinkNextHello", shamLinkTable.ShamLinkNextHello})
    shamLinkTable.EntityData.Leafs.Append("sham-link-passive", types.YLeaf{"ShamLinkPassive", shamLinkTable.ShamLinkPassive})
    shamLinkTable.EntityData.Leafs.Append("is-sham-link-ip-security-required", types.YLeaf{"IsShamLinkIpSecurityRequired", shamLinkTable.IsShamLinkIpSecurityRequired})
    shamLinkTable.EntityData.Leafs.Append("is-sham-link-ip-security-active", types.YLeaf{"IsShamLinkIpSecurityActive", shamLinkTable.IsShamLinkIpSecurityActive})
    shamLinkTable.EntityData.Leafs.Append("is-sham-link-authentication-enabled", types.YLeaf{"IsShamLinkAuthenticationEnabled", shamLinkTable.IsShamLinkAuthenticationEnabled})
    shamLinkTable.EntityData.Leafs.Append("virtual-link-authentication-spi", types.YLeaf{"VirtualLinkAuthenticationSpi", shamLinkTable.VirtualLinkAuthenticationSpi})
    shamLinkTable.EntityData.Leafs.Append("sham-link-authentication-transmit", types.YLeaf{"ShamLinkAuthenticationTransmit", shamLinkTable.ShamLinkAuthenticationTransmit})
    shamLinkTable.EntityData.Leafs.Append("is-sham-link-encryption-enabled", types.YLeaf{"IsShamLinkEncryptionEnabled", shamLinkTable.IsShamLinkEncryptionEnabled})
    shamLinkTable.EntityData.Leafs.Append("sham-link-encryption-spi", types.YLeaf{"ShamLinkEncryptionSpi", shamLinkTable.ShamLinkEncryptionSpi})
    shamLinkTable.EntityData.Leafs.Append("sham-link-encryption-transmitted", types.YLeaf{"ShamLinkEncryptionTransmitted", shamLinkTable.ShamLinkEncryptionTransmitted})
    shamLinkTable.EntityData.Leafs.Append("sham-link-encrypted-authentication-transmitted", types.YLeaf{"ShamLinkEncryptedAuthenticationTransmitted", shamLinkTable.ShamLinkEncryptedAuthenticationTransmitted})
    shamLinkTable.EntityData.Leafs.Append("sham-link-gr-enabled", types.YLeaf{"ShamLinkGrEnabled", shamLinkTable.ShamLinkGrEnabled})
    shamLinkTable.EntityData.Leafs.Append("sham-link-gr", types.YLeaf{"ShamLinkGr", shamLinkTable.ShamLinkGr})
    shamLinkTable.EntityData.Leafs.Append("sham-link-last-gr", types.YLeaf{"ShamLinkLastGr", shamLinkTable.ShamLinkLastGr})

    shamLinkTable.EntityData.YListKeys = []string {}

    return &(shamLinkTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor
// Neighbor information
type Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true Hellos suppressed. The type is bool.
    ShamLinkSuppressHello interface{}

    // Adjacency state. The type is Ospfv3NeighborState.
    ShamLinkState interface{}

    // Neighbor retransmission info.
    ShamLinkRetransmission Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission
}

func (shamLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor) GetEntityData() *types.CommonEntityData {
    shamLinkNeighbor.EntityData.YFilter = shamLinkNeighbor.YFilter
    shamLinkNeighbor.EntityData.YangName = "sham-link-neighbor"
    shamLinkNeighbor.EntityData.BundleName = "cisco_ios_xr"
    shamLinkNeighbor.EntityData.ParentYangName = "sham-link-table"
    shamLinkNeighbor.EntityData.SegmentPath = "sham-link-neighbor"
    shamLinkNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/sham-link-table/" + shamLinkNeighbor.EntityData.SegmentPath
    shamLinkNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLinkNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLinkNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLinkNeighbor.EntityData.Children = types.NewOrderedMap()
    shamLinkNeighbor.EntityData.Children.Append("sham-link-retransmission", types.YChild{"ShamLinkRetransmission", &shamLinkNeighbor.ShamLinkRetransmission})
    shamLinkNeighbor.EntityData.Leafs = types.NewOrderedMap()
    shamLinkNeighbor.EntityData.Leafs.Append("sham-link-suppress-hello", types.YLeaf{"ShamLinkSuppressHello", shamLinkNeighbor.ShamLinkSuppressHello})
    shamLinkNeighbor.EntityData.Leafs.Append("sham-link-state", types.YLeaf{"ShamLinkState", shamLinkNeighbor.ShamLinkState})

    shamLinkNeighbor.EntityData.YListKeys = []string {}

    return &(shamLinkNeighbor.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission
// Neighbor retransmission info
type Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (shamLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetEntityData() *types.CommonEntityData {
    shamLinkRetransmission.EntityData.YFilter = shamLinkRetransmission.YFilter
    shamLinkRetransmission.EntityData.YangName = "sham-link-retransmission"
    shamLinkRetransmission.EntityData.BundleName = "cisco_ios_xr"
    shamLinkRetransmission.EntityData.ParentYangName = "sham-link-neighbor"
    shamLinkRetransmission.EntityData.SegmentPath = "sham-link-retransmission"
    shamLinkRetransmission.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/sham-link-table/sham-link-neighbor/" + shamLinkRetransmission.EntityData.SegmentPath
    shamLinkRetransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLinkRetransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLinkRetransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLinkRetransmission.EntityData.Children = types.NewOrderedMap()
    shamLinkRetransmission.EntityData.Leafs = types.NewOrderedMap()
    shamLinkRetransmission.EntityData.Leafs.Append("database-descriptor-retransmissions", types.YLeaf{"DatabaseDescriptorRetransmissions", shamLinkRetransmission.DatabaseDescriptorRetransmissions})
    shamLinkRetransmission.EntityData.Leafs.Append("area-flood-index", types.YLeaf{"AreaFloodIndex", shamLinkRetransmission.AreaFloodIndex})
    shamLinkRetransmission.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", shamLinkRetransmission.AsFloodIndex})
    shamLinkRetransmission.EntityData.Leafs.Append("link-flood-index", types.YLeaf{"LinkFloodIndex", shamLinkRetransmission.LinkFloodIndex})
    shamLinkRetransmission.EntityData.Leafs.Append("neighbor-retransmissions", types.YLeaf{"NeighborRetransmissions", shamLinkRetransmission.NeighborRetransmissions})
    shamLinkRetransmission.EntityData.Leafs.Append("retransmissions", types.YLeaf{"Retransmissions", shamLinkRetransmission.Retransmissions})
    shamLinkRetransmission.EntityData.Leafs.Append("area-first-flood", types.YLeaf{"AreaFirstFlood", shamLinkRetransmission.AreaFirstFlood})
    shamLinkRetransmission.EntityData.Leafs.Append("area-first-flood-index", types.YLeaf{"AreaFirstFloodIndex", shamLinkRetransmission.AreaFirstFloodIndex})
    shamLinkRetransmission.EntityData.Leafs.Append("as-first-flood", types.YLeaf{"AsFirstFlood", shamLinkRetransmission.AsFirstFlood})
    shamLinkRetransmission.EntityData.Leafs.Append("as-first-flood-index", types.YLeaf{"AsFirstFloodIndex", shamLinkRetransmission.AsFirstFloodIndex})
    shamLinkRetransmission.EntityData.Leafs.Append("link-first-flood", types.YLeaf{"LinkFirstFlood", shamLinkRetransmission.LinkFirstFlood})
    shamLinkRetransmission.EntityData.Leafs.Append("link-first-flood-index", types.YLeaf{"LinkFirstFloodIndex", shamLinkRetransmission.LinkFirstFloodIndex})
    shamLinkRetransmission.EntityData.Leafs.Append("area-next-flood", types.YLeaf{"AreaNextFlood", shamLinkRetransmission.AreaNextFlood})
    shamLinkRetransmission.EntityData.Leafs.Append("area-next-flood-index", types.YLeaf{"AreaNextFloodIndex", shamLinkRetransmission.AreaNextFloodIndex})
    shamLinkRetransmission.EntityData.Leafs.Append("as-next-flood", types.YLeaf{"AsNextFlood", shamLinkRetransmission.AsNextFlood})
    shamLinkRetransmission.EntityData.Leafs.Append("as-next-flood-index", types.YLeaf{"AsNextFloodIndex", shamLinkRetransmission.AsNextFloodIndex})
    shamLinkRetransmission.EntityData.Leafs.Append("link-next-flood", types.YLeaf{"LinkNextFlood", shamLinkRetransmission.LinkNextFlood})
    shamLinkRetransmission.EntityData.Leafs.Append("link-next-flood-index", types.YLeaf{"LinkNextFloodIndex", shamLinkRetransmission.LinkNextFloodIndex})
    shamLinkRetransmission.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", shamLinkRetransmission.LastRetransmissionLength})
    shamLinkRetransmission.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", shamLinkRetransmission.MaximumRetransmissionLength})
    shamLinkRetransmission.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", shamLinkRetransmission.LastRetransmissionTime})
    shamLinkRetransmission.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", shamLinkRetransmission.MaximumRetransmissionTime})
    shamLinkRetransmission.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", shamLinkRetransmission.LsaRetransmissionTimer})

    shamLinkRetransmission.EntityData.YListKeys = []string {}

    return &(shamLinkRetransmission.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations
// OSPFv3 area information table
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 area information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation.
    AreaInformation []*Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation
}

func (areaInformations *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations) GetEntityData() *types.CommonEntityData {
    areaInformations.EntityData.YFilter = areaInformations.YFilter
    areaInformations.EntityData.YangName = "area-informations"
    areaInformations.EntityData.BundleName = "cisco_ios_xr"
    areaInformations.EntityData.ParentYangName = "vrf"
    areaInformations.EntityData.SegmentPath = "area-informations"
    areaInformations.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + areaInformations.EntityData.SegmentPath
    areaInformations.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaInformations.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaInformations.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaInformations.EntityData.Children = types.NewOrderedMap()
    areaInformations.EntityData.Children.Append("area-information", types.YChild{"AreaInformation", nil})
    for i := range areaInformations.AreaInformation {
        areaInformations.EntityData.Children.Append(types.GetSegmentPath(areaInformations.AreaInformation[i]), types.YChild{"AreaInformation", areaInformations.AreaInformation[i]})
    }
    areaInformations.EntityData.Leafs = types.NewOrderedMap()

    areaInformations.EntityData.YListKeys = []string {}

    return &(areaInformations.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation
// OSPFv3 area information
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Area ID. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // If true, Backbone area is active. The type is bool.
    IsBackboneAreaActive interface{}

    // Number of interfaces in the area. The type is interface{} with range:
    // 0..65535.
    AreaInterfaces interface{}

    // If true, stub area. The type is bool.
    IsAreaStubbed interface{}

    // If true, totally stubby area. The type is bool.
    IsAreaTotalStubbed interface{}

    // Default cost for Stub or NSSA area. The type is interface{} with range:
    // 0..65535.
    StubDefaultCost interface{}

    // If true, area is a NSSA. The type is bool.
    IsAreaNssa interface{}

    // If true, No redistribution into this NSSA area. The type is bool.
    NssaNoRedistribution interface{}

    // If true, perform 7/5 translation. The type is bool.
    IsNssaTranslated interface{}

    // If true, perform 7/5 translation always. The type is bool.
    IsNssaTranslatedAlways interface{}

    // If true, generate NSSA default route. The type is bool.
    IsNssaDefault interface{}

    // If true, RRR is enabled. The type is bool.
    IsRrrEnabled interface{}

    // Number of SPF calculations run. The type is interface{} with range:
    // 0..4294967295.
    SpFs interface{}

    // Number of opaque LSAs in the area. The type is interface{} with range:
    // 0..4294967295.
    AreaOpaqueLsas interface{}

    // Sum of opaque LSA checksums. The type is interface{} with range:
    // 0..4294967295.
    AreaOpaqueLsaChecksum interface{}

    // Number of LSA with demand circuit bit not set. The type is interface{} with
    // range: 0..4294967295.
    AreaDcBitlessLsAs interface{}

    // Number of indication LSAs. The type is interface{} with range:
    // 0..4294967295.
    IndicationLsAs interface{}

    // Number of do not age LSAs. The type is interface{} with range:
    // 0..4294967295.
    DoNotAgeLsAs interface{}

    // Number of LSAs which need to be flooded. The type is interface{} with
    // range: 0..4294967295.
    FloodListLength interface{}

    // Number of LFA enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    AreaLfaInterfaceCount interface{}

    // Number of Per Prefix LFA enabled interfaces. The type is interface{} with
    // range: 0..4294967295.
    AreaPerPrefixLfaInterfaceCount interface{}

    // Area LFA revision. The type is interface{} with range: 0..4294967295.
    AreaLfaRevision interface{}

    // List of ranges to summarize. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange.
    AreaRange []*Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange
}

func (areaInformation *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation) GetEntityData() *types.CommonEntityData {
    areaInformation.EntityData.YFilter = areaInformation.YFilter
    areaInformation.EntityData.YangName = "area-information"
    areaInformation.EntityData.BundleName = "cisco_ios_xr"
    areaInformation.EntityData.ParentYangName = "area-informations"
    areaInformation.EntityData.SegmentPath = "area-information" + types.AddKeyToken(areaInformation.AreaId, "area-id")
    areaInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/area-informations/" + areaInformation.EntityData.SegmentPath
    areaInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaInformation.EntityData.Children = types.NewOrderedMap()
    areaInformation.EntityData.Children.Append("area-range", types.YChild{"AreaRange", nil})
    for i := range areaInformation.AreaRange {
        types.SetYListKey(areaInformation.AreaRange[i], i)
        areaInformation.EntityData.Children.Append(types.GetSegmentPath(areaInformation.AreaRange[i]), types.YChild{"AreaRange", areaInformation.AreaRange[i]})
    }
    areaInformation.EntityData.Leafs = types.NewOrderedMap()
    areaInformation.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", areaInformation.AreaId})
    areaInformation.EntityData.Leafs.Append("is-backbone-area-active", types.YLeaf{"IsBackboneAreaActive", areaInformation.IsBackboneAreaActive})
    areaInformation.EntityData.Leafs.Append("area-interfaces", types.YLeaf{"AreaInterfaces", areaInformation.AreaInterfaces})
    areaInformation.EntityData.Leafs.Append("is-area-stubbed", types.YLeaf{"IsAreaStubbed", areaInformation.IsAreaStubbed})
    areaInformation.EntityData.Leafs.Append("is-area-total-stubbed", types.YLeaf{"IsAreaTotalStubbed", areaInformation.IsAreaTotalStubbed})
    areaInformation.EntityData.Leafs.Append("stub-default-cost", types.YLeaf{"StubDefaultCost", areaInformation.StubDefaultCost})
    areaInformation.EntityData.Leafs.Append("is-area-nssa", types.YLeaf{"IsAreaNssa", areaInformation.IsAreaNssa})
    areaInformation.EntityData.Leafs.Append("nssa-no-redistribution", types.YLeaf{"NssaNoRedistribution", areaInformation.NssaNoRedistribution})
    areaInformation.EntityData.Leafs.Append("is-nssa-translated", types.YLeaf{"IsNssaTranslated", areaInformation.IsNssaTranslated})
    areaInformation.EntityData.Leafs.Append("is-nssa-translated-always", types.YLeaf{"IsNssaTranslatedAlways", areaInformation.IsNssaTranslatedAlways})
    areaInformation.EntityData.Leafs.Append("is-nssa-default", types.YLeaf{"IsNssaDefault", areaInformation.IsNssaDefault})
    areaInformation.EntityData.Leafs.Append("is-rrr-enabled", types.YLeaf{"IsRrrEnabled", areaInformation.IsRrrEnabled})
    areaInformation.EntityData.Leafs.Append("sp-fs", types.YLeaf{"SpFs", areaInformation.SpFs})
    areaInformation.EntityData.Leafs.Append("area-opaque-lsas", types.YLeaf{"AreaOpaqueLsas", areaInformation.AreaOpaqueLsas})
    areaInformation.EntityData.Leafs.Append("area-opaque-lsa-checksum", types.YLeaf{"AreaOpaqueLsaChecksum", areaInformation.AreaOpaqueLsaChecksum})
    areaInformation.EntityData.Leafs.Append("area-dc-bitless-ls-as", types.YLeaf{"AreaDcBitlessLsAs", areaInformation.AreaDcBitlessLsAs})
    areaInformation.EntityData.Leafs.Append("indication-ls-as", types.YLeaf{"IndicationLsAs", areaInformation.IndicationLsAs})
    areaInformation.EntityData.Leafs.Append("do-not-age-ls-as", types.YLeaf{"DoNotAgeLsAs", areaInformation.DoNotAgeLsAs})
    areaInformation.EntityData.Leafs.Append("flood-list-length", types.YLeaf{"FloodListLength", areaInformation.FloodListLength})
    areaInformation.EntityData.Leafs.Append("area-lfa-interface-count", types.YLeaf{"AreaLfaInterfaceCount", areaInformation.AreaLfaInterfaceCount})
    areaInformation.EntityData.Leafs.Append("area-per-prefix-lfa-interface-count", types.YLeaf{"AreaPerPrefixLfaInterfaceCount", areaInformation.AreaPerPrefixLfaInterfaceCount})
    areaInformation.EntityData.Leafs.Append("area-lfa-revision", types.YLeaf{"AreaLfaRevision", areaInformation.AreaLfaRevision})

    areaInformation.EntityData.YListKeys = []string {"AreaId"}

    return &(areaInformation.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange
// List of ranges to summarize
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // IP prefix for summarization. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RangePrefix interface{}

    // IP prefix length for summarization. The type is interface{} with range:
    // 0..4294967295.
    RangePrefixLength interface{}

    // Net cost . The type is interface{} with range: 0..4294967295.
    NetCost interface{}

    // Area range status . The type is Ospfv3AreaRangeStatus.
    Status interface{}

    // If true, cost is configured . The type is bool.
    IsCostConfigured interface{}
}

func (areaRange *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange) GetEntityData() *types.CommonEntityData {
    areaRange.EntityData.YFilter = areaRange.YFilter
    areaRange.EntityData.YangName = "area-range"
    areaRange.EntityData.BundleName = "cisco_ios_xr"
    areaRange.EntityData.ParentYangName = "area-information"
    areaRange.EntityData.SegmentPath = "area-range" + types.AddNoKeyToken(areaRange)
    areaRange.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/area-informations/area-information/" + areaRange.EntityData.SegmentPath
    areaRange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaRange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaRange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaRange.EntityData.Children = types.NewOrderedMap()
    areaRange.EntityData.Leafs = types.NewOrderedMap()
    areaRange.EntityData.Leafs.Append("range-prefix", types.YLeaf{"RangePrefix", areaRange.RangePrefix})
    areaRange.EntityData.Leafs.Append("range-prefix-length", types.YLeaf{"RangePrefixLength", areaRange.RangePrefixLength})
    areaRange.EntityData.Leafs.Append("net-cost", types.YLeaf{"NetCost", areaRange.NetCost})
    areaRange.EntityData.Leafs.Append("status", types.YLeaf{"Status", areaRange.Status})
    areaRange.EntityData.Leafs.Append("is-cost-configured", types.YLeaf{"IsCostConfigured", areaRange.IsCostConfigured})

    areaRange.EntityData.YListKeys = []string {}

    return &(areaRange.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable
// OSPF Link State Database
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database LSA information.
    LsaTable Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable

    // Database LSA information.
    LsaInternalTable Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable
}

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable) GetEntityData() *types.CommonEntityData {
    databaseTable.EntityData.YFilter = databaseTable.YFilter
    databaseTable.EntityData.YangName = "database-table"
    databaseTable.EntityData.BundleName = "cisco_ios_xr"
    databaseTable.EntityData.ParentYangName = "vrf"
    databaseTable.EntityData.SegmentPath = "database-table"
    databaseTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + databaseTable.EntityData.SegmentPath
    databaseTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseTable.EntityData.Children = types.NewOrderedMap()
    databaseTable.EntityData.Children.Append("lsa-table", types.YChild{"LsaTable", &databaseTable.LsaTable})
    databaseTable.EntityData.Children.Append("lsa-internal-table", types.YChild{"LsaInternalTable", &databaseTable.LsaInternalTable})
    databaseTable.EntityData.Leafs = types.NewOrderedMap()

    databaseTable.EntityData.YListKeys = []string {}

    return &(databaseTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable
// Database LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database LSA information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa.
    Lsa []*Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa
}

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable) GetEntityData() *types.CommonEntityData {
    lsaTable.EntityData.YFilter = lsaTable.YFilter
    lsaTable.EntityData.YangName = "lsa-table"
    lsaTable.EntityData.BundleName = "cisco_ios_xr"
    lsaTable.EntityData.ParentYangName = "database-table"
    lsaTable.EntityData.SegmentPath = "lsa-table"
    lsaTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/" + lsaTable.EntityData.SegmentPath
    lsaTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaTable.EntityData.Children = types.NewOrderedMap()
    lsaTable.EntityData.Children.Append("lsa", types.YChild{"Lsa", nil})
    for i := range lsaTable.Lsa {
        types.SetYListKey(lsaTable.Lsa[i], i)
        lsaTable.EntityData.Children.Append(types.GetSegmentPath(lsaTable.Lsa[i]), types.YChild{"Lsa", lsaTable.Lsa[i]})
    }
    lsaTable.EntityData.Leafs = types.NewOrderedMap()

    lsaTable.EntityData.YListKeys = []string {}

    return &(lsaTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa
// Database LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // LSA type. The type is Ospfv3Lsa.
    LsType interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Link state ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Summary of all LSAs or LSA specific information .
    LsaInfo Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa) GetEntityData() *types.CommonEntityData {
    lsa.EntityData.YFilter = lsa.YFilter
    lsa.EntityData.YangName = "lsa"
    lsa.EntityData.BundleName = "cisco_ios_xr"
    lsa.EntityData.ParentYangName = "lsa-table"
    lsa.EntityData.SegmentPath = "lsa" + types.AddNoKeyToken(lsa)
    lsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/" + lsa.EntityData.SegmentPath
    lsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsa.EntityData.Children = types.NewOrderedMap()
    lsa.EntityData.Children.Append("lsa-info", types.YChild{"LsaInfo", &lsa.LsaInfo})
    lsa.EntityData.Leafs = types.NewOrderedMap()
    lsa.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", lsa.AreaId})
    lsa.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsa.LsType})
    lsa.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsa.AdvertisingRouter})
    lsa.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsa.LsId})
    lsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsa.InterfaceName})

    lsa.EntityData.YListKeys = []string {}

    return &(lsa.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo
// Summary of all LSAs or LSA specific information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSAInfoType. The type is Ospfv3LsaInfoTypes.
    LsaInfoType interface{}

    // Summary information of LSAs.
    LsaSummaryInfo Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo

    // Router LSA.
    RouterLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType

    // Inter Area Prefix LSA.
    InterAreaPrefixLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType

    // Inter Area Router LSA.
    InterAreaRouterLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType

    // External LSA.
    ExternalLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType

    // NSSA External LSA.
    NssalsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType

    // Link LSA.
    LinkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType

    // Intra Area Prefix LSA.
    IntraAreaPrefixLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType

    // Grace LSA.
    GraceLsa Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa

    // Unknown Link Scope LSA.
    UnknownLinkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType

    // Unknown-Area scope LSA.
    UnknownAreaLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType

    // Unknown-AS scope LSA.
    UnknownAslsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType

    // Unknown LSA.
    UnknownLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetEntityData() *types.CommonEntityData {
    lsaInfo.EntityData.YFilter = lsaInfo.YFilter
    lsaInfo.EntityData.YangName = "lsa-info"
    lsaInfo.EntityData.BundleName = "cisco_ios_xr"
    lsaInfo.EntityData.ParentYangName = "lsa"
    lsaInfo.EntityData.SegmentPath = "lsa-info"
    lsaInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/" + lsaInfo.EntityData.SegmentPath
    lsaInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaInfo.EntityData.Children = types.NewOrderedMap()
    lsaInfo.EntityData.Children.Append("lsa-summary-info", types.YChild{"LsaSummaryInfo", &lsaInfo.LsaSummaryInfo})
    lsaInfo.EntityData.Children.Append("router-lsa-type", types.YChild{"RouterLsaType", &lsaInfo.RouterLsaType})
    lsaInfo.EntityData.Children.Append("network-lsa-type", types.YChild{"NetworkLsaType", &lsaInfo.NetworkLsaType})
    lsaInfo.EntityData.Children.Append("inter-area-prefix-lsa-type", types.YChild{"InterAreaPrefixLsaType", &lsaInfo.InterAreaPrefixLsaType})
    lsaInfo.EntityData.Children.Append("inter-area-router-lsa-type", types.YChild{"InterAreaRouterLsaType", &lsaInfo.InterAreaRouterLsaType})
    lsaInfo.EntityData.Children.Append("external-lsa-type", types.YChild{"ExternalLsaType", &lsaInfo.ExternalLsaType})
    lsaInfo.EntityData.Children.Append("nssalsa-type", types.YChild{"NssalsaType", &lsaInfo.NssalsaType})
    lsaInfo.EntityData.Children.Append("link-lsa-type", types.YChild{"LinkLsaType", &lsaInfo.LinkLsaType})
    lsaInfo.EntityData.Children.Append("intra-area-prefix-lsa-type", types.YChild{"IntraAreaPrefixLsaType", &lsaInfo.IntraAreaPrefixLsaType})
    lsaInfo.EntityData.Children.Append("grace-lsa", types.YChild{"GraceLsa", &lsaInfo.GraceLsa})
    lsaInfo.EntityData.Children.Append("unknown-link-lsa-type", types.YChild{"UnknownLinkLsaType", &lsaInfo.UnknownLinkLsaType})
    lsaInfo.EntityData.Children.Append("unknown-area-lsa-type", types.YChild{"UnknownAreaLsaType", &lsaInfo.UnknownAreaLsaType})
    lsaInfo.EntityData.Children.Append("unknown-aslsa-type", types.YChild{"UnknownAslsaType", &lsaInfo.UnknownAslsaType})
    lsaInfo.EntityData.Children.Append("unknown-lsa-type", types.YChild{"UnknownLsaType", &lsaInfo.UnknownLsaType})
    lsaInfo.EntityData.Leafs = types.NewOrderedMap()
    lsaInfo.EntityData.Leafs.Append("lsa-info-type", types.YLeaf{"LsaInfoType", lsaInfo.LsaInfoType})

    lsaInfo.EntityData.YListKeys = []string {}

    return &(lsaInfo.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo
// Summary information of LSAs
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of links. The type is interface{} with range: 0..65535.
    Links interface{}

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Reference type . The type is interface{} with range: 0..65535.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // OSPFv3 address Prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetEntityData() *types.CommonEntityData {
    lsaSummaryInfo.EntityData.YFilter = lsaSummaryInfo.YFilter
    lsaSummaryInfo.EntityData.YangName = "lsa-summary-info"
    lsaSummaryInfo.EntityData.BundleName = "cisco_ios_xr"
    lsaSummaryInfo.EntityData.ParentYangName = "lsa-info"
    lsaSummaryInfo.EntityData.SegmentPath = "lsa-summary-info"
    lsaSummaryInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/" + lsaSummaryInfo.EntityData.SegmentPath
    lsaSummaryInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaSummaryInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaSummaryInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaSummaryInfo.EntityData.Children = types.NewOrderedMap()
    lsaSummaryInfo.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &lsaSummaryInfo.LsaHeader})
    lsaSummaryInfo.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &lsaSummaryInfo.LsaDetail})
    lsaSummaryInfo.EntityData.Leafs = types.NewOrderedMap()
    lsaSummaryInfo.EntityData.Leafs.Append("links", types.YLeaf{"Links", lsaSummaryInfo.Links})
    lsaSummaryInfo.EntityData.Leafs.Append("router-la-bits", types.YLeaf{"RouterLaBits", lsaSummaryInfo.RouterLaBits})
    lsaSummaryInfo.EntityData.Leafs.Append("reference-type", types.YLeaf{"ReferenceType", lsaSummaryInfo.ReferenceType})
    lsaSummaryInfo.EntityData.Leafs.Append("reference-lsa-id", types.YLeaf{"ReferenceLsaId", lsaSummaryInfo.ReferenceLsaId})
    lsaSummaryInfo.EntityData.Leafs.Append("lsa-router-id", types.YLeaf{"LsaRouterId", lsaSummaryInfo.LsaRouterId})
    lsaSummaryInfo.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", lsaSummaryInfo.Prefix})
    lsaSummaryInfo.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", lsaSummaryInfo.PrefixLength})
    lsaSummaryInfo.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsaSummaryInfo.InterfaceName})
    lsaSummaryInfo.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", lsaSummaryInfo.IsVirtualLink})
    lsaSummaryInfo.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", lsaSummaryInfo.VirtualLinkId})
    lsaSummaryInfo.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", lsaSummaryInfo.IsShamLink})
    lsaSummaryInfo.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", lsaSummaryInfo.ShamLinkId})

    lsaSummaryInfo.EntityData.YListKeys = []string {}

    return &(lsaSummaryInfo.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "lsa-summary-info"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/lsa-summary-info/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "lsa-summary-info"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/lsa-summary-info/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType
// Router LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail

    // Router LSA Reverse-Path Forwarding information .
    RpfPath Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath

    // List of links in this LSA. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link.
    Link []*Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetEntityData() *types.CommonEntityData {
    routerLsaType.EntityData.YFilter = routerLsaType.YFilter
    routerLsaType.EntityData.YangName = "router-lsa-type"
    routerLsaType.EntityData.BundleName = "cisco_ios_xr"
    routerLsaType.EntityData.ParentYangName = "lsa-info"
    routerLsaType.EntityData.SegmentPath = "router-lsa-type"
    routerLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/" + routerLsaType.EntityData.SegmentPath
    routerLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routerLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routerLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routerLsaType.EntityData.Children = types.NewOrderedMap()
    routerLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &routerLsaType.LsaHeader})
    routerLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &routerLsaType.LsaDetail})
    routerLsaType.EntityData.Children.Append("rpf-path", types.YChild{"RpfPath", &routerLsaType.RpfPath})
    routerLsaType.EntityData.Children.Append("link", types.YChild{"Link", nil})
    for i := range routerLsaType.Link {
        types.SetYListKey(routerLsaType.Link[i], i)
        routerLsaType.EntityData.Children.Append(types.GetSegmentPath(routerLsaType.Link[i]), types.YChild{"Link", routerLsaType.Link[i]})
    }
    routerLsaType.EntityData.Leafs = types.NewOrderedMap()
    routerLsaType.EntityData.Leafs.Append("router-la-bits", types.YLeaf{"RouterLaBits", routerLsaType.RouterLaBits})

    routerLsaType.EntityData.YListKeys = []string {}

    return &(routerLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "router-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/router-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "router-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/router-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath
// Router LSA Reverse-Path Forwarding information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RPF multicast next hop . The type is interface{} with range: 0..4294967295.
    RpfMulticastNextHop interface{}

    // RPF multicast IDB . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetEntityData() *types.CommonEntityData {
    rpfPath.EntityData.YFilter = rpfPath.YFilter
    rpfPath.EntityData.YangName = "rpf-path"
    rpfPath.EntityData.BundleName = "cisco_ios_xr"
    rpfPath.EntityData.ParentYangName = "router-lsa-type"
    rpfPath.EntityData.SegmentPath = "rpf-path"
    rpfPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/router-lsa-type/" + rpfPath.EntityData.SegmentPath
    rpfPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rpfPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rpfPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rpfPath.EntityData.Children = types.NewOrderedMap()
    rpfPath.EntityData.Leafs = types.NewOrderedMap()
    rpfPath.EntityData.Leafs.Append("rpf-multicast-next-hop", types.YLeaf{"RpfMulticastNextHop", rpfPath.RpfMulticastNextHop})
    rpfPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", rpfPath.InterfaceName})

    rpfPath.EntityData.YListKeys = []string {}

    return &(rpfPath.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link
// List of links in this LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Type of link. The type is Ospfv3Link.
    LinkType interface{}

    // LSA link metric . The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // LSA link interface ID . The type is interface{} with range: 0..4294967295.
    LinkInterfaceId interface{}

    // LSA link neighbor interface ID . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborInterfaceId interface{}

    // LSA link neigbhor router id . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborRouterId interface{}
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "router-lsa-type"
    link.EntityData.SegmentPath = "link" + types.AddNoKeyToken(link)
    link.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/router-lsa-type/" + link.EntityData.SegmentPath
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = types.NewOrderedMap()
    link.EntityData.Leafs = types.NewOrderedMap()
    link.EntityData.Leafs.Append("link-type", types.YLeaf{"LinkType", link.LinkType})
    link.EntityData.Leafs.Append("link-metric", types.YLeaf{"LinkMetric", link.LinkMetric})
    link.EntityData.Leafs.Append("link-interface-id", types.YLeaf{"LinkInterfaceId", link.LinkInterfaceId})
    link.EntityData.Leafs.Append("link-neighbor-interface-id", types.YLeaf{"LinkNeighborInterfaceId", link.LinkNeighborInterfaceId})
    link.EntityData.Leafs.Append("link-neighbor-router-id", types.YLeaf{"LinkNeighborRouterId", link.LinkNeighborRouterId})

    link.EntityData.YListKeys = []string {}

    return &(link.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType
// Network LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor router list. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborRouter []interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetEntityData() *types.CommonEntityData {
    networkLsaType.EntityData.YFilter = networkLsaType.YFilter
    networkLsaType.EntityData.YangName = "network-lsa-type"
    networkLsaType.EntityData.BundleName = "cisco_ios_xr"
    networkLsaType.EntityData.ParentYangName = "lsa-info"
    networkLsaType.EntityData.SegmentPath = "network-lsa-type"
    networkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/" + networkLsaType.EntityData.SegmentPath
    networkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkLsaType.EntityData.Children = types.NewOrderedMap()
    networkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &networkLsaType.LsaHeader})
    networkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &networkLsaType.LsaDetail})
    networkLsaType.EntityData.Leafs = types.NewOrderedMap()
    networkLsaType.EntityData.Leafs.Append("neighbor-router", types.YLeaf{"NeighborRouter", networkLsaType.NeighborRouter})

    networkLsaType.EntityData.YListKeys = []string {}

    return &(networkLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "network-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/network-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "network-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/network-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType
// Inter Area Prefix LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetEntityData() *types.CommonEntityData {
    interAreaPrefixLsaType.EntityData.YFilter = interAreaPrefixLsaType.YFilter
    interAreaPrefixLsaType.EntityData.YangName = "inter-area-prefix-lsa-type"
    interAreaPrefixLsaType.EntityData.BundleName = "cisco_ios_xr"
    interAreaPrefixLsaType.EntityData.ParentYangName = "lsa-info"
    interAreaPrefixLsaType.EntityData.SegmentPath = "inter-area-prefix-lsa-type"
    interAreaPrefixLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/" + interAreaPrefixLsaType.EntityData.SegmentPath
    interAreaPrefixLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interAreaPrefixLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interAreaPrefixLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interAreaPrefixLsaType.EntityData.Children = types.NewOrderedMap()
    interAreaPrefixLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &interAreaPrefixLsaType.LsaHeader})
    interAreaPrefixLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &interAreaPrefixLsaType.LsaDetail})
    interAreaPrefixLsaType.EntityData.Leafs = types.NewOrderedMap()
    interAreaPrefixLsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", interAreaPrefixLsaType.Prefix})
    interAreaPrefixLsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interAreaPrefixLsaType.PrefixLength})
    interAreaPrefixLsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", interAreaPrefixLsaType.Priority})

    interAreaPrefixLsaType.EntityData.YListKeys = []string {}

    return &(interAreaPrefixLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "inter-area-prefix-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/inter-area-prefix-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "inter-area-prefix-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/inter-area-prefix-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType
// Inter Area Router LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetEntityData() *types.CommonEntityData {
    interAreaRouterLsaType.EntityData.YFilter = interAreaRouterLsaType.YFilter
    interAreaRouterLsaType.EntityData.YangName = "inter-area-router-lsa-type"
    interAreaRouterLsaType.EntityData.BundleName = "cisco_ios_xr"
    interAreaRouterLsaType.EntityData.ParentYangName = "lsa-info"
    interAreaRouterLsaType.EntityData.SegmentPath = "inter-area-router-lsa-type"
    interAreaRouterLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/" + interAreaRouterLsaType.EntityData.SegmentPath
    interAreaRouterLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interAreaRouterLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interAreaRouterLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interAreaRouterLsaType.EntityData.Children = types.NewOrderedMap()
    interAreaRouterLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &interAreaRouterLsaType.LsaHeader})
    interAreaRouterLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &interAreaRouterLsaType.LsaDetail})
    interAreaRouterLsaType.EntityData.Leafs = types.NewOrderedMap()
    interAreaRouterLsaType.EntityData.Leafs.Append("lsa-router-id", types.YLeaf{"LsaRouterId", interAreaRouterLsaType.LsaRouterId})

    interAreaRouterLsaType.EntityData.YListKeys = []string {}

    return &(interAreaRouterLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "inter-area-router-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/inter-area-router-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "inter-area-router-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/inter-area-router-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType
// External LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetEntityData() *types.CommonEntityData {
    externalLsaType.EntityData.YFilter = externalLsaType.YFilter
    externalLsaType.EntityData.YangName = "external-lsa-type"
    externalLsaType.EntityData.BundleName = "cisco_ios_xr"
    externalLsaType.EntityData.ParentYangName = "lsa-info"
    externalLsaType.EntityData.SegmentPath = "external-lsa-type"
    externalLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/" + externalLsaType.EntityData.SegmentPath
    externalLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalLsaType.EntityData.Children = types.NewOrderedMap()
    externalLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &externalLsaType.LsaHeader})
    externalLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &externalLsaType.LsaDetail})
    externalLsaType.EntityData.Leafs = types.NewOrderedMap()
    externalLsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", externalLsaType.Prefix})
    externalLsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", externalLsaType.PrefixLength})
    externalLsaType.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", externalLsaType.MetricType})
    externalLsaType.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", externalLsaType.TosCost})
    externalLsaType.EntityData.Leafs.Append("is-forwarding-address-set", types.YLeaf{"IsForwardingAddressSet", externalLsaType.IsForwardingAddressSet})
    externalLsaType.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", externalLsaType.ForwardingAddress})
    externalLsaType.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", externalLsaType.ExternalTag})
    externalLsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", externalLsaType.Priority})

    externalLsaType.EntityData.YListKeys = []string {}

    return &(externalLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "external-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/external-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "external-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/external-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType
// NSSA External LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetEntityData() *types.CommonEntityData {
    nssalsaType.EntityData.YFilter = nssalsaType.YFilter
    nssalsaType.EntityData.YangName = "nssalsa-type"
    nssalsaType.EntityData.BundleName = "cisco_ios_xr"
    nssalsaType.EntityData.ParentYangName = "lsa-info"
    nssalsaType.EntityData.SegmentPath = "nssalsa-type"
    nssalsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/" + nssalsaType.EntityData.SegmentPath
    nssalsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nssalsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nssalsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nssalsaType.EntityData.Children = types.NewOrderedMap()
    nssalsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &nssalsaType.LsaHeader})
    nssalsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &nssalsaType.LsaDetail})
    nssalsaType.EntityData.Leafs = types.NewOrderedMap()
    nssalsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", nssalsaType.Prefix})
    nssalsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", nssalsaType.PrefixLength})
    nssalsaType.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", nssalsaType.MetricType})
    nssalsaType.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", nssalsaType.TosCost})
    nssalsaType.EntityData.Leafs.Append("is-forwarding-address-set", types.YLeaf{"IsForwardingAddressSet", nssalsaType.IsForwardingAddressSet})
    nssalsaType.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", nssalsaType.ForwardingAddress})
    nssalsaType.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", nssalsaType.ExternalTag})
    nssalsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", nssalsaType.Priority})

    nssalsaType.EntityData.YListKeys = []string {}

    return &(nssalsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "nssalsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/nssalsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "nssalsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/nssalsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType
// Link LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // LSA link local . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LsaLinkLocal interface{}

    // Router priority . The type is interface{} with range: 0..255.
    RouterPriority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix.
    Prefix []*Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetEntityData() *types.CommonEntityData {
    linkLsaType.EntityData.YFilter = linkLsaType.YFilter
    linkLsaType.EntityData.YangName = "link-lsa-type"
    linkLsaType.EntityData.BundleName = "cisco_ios_xr"
    linkLsaType.EntityData.ParentYangName = "lsa-info"
    linkLsaType.EntityData.SegmentPath = "link-lsa-type"
    linkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/" + linkLsaType.EntityData.SegmentPath
    linkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkLsaType.EntityData.Children = types.NewOrderedMap()
    linkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &linkLsaType.LsaHeader})
    linkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &linkLsaType.LsaDetail})
    linkLsaType.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range linkLsaType.Prefix {
        types.SetYListKey(linkLsaType.Prefix[i], i)
        linkLsaType.EntityData.Children.Append(types.GetSegmentPath(linkLsaType.Prefix[i]), types.YChild{"Prefix", linkLsaType.Prefix[i]})
    }
    linkLsaType.EntityData.Leafs = types.NewOrderedMap()
    linkLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkLsaType.InterfaceName})
    linkLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", linkLsaType.IsVirtualLink})
    linkLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", linkLsaType.VirtualLinkId})
    linkLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", linkLsaType.IsShamLink})
    linkLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", linkLsaType.ShamLinkId})
    linkLsaType.EntityData.Leafs.Append("lsa-link-local", types.YLeaf{"LsaLinkLocal", linkLsaType.LsaLinkLocal})
    linkLsaType.EntityData.Leafs.Append("router-priority", types.YLeaf{"RouterPriority", linkLsaType.RouterPriority})

    linkLsaType.EntityData.YListKeys = []string {}

    return &(linkLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "link-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/link-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "link-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/link-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "link-lsa-type"
    prefix.EntityData.SegmentPath = "prefix" + types.AddNoKeyToken(prefix)
    prefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/link-lsa-type/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-length", types.YLeaf{"Ospfv3PrefixLength", prefix.Ospfv3PrefixLength})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-options", types.YLeaf{"Ospfv3PrefixOptions", prefix.Ospfv3PrefixOptions})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-metric", types.YLeaf{"Ospfv3PrefixMetric", prefix.Ospfv3PrefixMetric})
    prefix.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", prefix.Priority})

    prefix.EntityData.YListKeys = []string {}

    return &(prefix.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType
// Intra Area Prefix LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference type . The type is Ospfv3Lsa1.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // Reference advertised router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ReferenceAdvertisedRouter interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix.
    Prefix []*Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetEntityData() *types.CommonEntityData {
    intraAreaPrefixLsaType.EntityData.YFilter = intraAreaPrefixLsaType.YFilter
    intraAreaPrefixLsaType.EntityData.YangName = "intra-area-prefix-lsa-type"
    intraAreaPrefixLsaType.EntityData.BundleName = "cisco_ios_xr"
    intraAreaPrefixLsaType.EntityData.ParentYangName = "lsa-info"
    intraAreaPrefixLsaType.EntityData.SegmentPath = "intra-area-prefix-lsa-type"
    intraAreaPrefixLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/" + intraAreaPrefixLsaType.EntityData.SegmentPath
    intraAreaPrefixLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    intraAreaPrefixLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    intraAreaPrefixLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    intraAreaPrefixLsaType.EntityData.Children = types.NewOrderedMap()
    intraAreaPrefixLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &intraAreaPrefixLsaType.LsaHeader})
    intraAreaPrefixLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &intraAreaPrefixLsaType.LsaDetail})
    intraAreaPrefixLsaType.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range intraAreaPrefixLsaType.Prefix {
        types.SetYListKey(intraAreaPrefixLsaType.Prefix[i], i)
        intraAreaPrefixLsaType.EntityData.Children.Append(types.GetSegmentPath(intraAreaPrefixLsaType.Prefix[i]), types.YChild{"Prefix", intraAreaPrefixLsaType.Prefix[i]})
    }
    intraAreaPrefixLsaType.EntityData.Leafs = types.NewOrderedMap()
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-type", types.YLeaf{"ReferenceType", intraAreaPrefixLsaType.ReferenceType})
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-lsa-id", types.YLeaf{"ReferenceLsaId", intraAreaPrefixLsaType.ReferenceLsaId})
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-advertised-router", types.YLeaf{"ReferenceAdvertisedRouter", intraAreaPrefixLsaType.ReferenceAdvertisedRouter})

    intraAreaPrefixLsaType.EntityData.YListKeys = []string {}

    return &(intraAreaPrefixLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    prefix.EntityData.SegmentPath = "prefix" + types.AddNoKeyToken(prefix)
    prefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-length", types.YLeaf{"Ospfv3PrefixLength", prefix.Ospfv3PrefixLength})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-options", types.YLeaf{"Ospfv3PrefixOptions", prefix.Ospfv3PrefixOptions})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-metric", types.YLeaf{"Ospfv3PrefixMetric", prefix.Ospfv3PrefixMetric})
    prefix.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", prefix.Priority})

    prefix.EntityData.YListKeys = []string {}

    return &(prefix.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa
// Grace LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // The grace periord where helper routers should wait before advertising it
    // fully adjacent(s) . The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is Ospfv3GracefulRestartReason.
    GraceReason interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetEntityData() *types.CommonEntityData {
    graceLsa.EntityData.YFilter = graceLsa.YFilter
    graceLsa.EntityData.YangName = "grace-lsa"
    graceLsa.EntityData.BundleName = "cisco_ios_xr"
    graceLsa.EntityData.ParentYangName = "lsa-info"
    graceLsa.EntityData.SegmentPath = "grace-lsa"
    graceLsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/" + graceLsa.EntityData.SegmentPath
    graceLsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    graceLsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    graceLsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    graceLsa.EntityData.Children = types.NewOrderedMap()
    graceLsa.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &graceLsa.LsaHeader})
    graceLsa.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &graceLsa.LsaDetail})
    graceLsa.EntityData.Leafs = types.NewOrderedMap()
    graceLsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", graceLsa.InterfaceName})
    graceLsa.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", graceLsa.IsVirtualLink})
    graceLsa.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", graceLsa.VirtualLinkId})
    graceLsa.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", graceLsa.IsShamLink})
    graceLsa.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", graceLsa.ShamLinkId})
    graceLsa.EntityData.Leafs.Append("grace-period", types.YLeaf{"GracePeriod", graceLsa.GracePeriod})
    graceLsa.EntityData.Leafs.Append("grace-reason", types.YLeaf{"GraceReason", graceLsa.GraceReason})

    graceLsa.EntityData.YListKeys = []string {}

    return &(graceLsa.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "grace-lsa"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/grace-lsa/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "grace-lsa"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/grace-lsa/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType
// Unknown Link Scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetEntityData() *types.CommonEntityData {
    unknownLinkLsaType.EntityData.YFilter = unknownLinkLsaType.YFilter
    unknownLinkLsaType.EntityData.YangName = "unknown-link-lsa-type"
    unknownLinkLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownLinkLsaType.EntityData.ParentYangName = "lsa-info"
    unknownLinkLsaType.EntityData.SegmentPath = "unknown-link-lsa-type"
    unknownLinkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/" + unknownLinkLsaType.EntityData.SegmentPath
    unknownLinkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownLinkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownLinkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownLinkLsaType.EntityData.Children = types.NewOrderedMap()
    unknownLinkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownLinkLsaType.LsaHeader})
    unknownLinkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownLinkLsaType.LsaDetail})
    unknownLinkLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownLinkLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownLinkLsaType.InterfaceName})
    unknownLinkLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownLinkLsaType.IsVirtualLink})
    unknownLinkLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownLinkLsaType.VirtualLinkId})
    unknownLinkLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownLinkLsaType.IsShamLink})
    unknownLinkLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownLinkLsaType.ShamLinkId})

    unknownLinkLsaType.EntityData.YListKeys = []string {}

    return &(unknownLinkLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-link-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/unknown-link-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-link-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/unknown-link-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType
// Unknown-Area scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetEntityData() *types.CommonEntityData {
    unknownAreaLsaType.EntityData.YFilter = unknownAreaLsaType.YFilter
    unknownAreaLsaType.EntityData.YangName = "unknown-area-lsa-type"
    unknownAreaLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownAreaLsaType.EntityData.ParentYangName = "lsa-info"
    unknownAreaLsaType.EntityData.SegmentPath = "unknown-area-lsa-type"
    unknownAreaLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/" + unknownAreaLsaType.EntityData.SegmentPath
    unknownAreaLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownAreaLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownAreaLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownAreaLsaType.EntityData.Children = types.NewOrderedMap()
    unknownAreaLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownAreaLsaType.LsaHeader})
    unknownAreaLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownAreaLsaType.LsaDetail})
    unknownAreaLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownAreaLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownAreaLsaType.InterfaceName})
    unknownAreaLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownAreaLsaType.IsVirtualLink})
    unknownAreaLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownAreaLsaType.VirtualLinkId})
    unknownAreaLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownAreaLsaType.IsShamLink})
    unknownAreaLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownAreaLsaType.ShamLinkId})

    unknownAreaLsaType.EntityData.YListKeys = []string {}

    return &(unknownAreaLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-area-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/unknown-area-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-area-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/unknown-area-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType
// Unknown-AS scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetEntityData() *types.CommonEntityData {
    unknownAslsaType.EntityData.YFilter = unknownAslsaType.YFilter
    unknownAslsaType.EntityData.YangName = "unknown-aslsa-type"
    unknownAslsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownAslsaType.EntityData.ParentYangName = "lsa-info"
    unknownAslsaType.EntityData.SegmentPath = "unknown-aslsa-type"
    unknownAslsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/" + unknownAslsaType.EntityData.SegmentPath
    unknownAslsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownAslsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownAslsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownAslsaType.EntityData.Children = types.NewOrderedMap()
    unknownAslsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownAslsaType.LsaHeader})
    unknownAslsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownAslsaType.LsaDetail})
    unknownAslsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownAslsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownAslsaType.InterfaceName})
    unknownAslsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownAslsaType.IsVirtualLink})
    unknownAslsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownAslsaType.VirtualLinkId})
    unknownAslsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownAslsaType.IsShamLink})
    unknownAslsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownAslsaType.ShamLinkId})

    unknownAslsaType.EntityData.YListKeys = []string {}

    return &(unknownAslsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-aslsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/unknown-aslsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-aslsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/unknown-aslsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType
// Unknown LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetEntityData() *types.CommonEntityData {
    unknownLsaType.EntityData.YFilter = unknownLsaType.YFilter
    unknownLsaType.EntityData.YangName = "unknown-lsa-type"
    unknownLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownLsaType.EntityData.ParentYangName = "lsa-info"
    unknownLsaType.EntityData.SegmentPath = "unknown-lsa-type"
    unknownLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/" + unknownLsaType.EntityData.SegmentPath
    unknownLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownLsaType.EntityData.Children = types.NewOrderedMap()
    unknownLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownLsaType.LsaHeader})
    unknownLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownLsaType.LsaDetail})
    unknownLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownLsaType.InterfaceName})
    unknownLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownLsaType.IsVirtualLink})
    unknownLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownLsaType.VirtualLinkId})
    unknownLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownLsaType.IsShamLink})
    unknownLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownLsaType.ShamLinkId})

    unknownLsaType.EntityData.YListKeys = []string {}

    return &(unknownLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/unknown-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-table/lsa/lsa-info/unknown-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable
// Database LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database LSA information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa.
    Lsa []*Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa
}

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable) GetEntityData() *types.CommonEntityData {
    lsaInternalTable.EntityData.YFilter = lsaInternalTable.YFilter
    lsaInternalTable.EntityData.YangName = "lsa-internal-table"
    lsaInternalTable.EntityData.BundleName = "cisco_ios_xr"
    lsaInternalTable.EntityData.ParentYangName = "database-table"
    lsaInternalTable.EntityData.SegmentPath = "lsa-internal-table"
    lsaInternalTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/" + lsaInternalTable.EntityData.SegmentPath
    lsaInternalTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaInternalTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaInternalTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaInternalTable.EntityData.Children = types.NewOrderedMap()
    lsaInternalTable.EntityData.Children.Append("lsa", types.YChild{"Lsa", nil})
    for i := range lsaInternalTable.Lsa {
        types.SetYListKey(lsaInternalTable.Lsa[i], i)
        lsaInternalTable.EntityData.Children.Append(types.GetSegmentPath(lsaInternalTable.Lsa[i]), types.YChild{"Lsa", lsaInternalTable.Lsa[i]})
    }
    lsaInternalTable.EntityData.Leafs = types.NewOrderedMap()

    lsaInternalTable.EntityData.YListKeys = []string {}

    return &(lsaInternalTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa
// Database LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // LSA type. The type is Ospfv3Lsa.
    LsType interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Link state ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Summary of all LSAs or LSA specific information .
    LsaInfo Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa) GetEntityData() *types.CommonEntityData {
    lsa.EntityData.YFilter = lsa.YFilter
    lsa.EntityData.YangName = "lsa"
    lsa.EntityData.BundleName = "cisco_ios_xr"
    lsa.EntityData.ParentYangName = "lsa-internal-table"
    lsa.EntityData.SegmentPath = "lsa" + types.AddNoKeyToken(lsa)
    lsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/" + lsa.EntityData.SegmentPath
    lsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsa.EntityData.Children = types.NewOrderedMap()
    lsa.EntityData.Children.Append("lsa-info", types.YChild{"LsaInfo", &lsa.LsaInfo})
    lsa.EntityData.Leafs = types.NewOrderedMap()
    lsa.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", lsa.AreaId})
    lsa.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsa.LsType})
    lsa.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsa.AdvertisingRouter})
    lsa.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsa.LsId})
    lsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsa.InterfaceName})

    lsa.EntityData.YListKeys = []string {}

    return &(lsa.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo
// Summary of all LSAs or LSA specific information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSAInfoType. The type is Ospfv3LsaInfoTypes.
    LsaInfoType interface{}

    // Summary information of LSAs.
    LsaSummaryInfo Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo

    // Router LSA.
    RouterLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType

    // Inter Area Prefix LSA.
    InterAreaPrefixLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType

    // Inter Area Router LSA.
    InterAreaRouterLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType

    // External LSA.
    ExternalLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType

    // NSSA External LSA.
    NssalsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType

    // Link LSA.
    LinkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType

    // Intra Area Prefix LSA.
    IntraAreaPrefixLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType

    // Grace LSA.
    GraceLsa Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa

    // Unknown Link Scope LSA.
    UnknownLinkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType

    // Unknown-Area scope LSA.
    UnknownAreaLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType

    // Unknown-AS scope LSA.
    UnknownAslsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType

    // Unknown LSA.
    UnknownLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetEntityData() *types.CommonEntityData {
    lsaInfo.EntityData.YFilter = lsaInfo.YFilter
    lsaInfo.EntityData.YangName = "lsa-info"
    lsaInfo.EntityData.BundleName = "cisco_ios_xr"
    lsaInfo.EntityData.ParentYangName = "lsa"
    lsaInfo.EntityData.SegmentPath = "lsa-info"
    lsaInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/" + lsaInfo.EntityData.SegmentPath
    lsaInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaInfo.EntityData.Children = types.NewOrderedMap()
    lsaInfo.EntityData.Children.Append("lsa-summary-info", types.YChild{"LsaSummaryInfo", &lsaInfo.LsaSummaryInfo})
    lsaInfo.EntityData.Children.Append("router-lsa-type", types.YChild{"RouterLsaType", &lsaInfo.RouterLsaType})
    lsaInfo.EntityData.Children.Append("network-lsa-type", types.YChild{"NetworkLsaType", &lsaInfo.NetworkLsaType})
    lsaInfo.EntityData.Children.Append("inter-area-prefix-lsa-type", types.YChild{"InterAreaPrefixLsaType", &lsaInfo.InterAreaPrefixLsaType})
    lsaInfo.EntityData.Children.Append("inter-area-router-lsa-type", types.YChild{"InterAreaRouterLsaType", &lsaInfo.InterAreaRouterLsaType})
    lsaInfo.EntityData.Children.Append("external-lsa-type", types.YChild{"ExternalLsaType", &lsaInfo.ExternalLsaType})
    lsaInfo.EntityData.Children.Append("nssalsa-type", types.YChild{"NssalsaType", &lsaInfo.NssalsaType})
    lsaInfo.EntityData.Children.Append("link-lsa-type", types.YChild{"LinkLsaType", &lsaInfo.LinkLsaType})
    lsaInfo.EntityData.Children.Append("intra-area-prefix-lsa-type", types.YChild{"IntraAreaPrefixLsaType", &lsaInfo.IntraAreaPrefixLsaType})
    lsaInfo.EntityData.Children.Append("grace-lsa", types.YChild{"GraceLsa", &lsaInfo.GraceLsa})
    lsaInfo.EntityData.Children.Append("unknown-link-lsa-type", types.YChild{"UnknownLinkLsaType", &lsaInfo.UnknownLinkLsaType})
    lsaInfo.EntityData.Children.Append("unknown-area-lsa-type", types.YChild{"UnknownAreaLsaType", &lsaInfo.UnknownAreaLsaType})
    lsaInfo.EntityData.Children.Append("unknown-aslsa-type", types.YChild{"UnknownAslsaType", &lsaInfo.UnknownAslsaType})
    lsaInfo.EntityData.Children.Append("unknown-lsa-type", types.YChild{"UnknownLsaType", &lsaInfo.UnknownLsaType})
    lsaInfo.EntityData.Leafs = types.NewOrderedMap()
    lsaInfo.EntityData.Leafs.Append("lsa-info-type", types.YLeaf{"LsaInfoType", lsaInfo.LsaInfoType})

    lsaInfo.EntityData.YListKeys = []string {}

    return &(lsaInfo.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo
// Summary information of LSAs
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of links. The type is interface{} with range: 0..65535.
    Links interface{}

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Reference type . The type is interface{} with range: 0..65535.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // OSPFv3 address Prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetEntityData() *types.CommonEntityData {
    lsaSummaryInfo.EntityData.YFilter = lsaSummaryInfo.YFilter
    lsaSummaryInfo.EntityData.YangName = "lsa-summary-info"
    lsaSummaryInfo.EntityData.BundleName = "cisco_ios_xr"
    lsaSummaryInfo.EntityData.ParentYangName = "lsa-info"
    lsaSummaryInfo.EntityData.SegmentPath = "lsa-summary-info"
    lsaSummaryInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/" + lsaSummaryInfo.EntityData.SegmentPath
    lsaSummaryInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaSummaryInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaSummaryInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaSummaryInfo.EntityData.Children = types.NewOrderedMap()
    lsaSummaryInfo.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &lsaSummaryInfo.LsaHeader})
    lsaSummaryInfo.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &lsaSummaryInfo.LsaDetail})
    lsaSummaryInfo.EntityData.Leafs = types.NewOrderedMap()
    lsaSummaryInfo.EntityData.Leafs.Append("links", types.YLeaf{"Links", lsaSummaryInfo.Links})
    lsaSummaryInfo.EntityData.Leafs.Append("router-la-bits", types.YLeaf{"RouterLaBits", lsaSummaryInfo.RouterLaBits})
    lsaSummaryInfo.EntityData.Leafs.Append("reference-type", types.YLeaf{"ReferenceType", lsaSummaryInfo.ReferenceType})
    lsaSummaryInfo.EntityData.Leafs.Append("reference-lsa-id", types.YLeaf{"ReferenceLsaId", lsaSummaryInfo.ReferenceLsaId})
    lsaSummaryInfo.EntityData.Leafs.Append("lsa-router-id", types.YLeaf{"LsaRouterId", lsaSummaryInfo.LsaRouterId})
    lsaSummaryInfo.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", lsaSummaryInfo.Prefix})
    lsaSummaryInfo.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", lsaSummaryInfo.PrefixLength})
    lsaSummaryInfo.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsaSummaryInfo.InterfaceName})
    lsaSummaryInfo.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", lsaSummaryInfo.IsVirtualLink})
    lsaSummaryInfo.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", lsaSummaryInfo.VirtualLinkId})
    lsaSummaryInfo.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", lsaSummaryInfo.IsShamLink})
    lsaSummaryInfo.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", lsaSummaryInfo.ShamLinkId})

    lsaSummaryInfo.EntityData.YListKeys = []string {}

    return &(lsaSummaryInfo.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "lsa-summary-info"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/lsa-summary-info/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "lsa-summary-info"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/lsa-summary-info/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType
// Router LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail

    // Router LSA Reverse-Path Forwarding information .
    RpfPath Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath

    // List of links in this LSA. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link.
    Link []*Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetEntityData() *types.CommonEntityData {
    routerLsaType.EntityData.YFilter = routerLsaType.YFilter
    routerLsaType.EntityData.YangName = "router-lsa-type"
    routerLsaType.EntityData.BundleName = "cisco_ios_xr"
    routerLsaType.EntityData.ParentYangName = "lsa-info"
    routerLsaType.EntityData.SegmentPath = "router-lsa-type"
    routerLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/" + routerLsaType.EntityData.SegmentPath
    routerLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routerLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routerLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routerLsaType.EntityData.Children = types.NewOrderedMap()
    routerLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &routerLsaType.LsaHeader})
    routerLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &routerLsaType.LsaDetail})
    routerLsaType.EntityData.Children.Append("rpf-path", types.YChild{"RpfPath", &routerLsaType.RpfPath})
    routerLsaType.EntityData.Children.Append("link", types.YChild{"Link", nil})
    for i := range routerLsaType.Link {
        types.SetYListKey(routerLsaType.Link[i], i)
        routerLsaType.EntityData.Children.Append(types.GetSegmentPath(routerLsaType.Link[i]), types.YChild{"Link", routerLsaType.Link[i]})
    }
    routerLsaType.EntityData.Leafs = types.NewOrderedMap()
    routerLsaType.EntityData.Leafs.Append("router-la-bits", types.YLeaf{"RouterLaBits", routerLsaType.RouterLaBits})

    routerLsaType.EntityData.YListKeys = []string {}

    return &(routerLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "router-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/router-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "router-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/router-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath
// Router LSA Reverse-Path Forwarding information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RPF multicast next hop . The type is interface{} with range: 0..4294967295.
    RpfMulticastNextHop interface{}

    // RPF multicast IDB . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetEntityData() *types.CommonEntityData {
    rpfPath.EntityData.YFilter = rpfPath.YFilter
    rpfPath.EntityData.YangName = "rpf-path"
    rpfPath.EntityData.BundleName = "cisco_ios_xr"
    rpfPath.EntityData.ParentYangName = "router-lsa-type"
    rpfPath.EntityData.SegmentPath = "rpf-path"
    rpfPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/router-lsa-type/" + rpfPath.EntityData.SegmentPath
    rpfPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rpfPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rpfPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rpfPath.EntityData.Children = types.NewOrderedMap()
    rpfPath.EntityData.Leafs = types.NewOrderedMap()
    rpfPath.EntityData.Leafs.Append("rpf-multicast-next-hop", types.YLeaf{"RpfMulticastNextHop", rpfPath.RpfMulticastNextHop})
    rpfPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", rpfPath.InterfaceName})

    rpfPath.EntityData.YListKeys = []string {}

    return &(rpfPath.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link
// List of links in this LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Type of link. The type is Ospfv3Link.
    LinkType interface{}

    // LSA link metric . The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // LSA link interface ID . The type is interface{} with range: 0..4294967295.
    LinkInterfaceId interface{}

    // LSA link neighbor interface ID . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborInterfaceId interface{}

    // LSA link neigbhor router id . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborRouterId interface{}
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "router-lsa-type"
    link.EntityData.SegmentPath = "link" + types.AddNoKeyToken(link)
    link.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/router-lsa-type/" + link.EntityData.SegmentPath
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = types.NewOrderedMap()
    link.EntityData.Leafs = types.NewOrderedMap()
    link.EntityData.Leafs.Append("link-type", types.YLeaf{"LinkType", link.LinkType})
    link.EntityData.Leafs.Append("link-metric", types.YLeaf{"LinkMetric", link.LinkMetric})
    link.EntityData.Leafs.Append("link-interface-id", types.YLeaf{"LinkInterfaceId", link.LinkInterfaceId})
    link.EntityData.Leafs.Append("link-neighbor-interface-id", types.YLeaf{"LinkNeighborInterfaceId", link.LinkNeighborInterfaceId})
    link.EntityData.Leafs.Append("link-neighbor-router-id", types.YLeaf{"LinkNeighborRouterId", link.LinkNeighborRouterId})

    link.EntityData.YListKeys = []string {}

    return &(link.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType
// Network LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor router list. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborRouter []interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetEntityData() *types.CommonEntityData {
    networkLsaType.EntityData.YFilter = networkLsaType.YFilter
    networkLsaType.EntityData.YangName = "network-lsa-type"
    networkLsaType.EntityData.BundleName = "cisco_ios_xr"
    networkLsaType.EntityData.ParentYangName = "lsa-info"
    networkLsaType.EntityData.SegmentPath = "network-lsa-type"
    networkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/" + networkLsaType.EntityData.SegmentPath
    networkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkLsaType.EntityData.Children = types.NewOrderedMap()
    networkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &networkLsaType.LsaHeader})
    networkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &networkLsaType.LsaDetail})
    networkLsaType.EntityData.Leafs = types.NewOrderedMap()
    networkLsaType.EntityData.Leafs.Append("neighbor-router", types.YLeaf{"NeighborRouter", networkLsaType.NeighborRouter})

    networkLsaType.EntityData.YListKeys = []string {}

    return &(networkLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "network-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/network-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "network-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/network-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType
// Inter Area Prefix LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetEntityData() *types.CommonEntityData {
    interAreaPrefixLsaType.EntityData.YFilter = interAreaPrefixLsaType.YFilter
    interAreaPrefixLsaType.EntityData.YangName = "inter-area-prefix-lsa-type"
    interAreaPrefixLsaType.EntityData.BundleName = "cisco_ios_xr"
    interAreaPrefixLsaType.EntityData.ParentYangName = "lsa-info"
    interAreaPrefixLsaType.EntityData.SegmentPath = "inter-area-prefix-lsa-type"
    interAreaPrefixLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/" + interAreaPrefixLsaType.EntityData.SegmentPath
    interAreaPrefixLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interAreaPrefixLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interAreaPrefixLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interAreaPrefixLsaType.EntityData.Children = types.NewOrderedMap()
    interAreaPrefixLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &interAreaPrefixLsaType.LsaHeader})
    interAreaPrefixLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &interAreaPrefixLsaType.LsaDetail})
    interAreaPrefixLsaType.EntityData.Leafs = types.NewOrderedMap()
    interAreaPrefixLsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", interAreaPrefixLsaType.Prefix})
    interAreaPrefixLsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interAreaPrefixLsaType.PrefixLength})
    interAreaPrefixLsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", interAreaPrefixLsaType.Priority})

    interAreaPrefixLsaType.EntityData.YListKeys = []string {}

    return &(interAreaPrefixLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "inter-area-prefix-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/inter-area-prefix-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "inter-area-prefix-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/inter-area-prefix-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType
// Inter Area Router LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetEntityData() *types.CommonEntityData {
    interAreaRouterLsaType.EntityData.YFilter = interAreaRouterLsaType.YFilter
    interAreaRouterLsaType.EntityData.YangName = "inter-area-router-lsa-type"
    interAreaRouterLsaType.EntityData.BundleName = "cisco_ios_xr"
    interAreaRouterLsaType.EntityData.ParentYangName = "lsa-info"
    interAreaRouterLsaType.EntityData.SegmentPath = "inter-area-router-lsa-type"
    interAreaRouterLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/" + interAreaRouterLsaType.EntityData.SegmentPath
    interAreaRouterLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interAreaRouterLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interAreaRouterLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interAreaRouterLsaType.EntityData.Children = types.NewOrderedMap()
    interAreaRouterLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &interAreaRouterLsaType.LsaHeader})
    interAreaRouterLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &interAreaRouterLsaType.LsaDetail})
    interAreaRouterLsaType.EntityData.Leafs = types.NewOrderedMap()
    interAreaRouterLsaType.EntityData.Leafs.Append("lsa-router-id", types.YLeaf{"LsaRouterId", interAreaRouterLsaType.LsaRouterId})

    interAreaRouterLsaType.EntityData.YListKeys = []string {}

    return &(interAreaRouterLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "inter-area-router-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/inter-area-router-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "inter-area-router-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/inter-area-router-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType
// External LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetEntityData() *types.CommonEntityData {
    externalLsaType.EntityData.YFilter = externalLsaType.YFilter
    externalLsaType.EntityData.YangName = "external-lsa-type"
    externalLsaType.EntityData.BundleName = "cisco_ios_xr"
    externalLsaType.EntityData.ParentYangName = "lsa-info"
    externalLsaType.EntityData.SegmentPath = "external-lsa-type"
    externalLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/" + externalLsaType.EntityData.SegmentPath
    externalLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalLsaType.EntityData.Children = types.NewOrderedMap()
    externalLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &externalLsaType.LsaHeader})
    externalLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &externalLsaType.LsaDetail})
    externalLsaType.EntityData.Leafs = types.NewOrderedMap()
    externalLsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", externalLsaType.Prefix})
    externalLsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", externalLsaType.PrefixLength})
    externalLsaType.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", externalLsaType.MetricType})
    externalLsaType.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", externalLsaType.TosCost})
    externalLsaType.EntityData.Leafs.Append("is-forwarding-address-set", types.YLeaf{"IsForwardingAddressSet", externalLsaType.IsForwardingAddressSet})
    externalLsaType.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", externalLsaType.ForwardingAddress})
    externalLsaType.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", externalLsaType.ExternalTag})
    externalLsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", externalLsaType.Priority})

    externalLsaType.EntityData.YListKeys = []string {}

    return &(externalLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "external-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/external-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "external-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/external-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType
// NSSA External LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetEntityData() *types.CommonEntityData {
    nssalsaType.EntityData.YFilter = nssalsaType.YFilter
    nssalsaType.EntityData.YangName = "nssalsa-type"
    nssalsaType.EntityData.BundleName = "cisco_ios_xr"
    nssalsaType.EntityData.ParentYangName = "lsa-info"
    nssalsaType.EntityData.SegmentPath = "nssalsa-type"
    nssalsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/" + nssalsaType.EntityData.SegmentPath
    nssalsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nssalsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nssalsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nssalsaType.EntityData.Children = types.NewOrderedMap()
    nssalsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &nssalsaType.LsaHeader})
    nssalsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &nssalsaType.LsaDetail})
    nssalsaType.EntityData.Leafs = types.NewOrderedMap()
    nssalsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", nssalsaType.Prefix})
    nssalsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", nssalsaType.PrefixLength})
    nssalsaType.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", nssalsaType.MetricType})
    nssalsaType.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", nssalsaType.TosCost})
    nssalsaType.EntityData.Leafs.Append("is-forwarding-address-set", types.YLeaf{"IsForwardingAddressSet", nssalsaType.IsForwardingAddressSet})
    nssalsaType.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", nssalsaType.ForwardingAddress})
    nssalsaType.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", nssalsaType.ExternalTag})
    nssalsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", nssalsaType.Priority})

    nssalsaType.EntityData.YListKeys = []string {}

    return &(nssalsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "nssalsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/nssalsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "nssalsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/nssalsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType
// Link LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // LSA link local . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LsaLinkLocal interface{}

    // Router priority . The type is interface{} with range: 0..255.
    RouterPriority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix.
    Prefix []*Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetEntityData() *types.CommonEntityData {
    linkLsaType.EntityData.YFilter = linkLsaType.YFilter
    linkLsaType.EntityData.YangName = "link-lsa-type"
    linkLsaType.EntityData.BundleName = "cisco_ios_xr"
    linkLsaType.EntityData.ParentYangName = "lsa-info"
    linkLsaType.EntityData.SegmentPath = "link-lsa-type"
    linkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/" + linkLsaType.EntityData.SegmentPath
    linkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkLsaType.EntityData.Children = types.NewOrderedMap()
    linkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &linkLsaType.LsaHeader})
    linkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &linkLsaType.LsaDetail})
    linkLsaType.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range linkLsaType.Prefix {
        types.SetYListKey(linkLsaType.Prefix[i], i)
        linkLsaType.EntityData.Children.Append(types.GetSegmentPath(linkLsaType.Prefix[i]), types.YChild{"Prefix", linkLsaType.Prefix[i]})
    }
    linkLsaType.EntityData.Leafs = types.NewOrderedMap()
    linkLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkLsaType.InterfaceName})
    linkLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", linkLsaType.IsVirtualLink})
    linkLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", linkLsaType.VirtualLinkId})
    linkLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", linkLsaType.IsShamLink})
    linkLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", linkLsaType.ShamLinkId})
    linkLsaType.EntityData.Leafs.Append("lsa-link-local", types.YLeaf{"LsaLinkLocal", linkLsaType.LsaLinkLocal})
    linkLsaType.EntityData.Leafs.Append("router-priority", types.YLeaf{"RouterPriority", linkLsaType.RouterPriority})

    linkLsaType.EntityData.YListKeys = []string {}

    return &(linkLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "link-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/link-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "link-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/link-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "link-lsa-type"
    prefix.EntityData.SegmentPath = "prefix" + types.AddNoKeyToken(prefix)
    prefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/link-lsa-type/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-length", types.YLeaf{"Ospfv3PrefixLength", prefix.Ospfv3PrefixLength})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-options", types.YLeaf{"Ospfv3PrefixOptions", prefix.Ospfv3PrefixOptions})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-metric", types.YLeaf{"Ospfv3PrefixMetric", prefix.Ospfv3PrefixMetric})
    prefix.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", prefix.Priority})

    prefix.EntityData.YListKeys = []string {}

    return &(prefix.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType
// Intra Area Prefix LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference type . The type is Ospfv3Lsa1.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // Reference advertised router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ReferenceAdvertisedRouter interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix.
    Prefix []*Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetEntityData() *types.CommonEntityData {
    intraAreaPrefixLsaType.EntityData.YFilter = intraAreaPrefixLsaType.YFilter
    intraAreaPrefixLsaType.EntityData.YangName = "intra-area-prefix-lsa-type"
    intraAreaPrefixLsaType.EntityData.BundleName = "cisco_ios_xr"
    intraAreaPrefixLsaType.EntityData.ParentYangName = "lsa-info"
    intraAreaPrefixLsaType.EntityData.SegmentPath = "intra-area-prefix-lsa-type"
    intraAreaPrefixLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/" + intraAreaPrefixLsaType.EntityData.SegmentPath
    intraAreaPrefixLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    intraAreaPrefixLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    intraAreaPrefixLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    intraAreaPrefixLsaType.EntityData.Children = types.NewOrderedMap()
    intraAreaPrefixLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &intraAreaPrefixLsaType.LsaHeader})
    intraAreaPrefixLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &intraAreaPrefixLsaType.LsaDetail})
    intraAreaPrefixLsaType.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range intraAreaPrefixLsaType.Prefix {
        types.SetYListKey(intraAreaPrefixLsaType.Prefix[i], i)
        intraAreaPrefixLsaType.EntityData.Children.Append(types.GetSegmentPath(intraAreaPrefixLsaType.Prefix[i]), types.YChild{"Prefix", intraAreaPrefixLsaType.Prefix[i]})
    }
    intraAreaPrefixLsaType.EntityData.Leafs = types.NewOrderedMap()
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-type", types.YLeaf{"ReferenceType", intraAreaPrefixLsaType.ReferenceType})
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-lsa-id", types.YLeaf{"ReferenceLsaId", intraAreaPrefixLsaType.ReferenceLsaId})
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-advertised-router", types.YLeaf{"ReferenceAdvertisedRouter", intraAreaPrefixLsaType.ReferenceAdvertisedRouter})

    intraAreaPrefixLsaType.EntityData.YListKeys = []string {}

    return &(intraAreaPrefixLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    prefix.EntityData.SegmentPath = "prefix" + types.AddNoKeyToken(prefix)
    prefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-length", types.YLeaf{"Ospfv3PrefixLength", prefix.Ospfv3PrefixLength})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-options", types.YLeaf{"Ospfv3PrefixOptions", prefix.Ospfv3PrefixOptions})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-metric", types.YLeaf{"Ospfv3PrefixMetric", prefix.Ospfv3PrefixMetric})
    prefix.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", prefix.Priority})

    prefix.EntityData.YListKeys = []string {}

    return &(prefix.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa
// Grace LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // The grace periord where helper routers should wait before advertising it
    // fully adjacent(s) . The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is Ospfv3GracefulRestartReason.
    GraceReason interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetEntityData() *types.CommonEntityData {
    graceLsa.EntityData.YFilter = graceLsa.YFilter
    graceLsa.EntityData.YangName = "grace-lsa"
    graceLsa.EntityData.BundleName = "cisco_ios_xr"
    graceLsa.EntityData.ParentYangName = "lsa-info"
    graceLsa.EntityData.SegmentPath = "grace-lsa"
    graceLsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/" + graceLsa.EntityData.SegmentPath
    graceLsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    graceLsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    graceLsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    graceLsa.EntityData.Children = types.NewOrderedMap()
    graceLsa.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &graceLsa.LsaHeader})
    graceLsa.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &graceLsa.LsaDetail})
    graceLsa.EntityData.Leafs = types.NewOrderedMap()
    graceLsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", graceLsa.InterfaceName})
    graceLsa.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", graceLsa.IsVirtualLink})
    graceLsa.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", graceLsa.VirtualLinkId})
    graceLsa.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", graceLsa.IsShamLink})
    graceLsa.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", graceLsa.ShamLinkId})
    graceLsa.EntityData.Leafs.Append("grace-period", types.YLeaf{"GracePeriod", graceLsa.GracePeriod})
    graceLsa.EntityData.Leafs.Append("grace-reason", types.YLeaf{"GraceReason", graceLsa.GraceReason})

    graceLsa.EntityData.YListKeys = []string {}

    return &(graceLsa.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "grace-lsa"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/grace-lsa/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "grace-lsa"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/grace-lsa/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType
// Unknown Link Scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetEntityData() *types.CommonEntityData {
    unknownLinkLsaType.EntityData.YFilter = unknownLinkLsaType.YFilter
    unknownLinkLsaType.EntityData.YangName = "unknown-link-lsa-type"
    unknownLinkLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownLinkLsaType.EntityData.ParentYangName = "lsa-info"
    unknownLinkLsaType.EntityData.SegmentPath = "unknown-link-lsa-type"
    unknownLinkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/" + unknownLinkLsaType.EntityData.SegmentPath
    unknownLinkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownLinkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownLinkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownLinkLsaType.EntityData.Children = types.NewOrderedMap()
    unknownLinkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownLinkLsaType.LsaHeader})
    unknownLinkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownLinkLsaType.LsaDetail})
    unknownLinkLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownLinkLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownLinkLsaType.InterfaceName})
    unknownLinkLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownLinkLsaType.IsVirtualLink})
    unknownLinkLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownLinkLsaType.VirtualLinkId})
    unknownLinkLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownLinkLsaType.IsShamLink})
    unknownLinkLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownLinkLsaType.ShamLinkId})

    unknownLinkLsaType.EntityData.YListKeys = []string {}

    return &(unknownLinkLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-link-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/unknown-link-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-link-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/unknown-link-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType
// Unknown-Area scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetEntityData() *types.CommonEntityData {
    unknownAreaLsaType.EntityData.YFilter = unknownAreaLsaType.YFilter
    unknownAreaLsaType.EntityData.YangName = "unknown-area-lsa-type"
    unknownAreaLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownAreaLsaType.EntityData.ParentYangName = "lsa-info"
    unknownAreaLsaType.EntityData.SegmentPath = "unknown-area-lsa-type"
    unknownAreaLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/" + unknownAreaLsaType.EntityData.SegmentPath
    unknownAreaLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownAreaLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownAreaLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownAreaLsaType.EntityData.Children = types.NewOrderedMap()
    unknownAreaLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownAreaLsaType.LsaHeader})
    unknownAreaLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownAreaLsaType.LsaDetail})
    unknownAreaLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownAreaLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownAreaLsaType.InterfaceName})
    unknownAreaLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownAreaLsaType.IsVirtualLink})
    unknownAreaLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownAreaLsaType.VirtualLinkId})
    unknownAreaLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownAreaLsaType.IsShamLink})
    unknownAreaLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownAreaLsaType.ShamLinkId})

    unknownAreaLsaType.EntityData.YListKeys = []string {}

    return &(unknownAreaLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-area-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/unknown-area-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-area-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/unknown-area-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType
// Unknown-AS scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetEntityData() *types.CommonEntityData {
    unknownAslsaType.EntityData.YFilter = unknownAslsaType.YFilter
    unknownAslsaType.EntityData.YangName = "unknown-aslsa-type"
    unknownAslsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownAslsaType.EntityData.ParentYangName = "lsa-info"
    unknownAslsaType.EntityData.SegmentPath = "unknown-aslsa-type"
    unknownAslsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/" + unknownAslsaType.EntityData.SegmentPath
    unknownAslsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownAslsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownAslsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownAslsaType.EntityData.Children = types.NewOrderedMap()
    unknownAslsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownAslsaType.LsaHeader})
    unknownAslsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownAslsaType.LsaDetail})
    unknownAslsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownAslsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownAslsaType.InterfaceName})
    unknownAslsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownAslsaType.IsVirtualLink})
    unknownAslsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownAslsaType.VirtualLinkId})
    unknownAslsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownAslsaType.IsShamLink})
    unknownAslsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownAslsaType.ShamLinkId})

    unknownAslsaType.EntityData.YListKeys = []string {}

    return &(unknownAslsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-aslsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/unknown-aslsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-aslsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/unknown-aslsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType
// Unknown LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetEntityData() *types.CommonEntityData {
    unknownLsaType.EntityData.YFilter = unknownLsaType.YFilter
    unknownLsaType.EntityData.YangName = "unknown-lsa-type"
    unknownLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownLsaType.EntityData.ParentYangName = "lsa-info"
    unknownLsaType.EntityData.SegmentPath = "unknown-lsa-type"
    unknownLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/" + unknownLsaType.EntityData.SegmentPath
    unknownLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownLsaType.EntityData.Children = types.NewOrderedMap()
    unknownLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownLsaType.LsaHeader})
    unknownLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownLsaType.LsaDetail})
    unknownLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownLsaType.InterfaceName})
    unknownLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownLsaType.IsVirtualLink})
    unknownLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownLsaType.VirtualLinkId})
    unknownLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownLsaType.IsShamLink})
    unknownLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownLsaType.ShamLinkId})

    unknownLsaType.EntityData.YListKeys = []string {}

    return &(unknownLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/unknown-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-table/lsa-internal-table/lsa/lsa-info/unknown-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable
// OSPFv3 interface information table for all areas
type Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 interface information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface.
    Interface []*Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface
}

func (interfaceProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable) GetEntityData() *types.CommonEntityData {
    interfaceProcessTable.EntityData.YFilter = interfaceProcessTable.YFilter
    interfaceProcessTable.EntityData.YangName = "interface-process-table"
    interfaceProcessTable.EntityData.BundleName = "cisco_ios_xr"
    interfaceProcessTable.EntityData.ParentYangName = "vrf"
    interfaceProcessTable.EntityData.SegmentPath = "interface-process-table"
    interfaceProcessTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + interfaceProcessTable.EntityData.SegmentPath
    interfaceProcessTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceProcessTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceProcessTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceProcessTable.EntityData.Children = types.NewOrderedMap()
    interfaceProcessTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaceProcessTable.Interface {
        interfaceProcessTable.EntityData.Children.Append(types.GetSegmentPath(interfaceProcessTable.Interface[i]), types.YChild{"Interface", interfaceProcessTable.Interface[i]})
    }
    interfaceProcessTable.EntityData.Leafs = types.NewOrderedMap()

    interfaceProcessTable.EntityData.YListKeys = []string {}

    return &(interfaceProcessTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface
// OSPFv3 interface information
type Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface state. The type is ImStateEnum.
    InterfaceState interface{}

    // If true, line protocol is up . The type is bool.
    IsInterfaceLineUp interface{}

    // If true, interface IP security is required . The type is bool.
    IsInterfaceIpSecurityRequired interface{}

    // If true, interface IP security is active . The type is bool.
    IsInterfaceIpSecurityActive interface{}

    // Interface IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface number . The type is interface{} with range: 0..4294967295.
    InterfaceNumber interface{}

    // Interface router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceRouterId interface{}

    // Network type. The type is Ospfv3Interface.
    NetworkType interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // If true, interface flood reduction is active . The type is bool.
    IsInterfaceFloodReduction interface{}

    // If true, configured as demand circuit . The type is bool.
    IsDemandCircuitConfigured interface{}

    // If true, interface running as demand circuit. The type is bool.
    IsInterfaceDemandCircuit interface{}

    // Number of LSAs with demand circuit bit not set for the area in which the
    // interface is running. The type is interface{} with range: 0..4294967295.
    InterfaceDcBitlessLsAs interface{}

    // Interface transmission delay (sec). The type is interface{} with range:
    // 0..65535.
    TransmissionDelay interface{}

    // Interface state. The type is Ospfv3InterfaceState.
    OspfInterfaceState interface{}

    // Interface priority. The type is interface{} with range: 0..255.
    InterfacePriority interface{}

    // If true, designated router. The type is bool.
    IsDesignatedRouter interface{}

    // Designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DesignatedRouterId interface{}

    // Designated router interface address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DesignatedRouterAddress interface{}

    // Backup designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterId interface{}

    // Backup designated router interface address. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterAddress interface{}

    // The amount of time in seconds before flush timer for old network LSA
    // expires . The type is interface{} with range: 0..4294967295. Units are
    // second.
    NetworkLsaFlushTimer interface{}

    // Filter is configured for out going LSAs . The type is bool.
    IsInterfaceLsaFiltered interface{}

    // Configured hello interval (s). The type is interface{} with range:
    // 0..4294967295.
    HelloInterval interface{}

    // Configured dead interval (s) . The type is interface{} with range:
    // 0..4294967295.
    DeadInterval interface{}

    // Configured wait interval (s) . The type is interface{} with range:
    // 0..4294967295.
    WaitInterval interface{}

    // Configured retransmit interval (s) . The type is interface{} with range:
    // 0..4294967295.
    InterfaceRetransmissionInterval interface{}

    // Time until next Hello (s) . The type is interface{} with range:
    // 0..4294967295.
    NextHelloTime interface{}

    // Interface authentication spi . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAuthenticationSpi interface{}

    // Interface authentication transmit . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAuthenticationTransmit interface{}

    // If true, interface encryption is enabled . The type is bool.
    IsInterfaceEncryptionEnabled interface{}

    // If true prefix suppression is enabled. The type is bool.
    IsPrefixSuppress interface{}

    // Interface encryption spi. The type is interface{} with range:
    // 0..4294967295.
    InterfaceEncryptionSpi interface{}

    // Interface encryption transmitted . The type is interface{} with range:
    // 0..4294967295.
    InterfaceEncryptionTransmitted interface{}

    // Interface encrypted authentication transmitted . The type is interface{}
    // with range: 0..4294967295.
    InterfaceEncryptedAuthenticationTransmitted interface{}

    // Number of adjacent neighbors. The type is interface{} with range:
    // 0..4294967295.
    AdjacentNeighbor interface{}

    // Interface reference count . The type is interface{} with range:
    // 0..4294967295.
    InterfaceReferences interface{}

    // If true, configured as LDP sync. The type is bool.
    ConfiguredLdpSync interface{}

    // If true, interface LDP sync is achieved. The type is bool.
    InterfaceLdpSync interface{}

    // Active interface details .
    ActiveInterface Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface

    // BFD information .
    InterfaceBfd Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd

    // Information for neighbors on the interface. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor.
    InterfaceNeighbor []*Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interface-process-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/interface-process-table/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("active-interface", types.YChild{"ActiveInterface", &self.ActiveInterface})
    self.EntityData.Children.Append("interface-bfd", types.YChild{"InterfaceBfd", &self.InterfaceBfd})
    self.EntityData.Children.Append("interface-neighbor", types.YChild{"InterfaceNeighbor", nil})
    for i := range self.InterfaceNeighbor {
        types.SetYListKey(self.InterfaceNeighbor[i], i)
        self.EntityData.Children.Append(types.GetSegmentPath(self.InterfaceNeighbor[i]), types.YChild{"InterfaceNeighbor", self.InterfaceNeighbor[i]})
    }
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-state", types.YLeaf{"InterfaceState", self.InterfaceState})
    self.EntityData.Leafs.Append("is-interface-line-up", types.YLeaf{"IsInterfaceLineUp", self.IsInterfaceLineUp})
    self.EntityData.Leafs.Append("is-interface-ip-security-required", types.YLeaf{"IsInterfaceIpSecurityRequired", self.IsInterfaceIpSecurityRequired})
    self.EntityData.Leafs.Append("is-interface-ip-security-active", types.YLeaf{"IsInterfaceIpSecurityActive", self.IsInterfaceIpSecurityActive})
    self.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", self.InterfaceAddress})
    self.EntityData.Leafs.Append("interface-number", types.YLeaf{"InterfaceNumber", self.InterfaceNumber})
    self.EntityData.Leafs.Append("interface-router-id", types.YLeaf{"InterfaceRouterId", self.InterfaceRouterId})
    self.EntityData.Leafs.Append("network-type", types.YLeaf{"NetworkType", self.NetworkType})
    self.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", self.InterfaceLinkCost})
    self.EntityData.Leafs.Append("is-interface-flood-reduction", types.YLeaf{"IsInterfaceFloodReduction", self.IsInterfaceFloodReduction})
    self.EntityData.Leafs.Append("is-demand-circuit-configured", types.YLeaf{"IsDemandCircuitConfigured", self.IsDemandCircuitConfigured})
    self.EntityData.Leafs.Append("is-interface-demand-circuit", types.YLeaf{"IsInterfaceDemandCircuit", self.IsInterfaceDemandCircuit})
    self.EntityData.Leafs.Append("interface-dc-bitless-ls-as", types.YLeaf{"InterfaceDcBitlessLsAs", self.InterfaceDcBitlessLsAs})
    self.EntityData.Leafs.Append("transmission-delay", types.YLeaf{"TransmissionDelay", self.TransmissionDelay})
    self.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", self.OspfInterfaceState})
    self.EntityData.Leafs.Append("interface-priority", types.YLeaf{"InterfacePriority", self.InterfacePriority})
    self.EntityData.Leafs.Append("is-designated-router", types.YLeaf{"IsDesignatedRouter", self.IsDesignatedRouter})
    self.EntityData.Leafs.Append("designated-router-id", types.YLeaf{"DesignatedRouterId", self.DesignatedRouterId})
    self.EntityData.Leafs.Append("designated-router-address", types.YLeaf{"DesignatedRouterAddress", self.DesignatedRouterAddress})
    self.EntityData.Leafs.Append("backup-designated-router-id", types.YLeaf{"BackupDesignatedRouterId", self.BackupDesignatedRouterId})
    self.EntityData.Leafs.Append("backup-designated-router-address", types.YLeaf{"BackupDesignatedRouterAddress", self.BackupDesignatedRouterAddress})
    self.EntityData.Leafs.Append("network-lsa-flush-timer", types.YLeaf{"NetworkLsaFlushTimer", self.NetworkLsaFlushTimer})
    self.EntityData.Leafs.Append("is-interface-lsa-filtered", types.YLeaf{"IsInterfaceLsaFiltered", self.IsInterfaceLsaFiltered})
    self.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", self.HelloInterval})
    self.EntityData.Leafs.Append("dead-interval", types.YLeaf{"DeadInterval", self.DeadInterval})
    self.EntityData.Leafs.Append("wait-interval", types.YLeaf{"WaitInterval", self.WaitInterval})
    self.EntityData.Leafs.Append("interface-retransmission-interval", types.YLeaf{"InterfaceRetransmissionInterval", self.InterfaceRetransmissionInterval})
    self.EntityData.Leafs.Append("next-hello-time", types.YLeaf{"NextHelloTime", self.NextHelloTime})
    self.EntityData.Leafs.Append("interface-authentication-spi", types.YLeaf{"InterfaceAuthenticationSpi", self.InterfaceAuthenticationSpi})
    self.EntityData.Leafs.Append("interface-authentication-transmit", types.YLeaf{"InterfaceAuthenticationTransmit", self.InterfaceAuthenticationTransmit})
    self.EntityData.Leafs.Append("is-interface-encryption-enabled", types.YLeaf{"IsInterfaceEncryptionEnabled", self.IsInterfaceEncryptionEnabled})
    self.EntityData.Leafs.Append("is-prefix-suppress", types.YLeaf{"IsPrefixSuppress", self.IsPrefixSuppress})
    self.EntityData.Leafs.Append("interface-encryption-spi", types.YLeaf{"InterfaceEncryptionSpi", self.InterfaceEncryptionSpi})
    self.EntityData.Leafs.Append("interface-encryption-transmitted", types.YLeaf{"InterfaceEncryptionTransmitted", self.InterfaceEncryptionTransmitted})
    self.EntityData.Leafs.Append("interface-encrypted-authentication-transmitted", types.YLeaf{"InterfaceEncryptedAuthenticationTransmitted", self.InterfaceEncryptedAuthenticationTransmitted})
    self.EntityData.Leafs.Append("adjacent-neighbor", types.YLeaf{"AdjacentNeighbor", self.AdjacentNeighbor})
    self.EntityData.Leafs.Append("interface-references", types.YLeaf{"InterfaceReferences", self.InterfaceReferences})
    self.EntityData.Leafs.Append("configured-ldp-sync", types.YLeaf{"ConfiguredLdpSync", self.ConfiguredLdpSync})
    self.EntityData.Leafs.Append("interface-ldp-sync", types.YLeaf{"InterfaceLdpSync", self.InterfaceLdpSync})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface
// Active interface details 
type Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Wait time for DR/BDR selection (s). The type is interface{} with range:
    // 0..4294967295.
    WaitTime interface{}

    // Area scope LSAs flood index. The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaFloodIndex interface{}

    // AS scope LSAs flood index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsFloodIndex interface{}

    // Interface flood link index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkFloodIndex interface{}

    // Flood queue length. The type is interface{} with range: 0..4294967295.
    FloodQueueLength interface{}

    // Next LSA to flood (Area scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaNextFlood interface{}

    // Index of next LSA to flood (Area scope) . The type is interface{} with
    // range: 0..4294967295.
    InterfaceAreaNextFloodIndex interface{}

    // Next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFlood interface{}

    // Index of next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFloodIndex interface{}

    // Interface link next flood information . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkNextFlood interface{}

    // Interface link next information index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkNextIndex interface{}

    // Last flood scan length . The type is interface{} with range: 0..4294967295.
    FloodScanLength interface{}

    // Maximum flood length . The type is interface{} with range: 0..4294967295.
    MaximumFloodLength interface{}

    // Last flood scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastFloodTime interface{}

    // Maximum flood time (ms) . The type is interface{} with range:
    // 0..4294967295.
    MaximumFloodTime interface{}

    // Time until next flood pacing timer (ms) . The type is interface{} with
    // range: 0..4294967295.
    InterfaceFloodPacingTimer interface{}

    // Total number of neighbors . The type is interface{} with range: 0..65535.
    InterfaceNeighbors interface{}

    // Number of neighbors for which hellos are suppressed . The type is
    // interface{} with range: 0..65535.
    SuppressedHellos interface{}
}

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface) GetEntityData() *types.CommonEntityData {
    activeInterface.EntityData.YFilter = activeInterface.YFilter
    activeInterface.EntityData.YangName = "active-interface"
    activeInterface.EntityData.BundleName = "cisco_ios_xr"
    activeInterface.EntityData.ParentYangName = "interface"
    activeInterface.EntityData.SegmentPath = "active-interface"
    activeInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/interface-process-table/interface/" + activeInterface.EntityData.SegmentPath
    activeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    activeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    activeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    activeInterface.EntityData.Children = types.NewOrderedMap()
    activeInterface.EntityData.Leafs = types.NewOrderedMap()
    activeInterface.EntityData.Leafs.Append("wait-time", types.YLeaf{"WaitTime", activeInterface.WaitTime})
    activeInterface.EntityData.Leafs.Append("interface-area-flood-index", types.YLeaf{"InterfaceAreaFloodIndex", activeInterface.InterfaceAreaFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-as-flood-index", types.YLeaf{"InterfaceAsFloodIndex", activeInterface.InterfaceAsFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-link-flood-index", types.YLeaf{"InterfaceLinkFloodIndex", activeInterface.InterfaceLinkFloodIndex})
    activeInterface.EntityData.Leafs.Append("flood-queue-length", types.YLeaf{"FloodQueueLength", activeInterface.FloodQueueLength})
    activeInterface.EntityData.Leafs.Append("interface-area-next-flood", types.YLeaf{"InterfaceAreaNextFlood", activeInterface.InterfaceAreaNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-area-next-flood-index", types.YLeaf{"InterfaceAreaNextFloodIndex", activeInterface.InterfaceAreaNextFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-as-next-flood", types.YLeaf{"InterfaceAsNextFlood", activeInterface.InterfaceAsNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-as-next-flood-index", types.YLeaf{"InterfaceAsNextFloodIndex", activeInterface.InterfaceAsNextFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-link-next-flood", types.YLeaf{"InterfaceLinkNextFlood", activeInterface.InterfaceLinkNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-link-next-index", types.YLeaf{"InterfaceLinkNextIndex", activeInterface.InterfaceLinkNextIndex})
    activeInterface.EntityData.Leafs.Append("flood-scan-length", types.YLeaf{"FloodScanLength", activeInterface.FloodScanLength})
    activeInterface.EntityData.Leafs.Append("maximum-flood-length", types.YLeaf{"MaximumFloodLength", activeInterface.MaximumFloodLength})
    activeInterface.EntityData.Leafs.Append("last-flood-time", types.YLeaf{"LastFloodTime", activeInterface.LastFloodTime})
    activeInterface.EntityData.Leafs.Append("maximum-flood-time", types.YLeaf{"MaximumFloodTime", activeInterface.MaximumFloodTime})
    activeInterface.EntityData.Leafs.Append("interface-flood-pacing-timer", types.YLeaf{"InterfaceFloodPacingTimer", activeInterface.InterfaceFloodPacingTimer})
    activeInterface.EntityData.Leafs.Append("interface-neighbors", types.YLeaf{"InterfaceNeighbors", activeInterface.InterfaceNeighbors})
    activeInterface.EntityData.Leafs.Append("suppressed-hellos", types.YLeaf{"SuppressedHellos", activeInterface.SuppressedHellos})

    activeInterface.EntityData.YListKeys = []string {}

    return &(activeInterface.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd
// BFD information 
type Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD Enable Mode on the interface - Default/Strict. The type is interface{}
    // with range: 0..4294967295.
    BfdIntfEnableMode interface{}

    // BFD interval (ms) . The type is interface{} with range: 0..4294967295.
    BfdInterval interface{}

    // BFD detection multiplier . The type is interface{} with range:
    // 0..4294967295.
    BfdDetectionMultiplier interface{}
}

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd) GetEntityData() *types.CommonEntityData {
    interfaceBfd.EntityData.YFilter = interfaceBfd.YFilter
    interfaceBfd.EntityData.YangName = "interface-bfd"
    interfaceBfd.EntityData.BundleName = "cisco_ios_xr"
    interfaceBfd.EntityData.ParentYangName = "interface"
    interfaceBfd.EntityData.SegmentPath = "interface-bfd"
    interfaceBfd.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/interface-process-table/interface/" + interfaceBfd.EntityData.SegmentPath
    interfaceBfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBfd.EntityData.Children = types.NewOrderedMap()
    interfaceBfd.EntityData.Leafs = types.NewOrderedMap()
    interfaceBfd.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", interfaceBfd.BfdIntfEnableMode})
    interfaceBfd.EntityData.Leafs.Append("bfd-interval", types.YLeaf{"BfdInterval", interfaceBfd.BfdInterval})
    interfaceBfd.EntityData.Leafs.Append("bfd-detection-multiplier", types.YLeaf{"BfdDetectionMultiplier", interfaceBfd.BfdDetectionMultiplier})

    interfaceBfd.EntityData.YListKeys = []string {}

    return &(interfaceBfd.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor
// Information for neighbors on the interface
type Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceNeighborId interface{}

    // Cost of link to neighbor. The type is interface{} with range:
    // 0..4294967295.
    InterfaceNeighborCost interface{}

    // If true, designated router is found . The type is bool.
    IsNeighborDr interface{}

    // If true, backup designated router is found . The type is bool.
    IsNeighborBdr interface{}

    // If true, hello is suppressed . The type is bool.
    IsHelloSuppressed interface{}
}

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetEntityData() *types.CommonEntityData {
    interfaceNeighbor.EntityData.YFilter = interfaceNeighbor.YFilter
    interfaceNeighbor.EntityData.YangName = "interface-neighbor"
    interfaceNeighbor.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighbor.EntityData.ParentYangName = "interface"
    interfaceNeighbor.EntityData.SegmentPath = "interface-neighbor" + types.AddNoKeyToken(interfaceNeighbor)
    interfaceNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/interface-process-table/interface/" + interfaceNeighbor.EntityData.SegmentPath
    interfaceNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighbor.EntityData.Children = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs.Append("interface-neighbor-id", types.YLeaf{"InterfaceNeighborId", interfaceNeighbor.InterfaceNeighborId})
    interfaceNeighbor.EntityData.Leafs.Append("interface-neighbor-cost", types.YLeaf{"InterfaceNeighborCost", interfaceNeighbor.InterfaceNeighborCost})
    interfaceNeighbor.EntityData.Leafs.Append("is-neighbor-dr", types.YLeaf{"IsNeighborDr", interfaceNeighbor.IsNeighborDr})
    interfaceNeighbor.EntityData.Leafs.Append("is-neighbor-bdr", types.YLeaf{"IsNeighborBdr", interfaceNeighbor.IsNeighborBdr})
    interfaceNeighbor.EntityData.Leafs.Append("is-hello-suppressed", types.YLeaf{"IsHelloSuppressed", interfaceNeighbor.IsHelloSuppressed})

    interfaceNeighbor.EntityData.YListKeys = []string {}

    return &(interfaceNeighbor.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions
// Redistribution information table
type Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Redistribution information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution.
    Redistribution []*Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution
}

func (redistributions *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions) GetEntityData() *types.CommonEntityData {
    redistributions.EntityData.YFilter = redistributions.YFilter
    redistributions.EntityData.YangName = "redistributions"
    redistributions.EntityData.BundleName = "cisco_ios_xr"
    redistributions.EntityData.ParentYangName = "vrf"
    redistributions.EntityData.SegmentPath = "redistributions"
    redistributions.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + redistributions.EntityData.SegmentPath
    redistributions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributions.EntityData.Children = types.NewOrderedMap()
    redistributions.EntityData.Children.Append("redistribution", types.YChild{"Redistribution", nil})
    for i := range redistributions.Redistribution {
        types.SetYListKey(redistributions.Redistribution[i], i)
        redistributions.EntityData.Children.Append(types.GetSegmentPath(redistributions.Redistribution[i]), types.YChild{"Redistribution", redistributions.Redistribution[i]})
    }
    redistributions.EntityData.Leafs = types.NewOrderedMap()

    redistributions.EntityData.YListKeys = []string {}

    return &(redistributions.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution
// Redistribution information
type Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Protocol name that is redistributed. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    ProtocolName interface{}

    // Process name of a protocolbeing redistributed . The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ProcessName interface{}

    // Protocol name . The type is string with length: 0..40.
    ProtocolNameXr interface{}

    // Process ID . The type is string with length: 0..40.
    ProcessId interface{}

    // red metric flag. The type is bool.
    RedMetricFlag interface{}

    // red metric. The type is interface{} with range: 0..4294967295.
    RedMetric interface{}

    // red mtype flag. The type is bool.
    RedMtypeFlag interface{}

    // red metric type. The type is interface{} with range: 0..255.
    RedMetricType interface{}

    // red tag. The type is interface{} with range: 0..4294967295.
    RedTag interface{}

    // Route policy name . The type is string.
    PolicyName interface{}
}

func (redistribution *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution) GetEntityData() *types.CommonEntityData {
    redistribution.EntityData.YFilter = redistribution.YFilter
    redistribution.EntityData.YangName = "redistribution"
    redistribution.EntityData.BundleName = "cisco_ios_xr"
    redistribution.EntityData.ParentYangName = "redistributions"
    redistribution.EntityData.SegmentPath = "redistribution" + types.AddNoKeyToken(redistribution)
    redistribution.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/redistributions/" + redistribution.EntityData.SegmentPath
    redistribution.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistribution.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistribution.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistribution.EntityData.Children = types.NewOrderedMap()
    redistribution.EntityData.Leafs = types.NewOrderedMap()
    redistribution.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", redistribution.ProtocolName})
    redistribution.EntityData.Leafs.Append("process-name", types.YLeaf{"ProcessName", redistribution.ProcessName})
    redistribution.EntityData.Leafs.Append("protocol-name-xr", types.YLeaf{"ProtocolNameXr", redistribution.ProtocolNameXr})
    redistribution.EntityData.Leafs.Append("process-id", types.YLeaf{"ProcessId", redistribution.ProcessId})
    redistribution.EntityData.Leafs.Append("red-metric-flag", types.YLeaf{"RedMetricFlag", redistribution.RedMetricFlag})
    redistribution.EntityData.Leafs.Append("red-metric", types.YLeaf{"RedMetric", redistribution.RedMetric})
    redistribution.EntityData.Leafs.Append("red-mtype-flag", types.YLeaf{"RedMtypeFlag", redistribution.RedMtypeFlag})
    redistribution.EntityData.Leafs.Append("red-metric-type", types.YLeaf{"RedMetricType", redistribution.RedMetricType})
    redistribution.EntityData.Leafs.Append("red-tag", types.YLeaf{"RedTag", redistribution.RedTag})
    redistribution.EntityData.Leafs.Append("policy-name", types.YLeaf{"PolicyName", redistribution.PolicyName})

    redistribution.EntityData.YListKeys = []string {}

    return &(redistribution.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes
// OSPFv3 external route information table
type Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 external route information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute.
    ExternalRoute []*Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute
}

func (externalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes) GetEntityData() *types.CommonEntityData {
    externalRoutes.EntityData.YFilter = externalRoutes.YFilter
    externalRoutes.EntityData.YangName = "external-routes"
    externalRoutes.EntityData.BundleName = "cisco_ios_xr"
    externalRoutes.EntityData.ParentYangName = "vrf"
    externalRoutes.EntityData.SegmentPath = "external-routes"
    externalRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + externalRoutes.EntityData.SegmentPath
    externalRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalRoutes.EntityData.Children = types.NewOrderedMap()
    externalRoutes.EntityData.Children.Append("external-route", types.YChild{"ExternalRoute", nil})
    for i := range externalRoutes.ExternalRoute {
        types.SetYListKey(externalRoutes.ExternalRoute[i], i)
        externalRoutes.EntityData.Children.Append(types.GetSegmentPath(externalRoutes.ExternalRoute[i]), types.YChild{"ExternalRoute", externalRoutes.ExternalRoute[i]})
    }
    externalRoutes.EntityData.Leafs = types.NewOrderedMap()

    externalRoutes.EntityData.YListKeys = []string {}

    return &(externalRoutes.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute
// OSPFv3 external route information
type Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Common Route topology information.
    RouteTopology Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology

    // Extended communities in the route.
    RouteExtendedCommunity Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity

    // List of paths to this route. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath.
    RoutePath []*Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath
}

func (externalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute) GetEntityData() *types.CommonEntityData {
    externalRoute.EntityData.YFilter = externalRoute.YFilter
    externalRoute.EntityData.YangName = "external-route"
    externalRoute.EntityData.BundleName = "cisco_ios_xr"
    externalRoute.EntityData.ParentYangName = "external-routes"
    externalRoute.EntityData.SegmentPath = "external-route" + types.AddNoKeyToken(externalRoute)
    externalRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/external-routes/" + externalRoute.EntityData.SegmentPath
    externalRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalRoute.EntityData.Children = types.NewOrderedMap()
    externalRoute.EntityData.Children.Append("route-topology", types.YChild{"RouteTopology", &externalRoute.RouteTopology})
    externalRoute.EntityData.Children.Append("route-extended-community", types.YChild{"RouteExtendedCommunity", &externalRoute.RouteExtendedCommunity})
    externalRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range externalRoute.RoutePath {
        types.SetYListKey(externalRoute.RoutePath[i], i)
        externalRoute.EntityData.Children.Append(types.GetSegmentPath(externalRoute.RoutePath[i]), types.YChild{"RoutePath", externalRoute.RoutePath[i]})
    }
    externalRoute.EntityData.Leafs = types.NewOrderedMap()
    externalRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", externalRoute.Prefix})
    externalRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", externalRoute.PrefixLength})

    externalRoute.EntityData.YListKeys = []string {}

    return &(externalRoute.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology
// Common Route topology information
type Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Route distance . The type is interface{} with range: 0..4294967295.
    RouteDistance interface{}

    // Route cost . The type is interface{} with range: 0..4294967295.
    RouteCost interface{}

    // Route type. The type is interface{} with range: 0..4294967295.
    RouteType interface{}
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology) GetEntityData() *types.CommonEntityData {
    routeTopology.EntityData.YFilter = routeTopology.YFilter
    routeTopology.EntityData.YangName = "route-topology"
    routeTopology.EntityData.BundleName = "cisco_ios_xr"
    routeTopology.EntityData.ParentYangName = "external-route"
    routeTopology.EntityData.SegmentPath = "route-topology"
    routeTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/external-routes/external-route/" + routeTopology.EntityData.SegmentPath
    routeTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeTopology.EntityData.Children = types.NewOrderedMap()
    routeTopology.EntityData.Leafs = types.NewOrderedMap()
    routeTopology.EntityData.Leafs.Append("route-id", types.YLeaf{"RouteId", routeTopology.RouteId})
    routeTopology.EntityData.Leafs.Append("route-distance", types.YLeaf{"RouteDistance", routeTopology.RouteDistance})
    routeTopology.EntityData.Leafs.Append("route-cost", types.YLeaf{"RouteCost", routeTopology.RouteCost})
    routeTopology.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", routeTopology.RouteType})

    routeTopology.EntityData.YListKeys = []string {}

    return &(routeTopology.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity
// Extended communities in the route
type Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Domain ID value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ExtendedCommunityDomainIdValue interface{}

    // Domain ID type. The type is interface{} with range: 0..65535.
    ExtendedCommunitylDomainIdType interface{}

    // Area id. The type is interface{} with range: 0..4294967295.
    ExtendedCommunityAreaId interface{}

    // Router id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedCommunityRouterId interface{}

    // Route type. The type is interface{} with range: 0..255.
    ExtendedCommunityRouteType interface{}

    // Route Options. The type is interface{} with range: 0..255.
    ExtendedCommunityOptions interface{}
}

func (routeExtendedCommunity *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetEntityData() *types.CommonEntityData {
    routeExtendedCommunity.EntityData.YFilter = routeExtendedCommunity.YFilter
    routeExtendedCommunity.EntityData.YangName = "route-extended-community"
    routeExtendedCommunity.EntityData.BundleName = "cisco_ios_xr"
    routeExtendedCommunity.EntityData.ParentYangName = "external-route"
    routeExtendedCommunity.EntityData.SegmentPath = "route-extended-community"
    routeExtendedCommunity.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/external-routes/external-route/" + routeExtendedCommunity.EntityData.SegmentPath
    routeExtendedCommunity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeExtendedCommunity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeExtendedCommunity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeExtendedCommunity.EntityData.Children = types.NewOrderedMap()
    routeExtendedCommunity.EntityData.Leafs = types.NewOrderedMap()
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-domain-id-value", types.YLeaf{"ExtendedCommunityDomainIdValue", routeExtendedCommunity.ExtendedCommunityDomainIdValue})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-communityl-domain-id-type", types.YLeaf{"ExtendedCommunitylDomainIdType", routeExtendedCommunity.ExtendedCommunitylDomainIdType})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-area-id", types.YLeaf{"ExtendedCommunityAreaId", routeExtendedCommunity.ExtendedCommunityAreaId})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-router-id", types.YLeaf{"ExtendedCommunityRouterId", routeExtendedCommunity.ExtendedCommunityRouterId})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-route-type", types.YLeaf{"ExtendedCommunityRouteType", routeExtendedCommunity.ExtendedCommunityRouteType})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-options", types.YLeaf{"ExtendedCommunityOptions", routeExtendedCommunity.ExtendedCommunityOptions})

    routeExtendedCommunity.EntityData.YListKeys = []string {}

    return &(routeExtendedCommunity.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath
// List of paths to this route
type Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Route path interface name . The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Route path interface Index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndex interface{}

    // Route path next hop . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RoutePathNextHop interface{}

    // Path ID of path. The type is interface{} with range: 0..65535.
    RoutePathId interface{}

    // Backup Path Info.
    RouteBackupPath Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath

    // NeighborNextHop. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_NeighborNextHop
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "external-route"
    routePath.EntityData.SegmentPath = "route-path" + types.AddNoKeyToken(routePath)
    routePath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/external-routes/external-route/" + routePath.EntityData.SegmentPath
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("route-backup-path", types.YChild{"RouteBackupPath", &routePath.RouteBackupPath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        types.SetYListKey(routePath.NeighborNextHop[i], i)
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", routePath.InterfaceName})
    routePath.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", routePath.InterfaceIndex})
    routePath.EntityData.Leafs.Append("route-path-next-hop", types.YLeaf{"RoutePathNextHop", routePath.RoutePathNextHop})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath
// Backup Path Info
type Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetEntityData() *types.CommonEntityData {
    routeBackupPath.EntityData.YFilter = routeBackupPath.YFilter
    routeBackupPath.EntityData.YangName = "route-backup-path"
    routeBackupPath.EntityData.BundleName = "cisco_ios_xr"
    routeBackupPath.EntityData.ParentYangName = "route-path"
    routeBackupPath.EntityData.SegmentPath = "route-backup-path"
    routeBackupPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/external-routes/external-route/route-path/" + routeBackupPath.EntityData.SegmentPath
    routeBackupPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeBackupPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeBackupPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeBackupPath.EntityData.Children = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs.Append("backup-route-interface-name", types.YLeaf{"BackupRouteInterfaceName", routeBackupPath.BackupRouteInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("backup-route-next-hop-address", types.YLeaf{"BackupRouteNextHopAddress", routeBackupPath.BackupRouteNextHopAddress})
    routeBackupPath.EntityData.Leafs.Append("backup-route-source", types.YLeaf{"BackupRouteSource", routeBackupPath.BackupRouteSource})
    routeBackupPath.EntityData.Leafs.Append("backup-metric", types.YLeaf{"BackupMetric", routeBackupPath.BackupMetric})
    routeBackupPath.EntityData.Leafs.Append("primary-path", types.YLeaf{"PrimaryPath", routeBackupPath.PrimaryPath})
    routeBackupPath.EntityData.Leafs.Append("line-card-disjoint", types.YLeaf{"LineCardDisjoint", routeBackupPath.LineCardDisjoint})
    routeBackupPath.EntityData.Leafs.Append("downstream", types.YLeaf{"Downstream", routeBackupPath.Downstream})
    routeBackupPath.EntityData.Leafs.Append("node-protect", types.YLeaf{"NodeProtect", routeBackupPath.NodeProtect})
    routeBackupPath.EntityData.Leafs.Append("srlg-disjoint", types.YLeaf{"SrlgDisjoint", routeBackupPath.SrlgDisjoint})

    routeBackupPath.EntityData.YListKeys = []string {}

    return &(routeBackupPath.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop" + types.AddNoKeyToken(neighborNextHop)
    neighborNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/external-routes/external-route/route-path/" + neighborNextHop.EntityData.SegmentPath
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable
// OSPFv3 request list information for all areas
type Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 request list information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request.
    Request []*Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request
}

func (requestListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable) GetEntityData() *types.CommonEntityData {
    requestListProcessTable.EntityData.YFilter = requestListProcessTable.YFilter
    requestListProcessTable.EntityData.YangName = "request-list-process-table"
    requestListProcessTable.EntityData.BundleName = "cisco_ios_xr"
    requestListProcessTable.EntityData.ParentYangName = "vrf"
    requestListProcessTable.EntityData.SegmentPath = "request-list-process-table"
    requestListProcessTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + requestListProcessTable.EntityData.SegmentPath
    requestListProcessTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    requestListProcessTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    requestListProcessTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    requestListProcessTable.EntityData.Children = types.NewOrderedMap()
    requestListProcessTable.EntityData.Children.Append("request", types.YChild{"Request", nil})
    for i := range requestListProcessTable.Request {
        types.SetYListKey(requestListProcessTable.Request[i], i)
        requestListProcessTable.EntityData.Children.Append(types.GetSegmentPath(requestListProcessTable.Request[i]), types.YChild{"Request", requestListProcessTable.Request[i]})
    }
    requestListProcessTable.EntityData.Leafs = types.NewOrderedMap()

    requestListProcessTable.EntityData.YListKeys = []string {}

    return &(requestListProcessTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request
// OSPFv3 request list information
type Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RequestNeighborAddress interface{}

    // If true, virtual link is requested . The type is bool.
    IsRequestVirtualLink interface{}

    // Request virtual link ID . The type is interface{} with range:
    // 0..4294967295.
    RequestVirtualLinkId interface{}

    // If true, sham link is requested . The type is bool.
    IsRequestShamLink interface{}

    // Request sham link ID . The type is interface{} with range: 0..4294967295.
    RequestShamLinkId interface{}

    // List of request list entries. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request.
    Request []*Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request) GetEntityData() *types.CommonEntityData {
    request.EntityData.YFilter = request.YFilter
    request.EntityData.YangName = "request"
    request.EntityData.BundleName = "cisco_ios_xr"
    request.EntityData.ParentYangName = "request-list-process-table"
    request.EntityData.SegmentPath = "request" + types.AddNoKeyToken(request)
    request.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/request-list-process-table/" + request.EntityData.SegmentPath
    request.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    request.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    request.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    request.EntityData.Children = types.NewOrderedMap()
    request.EntityData.Children.Append("request", types.YChild{"Request", nil})
    for i := range request.Request {
        types.SetYListKey(request.Request[i], i)
        request.EntityData.Children.Append(types.GetSegmentPath(request.Request[i]), types.YChild{"Request", request.Request[i]})
    }
    request.EntityData.Leafs = types.NewOrderedMap()
    request.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", request.InterfaceName})
    request.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", request.NeighborAddress})
    request.EntityData.Leafs.Append("request-neighbor-address", types.YLeaf{"RequestNeighborAddress", request.RequestNeighborAddress})
    request.EntityData.Leafs.Append("is-request-virtual-link", types.YLeaf{"IsRequestVirtualLink", request.IsRequestVirtualLink})
    request.EntityData.Leafs.Append("request-virtual-link-id", types.YLeaf{"RequestVirtualLinkId", request.RequestVirtualLinkId})
    request.EntityData.Leafs.Append("is-request-sham-link", types.YLeaf{"IsRequestShamLink", request.IsRequestShamLink})
    request.EntityData.Leafs.Append("request-sham-link-id", types.YLeaf{"RequestShamLinkId", request.RequestShamLinkId})

    request.EntityData.YListKeys = []string {}

    return &(request.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request
// List of request list entries
type Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request) GetEntityData() *types.CommonEntityData {
    request.EntityData.YFilter = request.YFilter
    request.EntityData.YangName = "request"
    request.EntityData.BundleName = "cisco_ios_xr"
    request.EntityData.ParentYangName = "request"
    request.EntityData.SegmentPath = "request" + types.AddNoKeyToken(request)
    request.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/request-list-process-table/request/" + request.EntityData.SegmentPath
    request.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    request.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    request.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    request.EntityData.Children = types.NewOrderedMap()
    request.EntityData.Leafs = types.NewOrderedMap()
    request.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", request.HeaderLsaType})
    request.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", request.HeaderLsaAge})
    request.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", request.HeaderLsaId})
    request.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", request.HeaderAdvertisingRouter})
    request.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", request.HeaderSequenceNumber})

    request.EntityData.YListKeys = []string {}

    return &(request.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink
// Virtual link information
type Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor on other end of this virtual link. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    VirtualLinkNeighborId interface{}

    // Virtual link interface number . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkInterfaceNumber interface{}

    // OSPF interface state for the virtual link. The type is
    // Ospfv3InterfaceState.
    VirtualLinkState interface{}

    // If true, virtual link IP security is required . The type is bool.
    IsVirtualLinkIpSecurityRequired interface{}

    // If true, Virtual link IP security is active . The type is bool.
    IsVirtualLinkIpSecurityActive interface{}

    // Virtual link neighbor addresss . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    VirtualLinkNeighborAddress interface{}

    // If true, the link runs as demand circuit. The type is bool.
    IsVirtualLinkDemandCircuit interface{}

    // Number of LSA's with demand circuit bit not set . The type is interface{}
    // with range: 0..4294967295.
    VirtualLinkDcBitlessLsa interface{}

    // Transit area id . The type is string.
    TransitAreaId interface{}

    // Interface on which this virtual link is formed. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Cost of the virtual link. The type is interface{} with range: 0..65535.
    VirtualLinkCost interface{}

    // Transmission delay in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    VirualLinkTransmissionDelay interface{}

    // Hello interval (s). The type is interface{} with range: 0..4294967295.
    VirtualLinkHelloInterval interface{}

    // Dead interval (s). The type is interface{} with range: 0..4294967295.
    VirtualLinkDeadInterval interface{}

    // Wait interval (s). The type is interface{} with range: 0..4294967295.
    VirtualLinkWaitInterval interface{}

    // Retransmission interval (s). The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkRetransmissionInterval interface{}

    // Time until next hello (s). The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkNextHello interface{}

    // If true, interface is passive. The type is bool.
    IsVirtualLinkPassive interface{}

    // If true, virtual link authentication is enabled . The type is bool.
    IsVirtualLinkAuthenticationEnabled interface{}

    // Virtual link authentication spi . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkAuthenticationSpi interface{}

    // Virtual link authentication transmit . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkAuthenticationTransmit interface{}

    // If true, virtual link encryption is enabled . The type is bool.
    IsVirtualLinkEncryptionEnabled interface{}

    // Virtual link encryption spi. The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkEncryptionSpi interface{}

    // Virtual link encryption transmitted . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkEncryptionTransmitted interface{}

    // Virtual link encrypted authentication transmitted . The type is interface{}
    // with range: 0..4294967295.
    VirtualLinkEncryptedAuthenticationTransmitted interface{}

    // Neighbor information .
    VirtualLinkNeighbor Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink) GetEntityData() *types.CommonEntityData {
    virtualLink.EntityData.YFilter = virtualLink.YFilter
    virtualLink.EntityData.YangName = "virtual-link"
    virtualLink.EntityData.BundleName = "cisco_ios_xr"
    virtualLink.EntityData.ParentYangName = "vrf"
    virtualLink.EntityData.SegmentPath = "virtual-link"
    virtualLink.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + virtualLink.EntityData.SegmentPath
    virtualLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLink.EntityData.Children = types.NewOrderedMap()
    virtualLink.EntityData.Children.Append("virtual-link-neighbor", types.YChild{"VirtualLinkNeighbor", &virtualLink.VirtualLinkNeighbor})
    virtualLink.EntityData.Leafs = types.NewOrderedMap()
    virtualLink.EntityData.Leafs.Append("virtual-link-neighbor-id", types.YLeaf{"VirtualLinkNeighborId", virtualLink.VirtualLinkNeighborId})
    virtualLink.EntityData.Leafs.Append("virtual-link-interface-number", types.YLeaf{"VirtualLinkInterfaceNumber", virtualLink.VirtualLinkInterfaceNumber})
    virtualLink.EntityData.Leafs.Append("virtual-link-state", types.YLeaf{"VirtualLinkState", virtualLink.VirtualLinkState})
    virtualLink.EntityData.Leafs.Append("is-virtual-link-ip-security-required", types.YLeaf{"IsVirtualLinkIpSecurityRequired", virtualLink.IsVirtualLinkIpSecurityRequired})
    virtualLink.EntityData.Leafs.Append("is-virtual-link-ip-security-active", types.YLeaf{"IsVirtualLinkIpSecurityActive", virtualLink.IsVirtualLinkIpSecurityActive})
    virtualLink.EntityData.Leafs.Append("virtual-link-neighbor-address", types.YLeaf{"VirtualLinkNeighborAddress", virtualLink.VirtualLinkNeighborAddress})
    virtualLink.EntityData.Leafs.Append("is-virtual-link-demand-circuit", types.YLeaf{"IsVirtualLinkDemandCircuit", virtualLink.IsVirtualLinkDemandCircuit})
    virtualLink.EntityData.Leafs.Append("virtual-link-dc-bitless-lsa", types.YLeaf{"VirtualLinkDcBitlessLsa", virtualLink.VirtualLinkDcBitlessLsa})
    virtualLink.EntityData.Leafs.Append("transit-area-id", types.YLeaf{"TransitAreaId", virtualLink.TransitAreaId})
    virtualLink.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", virtualLink.InterfaceName})
    virtualLink.EntityData.Leafs.Append("virtual-link-cost", types.YLeaf{"VirtualLinkCost", virtualLink.VirtualLinkCost})
    virtualLink.EntityData.Leafs.Append("virual-link-transmission-delay", types.YLeaf{"VirualLinkTransmissionDelay", virtualLink.VirualLinkTransmissionDelay})
    virtualLink.EntityData.Leafs.Append("virtual-link-hello-interval", types.YLeaf{"VirtualLinkHelloInterval", virtualLink.VirtualLinkHelloInterval})
    virtualLink.EntityData.Leafs.Append("virtual-link-dead-interval", types.YLeaf{"VirtualLinkDeadInterval", virtualLink.VirtualLinkDeadInterval})
    virtualLink.EntityData.Leafs.Append("virtual-link-wait-interval", types.YLeaf{"VirtualLinkWaitInterval", virtualLink.VirtualLinkWaitInterval})
    virtualLink.EntityData.Leafs.Append("virtual-link-retransmission-interval", types.YLeaf{"VirtualLinkRetransmissionInterval", virtualLink.VirtualLinkRetransmissionInterval})
    virtualLink.EntityData.Leafs.Append("virtual-link-next-hello", types.YLeaf{"VirtualLinkNextHello", virtualLink.VirtualLinkNextHello})
    virtualLink.EntityData.Leafs.Append("is-virtual-link-passive", types.YLeaf{"IsVirtualLinkPassive", virtualLink.IsVirtualLinkPassive})
    virtualLink.EntityData.Leafs.Append("is-virtual-link-authentication-enabled", types.YLeaf{"IsVirtualLinkAuthenticationEnabled", virtualLink.IsVirtualLinkAuthenticationEnabled})
    virtualLink.EntityData.Leafs.Append("virtual-link-authentication-spi", types.YLeaf{"VirtualLinkAuthenticationSpi", virtualLink.VirtualLinkAuthenticationSpi})
    virtualLink.EntityData.Leafs.Append("virtual-link-authentication-transmit", types.YLeaf{"VirtualLinkAuthenticationTransmit", virtualLink.VirtualLinkAuthenticationTransmit})
    virtualLink.EntityData.Leafs.Append("is-virtual-link-encryption-enabled", types.YLeaf{"IsVirtualLinkEncryptionEnabled", virtualLink.IsVirtualLinkEncryptionEnabled})
    virtualLink.EntityData.Leafs.Append("virtual-link-encryption-spi", types.YLeaf{"VirtualLinkEncryptionSpi", virtualLink.VirtualLinkEncryptionSpi})
    virtualLink.EntityData.Leafs.Append("virtual-link-encryption-transmitted", types.YLeaf{"VirtualLinkEncryptionTransmitted", virtualLink.VirtualLinkEncryptionTransmitted})
    virtualLink.EntityData.Leafs.Append("virtual-link-encrypted-authentication-transmitted", types.YLeaf{"VirtualLinkEncryptedAuthenticationTransmitted", virtualLink.VirtualLinkEncryptedAuthenticationTransmitted})

    virtualLink.EntityData.YListKeys = []string {}

    return &(virtualLink.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor
// Neighbor information 
type Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true, hello suppressed . The type is bool.
    IsVirtualLinkHelloSuppressed interface{}

    // OSPF interface state for the virtual link. The type is
    // Ospfv3InterfaceState.
    VirtualLinkState interface{}

    // Virtual link retransmission information .
    VirtualLinkRetransmission Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission
}

func (virtualLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor) GetEntityData() *types.CommonEntityData {
    virtualLinkNeighbor.EntityData.YFilter = virtualLinkNeighbor.YFilter
    virtualLinkNeighbor.EntityData.YangName = "virtual-link-neighbor"
    virtualLinkNeighbor.EntityData.BundleName = "cisco_ios_xr"
    virtualLinkNeighbor.EntityData.ParentYangName = "virtual-link"
    virtualLinkNeighbor.EntityData.SegmentPath = "virtual-link-neighbor"
    virtualLinkNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/virtual-link/" + virtualLinkNeighbor.EntityData.SegmentPath
    virtualLinkNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinkNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinkNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinkNeighbor.EntityData.Children = types.NewOrderedMap()
    virtualLinkNeighbor.EntityData.Children.Append("virtual-link-retransmission", types.YChild{"VirtualLinkRetransmission", &virtualLinkNeighbor.VirtualLinkRetransmission})
    virtualLinkNeighbor.EntityData.Leafs = types.NewOrderedMap()
    virtualLinkNeighbor.EntityData.Leafs.Append("is-virtual-link-hello-suppressed", types.YLeaf{"IsVirtualLinkHelloSuppressed", virtualLinkNeighbor.IsVirtualLinkHelloSuppressed})
    virtualLinkNeighbor.EntityData.Leafs.Append("virtual-link-state", types.YLeaf{"VirtualLinkState", virtualLinkNeighbor.VirtualLinkState})

    virtualLinkNeighbor.EntityData.YListKeys = []string {}

    return &(virtualLinkNeighbor.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission
// Virtual link retransmission information 
type Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (virtualLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetEntityData() *types.CommonEntityData {
    virtualLinkRetransmission.EntityData.YFilter = virtualLinkRetransmission.YFilter
    virtualLinkRetransmission.EntityData.YangName = "virtual-link-retransmission"
    virtualLinkRetransmission.EntityData.BundleName = "cisco_ios_xr"
    virtualLinkRetransmission.EntityData.ParentYangName = "virtual-link-neighbor"
    virtualLinkRetransmission.EntityData.SegmentPath = "virtual-link-retransmission"
    virtualLinkRetransmission.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/virtual-link/virtual-link-neighbor/" + virtualLinkRetransmission.EntityData.SegmentPath
    virtualLinkRetransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinkRetransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinkRetransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinkRetransmission.EntityData.Children = types.NewOrderedMap()
    virtualLinkRetransmission.EntityData.Leafs = types.NewOrderedMap()
    virtualLinkRetransmission.EntityData.Leafs.Append("database-descriptor-retransmissions", types.YLeaf{"DatabaseDescriptorRetransmissions", virtualLinkRetransmission.DatabaseDescriptorRetransmissions})
    virtualLinkRetransmission.EntityData.Leafs.Append("area-flood-index", types.YLeaf{"AreaFloodIndex", virtualLinkRetransmission.AreaFloodIndex})
    virtualLinkRetransmission.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", virtualLinkRetransmission.AsFloodIndex})
    virtualLinkRetransmission.EntityData.Leafs.Append("link-flood-index", types.YLeaf{"LinkFloodIndex", virtualLinkRetransmission.LinkFloodIndex})
    virtualLinkRetransmission.EntityData.Leafs.Append("neighbor-retransmissions", types.YLeaf{"NeighborRetransmissions", virtualLinkRetransmission.NeighborRetransmissions})
    virtualLinkRetransmission.EntityData.Leafs.Append("retransmissions", types.YLeaf{"Retransmissions", virtualLinkRetransmission.Retransmissions})
    virtualLinkRetransmission.EntityData.Leafs.Append("area-first-flood", types.YLeaf{"AreaFirstFlood", virtualLinkRetransmission.AreaFirstFlood})
    virtualLinkRetransmission.EntityData.Leafs.Append("area-first-flood-index", types.YLeaf{"AreaFirstFloodIndex", virtualLinkRetransmission.AreaFirstFloodIndex})
    virtualLinkRetransmission.EntityData.Leafs.Append("as-first-flood", types.YLeaf{"AsFirstFlood", virtualLinkRetransmission.AsFirstFlood})
    virtualLinkRetransmission.EntityData.Leafs.Append("as-first-flood-index", types.YLeaf{"AsFirstFloodIndex", virtualLinkRetransmission.AsFirstFloodIndex})
    virtualLinkRetransmission.EntityData.Leafs.Append("link-first-flood", types.YLeaf{"LinkFirstFlood", virtualLinkRetransmission.LinkFirstFlood})
    virtualLinkRetransmission.EntityData.Leafs.Append("link-first-flood-index", types.YLeaf{"LinkFirstFloodIndex", virtualLinkRetransmission.LinkFirstFloodIndex})
    virtualLinkRetransmission.EntityData.Leafs.Append("area-next-flood", types.YLeaf{"AreaNextFlood", virtualLinkRetransmission.AreaNextFlood})
    virtualLinkRetransmission.EntityData.Leafs.Append("area-next-flood-index", types.YLeaf{"AreaNextFloodIndex", virtualLinkRetransmission.AreaNextFloodIndex})
    virtualLinkRetransmission.EntityData.Leafs.Append("as-next-flood", types.YLeaf{"AsNextFlood", virtualLinkRetransmission.AsNextFlood})
    virtualLinkRetransmission.EntityData.Leafs.Append("as-next-flood-index", types.YLeaf{"AsNextFloodIndex", virtualLinkRetransmission.AsNextFloodIndex})
    virtualLinkRetransmission.EntityData.Leafs.Append("link-next-flood", types.YLeaf{"LinkNextFlood", virtualLinkRetransmission.LinkNextFlood})
    virtualLinkRetransmission.EntityData.Leafs.Append("link-next-flood-index", types.YLeaf{"LinkNextFloodIndex", virtualLinkRetransmission.LinkNextFloodIndex})
    virtualLinkRetransmission.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", virtualLinkRetransmission.LastRetransmissionLength})
    virtualLinkRetransmission.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", virtualLinkRetransmission.MaximumRetransmissionLength})
    virtualLinkRetransmission.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", virtualLinkRetransmission.LastRetransmissionTime})
    virtualLinkRetransmission.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", virtualLinkRetransmission.MaximumRetransmissionTime})
    virtualLinkRetransmission.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", virtualLinkRetransmission.LsaRetransmissionTimer})

    virtualLinkRetransmission.EntityData.YListKeys = []string {}

    return &(virtualLinkRetransmission.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable
// OSPFv3 flood list information table for all
// areas
type Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 flood list information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood.
    Flood []*Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood
}

func (floodListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable) GetEntityData() *types.CommonEntityData {
    floodListProcessTable.EntityData.YFilter = floodListProcessTable.YFilter
    floodListProcessTable.EntityData.YangName = "flood-list-process-table"
    floodListProcessTable.EntityData.BundleName = "cisco_ios_xr"
    floodListProcessTable.EntityData.ParentYangName = "vrf"
    floodListProcessTable.EntityData.SegmentPath = "flood-list-process-table"
    floodListProcessTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + floodListProcessTable.EntityData.SegmentPath
    floodListProcessTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    floodListProcessTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    floodListProcessTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    floodListProcessTable.EntityData.Children = types.NewOrderedMap()
    floodListProcessTable.EntityData.Children.Append("flood", types.YChild{"Flood", nil})
    for i := range floodListProcessTable.Flood {
        floodListProcessTable.EntityData.Children.Append(types.GetSegmentPath(floodListProcessTable.Flood[i]), types.YChild{"Flood", floodListProcessTable.Flood[i]})
    }
    floodListProcessTable.EntityData.Leafs = types.NewOrderedMap()

    floodListProcessTable.EntityData.YListKeys = []string {}

    return &(floodListProcessTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood
// OSPFv3 flood list information
type Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Time until next LS transmission (ms) . The type is interface{} with range:
    // 0..4294967295.
    LsTransmissionTimer interface{}

    // Number of LSAs currently being flooded . The type is interface{} with
    // range: 0..4294967295.
    QueueLength interface{}

    // Link floodlist. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood.
    LinkFlood []*Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood

    // Area scope floodlist. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood.
    AreaFlood []*Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood

    // AS scope floodlist. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood.
    AsFlood []*Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood
}

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood) GetEntityData() *types.CommonEntityData {
    flood.EntityData.YFilter = flood.YFilter
    flood.EntityData.YangName = "flood"
    flood.EntityData.BundleName = "cisco_ios_xr"
    flood.EntityData.ParentYangName = "flood-list-process-table"
    flood.EntityData.SegmentPath = "flood" + types.AddKeyToken(flood.InterfaceName, "interface-name")
    flood.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/flood-list-process-table/" + flood.EntityData.SegmentPath
    flood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flood.EntityData.Children = types.NewOrderedMap()
    flood.EntityData.Children.Append("link-flood", types.YChild{"LinkFlood", nil})
    for i := range flood.LinkFlood {
        types.SetYListKey(flood.LinkFlood[i], i)
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.LinkFlood[i]), types.YChild{"LinkFlood", flood.LinkFlood[i]})
    }
    flood.EntityData.Children.Append("area-flood", types.YChild{"AreaFlood", nil})
    for i := range flood.AreaFlood {
        types.SetYListKey(flood.AreaFlood[i], i)
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.AreaFlood[i]), types.YChild{"AreaFlood", flood.AreaFlood[i]})
    }
    flood.EntityData.Children.Append("as-flood", types.YChild{"AsFlood", nil})
    for i := range flood.AsFlood {
        types.SetYListKey(flood.AsFlood[i], i)
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.AsFlood[i]), types.YChild{"AsFlood", flood.AsFlood[i]})
    }
    flood.EntityData.Leafs = types.NewOrderedMap()
    flood.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", flood.InterfaceName})
    flood.EntityData.Leafs.Append("ls-transmission-timer", types.YLeaf{"LsTransmissionTimer", flood.LsTransmissionTimer})
    flood.EntityData.Leafs.Append("queue-length", types.YLeaf{"QueueLength", flood.QueueLength})

    flood.EntityData.YListKeys = []string {"InterfaceName"}

    return &(flood.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood
// Link floodlist
type Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood) GetEntityData() *types.CommonEntityData {
    linkFlood.EntityData.YFilter = linkFlood.YFilter
    linkFlood.EntityData.YangName = "link-flood"
    linkFlood.EntityData.BundleName = "cisco_ios_xr"
    linkFlood.EntityData.ParentYangName = "flood"
    linkFlood.EntityData.SegmentPath = "link-flood" + types.AddNoKeyToken(linkFlood)
    linkFlood.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/flood-list-process-table/flood/" + linkFlood.EntityData.SegmentPath
    linkFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkFlood.EntityData.Children = types.NewOrderedMap()
    linkFlood.EntityData.Leafs = types.NewOrderedMap()
    linkFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", linkFlood.HeaderLsaType})
    linkFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", linkFlood.HeaderLsaAge})
    linkFlood.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", linkFlood.HeaderLsaId})
    linkFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", linkFlood.HeaderAdvertisingRouter})
    linkFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", linkFlood.HeaderSequenceNumber})

    linkFlood.EntityData.YListKeys = []string {}

    return &(linkFlood.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood
// Area scope floodlist
type Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood) GetEntityData() *types.CommonEntityData {
    areaFlood.EntityData.YFilter = areaFlood.YFilter
    areaFlood.EntityData.YangName = "area-flood"
    areaFlood.EntityData.BundleName = "cisco_ios_xr"
    areaFlood.EntityData.ParentYangName = "flood"
    areaFlood.EntityData.SegmentPath = "area-flood" + types.AddNoKeyToken(areaFlood)
    areaFlood.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/flood-list-process-table/flood/" + areaFlood.EntityData.SegmentPath
    areaFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaFlood.EntityData.Children = types.NewOrderedMap()
    areaFlood.EntityData.Leafs = types.NewOrderedMap()
    areaFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", areaFlood.HeaderLsaType})
    areaFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", areaFlood.HeaderLsaAge})
    areaFlood.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", areaFlood.HeaderLsaId})
    areaFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", areaFlood.HeaderAdvertisingRouter})
    areaFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", areaFlood.HeaderSequenceNumber})

    areaFlood.EntityData.YListKeys = []string {}

    return &(areaFlood.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood
// AS scope floodlist
type Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood) GetEntityData() *types.CommonEntityData {
    asFlood.EntityData.YFilter = asFlood.YFilter
    asFlood.EntityData.YangName = "as-flood"
    asFlood.EntityData.BundleName = "cisco_ios_xr"
    asFlood.EntityData.ParentYangName = "flood"
    asFlood.EntityData.SegmentPath = "as-flood" + types.AddNoKeyToken(asFlood)
    asFlood.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/flood-list-process-table/flood/" + asFlood.EntityData.SegmentPath
    asFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asFlood.EntityData.Children = types.NewOrderedMap()
    asFlood.EntityData.Leafs = types.NewOrderedMap()
    asFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", asFlood.HeaderLsaType})
    asFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", asFlood.HeaderLsaAge})
    asFlood.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", asFlood.HeaderLsaId})
    asFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", asFlood.HeaderAdvertisingRouter})
    asFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", asFlood.HeaderSequenceNumber})

    asFlood.EntityData.YListKeys = []string {}

    return &(asFlood.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary
// Summarize OSPFv3 local RIB tables
type Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route summary of a route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Intra route summary . The type is interface{} with range: 0..4294967295.
    IntraAreaRoute interface{}

    // Inter route summary . The type is interface{} with range: 0..4294967295.
    InterAreaRoute interface{}

    // Extern 1 route summary . The type is interface{} with range: 0..4294967295.
    ExternOneRoute interface{}

    // Extern 2 route summary . The type is interface{} with range: 0..4294967295.
    ExternTwoRoute interface{}

    // NSSA 1 route summary . The type is interface{} with range: 0..4294967295.
    NssaOneRoute interface{}

    // NSSA 2 route summary . The type is interface{} with range: 0..4294967295.
    NssaTwoRoute interface{}

    // Total route summary . The type is interface{} with range: 0..4294967295.
    TotalSentRoute interface{}

    // Route connected . The type is interface{} with range: 0..4294967295.
    RouteConnected interface{}

    // Redistribution route summary . The type is interface{} with range:
    // 0..4294967295.
    RedistributionRoute interface{}

    // Total route received summary. The type is interface{} with range:
    // 0..4294967295.
    TotalReceivedRoute interface{}
}

func (routeSummary *Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary) GetEntityData() *types.CommonEntityData {
    routeSummary.EntityData.YFilter = routeSummary.YFilter
    routeSummary.EntityData.YangName = "route-summary"
    routeSummary.EntityData.BundleName = "cisco_ios_xr"
    routeSummary.EntityData.ParentYangName = "vrf"
    routeSummary.EntityData.SegmentPath = "route-summary"
    routeSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + routeSummary.EntityData.SegmentPath
    routeSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeSummary.EntityData.Children = types.NewOrderedMap()
    routeSummary.EntityData.Leafs = types.NewOrderedMap()
    routeSummary.EntityData.Leafs.Append("route-id", types.YLeaf{"RouteId", routeSummary.RouteId})
    routeSummary.EntityData.Leafs.Append("intra-area-route", types.YLeaf{"IntraAreaRoute", routeSummary.IntraAreaRoute})
    routeSummary.EntityData.Leafs.Append("inter-area-route", types.YLeaf{"InterAreaRoute", routeSummary.InterAreaRoute})
    routeSummary.EntityData.Leafs.Append("extern-one-route", types.YLeaf{"ExternOneRoute", routeSummary.ExternOneRoute})
    routeSummary.EntityData.Leafs.Append("extern-two-route", types.YLeaf{"ExternTwoRoute", routeSummary.ExternTwoRoute})
    routeSummary.EntityData.Leafs.Append("nssa-one-route", types.YLeaf{"NssaOneRoute", routeSummary.NssaOneRoute})
    routeSummary.EntityData.Leafs.Append("nssa-two-route", types.YLeaf{"NssaTwoRoute", routeSummary.NssaTwoRoute})
    routeSummary.EntityData.Leafs.Append("total-sent-route", types.YLeaf{"TotalSentRoute", routeSummary.TotalSentRoute})
    routeSummary.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", routeSummary.RouteConnected})
    routeSummary.EntityData.Leafs.Append("redistribution-route", types.YLeaf{"RedistributionRoute", routeSummary.RedistributionRoute})
    routeSummary.EntityData.Leafs.Append("total-received-route", types.YLeaf{"TotalReceivedRoute", routeSummary.TotalReceivedRoute})

    routeSummary.EntityData.YListKeys = []string {}

    return &(routeSummary.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas
// OSPFv3 area table
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per-area information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area.
    Area []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area
}

func (areas *Ospfv3_Processes_Process_Vrfs_Vrf_Areas) GetEntityData() *types.CommonEntityData {
    areas.EntityData.YFilter = areas.YFilter
    areas.EntityData.YangName = "areas"
    areas.EntityData.BundleName = "cisco_ios_xr"
    areas.EntityData.ParentYangName = "vrf"
    areas.EntityData.SegmentPath = "areas"
    areas.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + areas.EntityData.SegmentPath
    areas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areas.EntityData.Children = types.NewOrderedMap()
    areas.EntityData.Children.Append("area", types.YChild{"Area", nil})
    for i := range areas.Area {
        areas.EntityData.Children.Append(types.GetSegmentPath(areas.Area[i]), types.YChild{"Area", areas.Area[i]})
    }
    areas.EntityData.Leafs = types.NewOrderedMap()

    areas.EntityData.YListKeys = []string {}

    return &(areas.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area
// Per-area information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Area ID. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // OSPFv3 area neighbor information table.
    NeighborDetailTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable

    // OSPFv3 interface brief information table for an area.
    InterfaceBriefTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable

    // OSPFv3 request list information in an area.
    RequestListTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable

    // OSPFv3 neighbor information table.
    NeighborTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable

    // OSPFv3 interface information table for an area.
    InterfaceTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable

    // OSPFv3 flood list information table for an area.
    FloodListTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable

    // OSPFv3 retransmission list information table in an area.
    RetransmissionListTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable

    // OSPF Link State Database.
    DatabaseTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable

    // Database summary table.
    DatabaseSummaryTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable
}

func (area *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area) GetEntityData() *types.CommonEntityData {
    area.EntityData.YFilter = area.YFilter
    area.EntityData.YangName = "area"
    area.EntityData.BundleName = "cisco_ios_xr"
    area.EntityData.ParentYangName = "areas"
    area.EntityData.SegmentPath = "area" + types.AddKeyToken(area.AreaId, "area-id")
    area.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/" + area.EntityData.SegmentPath
    area.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    area.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    area.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    area.EntityData.Children = types.NewOrderedMap()
    area.EntityData.Children.Append("neighbor-detail-table", types.YChild{"NeighborDetailTable", &area.NeighborDetailTable})
    area.EntityData.Children.Append("interface-brief-table", types.YChild{"InterfaceBriefTable", &area.InterfaceBriefTable})
    area.EntityData.Children.Append("request-list-table", types.YChild{"RequestListTable", &area.RequestListTable})
    area.EntityData.Children.Append("neighbor-table", types.YChild{"NeighborTable", &area.NeighborTable})
    area.EntityData.Children.Append("interface-table", types.YChild{"InterfaceTable", &area.InterfaceTable})
    area.EntityData.Children.Append("flood-list-table", types.YChild{"FloodListTable", &area.FloodListTable})
    area.EntityData.Children.Append("retransmission-list-table", types.YChild{"RetransmissionListTable", &area.RetransmissionListTable})
    area.EntityData.Children.Append("database-table", types.YChild{"DatabaseTable", &area.DatabaseTable})
    area.EntityData.Children.Append("database-summary-table", types.YChild{"DatabaseSummaryTable", &area.DatabaseSummaryTable})
    area.EntityData.Leafs = types.NewOrderedMap()
    area.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", area.AreaId})

    area.EntityData.YListKeys = []string {"AreaId"}

    return &(area.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable
// OSPFv3 area neighbor information table
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 neighbor detail information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail.
    NeighborDetail []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail
}

func (neighborDetailTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable) GetEntityData() *types.CommonEntityData {
    neighborDetailTable.EntityData.YFilter = neighborDetailTable.YFilter
    neighborDetailTable.EntityData.YangName = "neighbor-detail-table"
    neighborDetailTable.EntityData.BundleName = "cisco_ios_xr"
    neighborDetailTable.EntityData.ParentYangName = "area"
    neighborDetailTable.EntityData.SegmentPath = "neighbor-detail-table"
    neighborDetailTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/" + neighborDetailTable.EntityData.SegmentPath
    neighborDetailTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetailTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetailTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetailTable.EntityData.Children = types.NewOrderedMap()
    neighborDetailTable.EntityData.Children.Append("neighbor-detail", types.YChild{"NeighborDetail", nil})
    for i := range neighborDetailTable.NeighborDetail {
        types.SetYListKey(neighborDetailTable.NeighborDetail[i], i)
        neighborDetailTable.EntityData.Children.Append(types.GetSegmentPath(neighborDetailTable.NeighborDetail[i]), types.YChild{"NeighborDetail", neighborDetailTable.NeighborDetail[i]})
    }
    neighborDetailTable.EntityData.Leafs = types.NewOrderedMap()

    neighborDetailTable.EntityData.YListKeys = []string {}

    return &(neighborDetailTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail
// OSPFv3 neighbor detail information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Neighbor interface ID. The type is interface{} with range: 0..4294967295.
    NeighborInterfaceId interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is Ospfv3NeighborState.
    NeighborState interface{}

    // Designated router . The type is string with length: 0..9.
    NeighborDesignatedRouter interface{}

    // Time until neighbor's dead timer expires (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborUpTime interface{}

    // Neighbor virtual link id . The type is interface{} with range:
    // 0..4294967295.
    NeighborVirtualLinkId interface{}

    // If true, neighbor is on a virtual link . The type is bool.
    IsNeighborVirtualLink interface{}

    // Neighbor sham link id . The type is interface{} with range: 0..4294967295.
    NeighborShamLinkId interface{}

    // If true, neighbor is on a sham link . The type is bool.
    IsNeighborShamLink interface{}

    // Detailed OSPFv3 neighbor information .
    NeighborDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail

    // Neighbor BFD information.
    NeighborBfdInfo Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetEntityData() *types.CommonEntityData {
    neighborDetail.EntityData.YFilter = neighborDetail.YFilter
    neighborDetail.EntityData.YangName = "neighbor-detail"
    neighborDetail.EntityData.BundleName = "cisco_ios_xr"
    neighborDetail.EntityData.ParentYangName = "neighbor-detail-table"
    neighborDetail.EntityData.SegmentPath = "neighbor-detail" + types.AddNoKeyToken(neighborDetail)
    neighborDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/neighbor-detail-table/" + neighborDetail.EntityData.SegmentPath
    neighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetail.EntityData.Children = types.NewOrderedMap()
    neighborDetail.EntityData.Children.Append("neighbor-detail", types.YChild{"NeighborDetail", &neighborDetail.NeighborDetail})
    neighborDetail.EntityData.Children.Append("neighbor-bfd-info", types.YChild{"NeighborBfdInfo", &neighborDetail.NeighborBfdInfo})
    neighborDetail.EntityData.Leafs = types.NewOrderedMap()
    neighborDetail.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", neighborDetail.InterfaceName})
    neighborDetail.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighborDetail.NeighborAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-address-xr", types.YLeaf{"NeighborAddressXr", neighborDetail.NeighborAddressXr})
    neighborDetail.EntityData.Leafs.Append("neighbor-interface-id", types.YLeaf{"NeighborInterfaceId", neighborDetail.NeighborInterfaceId})
    neighborDetail.EntityData.Leafs.Append("neighbor-dr-priority", types.YLeaf{"NeighborDrPriority", neighborDetail.NeighborDrPriority})
    neighborDetail.EntityData.Leafs.Append("neighbor-state", types.YLeaf{"NeighborState", neighborDetail.NeighborState})
    neighborDetail.EntityData.Leafs.Append("neighbor-designated-router", types.YLeaf{"NeighborDesignatedRouter", neighborDetail.NeighborDesignatedRouter})
    neighborDetail.EntityData.Leafs.Append("neighbor-dead-timer", types.YLeaf{"NeighborDeadTimer", neighborDetail.NeighborDeadTimer})
    neighborDetail.EntityData.Leafs.Append("neighbor-up-time", types.YLeaf{"NeighborUpTime", neighborDetail.NeighborUpTime})
    neighborDetail.EntityData.Leafs.Append("neighbor-virtual-link-id", types.YLeaf{"NeighborVirtualLinkId", neighborDetail.NeighborVirtualLinkId})
    neighborDetail.EntityData.Leafs.Append("is-neighbor-virtual-link", types.YLeaf{"IsNeighborVirtualLink", neighborDetail.IsNeighborVirtualLink})
    neighborDetail.EntityData.Leafs.Append("neighbor-sham-link-id", types.YLeaf{"NeighborShamLinkId", neighborDetail.NeighborShamLinkId})
    neighborDetail.EntityData.Leafs.Append("is-neighbor-sham-link", types.YLeaf{"IsNeighborShamLink", neighborDetail.IsNeighborShamLink})

    neighborDetail.EntityData.YListKeys = []string {}

    return &(neighborDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail
// Detailed OSPFv3 neighbor information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of state changes . The type is interface{} with range: 0..65535.
    StateChanges interface{}

    // Cost of path to this neighbor . The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs . The type is bool.
    IsNeighborFiltered interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Ospfv3Interface.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // Remaining time when ignore timer is running . The type is interface{} with
    // range: 0..4294967295.
    NeighborIgnoreTimer interface{}

    // This is bitmask of neighbor's option field received . The type is
    // interface{} with range: 0..4294967295.
    NeighborOption interface{}

    // Number of pending events . The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // Retransmission information with this neighbor.
    NeighborRetransmission Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetEntityData() *types.CommonEntityData {
    neighborDetail.EntityData.YFilter = neighborDetail.YFilter
    neighborDetail.EntityData.YangName = "neighbor-detail"
    neighborDetail.EntityData.BundleName = "cisco_ios_xr"
    neighborDetail.EntityData.ParentYangName = "neighbor-detail"
    neighborDetail.EntityData.SegmentPath = "neighbor-detail"
    neighborDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/neighbor-detail-table/neighbor-detail/" + neighborDetail.EntityData.SegmentPath
    neighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetail.EntityData.Children = types.NewOrderedMap()
    neighborDetail.EntityData.Children.Append("neighbor-retransmission", types.YChild{"NeighborRetransmission", &neighborDetail.NeighborRetransmission})
    neighborDetail.EntityData.Leafs = types.NewOrderedMap()
    neighborDetail.EntityData.Leafs.Append("state-changes", types.YLeaf{"StateChanges", neighborDetail.StateChanges})
    neighborDetail.EntityData.Leafs.Append("neighbor-cost", types.YLeaf{"NeighborCost", neighborDetail.NeighborCost})
    neighborDetail.EntityData.Leafs.Append("is-neighbor-filtered", types.YLeaf{"IsNeighborFiltered", neighborDetail.IsNeighborFiltered})
    neighborDetail.EntityData.Leafs.Append("neighbor-designated-router-address", types.YLeaf{"NeighborDesignatedRouterAddress", neighborDetail.NeighborDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-backup-designated-router-address", types.YLeaf{"NeighborBackupDesignatedRouterAddress", neighborDetail.NeighborBackupDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("interface-type", types.YLeaf{"InterfaceType", neighborDetail.InterfaceType})
    neighborDetail.EntityData.Leafs.Append("poll-interval", types.YLeaf{"PollInterval", neighborDetail.PollInterval})
    neighborDetail.EntityData.Leafs.Append("next-poll-interval", types.YLeaf{"NextPollInterval", neighborDetail.NextPollInterval})
    neighborDetail.EntityData.Leafs.Append("neighbor-ignore-timer", types.YLeaf{"NeighborIgnoreTimer", neighborDetail.NeighborIgnoreTimer})
    neighborDetail.EntityData.Leafs.Append("neighbor-option", types.YLeaf{"NeighborOption", neighborDetail.NeighborOption})
    neighborDetail.EntityData.Leafs.Append("pending-events", types.YLeaf{"PendingEvents", neighborDetail.PendingEvents})

    neighborDetail.EntityData.YListKeys = []string {}

    return &(neighborDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission
// Retransmission information with this neighbor
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetEntityData() *types.CommonEntityData {
    neighborRetransmission.EntityData.YFilter = neighborRetransmission.YFilter
    neighborRetransmission.EntityData.YangName = "neighbor-retransmission"
    neighborRetransmission.EntityData.BundleName = "cisco_ios_xr"
    neighborRetransmission.EntityData.ParentYangName = "neighbor-detail"
    neighborRetransmission.EntityData.SegmentPath = "neighbor-retransmission"
    neighborRetransmission.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/neighbor-detail-table/neighbor-detail/neighbor-detail/" + neighborRetransmission.EntityData.SegmentPath
    neighborRetransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborRetransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborRetransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborRetransmission.EntityData.Children = types.NewOrderedMap()
    neighborRetransmission.EntityData.Leafs = types.NewOrderedMap()
    neighborRetransmission.EntityData.Leafs.Append("database-descriptor-retransmissions", types.YLeaf{"DatabaseDescriptorRetransmissions", neighborRetransmission.DatabaseDescriptorRetransmissions})
    neighborRetransmission.EntityData.Leafs.Append("area-flood-index", types.YLeaf{"AreaFloodIndex", neighborRetransmission.AreaFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", neighborRetransmission.AsFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-flood-index", types.YLeaf{"LinkFloodIndex", neighborRetransmission.LinkFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("neighbor-retransmissions", types.YLeaf{"NeighborRetransmissions", neighborRetransmission.NeighborRetransmissions})
    neighborRetransmission.EntityData.Leafs.Append("retransmissions", types.YLeaf{"Retransmissions", neighborRetransmission.Retransmissions})
    neighborRetransmission.EntityData.Leafs.Append("area-first-flood", types.YLeaf{"AreaFirstFlood", neighborRetransmission.AreaFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("area-first-flood-index", types.YLeaf{"AreaFirstFloodIndex", neighborRetransmission.AreaFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-first-flood", types.YLeaf{"AsFirstFlood", neighborRetransmission.AsFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("as-first-flood-index", types.YLeaf{"AsFirstFloodIndex", neighborRetransmission.AsFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-first-flood", types.YLeaf{"LinkFirstFlood", neighborRetransmission.LinkFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("link-first-flood-index", types.YLeaf{"LinkFirstFloodIndex", neighborRetransmission.LinkFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("area-next-flood", types.YLeaf{"AreaNextFlood", neighborRetransmission.AreaNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("area-next-flood-index", types.YLeaf{"AreaNextFloodIndex", neighborRetransmission.AreaNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-next-flood", types.YLeaf{"AsNextFlood", neighborRetransmission.AsNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("as-next-flood-index", types.YLeaf{"AsNextFloodIndex", neighborRetransmission.AsNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-next-flood", types.YLeaf{"LinkNextFlood", neighborRetransmission.LinkNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("link-next-flood-index", types.YLeaf{"LinkNextFloodIndex", neighborRetransmission.LinkNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", neighborRetransmission.LastRetransmissionLength})
    neighborRetransmission.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", neighborRetransmission.MaximumRetransmissionLength})
    neighborRetransmission.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", neighborRetransmission.LastRetransmissionTime})
    neighborRetransmission.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", neighborRetransmission.MaximumRetransmissionTime})
    neighborRetransmission.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", neighborRetransmission.LsaRetransmissionTimer})

    neighborRetransmission.EntityData.YListKeys = []string {}

    return &(neighborRetransmission.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo
// Neighbor BFD information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetEntityData() *types.CommonEntityData {
    neighborBfdInfo.EntityData.YFilter = neighborBfdInfo.YFilter
    neighborBfdInfo.EntityData.YangName = "neighbor-bfd-info"
    neighborBfdInfo.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInfo.EntityData.ParentYangName = "neighbor-detail"
    neighborBfdInfo.EntityData.SegmentPath = "neighbor-bfd-info"
    neighborBfdInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/neighbor-detail-table/neighbor-detail/" + neighborBfdInfo.EntityData.SegmentPath
    neighborBfdInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInfo.EntityData.Children = types.NewOrderedMap()
    neighborBfdInfo.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInfo.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInfo.BfdIntfEnableMode})
    neighborBfdInfo.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInfo.BfdStatusFlag})

    neighborBfdInfo.EntityData.YListKeys = []string {}

    return &(neighborBfdInfo.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable
// OSPFv3 interface brief information table for
// an area
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface brief information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief.
    InterfaceBrief []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief
}

func (interfaceBriefTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable) GetEntityData() *types.CommonEntityData {
    interfaceBriefTable.EntityData.YFilter = interfaceBriefTable.YFilter
    interfaceBriefTable.EntityData.YangName = "interface-brief-table"
    interfaceBriefTable.EntityData.BundleName = "cisco_ios_xr"
    interfaceBriefTable.EntityData.ParentYangName = "area"
    interfaceBriefTable.EntityData.SegmentPath = "interface-brief-table"
    interfaceBriefTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/" + interfaceBriefTable.EntityData.SegmentPath
    interfaceBriefTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBriefTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBriefTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBriefTable.EntityData.Children = types.NewOrderedMap()
    interfaceBriefTable.EntityData.Children.Append("interface-brief", types.YChild{"InterfaceBrief", nil})
    for i := range interfaceBriefTable.InterfaceBrief {
        interfaceBriefTable.EntityData.Children.Append(types.GetSegmentPath(interfaceBriefTable.InterfaceBrief[i]), types.YChild{"InterfaceBrief", interfaceBriefTable.InterfaceBrief[i]})
    }
    interfaceBriefTable.EntityData.Leafs = types.NewOrderedMap()

    interfaceBriefTable.EntityData.YListKeys = []string {}

    return &(interfaceBriefTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief
// Interface brief information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is Ospfv3InterfaceState.
    OspfInterfaceState interface{}

    // Total number of neighbors . The type is interface{} with range: 0..65535.
    InterfaceNeighbors interface{}

    // Total number of adjacent neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjacentNeighbors interface{}

    // Network type. The type is Ospfv3Interface.
    NetworkType interface{}
}

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetEntityData() *types.CommonEntityData {
    interfaceBrief.EntityData.YFilter = interfaceBrief.YFilter
    interfaceBrief.EntityData.YangName = "interface-brief"
    interfaceBrief.EntityData.BundleName = "cisco_ios_xr"
    interfaceBrief.EntityData.ParentYangName = "interface-brief-table"
    interfaceBrief.EntityData.SegmentPath = "interface-brief" + types.AddKeyToken(interfaceBrief.InterfaceName, "interface-name")
    interfaceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/interface-brief-table/" + interfaceBrief.EntityData.SegmentPath
    interfaceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBrief.EntityData.Children = types.NewOrderedMap()
    interfaceBrief.EntityData.Leafs = types.NewOrderedMap()
    interfaceBrief.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceBrief.InterfaceName})
    interfaceBrief.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", interfaceBrief.InterfaceAddress})
    interfaceBrief.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", interfaceBrief.InterfaceLinkCost})
    interfaceBrief.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", interfaceBrief.OspfInterfaceState})
    interfaceBrief.EntityData.Leafs.Append("interface-neighbors", types.YLeaf{"InterfaceNeighbors", interfaceBrief.InterfaceNeighbors})
    interfaceBrief.EntityData.Leafs.Append("interface-adjacent-neighbors", types.YLeaf{"InterfaceAdjacentNeighbors", interfaceBrief.InterfaceAdjacentNeighbors})
    interfaceBrief.EntityData.Leafs.Append("network-type", types.YLeaf{"NetworkType", interfaceBrief.NetworkType})

    interfaceBrief.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceBrief.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable
// OSPFv3 request list information in an area
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 request list information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request.
    Request []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request
}

func (requestListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable) GetEntityData() *types.CommonEntityData {
    requestListTable.EntityData.YFilter = requestListTable.YFilter
    requestListTable.EntityData.YangName = "request-list-table"
    requestListTable.EntityData.BundleName = "cisco_ios_xr"
    requestListTable.EntityData.ParentYangName = "area"
    requestListTable.EntityData.SegmentPath = "request-list-table"
    requestListTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/" + requestListTable.EntityData.SegmentPath
    requestListTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    requestListTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    requestListTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    requestListTable.EntityData.Children = types.NewOrderedMap()
    requestListTable.EntityData.Children.Append("request", types.YChild{"Request", nil})
    for i := range requestListTable.Request {
        types.SetYListKey(requestListTable.Request[i], i)
        requestListTable.EntityData.Children.Append(types.GetSegmentPath(requestListTable.Request[i]), types.YChild{"Request", requestListTable.Request[i]})
    }
    requestListTable.EntityData.Leafs = types.NewOrderedMap()

    requestListTable.EntityData.YListKeys = []string {}

    return &(requestListTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request
// OSPFv3 request list information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RequestNeighborAddress interface{}

    // If true, virtual link is requested . The type is bool.
    IsRequestVirtualLink interface{}

    // Request virtual link ID . The type is interface{} with range:
    // 0..4294967295.
    RequestVirtualLinkId interface{}

    // If true, sham link is requested . The type is bool.
    IsRequestShamLink interface{}

    // Request sham link ID . The type is interface{} with range: 0..4294967295.
    RequestShamLinkId interface{}

    // List of request list entries. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request.
    Request []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request) GetEntityData() *types.CommonEntityData {
    request.EntityData.YFilter = request.YFilter
    request.EntityData.YangName = "request"
    request.EntityData.BundleName = "cisco_ios_xr"
    request.EntityData.ParentYangName = "request-list-table"
    request.EntityData.SegmentPath = "request" + types.AddNoKeyToken(request)
    request.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/request-list-table/" + request.EntityData.SegmentPath
    request.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    request.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    request.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    request.EntityData.Children = types.NewOrderedMap()
    request.EntityData.Children.Append("request", types.YChild{"Request", nil})
    for i := range request.Request {
        types.SetYListKey(request.Request[i], i)
        request.EntityData.Children.Append(types.GetSegmentPath(request.Request[i]), types.YChild{"Request", request.Request[i]})
    }
    request.EntityData.Leafs = types.NewOrderedMap()
    request.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", request.InterfaceName})
    request.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", request.NeighborAddress})
    request.EntityData.Leafs.Append("request-neighbor-address", types.YLeaf{"RequestNeighborAddress", request.RequestNeighborAddress})
    request.EntityData.Leafs.Append("is-request-virtual-link", types.YLeaf{"IsRequestVirtualLink", request.IsRequestVirtualLink})
    request.EntityData.Leafs.Append("request-virtual-link-id", types.YLeaf{"RequestVirtualLinkId", request.RequestVirtualLinkId})
    request.EntityData.Leafs.Append("is-request-sham-link", types.YLeaf{"IsRequestShamLink", request.IsRequestShamLink})
    request.EntityData.Leafs.Append("request-sham-link-id", types.YLeaf{"RequestShamLinkId", request.RequestShamLinkId})

    request.EntityData.YListKeys = []string {}

    return &(request.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request
// List of request list entries
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request) GetEntityData() *types.CommonEntityData {
    request.EntityData.YFilter = request.YFilter
    request.EntityData.YangName = "request"
    request.EntityData.BundleName = "cisco_ios_xr"
    request.EntityData.ParentYangName = "request"
    request.EntityData.SegmentPath = "request" + types.AddNoKeyToken(request)
    request.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/request-list-table/request/" + request.EntityData.SegmentPath
    request.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    request.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    request.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    request.EntityData.Children = types.NewOrderedMap()
    request.EntityData.Leafs = types.NewOrderedMap()
    request.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", request.HeaderLsaType})
    request.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", request.HeaderLsaAge})
    request.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", request.HeaderLsaId})
    request.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", request.HeaderAdvertisingRouter})
    request.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", request.HeaderSequenceNumber})

    request.EntityData.YListKeys = []string {}

    return &(request.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable
// OSPFv3 neighbor information table
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 neighbor detail information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor.
    Neighbor []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor
}

func (neighborTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable) GetEntityData() *types.CommonEntityData {
    neighborTable.EntityData.YFilter = neighborTable.YFilter
    neighborTable.EntityData.YangName = "neighbor-table"
    neighborTable.EntityData.BundleName = "cisco_ios_xr"
    neighborTable.EntityData.ParentYangName = "area"
    neighborTable.EntityData.SegmentPath = "neighbor-table"
    neighborTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/" + neighborTable.EntityData.SegmentPath
    neighborTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborTable.EntityData.Children = types.NewOrderedMap()
    neighborTable.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighborTable.Neighbor {
        types.SetYListKey(neighborTable.Neighbor[i], i)
        neighborTable.EntityData.Children.Append(types.GetSegmentPath(neighborTable.Neighbor[i]), types.YChild{"Neighbor", neighborTable.Neighbor[i]})
    }
    neighborTable.EntityData.Leafs = types.NewOrderedMap()

    neighborTable.EntityData.YListKeys = []string {}

    return &(neighborTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor
// OSPFv3 neighbor detail information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Neighbor interface ID. The type is interface{} with range: 0..4294967295.
    NeighborInterfaceId interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is Ospfv3NeighborState.
    NeighborState interface{}

    // Designated router . The type is string with length: 0..9.
    NeighborDesignatedRouter interface{}

    // Time until neighbor's dead timer expires (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborUpTime interface{}

    // Neighbor virtual link id . The type is interface{} with range:
    // 0..4294967295.
    NeighborVirtualLinkId interface{}

    // If true, neighbor is on a virtual link . The type is bool.
    IsNeighborVirtualLink interface{}

    // Neighbor sham link id . The type is interface{} with range: 0..4294967295.
    NeighborShamLinkId interface{}

    // If true, neighbor is on a sham link . The type is bool.
    IsNeighborShamLink interface{}

    // Detailed OSPFv3 neighbor information .
    NeighborDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail

    // Neighbor BFD information.
    NeighborBfdInfo Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbor-table"
    neighbor.EntityData.SegmentPath = "neighbor" + types.AddNoKeyToken(neighbor)
    neighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/neighbor-table/" + neighbor.EntityData.SegmentPath
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("neighbor-detail", types.YChild{"NeighborDetail", &neighbor.NeighborDetail})
    neighbor.EntityData.Children.Append("neighbor-bfd-info", types.YChild{"NeighborBfdInfo", &neighbor.NeighborBfdInfo})
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", neighbor.InterfaceName})
    neighbor.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighbor.NeighborAddress})
    neighbor.EntityData.Leafs.Append("neighbor-address-xr", types.YLeaf{"NeighborAddressXr", neighbor.NeighborAddressXr})
    neighbor.EntityData.Leafs.Append("neighbor-interface-id", types.YLeaf{"NeighborInterfaceId", neighbor.NeighborInterfaceId})
    neighbor.EntityData.Leafs.Append("neighbor-dr-priority", types.YLeaf{"NeighborDrPriority", neighbor.NeighborDrPriority})
    neighbor.EntityData.Leafs.Append("neighbor-state", types.YLeaf{"NeighborState", neighbor.NeighborState})
    neighbor.EntityData.Leafs.Append("neighbor-designated-router", types.YLeaf{"NeighborDesignatedRouter", neighbor.NeighborDesignatedRouter})
    neighbor.EntityData.Leafs.Append("neighbor-dead-timer", types.YLeaf{"NeighborDeadTimer", neighbor.NeighborDeadTimer})
    neighbor.EntityData.Leafs.Append("neighbor-up-time", types.YLeaf{"NeighborUpTime", neighbor.NeighborUpTime})
    neighbor.EntityData.Leafs.Append("neighbor-virtual-link-id", types.YLeaf{"NeighborVirtualLinkId", neighbor.NeighborVirtualLinkId})
    neighbor.EntityData.Leafs.Append("is-neighbor-virtual-link", types.YLeaf{"IsNeighborVirtualLink", neighbor.IsNeighborVirtualLink})
    neighbor.EntityData.Leafs.Append("neighbor-sham-link-id", types.YLeaf{"NeighborShamLinkId", neighbor.NeighborShamLinkId})
    neighbor.EntityData.Leafs.Append("is-neighbor-sham-link", types.YLeaf{"IsNeighborShamLink", neighbor.IsNeighborShamLink})

    neighbor.EntityData.YListKeys = []string {}

    return &(neighbor.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail
// Detailed OSPFv3 neighbor information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of state changes . The type is interface{} with range: 0..65535.
    StateChanges interface{}

    // Cost of path to this neighbor . The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs . The type is bool.
    IsNeighborFiltered interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Ospfv3Interface.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // Remaining time when ignore timer is running . The type is interface{} with
    // range: 0..4294967295.
    NeighborIgnoreTimer interface{}

    // This is bitmask of neighbor's option field received . The type is
    // interface{} with range: 0..4294967295.
    NeighborOption interface{}

    // Number of pending events . The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // Retransmission information with this neighbor.
    NeighborRetransmission Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetEntityData() *types.CommonEntityData {
    neighborDetail.EntityData.YFilter = neighborDetail.YFilter
    neighborDetail.EntityData.YangName = "neighbor-detail"
    neighborDetail.EntityData.BundleName = "cisco_ios_xr"
    neighborDetail.EntityData.ParentYangName = "neighbor"
    neighborDetail.EntityData.SegmentPath = "neighbor-detail"
    neighborDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/neighbor-table/neighbor/" + neighborDetail.EntityData.SegmentPath
    neighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetail.EntityData.Children = types.NewOrderedMap()
    neighborDetail.EntityData.Children.Append("neighbor-retransmission", types.YChild{"NeighborRetransmission", &neighborDetail.NeighborRetransmission})
    neighborDetail.EntityData.Leafs = types.NewOrderedMap()
    neighborDetail.EntityData.Leafs.Append("state-changes", types.YLeaf{"StateChanges", neighborDetail.StateChanges})
    neighborDetail.EntityData.Leafs.Append("neighbor-cost", types.YLeaf{"NeighborCost", neighborDetail.NeighborCost})
    neighborDetail.EntityData.Leafs.Append("is-neighbor-filtered", types.YLeaf{"IsNeighborFiltered", neighborDetail.IsNeighborFiltered})
    neighborDetail.EntityData.Leafs.Append("neighbor-designated-router-address", types.YLeaf{"NeighborDesignatedRouterAddress", neighborDetail.NeighborDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-backup-designated-router-address", types.YLeaf{"NeighborBackupDesignatedRouterAddress", neighborDetail.NeighborBackupDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("interface-type", types.YLeaf{"InterfaceType", neighborDetail.InterfaceType})
    neighborDetail.EntityData.Leafs.Append("poll-interval", types.YLeaf{"PollInterval", neighborDetail.PollInterval})
    neighborDetail.EntityData.Leafs.Append("next-poll-interval", types.YLeaf{"NextPollInterval", neighborDetail.NextPollInterval})
    neighborDetail.EntityData.Leafs.Append("neighbor-ignore-timer", types.YLeaf{"NeighborIgnoreTimer", neighborDetail.NeighborIgnoreTimer})
    neighborDetail.EntityData.Leafs.Append("neighbor-option", types.YLeaf{"NeighborOption", neighborDetail.NeighborOption})
    neighborDetail.EntityData.Leafs.Append("pending-events", types.YLeaf{"PendingEvents", neighborDetail.PendingEvents})

    neighborDetail.EntityData.YListKeys = []string {}

    return &(neighborDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission
// Retransmission information with this neighbor
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetEntityData() *types.CommonEntityData {
    neighborRetransmission.EntityData.YFilter = neighborRetransmission.YFilter
    neighborRetransmission.EntityData.YangName = "neighbor-retransmission"
    neighborRetransmission.EntityData.BundleName = "cisco_ios_xr"
    neighborRetransmission.EntityData.ParentYangName = "neighbor-detail"
    neighborRetransmission.EntityData.SegmentPath = "neighbor-retransmission"
    neighborRetransmission.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/neighbor-table/neighbor/neighbor-detail/" + neighborRetransmission.EntityData.SegmentPath
    neighborRetransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborRetransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborRetransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborRetransmission.EntityData.Children = types.NewOrderedMap()
    neighborRetransmission.EntityData.Leafs = types.NewOrderedMap()
    neighborRetransmission.EntityData.Leafs.Append("database-descriptor-retransmissions", types.YLeaf{"DatabaseDescriptorRetransmissions", neighborRetransmission.DatabaseDescriptorRetransmissions})
    neighborRetransmission.EntityData.Leafs.Append("area-flood-index", types.YLeaf{"AreaFloodIndex", neighborRetransmission.AreaFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", neighborRetransmission.AsFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-flood-index", types.YLeaf{"LinkFloodIndex", neighborRetransmission.LinkFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("neighbor-retransmissions", types.YLeaf{"NeighborRetransmissions", neighborRetransmission.NeighborRetransmissions})
    neighborRetransmission.EntityData.Leafs.Append("retransmissions", types.YLeaf{"Retransmissions", neighborRetransmission.Retransmissions})
    neighborRetransmission.EntityData.Leafs.Append("area-first-flood", types.YLeaf{"AreaFirstFlood", neighborRetransmission.AreaFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("area-first-flood-index", types.YLeaf{"AreaFirstFloodIndex", neighborRetransmission.AreaFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-first-flood", types.YLeaf{"AsFirstFlood", neighborRetransmission.AsFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("as-first-flood-index", types.YLeaf{"AsFirstFloodIndex", neighborRetransmission.AsFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-first-flood", types.YLeaf{"LinkFirstFlood", neighborRetransmission.LinkFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("link-first-flood-index", types.YLeaf{"LinkFirstFloodIndex", neighborRetransmission.LinkFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("area-next-flood", types.YLeaf{"AreaNextFlood", neighborRetransmission.AreaNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("area-next-flood-index", types.YLeaf{"AreaNextFloodIndex", neighborRetransmission.AreaNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-next-flood", types.YLeaf{"AsNextFlood", neighborRetransmission.AsNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("as-next-flood-index", types.YLeaf{"AsNextFloodIndex", neighborRetransmission.AsNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-next-flood", types.YLeaf{"LinkNextFlood", neighborRetransmission.LinkNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("link-next-flood-index", types.YLeaf{"LinkNextFloodIndex", neighborRetransmission.LinkNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", neighborRetransmission.LastRetransmissionLength})
    neighborRetransmission.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", neighborRetransmission.MaximumRetransmissionLength})
    neighborRetransmission.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", neighborRetransmission.LastRetransmissionTime})
    neighborRetransmission.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", neighborRetransmission.MaximumRetransmissionTime})
    neighborRetransmission.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", neighborRetransmission.LsaRetransmissionTimer})

    neighborRetransmission.EntityData.YListKeys = []string {}

    return &(neighborRetransmission.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo
// Neighbor BFD information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetEntityData() *types.CommonEntityData {
    neighborBfdInfo.EntityData.YFilter = neighborBfdInfo.YFilter
    neighborBfdInfo.EntityData.YangName = "neighbor-bfd-info"
    neighborBfdInfo.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInfo.EntityData.ParentYangName = "neighbor"
    neighborBfdInfo.EntityData.SegmentPath = "neighbor-bfd-info"
    neighborBfdInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/neighbor-table/neighbor/" + neighborBfdInfo.EntityData.SegmentPath
    neighborBfdInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInfo.EntityData.Children = types.NewOrderedMap()
    neighborBfdInfo.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInfo.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInfo.BfdIntfEnableMode})
    neighborBfdInfo.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInfo.BfdStatusFlag})

    neighborBfdInfo.EntityData.YListKeys = []string {}

    return &(neighborBfdInfo.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable
// OSPFv3 interface information table for an area
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 interface information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface.
    Interface []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface
}

func (interfaceTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable) GetEntityData() *types.CommonEntityData {
    interfaceTable.EntityData.YFilter = interfaceTable.YFilter
    interfaceTable.EntityData.YangName = "interface-table"
    interfaceTable.EntityData.BundleName = "cisco_ios_xr"
    interfaceTable.EntityData.ParentYangName = "area"
    interfaceTable.EntityData.SegmentPath = "interface-table"
    interfaceTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/" + interfaceTable.EntityData.SegmentPath
    interfaceTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceTable.EntityData.Children = types.NewOrderedMap()
    interfaceTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaceTable.Interface {
        interfaceTable.EntityData.Children.Append(types.GetSegmentPath(interfaceTable.Interface[i]), types.YChild{"Interface", interfaceTable.Interface[i]})
    }
    interfaceTable.EntityData.Leafs = types.NewOrderedMap()

    interfaceTable.EntityData.YListKeys = []string {}

    return &(interfaceTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface
// OSPFv3 interface information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface state. The type is ImStateEnum.
    InterfaceState interface{}

    // If true, line protocol is up . The type is bool.
    IsInterfaceLineUp interface{}

    // If true, interface IP security is required . The type is bool.
    IsInterfaceIpSecurityRequired interface{}

    // If true, interface IP security is active . The type is bool.
    IsInterfaceIpSecurityActive interface{}

    // Interface IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface number . The type is interface{} with range: 0..4294967295.
    InterfaceNumber interface{}

    // Interface router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceRouterId interface{}

    // Network type. The type is Ospfv3Interface.
    NetworkType interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // If true, interface flood reduction is active . The type is bool.
    IsInterfaceFloodReduction interface{}

    // If true, configured as demand circuit . The type is bool.
    IsDemandCircuitConfigured interface{}

    // If true, interface running as demand circuit. The type is bool.
    IsInterfaceDemandCircuit interface{}

    // Number of LSAs with demand circuit bit not set for the area in which the
    // interface is running. The type is interface{} with range: 0..4294967295.
    InterfaceDcBitlessLsAs interface{}

    // Interface transmission delay (sec). The type is interface{} with range:
    // 0..65535.
    TransmissionDelay interface{}

    // Interface state. The type is Ospfv3InterfaceState.
    OspfInterfaceState interface{}

    // Interface priority. The type is interface{} with range: 0..255.
    InterfacePriority interface{}

    // If true, designated router. The type is bool.
    IsDesignatedRouter interface{}

    // Designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DesignatedRouterId interface{}

    // Designated router interface address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DesignatedRouterAddress interface{}

    // Backup designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterId interface{}

    // Backup designated router interface address. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterAddress interface{}

    // The amount of time in seconds before flush timer for old network LSA
    // expires . The type is interface{} with range: 0..4294967295. Units are
    // second.
    NetworkLsaFlushTimer interface{}

    // Filter is configured for out going LSAs . The type is bool.
    IsInterfaceLsaFiltered interface{}

    // Configured hello interval (s). The type is interface{} with range:
    // 0..4294967295.
    HelloInterval interface{}

    // Configured dead interval (s) . The type is interface{} with range:
    // 0..4294967295.
    DeadInterval interface{}

    // Configured wait interval (s) . The type is interface{} with range:
    // 0..4294967295.
    WaitInterval interface{}

    // Configured retransmit interval (s) . The type is interface{} with range:
    // 0..4294967295.
    InterfaceRetransmissionInterval interface{}

    // Time until next Hello (s) . The type is interface{} with range:
    // 0..4294967295.
    NextHelloTime interface{}

    // Interface authentication spi . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAuthenticationSpi interface{}

    // Interface authentication transmit . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAuthenticationTransmit interface{}

    // If true, interface encryption is enabled . The type is bool.
    IsInterfaceEncryptionEnabled interface{}

    // If true prefix suppression is enabled. The type is bool.
    IsPrefixSuppress interface{}

    // Interface encryption spi. The type is interface{} with range:
    // 0..4294967295.
    InterfaceEncryptionSpi interface{}

    // Interface encryption transmitted . The type is interface{} with range:
    // 0..4294967295.
    InterfaceEncryptionTransmitted interface{}

    // Interface encrypted authentication transmitted . The type is interface{}
    // with range: 0..4294967295.
    InterfaceEncryptedAuthenticationTransmitted interface{}

    // Number of adjacent neighbors. The type is interface{} with range:
    // 0..4294967295.
    AdjacentNeighbor interface{}

    // Interface reference count . The type is interface{} with range:
    // 0..4294967295.
    InterfaceReferences interface{}

    // If true, configured as LDP sync. The type is bool.
    ConfiguredLdpSync interface{}

    // If true, interface LDP sync is achieved. The type is bool.
    InterfaceLdpSync interface{}

    // Active interface details .
    ActiveInterface Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface

    // BFD information .
    InterfaceBfd Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd

    // Information for neighbors on the interface. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor.
    InterfaceNeighbor []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interface-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/interface-table/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("active-interface", types.YChild{"ActiveInterface", &self.ActiveInterface})
    self.EntityData.Children.Append("interface-bfd", types.YChild{"InterfaceBfd", &self.InterfaceBfd})
    self.EntityData.Children.Append("interface-neighbor", types.YChild{"InterfaceNeighbor", nil})
    for i := range self.InterfaceNeighbor {
        types.SetYListKey(self.InterfaceNeighbor[i], i)
        self.EntityData.Children.Append(types.GetSegmentPath(self.InterfaceNeighbor[i]), types.YChild{"InterfaceNeighbor", self.InterfaceNeighbor[i]})
    }
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-state", types.YLeaf{"InterfaceState", self.InterfaceState})
    self.EntityData.Leafs.Append("is-interface-line-up", types.YLeaf{"IsInterfaceLineUp", self.IsInterfaceLineUp})
    self.EntityData.Leafs.Append("is-interface-ip-security-required", types.YLeaf{"IsInterfaceIpSecurityRequired", self.IsInterfaceIpSecurityRequired})
    self.EntityData.Leafs.Append("is-interface-ip-security-active", types.YLeaf{"IsInterfaceIpSecurityActive", self.IsInterfaceIpSecurityActive})
    self.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", self.InterfaceAddress})
    self.EntityData.Leafs.Append("interface-number", types.YLeaf{"InterfaceNumber", self.InterfaceNumber})
    self.EntityData.Leafs.Append("interface-router-id", types.YLeaf{"InterfaceRouterId", self.InterfaceRouterId})
    self.EntityData.Leafs.Append("network-type", types.YLeaf{"NetworkType", self.NetworkType})
    self.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", self.InterfaceLinkCost})
    self.EntityData.Leafs.Append("is-interface-flood-reduction", types.YLeaf{"IsInterfaceFloodReduction", self.IsInterfaceFloodReduction})
    self.EntityData.Leafs.Append("is-demand-circuit-configured", types.YLeaf{"IsDemandCircuitConfigured", self.IsDemandCircuitConfigured})
    self.EntityData.Leafs.Append("is-interface-demand-circuit", types.YLeaf{"IsInterfaceDemandCircuit", self.IsInterfaceDemandCircuit})
    self.EntityData.Leafs.Append("interface-dc-bitless-ls-as", types.YLeaf{"InterfaceDcBitlessLsAs", self.InterfaceDcBitlessLsAs})
    self.EntityData.Leafs.Append("transmission-delay", types.YLeaf{"TransmissionDelay", self.TransmissionDelay})
    self.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", self.OspfInterfaceState})
    self.EntityData.Leafs.Append("interface-priority", types.YLeaf{"InterfacePriority", self.InterfacePriority})
    self.EntityData.Leafs.Append("is-designated-router", types.YLeaf{"IsDesignatedRouter", self.IsDesignatedRouter})
    self.EntityData.Leafs.Append("designated-router-id", types.YLeaf{"DesignatedRouterId", self.DesignatedRouterId})
    self.EntityData.Leafs.Append("designated-router-address", types.YLeaf{"DesignatedRouterAddress", self.DesignatedRouterAddress})
    self.EntityData.Leafs.Append("backup-designated-router-id", types.YLeaf{"BackupDesignatedRouterId", self.BackupDesignatedRouterId})
    self.EntityData.Leafs.Append("backup-designated-router-address", types.YLeaf{"BackupDesignatedRouterAddress", self.BackupDesignatedRouterAddress})
    self.EntityData.Leafs.Append("network-lsa-flush-timer", types.YLeaf{"NetworkLsaFlushTimer", self.NetworkLsaFlushTimer})
    self.EntityData.Leafs.Append("is-interface-lsa-filtered", types.YLeaf{"IsInterfaceLsaFiltered", self.IsInterfaceLsaFiltered})
    self.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", self.HelloInterval})
    self.EntityData.Leafs.Append("dead-interval", types.YLeaf{"DeadInterval", self.DeadInterval})
    self.EntityData.Leafs.Append("wait-interval", types.YLeaf{"WaitInterval", self.WaitInterval})
    self.EntityData.Leafs.Append("interface-retransmission-interval", types.YLeaf{"InterfaceRetransmissionInterval", self.InterfaceRetransmissionInterval})
    self.EntityData.Leafs.Append("next-hello-time", types.YLeaf{"NextHelloTime", self.NextHelloTime})
    self.EntityData.Leafs.Append("interface-authentication-spi", types.YLeaf{"InterfaceAuthenticationSpi", self.InterfaceAuthenticationSpi})
    self.EntityData.Leafs.Append("interface-authentication-transmit", types.YLeaf{"InterfaceAuthenticationTransmit", self.InterfaceAuthenticationTransmit})
    self.EntityData.Leafs.Append("is-interface-encryption-enabled", types.YLeaf{"IsInterfaceEncryptionEnabled", self.IsInterfaceEncryptionEnabled})
    self.EntityData.Leafs.Append("is-prefix-suppress", types.YLeaf{"IsPrefixSuppress", self.IsPrefixSuppress})
    self.EntityData.Leafs.Append("interface-encryption-spi", types.YLeaf{"InterfaceEncryptionSpi", self.InterfaceEncryptionSpi})
    self.EntityData.Leafs.Append("interface-encryption-transmitted", types.YLeaf{"InterfaceEncryptionTransmitted", self.InterfaceEncryptionTransmitted})
    self.EntityData.Leafs.Append("interface-encrypted-authentication-transmitted", types.YLeaf{"InterfaceEncryptedAuthenticationTransmitted", self.InterfaceEncryptedAuthenticationTransmitted})
    self.EntityData.Leafs.Append("adjacent-neighbor", types.YLeaf{"AdjacentNeighbor", self.AdjacentNeighbor})
    self.EntityData.Leafs.Append("interface-references", types.YLeaf{"InterfaceReferences", self.InterfaceReferences})
    self.EntityData.Leafs.Append("configured-ldp-sync", types.YLeaf{"ConfiguredLdpSync", self.ConfiguredLdpSync})
    self.EntityData.Leafs.Append("interface-ldp-sync", types.YLeaf{"InterfaceLdpSync", self.InterfaceLdpSync})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface
// Active interface details 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Wait time for DR/BDR selection (s). The type is interface{} with range:
    // 0..4294967295.
    WaitTime interface{}

    // Area scope LSAs flood index. The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaFloodIndex interface{}

    // AS scope LSAs flood index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsFloodIndex interface{}

    // Interface flood link index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkFloodIndex interface{}

    // Flood queue length. The type is interface{} with range: 0..4294967295.
    FloodQueueLength interface{}

    // Next LSA to flood (Area scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaNextFlood interface{}

    // Index of next LSA to flood (Area scope) . The type is interface{} with
    // range: 0..4294967295.
    InterfaceAreaNextFloodIndex interface{}

    // Next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFlood interface{}

    // Index of next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFloodIndex interface{}

    // Interface link next flood information . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkNextFlood interface{}

    // Interface link next information index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkNextIndex interface{}

    // Last flood scan length . The type is interface{} with range: 0..4294967295.
    FloodScanLength interface{}

    // Maximum flood length . The type is interface{} with range: 0..4294967295.
    MaximumFloodLength interface{}

    // Last flood scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastFloodTime interface{}

    // Maximum flood time (ms) . The type is interface{} with range:
    // 0..4294967295.
    MaximumFloodTime interface{}

    // Time until next flood pacing timer (ms) . The type is interface{} with
    // range: 0..4294967295.
    InterfaceFloodPacingTimer interface{}

    // Total number of neighbors . The type is interface{} with range: 0..65535.
    InterfaceNeighbors interface{}

    // Number of neighbors for which hellos are suppressed . The type is
    // interface{} with range: 0..65535.
    SuppressedHellos interface{}
}

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetEntityData() *types.CommonEntityData {
    activeInterface.EntityData.YFilter = activeInterface.YFilter
    activeInterface.EntityData.YangName = "active-interface"
    activeInterface.EntityData.BundleName = "cisco_ios_xr"
    activeInterface.EntityData.ParentYangName = "interface"
    activeInterface.EntityData.SegmentPath = "active-interface"
    activeInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/interface-table/interface/" + activeInterface.EntityData.SegmentPath
    activeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    activeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    activeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    activeInterface.EntityData.Children = types.NewOrderedMap()
    activeInterface.EntityData.Leafs = types.NewOrderedMap()
    activeInterface.EntityData.Leafs.Append("wait-time", types.YLeaf{"WaitTime", activeInterface.WaitTime})
    activeInterface.EntityData.Leafs.Append("interface-area-flood-index", types.YLeaf{"InterfaceAreaFloodIndex", activeInterface.InterfaceAreaFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-as-flood-index", types.YLeaf{"InterfaceAsFloodIndex", activeInterface.InterfaceAsFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-link-flood-index", types.YLeaf{"InterfaceLinkFloodIndex", activeInterface.InterfaceLinkFloodIndex})
    activeInterface.EntityData.Leafs.Append("flood-queue-length", types.YLeaf{"FloodQueueLength", activeInterface.FloodQueueLength})
    activeInterface.EntityData.Leafs.Append("interface-area-next-flood", types.YLeaf{"InterfaceAreaNextFlood", activeInterface.InterfaceAreaNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-area-next-flood-index", types.YLeaf{"InterfaceAreaNextFloodIndex", activeInterface.InterfaceAreaNextFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-as-next-flood", types.YLeaf{"InterfaceAsNextFlood", activeInterface.InterfaceAsNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-as-next-flood-index", types.YLeaf{"InterfaceAsNextFloodIndex", activeInterface.InterfaceAsNextFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-link-next-flood", types.YLeaf{"InterfaceLinkNextFlood", activeInterface.InterfaceLinkNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-link-next-index", types.YLeaf{"InterfaceLinkNextIndex", activeInterface.InterfaceLinkNextIndex})
    activeInterface.EntityData.Leafs.Append("flood-scan-length", types.YLeaf{"FloodScanLength", activeInterface.FloodScanLength})
    activeInterface.EntityData.Leafs.Append("maximum-flood-length", types.YLeaf{"MaximumFloodLength", activeInterface.MaximumFloodLength})
    activeInterface.EntityData.Leafs.Append("last-flood-time", types.YLeaf{"LastFloodTime", activeInterface.LastFloodTime})
    activeInterface.EntityData.Leafs.Append("maximum-flood-time", types.YLeaf{"MaximumFloodTime", activeInterface.MaximumFloodTime})
    activeInterface.EntityData.Leafs.Append("interface-flood-pacing-timer", types.YLeaf{"InterfaceFloodPacingTimer", activeInterface.InterfaceFloodPacingTimer})
    activeInterface.EntityData.Leafs.Append("interface-neighbors", types.YLeaf{"InterfaceNeighbors", activeInterface.InterfaceNeighbors})
    activeInterface.EntityData.Leafs.Append("suppressed-hellos", types.YLeaf{"SuppressedHellos", activeInterface.SuppressedHellos})

    activeInterface.EntityData.YListKeys = []string {}

    return &(activeInterface.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd
// BFD information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD Enable Mode on the interface - Default/Strict. The type is interface{}
    // with range: 0..4294967295.
    BfdIntfEnableMode interface{}

    // BFD interval (ms) . The type is interface{} with range: 0..4294967295.
    BfdInterval interface{}

    // BFD detection multiplier . The type is interface{} with range:
    // 0..4294967295.
    BfdDetectionMultiplier interface{}
}

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetEntityData() *types.CommonEntityData {
    interfaceBfd.EntityData.YFilter = interfaceBfd.YFilter
    interfaceBfd.EntityData.YangName = "interface-bfd"
    interfaceBfd.EntityData.BundleName = "cisco_ios_xr"
    interfaceBfd.EntityData.ParentYangName = "interface"
    interfaceBfd.EntityData.SegmentPath = "interface-bfd"
    interfaceBfd.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/interface-table/interface/" + interfaceBfd.EntityData.SegmentPath
    interfaceBfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBfd.EntityData.Children = types.NewOrderedMap()
    interfaceBfd.EntityData.Leafs = types.NewOrderedMap()
    interfaceBfd.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", interfaceBfd.BfdIntfEnableMode})
    interfaceBfd.EntityData.Leafs.Append("bfd-interval", types.YLeaf{"BfdInterval", interfaceBfd.BfdInterval})
    interfaceBfd.EntityData.Leafs.Append("bfd-detection-multiplier", types.YLeaf{"BfdDetectionMultiplier", interfaceBfd.BfdDetectionMultiplier})

    interfaceBfd.EntityData.YListKeys = []string {}

    return &(interfaceBfd.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor
// Information for neighbors on the interface
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceNeighborId interface{}

    // Cost of link to neighbor. The type is interface{} with range:
    // 0..4294967295.
    InterfaceNeighborCost interface{}

    // If true, designated router is found . The type is bool.
    IsNeighborDr interface{}

    // If true, backup designated router is found . The type is bool.
    IsNeighborBdr interface{}

    // If true, hello is suppressed . The type is bool.
    IsHelloSuppressed interface{}
}

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetEntityData() *types.CommonEntityData {
    interfaceNeighbor.EntityData.YFilter = interfaceNeighbor.YFilter
    interfaceNeighbor.EntityData.YangName = "interface-neighbor"
    interfaceNeighbor.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighbor.EntityData.ParentYangName = "interface"
    interfaceNeighbor.EntityData.SegmentPath = "interface-neighbor" + types.AddNoKeyToken(interfaceNeighbor)
    interfaceNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/interface-table/interface/" + interfaceNeighbor.EntityData.SegmentPath
    interfaceNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighbor.EntityData.Children = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs.Append("interface-neighbor-id", types.YLeaf{"InterfaceNeighborId", interfaceNeighbor.InterfaceNeighborId})
    interfaceNeighbor.EntityData.Leafs.Append("interface-neighbor-cost", types.YLeaf{"InterfaceNeighborCost", interfaceNeighbor.InterfaceNeighborCost})
    interfaceNeighbor.EntityData.Leafs.Append("is-neighbor-dr", types.YLeaf{"IsNeighborDr", interfaceNeighbor.IsNeighborDr})
    interfaceNeighbor.EntityData.Leafs.Append("is-neighbor-bdr", types.YLeaf{"IsNeighborBdr", interfaceNeighbor.IsNeighborBdr})
    interfaceNeighbor.EntityData.Leafs.Append("is-hello-suppressed", types.YLeaf{"IsHelloSuppressed", interfaceNeighbor.IsHelloSuppressed})

    interfaceNeighbor.EntityData.YListKeys = []string {}

    return &(interfaceNeighbor.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable
// OSPFv3 flood list information table for an
// area
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 flood list information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood.
    Flood []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood
}

func (floodListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable) GetEntityData() *types.CommonEntityData {
    floodListTable.EntityData.YFilter = floodListTable.YFilter
    floodListTable.EntityData.YangName = "flood-list-table"
    floodListTable.EntityData.BundleName = "cisco_ios_xr"
    floodListTable.EntityData.ParentYangName = "area"
    floodListTable.EntityData.SegmentPath = "flood-list-table"
    floodListTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/" + floodListTable.EntityData.SegmentPath
    floodListTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    floodListTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    floodListTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    floodListTable.EntityData.Children = types.NewOrderedMap()
    floodListTable.EntityData.Children.Append("flood", types.YChild{"Flood", nil})
    for i := range floodListTable.Flood {
        floodListTable.EntityData.Children.Append(types.GetSegmentPath(floodListTable.Flood[i]), types.YChild{"Flood", floodListTable.Flood[i]})
    }
    floodListTable.EntityData.Leafs = types.NewOrderedMap()

    floodListTable.EntityData.YListKeys = []string {}

    return &(floodListTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood
// OSPFv3 flood list information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Time until next LS transmission (ms) . The type is interface{} with range:
    // 0..4294967295.
    LsTransmissionTimer interface{}

    // Number of LSAs currently being flooded . The type is interface{} with
    // range: 0..4294967295.
    QueueLength interface{}

    // Link floodlist. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood.
    LinkFlood []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood

    // Area scope floodlist. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood.
    AreaFlood []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood

    // AS scope floodlist. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood.
    AsFlood []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood
}

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood) GetEntityData() *types.CommonEntityData {
    flood.EntityData.YFilter = flood.YFilter
    flood.EntityData.YangName = "flood"
    flood.EntityData.BundleName = "cisco_ios_xr"
    flood.EntityData.ParentYangName = "flood-list-table"
    flood.EntityData.SegmentPath = "flood" + types.AddKeyToken(flood.InterfaceName, "interface-name")
    flood.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/flood-list-table/" + flood.EntityData.SegmentPath
    flood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flood.EntityData.Children = types.NewOrderedMap()
    flood.EntityData.Children.Append("link-flood", types.YChild{"LinkFlood", nil})
    for i := range flood.LinkFlood {
        types.SetYListKey(flood.LinkFlood[i], i)
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.LinkFlood[i]), types.YChild{"LinkFlood", flood.LinkFlood[i]})
    }
    flood.EntityData.Children.Append("area-flood", types.YChild{"AreaFlood", nil})
    for i := range flood.AreaFlood {
        types.SetYListKey(flood.AreaFlood[i], i)
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.AreaFlood[i]), types.YChild{"AreaFlood", flood.AreaFlood[i]})
    }
    flood.EntityData.Children.Append("as-flood", types.YChild{"AsFlood", nil})
    for i := range flood.AsFlood {
        types.SetYListKey(flood.AsFlood[i], i)
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.AsFlood[i]), types.YChild{"AsFlood", flood.AsFlood[i]})
    }
    flood.EntityData.Leafs = types.NewOrderedMap()
    flood.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", flood.InterfaceName})
    flood.EntityData.Leafs.Append("ls-transmission-timer", types.YLeaf{"LsTransmissionTimer", flood.LsTransmissionTimer})
    flood.EntityData.Leafs.Append("queue-length", types.YLeaf{"QueueLength", flood.QueueLength})

    flood.EntityData.YListKeys = []string {"InterfaceName"}

    return &(flood.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood
// Link floodlist
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetEntityData() *types.CommonEntityData {
    linkFlood.EntityData.YFilter = linkFlood.YFilter
    linkFlood.EntityData.YangName = "link-flood"
    linkFlood.EntityData.BundleName = "cisco_ios_xr"
    linkFlood.EntityData.ParentYangName = "flood"
    linkFlood.EntityData.SegmentPath = "link-flood" + types.AddNoKeyToken(linkFlood)
    linkFlood.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/flood-list-table/flood/" + linkFlood.EntityData.SegmentPath
    linkFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkFlood.EntityData.Children = types.NewOrderedMap()
    linkFlood.EntityData.Leafs = types.NewOrderedMap()
    linkFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", linkFlood.HeaderLsaType})
    linkFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", linkFlood.HeaderLsaAge})
    linkFlood.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", linkFlood.HeaderLsaId})
    linkFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", linkFlood.HeaderAdvertisingRouter})
    linkFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", linkFlood.HeaderSequenceNumber})

    linkFlood.EntityData.YListKeys = []string {}

    return &(linkFlood.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood
// Area scope floodlist
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetEntityData() *types.CommonEntityData {
    areaFlood.EntityData.YFilter = areaFlood.YFilter
    areaFlood.EntityData.YangName = "area-flood"
    areaFlood.EntityData.BundleName = "cisco_ios_xr"
    areaFlood.EntityData.ParentYangName = "flood"
    areaFlood.EntityData.SegmentPath = "area-flood" + types.AddNoKeyToken(areaFlood)
    areaFlood.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/flood-list-table/flood/" + areaFlood.EntityData.SegmentPath
    areaFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaFlood.EntityData.Children = types.NewOrderedMap()
    areaFlood.EntityData.Leafs = types.NewOrderedMap()
    areaFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", areaFlood.HeaderLsaType})
    areaFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", areaFlood.HeaderLsaAge})
    areaFlood.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", areaFlood.HeaderLsaId})
    areaFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", areaFlood.HeaderAdvertisingRouter})
    areaFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", areaFlood.HeaderSequenceNumber})

    areaFlood.EntityData.YListKeys = []string {}

    return &(areaFlood.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood
// AS scope floodlist
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood) GetEntityData() *types.CommonEntityData {
    asFlood.EntityData.YFilter = asFlood.YFilter
    asFlood.EntityData.YangName = "as-flood"
    asFlood.EntityData.BundleName = "cisco_ios_xr"
    asFlood.EntityData.ParentYangName = "flood"
    asFlood.EntityData.SegmentPath = "as-flood" + types.AddNoKeyToken(asFlood)
    asFlood.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/flood-list-table/flood/" + asFlood.EntityData.SegmentPath
    asFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asFlood.EntityData.Children = types.NewOrderedMap()
    asFlood.EntityData.Leafs = types.NewOrderedMap()
    asFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", asFlood.HeaderLsaType})
    asFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", asFlood.HeaderLsaAge})
    asFlood.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", asFlood.HeaderLsaId})
    asFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", asFlood.HeaderAdvertisingRouter})
    asFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", asFlood.HeaderSequenceNumber})

    asFlood.EntityData.YListKeys = []string {}

    return &(asFlood.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable
// OSPFv3 retransmission list information table
// in an area
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 retransmission list information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission.
    Retransmission []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission
}

func (retransmissionListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable) GetEntityData() *types.CommonEntityData {
    retransmissionListTable.EntityData.YFilter = retransmissionListTable.YFilter
    retransmissionListTable.EntityData.YangName = "retransmission-list-table"
    retransmissionListTable.EntityData.BundleName = "cisco_ios_xr"
    retransmissionListTable.EntityData.ParentYangName = "area"
    retransmissionListTable.EntityData.SegmentPath = "retransmission-list-table"
    retransmissionListTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/" + retransmissionListTable.EntityData.SegmentPath
    retransmissionListTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionListTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionListTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionListTable.EntityData.Children = types.NewOrderedMap()
    retransmissionListTable.EntityData.Children.Append("retransmission", types.YChild{"Retransmission", nil})
    for i := range retransmissionListTable.Retransmission {
        types.SetYListKey(retransmissionListTable.Retransmission[i], i)
        retransmissionListTable.EntityData.Children.Append(types.GetSegmentPath(retransmissionListTable.Retransmission[i]), types.YChild{"Retransmission", retransmissionListTable.Retransmission[i]})
    }
    retransmissionListTable.EntityData.Leafs = types.NewOrderedMap()

    retransmissionListTable.EntityData.YListKeys = []string {}

    return &(retransmissionListTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission
// OSPFv3 retransmission list information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RetransmissionNeighborAddress interface{}

    // If true, virtual link is retransmitted . The type is bool.
    IsRetransmissionvirtualLink interface{}

    // Retransmission virtual link ID . The type is interface{} with range:
    // 0..4294967295.
    RetransmissionvirtualLinkId interface{}

    // If true, sham link is retransmitted . The type is bool.
    IsRetransmissionShamLink interface{}

    // Retransmission sham link ID . The type is interface{} with range:
    // 0..4294967295.
    RetransmissionShamLinkId interface{}

    // Amount of time remaining on retransmission timer (ms). The type is
    // interface{} with range: 0..4294967295.
    RetransmissionTimer interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    RetransmissionLength interface{}

    // List of virtual link scope entries . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb.
    RetransmissionvirtualLinkDb []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb

    // List of area scope entries. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb.
    RetransmissionAreaDb []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb

    // List of AS scope entries. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb.
    RetransmissionAsdb []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb
}

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission) GetEntityData() *types.CommonEntityData {
    retransmission.EntityData.YFilter = retransmission.YFilter
    retransmission.EntityData.YangName = "retransmission"
    retransmission.EntityData.BundleName = "cisco_ios_xr"
    retransmission.EntityData.ParentYangName = "retransmission-list-table"
    retransmission.EntityData.SegmentPath = "retransmission" + types.AddNoKeyToken(retransmission)
    retransmission.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/retransmission-list-table/" + retransmission.EntityData.SegmentPath
    retransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmission.EntityData.Children = types.NewOrderedMap()
    retransmission.EntityData.Children.Append("retransmissionvirtual-link-db", types.YChild{"RetransmissionvirtualLinkDb", nil})
    for i := range retransmission.RetransmissionvirtualLinkDb {
        types.SetYListKey(retransmission.RetransmissionvirtualLinkDb[i], i)
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionvirtualLinkDb[i]), types.YChild{"RetransmissionvirtualLinkDb", retransmission.RetransmissionvirtualLinkDb[i]})
    }
    retransmission.EntityData.Children.Append("retransmission-area-db", types.YChild{"RetransmissionAreaDb", nil})
    for i := range retransmission.RetransmissionAreaDb {
        types.SetYListKey(retransmission.RetransmissionAreaDb[i], i)
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionAreaDb[i]), types.YChild{"RetransmissionAreaDb", retransmission.RetransmissionAreaDb[i]})
    }
    retransmission.EntityData.Children.Append("retransmission-asdb", types.YChild{"RetransmissionAsdb", nil})
    for i := range retransmission.RetransmissionAsdb {
        types.SetYListKey(retransmission.RetransmissionAsdb[i], i)
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionAsdb[i]), types.YChild{"RetransmissionAsdb", retransmission.RetransmissionAsdb[i]})
    }
    retransmission.EntityData.Leafs = types.NewOrderedMap()
    retransmission.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", retransmission.InterfaceName})
    retransmission.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", retransmission.NeighborAddress})
    retransmission.EntityData.Leafs.Append("retransmission-neighbor-address", types.YLeaf{"RetransmissionNeighborAddress", retransmission.RetransmissionNeighborAddress})
    retransmission.EntityData.Leafs.Append("is-retransmissionvirtual-link", types.YLeaf{"IsRetransmissionvirtualLink", retransmission.IsRetransmissionvirtualLink})
    retransmission.EntityData.Leafs.Append("retransmissionvirtual-link-id", types.YLeaf{"RetransmissionvirtualLinkId", retransmission.RetransmissionvirtualLinkId})
    retransmission.EntityData.Leafs.Append("is-retransmission-sham-link", types.YLeaf{"IsRetransmissionShamLink", retransmission.IsRetransmissionShamLink})
    retransmission.EntityData.Leafs.Append("retransmission-sham-link-id", types.YLeaf{"RetransmissionShamLinkId", retransmission.RetransmissionShamLinkId})
    retransmission.EntityData.Leafs.Append("retransmission-timer", types.YLeaf{"RetransmissionTimer", retransmission.RetransmissionTimer})
    retransmission.EntityData.Leafs.Append("retransmission-length", types.YLeaf{"RetransmissionLength", retransmission.RetransmissionLength})

    retransmission.EntityData.YListKeys = []string {}

    return &(retransmission.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb
// List of virtual link scope entries 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetEntityData() *types.CommonEntityData {
    retransmissionvirtualLinkDb.EntityData.YFilter = retransmissionvirtualLinkDb.YFilter
    retransmissionvirtualLinkDb.EntityData.YangName = "retransmissionvirtual-link-db"
    retransmissionvirtualLinkDb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionvirtualLinkDb.EntityData.ParentYangName = "retransmission"
    retransmissionvirtualLinkDb.EntityData.SegmentPath = "retransmissionvirtual-link-db" + types.AddNoKeyToken(retransmissionvirtualLinkDb)
    retransmissionvirtualLinkDb.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/retransmission-list-table/retransmission/" + retransmissionvirtualLinkDb.EntityData.SegmentPath
    retransmissionvirtualLinkDb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionvirtualLinkDb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionvirtualLinkDb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionvirtualLinkDb.EntityData.Children = types.NewOrderedMap()
    retransmissionvirtualLinkDb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionvirtualLinkDb.HeaderLsaType})
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionvirtualLinkDb.HeaderLsaAge})
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", retransmissionvirtualLinkDb.HeaderLsaId})
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionvirtualLinkDb.HeaderAdvertisingRouter})
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionvirtualLinkDb.HeaderSequenceNumber})

    retransmissionvirtualLinkDb.EntityData.YListKeys = []string {}

    return &(retransmissionvirtualLinkDb.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb
// List of area scope entries
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetEntityData() *types.CommonEntityData {
    retransmissionAreaDb.EntityData.YFilter = retransmissionAreaDb.YFilter
    retransmissionAreaDb.EntityData.YangName = "retransmission-area-db"
    retransmissionAreaDb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionAreaDb.EntityData.ParentYangName = "retransmission"
    retransmissionAreaDb.EntityData.SegmentPath = "retransmission-area-db" + types.AddNoKeyToken(retransmissionAreaDb)
    retransmissionAreaDb.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/retransmission-list-table/retransmission/" + retransmissionAreaDb.EntityData.SegmentPath
    retransmissionAreaDb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionAreaDb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionAreaDb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionAreaDb.EntityData.Children = types.NewOrderedMap()
    retransmissionAreaDb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionAreaDb.HeaderLsaType})
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionAreaDb.HeaderLsaAge})
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", retransmissionAreaDb.HeaderLsaId})
    retransmissionAreaDb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionAreaDb.HeaderAdvertisingRouter})
    retransmissionAreaDb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionAreaDb.HeaderSequenceNumber})

    retransmissionAreaDb.EntityData.YListKeys = []string {}

    return &(retransmissionAreaDb.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb
// List of AS scope entries
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetEntityData() *types.CommonEntityData {
    retransmissionAsdb.EntityData.YFilter = retransmissionAsdb.YFilter
    retransmissionAsdb.EntityData.YangName = "retransmission-asdb"
    retransmissionAsdb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionAsdb.EntityData.ParentYangName = "retransmission"
    retransmissionAsdb.EntityData.SegmentPath = "retransmission-asdb" + types.AddNoKeyToken(retransmissionAsdb)
    retransmissionAsdb.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/retransmission-list-table/retransmission/" + retransmissionAsdb.EntityData.SegmentPath
    retransmissionAsdb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionAsdb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionAsdb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionAsdb.EntityData.Children = types.NewOrderedMap()
    retransmissionAsdb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionAsdb.HeaderLsaType})
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionAsdb.HeaderLsaAge})
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", retransmissionAsdb.HeaderLsaId})
    retransmissionAsdb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionAsdb.HeaderAdvertisingRouter})
    retransmissionAsdb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionAsdb.HeaderSequenceNumber})

    retransmissionAsdb.EntityData.YListKeys = []string {}

    return &(retransmissionAsdb.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable
// OSPF Link State Database
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database LSA information.
    LsaTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable

    // Database LSA information.
    LsaInternalTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable
}

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable) GetEntityData() *types.CommonEntityData {
    databaseTable.EntityData.YFilter = databaseTable.YFilter
    databaseTable.EntityData.YangName = "database-table"
    databaseTable.EntityData.BundleName = "cisco_ios_xr"
    databaseTable.EntityData.ParentYangName = "area"
    databaseTable.EntityData.SegmentPath = "database-table"
    databaseTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/" + databaseTable.EntityData.SegmentPath
    databaseTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseTable.EntityData.Children = types.NewOrderedMap()
    databaseTable.EntityData.Children.Append("lsa-table", types.YChild{"LsaTable", &databaseTable.LsaTable})
    databaseTable.EntityData.Children.Append("lsa-internal-table", types.YChild{"LsaInternalTable", &databaseTable.LsaInternalTable})
    databaseTable.EntityData.Leafs = types.NewOrderedMap()

    databaseTable.EntityData.YListKeys = []string {}

    return &(databaseTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable
// Database LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database LSA information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa.
    Lsa []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa
}

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable) GetEntityData() *types.CommonEntityData {
    lsaTable.EntityData.YFilter = lsaTable.YFilter
    lsaTable.EntityData.YangName = "lsa-table"
    lsaTable.EntityData.BundleName = "cisco_ios_xr"
    lsaTable.EntityData.ParentYangName = "database-table"
    lsaTable.EntityData.SegmentPath = "lsa-table"
    lsaTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/" + lsaTable.EntityData.SegmentPath
    lsaTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaTable.EntityData.Children = types.NewOrderedMap()
    lsaTable.EntityData.Children.Append("lsa", types.YChild{"Lsa", nil})
    for i := range lsaTable.Lsa {
        types.SetYListKey(lsaTable.Lsa[i], i)
        lsaTable.EntityData.Children.Append(types.GetSegmentPath(lsaTable.Lsa[i]), types.YChild{"Lsa", lsaTable.Lsa[i]})
    }
    lsaTable.EntityData.Leafs = types.NewOrderedMap()

    lsaTable.EntityData.YListKeys = []string {}

    return &(lsaTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa
// Database LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // LSA type. The type is Ospfv3Lsa.
    LsType interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Link state ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Summary of all LSAs or LSA specific information .
    LsaInfo Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetEntityData() *types.CommonEntityData {
    lsa.EntityData.YFilter = lsa.YFilter
    lsa.EntityData.YangName = "lsa"
    lsa.EntityData.BundleName = "cisco_ios_xr"
    lsa.EntityData.ParentYangName = "lsa-table"
    lsa.EntityData.SegmentPath = "lsa" + types.AddNoKeyToken(lsa)
    lsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/" + lsa.EntityData.SegmentPath
    lsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsa.EntityData.Children = types.NewOrderedMap()
    lsa.EntityData.Children.Append("lsa-info", types.YChild{"LsaInfo", &lsa.LsaInfo})
    lsa.EntityData.Leafs = types.NewOrderedMap()
    lsa.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", lsa.AreaId})
    lsa.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsa.LsType})
    lsa.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsa.AdvertisingRouter})
    lsa.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsa.LsId})
    lsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsa.InterfaceName})

    lsa.EntityData.YListKeys = []string {}

    return &(lsa.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo
// Summary of all LSAs or LSA specific information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSAInfoType. The type is Ospfv3LsaInfoTypes.
    LsaInfoType interface{}

    // Summary information of LSAs.
    LsaSummaryInfo Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo

    // Router LSA.
    RouterLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType

    // Inter Area Prefix LSA.
    InterAreaPrefixLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType

    // Inter Area Router LSA.
    InterAreaRouterLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType

    // External LSA.
    ExternalLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType

    // NSSA External LSA.
    NssalsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType

    // Link LSA.
    LinkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType

    // Intra Area Prefix LSA.
    IntraAreaPrefixLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType

    // Grace LSA.
    GraceLsa Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa

    // Unknown Link Scope LSA.
    UnknownLinkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType

    // Unknown-Area scope LSA.
    UnknownAreaLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType

    // Unknown-AS scope LSA.
    UnknownAslsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType

    // Unknown LSA.
    UnknownLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetEntityData() *types.CommonEntityData {
    lsaInfo.EntityData.YFilter = lsaInfo.YFilter
    lsaInfo.EntityData.YangName = "lsa-info"
    lsaInfo.EntityData.BundleName = "cisco_ios_xr"
    lsaInfo.EntityData.ParentYangName = "lsa"
    lsaInfo.EntityData.SegmentPath = "lsa-info"
    lsaInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/" + lsaInfo.EntityData.SegmentPath
    lsaInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaInfo.EntityData.Children = types.NewOrderedMap()
    lsaInfo.EntityData.Children.Append("lsa-summary-info", types.YChild{"LsaSummaryInfo", &lsaInfo.LsaSummaryInfo})
    lsaInfo.EntityData.Children.Append("router-lsa-type", types.YChild{"RouterLsaType", &lsaInfo.RouterLsaType})
    lsaInfo.EntityData.Children.Append("network-lsa-type", types.YChild{"NetworkLsaType", &lsaInfo.NetworkLsaType})
    lsaInfo.EntityData.Children.Append("inter-area-prefix-lsa-type", types.YChild{"InterAreaPrefixLsaType", &lsaInfo.InterAreaPrefixLsaType})
    lsaInfo.EntityData.Children.Append("inter-area-router-lsa-type", types.YChild{"InterAreaRouterLsaType", &lsaInfo.InterAreaRouterLsaType})
    lsaInfo.EntityData.Children.Append("external-lsa-type", types.YChild{"ExternalLsaType", &lsaInfo.ExternalLsaType})
    lsaInfo.EntityData.Children.Append("nssalsa-type", types.YChild{"NssalsaType", &lsaInfo.NssalsaType})
    lsaInfo.EntityData.Children.Append("link-lsa-type", types.YChild{"LinkLsaType", &lsaInfo.LinkLsaType})
    lsaInfo.EntityData.Children.Append("intra-area-prefix-lsa-type", types.YChild{"IntraAreaPrefixLsaType", &lsaInfo.IntraAreaPrefixLsaType})
    lsaInfo.EntityData.Children.Append("grace-lsa", types.YChild{"GraceLsa", &lsaInfo.GraceLsa})
    lsaInfo.EntityData.Children.Append("unknown-link-lsa-type", types.YChild{"UnknownLinkLsaType", &lsaInfo.UnknownLinkLsaType})
    lsaInfo.EntityData.Children.Append("unknown-area-lsa-type", types.YChild{"UnknownAreaLsaType", &lsaInfo.UnknownAreaLsaType})
    lsaInfo.EntityData.Children.Append("unknown-aslsa-type", types.YChild{"UnknownAslsaType", &lsaInfo.UnknownAslsaType})
    lsaInfo.EntityData.Children.Append("unknown-lsa-type", types.YChild{"UnknownLsaType", &lsaInfo.UnknownLsaType})
    lsaInfo.EntityData.Leafs = types.NewOrderedMap()
    lsaInfo.EntityData.Leafs.Append("lsa-info-type", types.YLeaf{"LsaInfoType", lsaInfo.LsaInfoType})

    lsaInfo.EntityData.YListKeys = []string {}

    return &(lsaInfo.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo
// Summary information of LSAs
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of links. The type is interface{} with range: 0..65535.
    Links interface{}

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Reference type . The type is interface{} with range: 0..65535.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // OSPFv3 address Prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetEntityData() *types.CommonEntityData {
    lsaSummaryInfo.EntityData.YFilter = lsaSummaryInfo.YFilter
    lsaSummaryInfo.EntityData.YangName = "lsa-summary-info"
    lsaSummaryInfo.EntityData.BundleName = "cisco_ios_xr"
    lsaSummaryInfo.EntityData.ParentYangName = "lsa-info"
    lsaSummaryInfo.EntityData.SegmentPath = "lsa-summary-info"
    lsaSummaryInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + lsaSummaryInfo.EntityData.SegmentPath
    lsaSummaryInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaSummaryInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaSummaryInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaSummaryInfo.EntityData.Children = types.NewOrderedMap()
    lsaSummaryInfo.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &lsaSummaryInfo.LsaHeader})
    lsaSummaryInfo.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &lsaSummaryInfo.LsaDetail})
    lsaSummaryInfo.EntityData.Leafs = types.NewOrderedMap()
    lsaSummaryInfo.EntityData.Leafs.Append("links", types.YLeaf{"Links", lsaSummaryInfo.Links})
    lsaSummaryInfo.EntityData.Leafs.Append("router-la-bits", types.YLeaf{"RouterLaBits", lsaSummaryInfo.RouterLaBits})
    lsaSummaryInfo.EntityData.Leafs.Append("reference-type", types.YLeaf{"ReferenceType", lsaSummaryInfo.ReferenceType})
    lsaSummaryInfo.EntityData.Leafs.Append("reference-lsa-id", types.YLeaf{"ReferenceLsaId", lsaSummaryInfo.ReferenceLsaId})
    lsaSummaryInfo.EntityData.Leafs.Append("lsa-router-id", types.YLeaf{"LsaRouterId", lsaSummaryInfo.LsaRouterId})
    lsaSummaryInfo.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", lsaSummaryInfo.Prefix})
    lsaSummaryInfo.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", lsaSummaryInfo.PrefixLength})
    lsaSummaryInfo.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsaSummaryInfo.InterfaceName})
    lsaSummaryInfo.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", lsaSummaryInfo.IsVirtualLink})
    lsaSummaryInfo.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", lsaSummaryInfo.VirtualLinkId})
    lsaSummaryInfo.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", lsaSummaryInfo.IsShamLink})
    lsaSummaryInfo.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", lsaSummaryInfo.ShamLinkId})

    lsaSummaryInfo.EntityData.YListKeys = []string {}

    return &(lsaSummaryInfo.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "lsa-summary-info"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/lsa-summary-info/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "lsa-summary-info"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/lsa-summary-info/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType
// Router LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail

    // Router LSA Reverse-Path Forwarding information .
    RpfPath Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath

    // List of links in this LSA. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link.
    Link []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetEntityData() *types.CommonEntityData {
    routerLsaType.EntityData.YFilter = routerLsaType.YFilter
    routerLsaType.EntityData.YangName = "router-lsa-type"
    routerLsaType.EntityData.BundleName = "cisco_ios_xr"
    routerLsaType.EntityData.ParentYangName = "lsa-info"
    routerLsaType.EntityData.SegmentPath = "router-lsa-type"
    routerLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + routerLsaType.EntityData.SegmentPath
    routerLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routerLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routerLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routerLsaType.EntityData.Children = types.NewOrderedMap()
    routerLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &routerLsaType.LsaHeader})
    routerLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &routerLsaType.LsaDetail})
    routerLsaType.EntityData.Children.Append("rpf-path", types.YChild{"RpfPath", &routerLsaType.RpfPath})
    routerLsaType.EntityData.Children.Append("link", types.YChild{"Link", nil})
    for i := range routerLsaType.Link {
        types.SetYListKey(routerLsaType.Link[i], i)
        routerLsaType.EntityData.Children.Append(types.GetSegmentPath(routerLsaType.Link[i]), types.YChild{"Link", routerLsaType.Link[i]})
    }
    routerLsaType.EntityData.Leafs = types.NewOrderedMap()
    routerLsaType.EntityData.Leafs.Append("router-la-bits", types.YLeaf{"RouterLaBits", routerLsaType.RouterLaBits})

    routerLsaType.EntityData.YListKeys = []string {}

    return &(routerLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "router-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/router-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "router-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/router-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath
// Router LSA Reverse-Path Forwarding information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RPF multicast next hop . The type is interface{} with range: 0..4294967295.
    RpfMulticastNextHop interface{}

    // RPF multicast IDB . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetEntityData() *types.CommonEntityData {
    rpfPath.EntityData.YFilter = rpfPath.YFilter
    rpfPath.EntityData.YangName = "rpf-path"
    rpfPath.EntityData.BundleName = "cisco_ios_xr"
    rpfPath.EntityData.ParentYangName = "router-lsa-type"
    rpfPath.EntityData.SegmentPath = "rpf-path"
    rpfPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/router-lsa-type/" + rpfPath.EntityData.SegmentPath
    rpfPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rpfPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rpfPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rpfPath.EntityData.Children = types.NewOrderedMap()
    rpfPath.EntityData.Leafs = types.NewOrderedMap()
    rpfPath.EntityData.Leafs.Append("rpf-multicast-next-hop", types.YLeaf{"RpfMulticastNextHop", rpfPath.RpfMulticastNextHop})
    rpfPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", rpfPath.InterfaceName})

    rpfPath.EntityData.YListKeys = []string {}

    return &(rpfPath.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link
// List of links in this LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Type of link. The type is Ospfv3Link.
    LinkType interface{}

    // LSA link metric . The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // LSA link interface ID . The type is interface{} with range: 0..4294967295.
    LinkInterfaceId interface{}

    // LSA link neighbor interface ID . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborInterfaceId interface{}

    // LSA link neigbhor router id . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborRouterId interface{}
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "router-lsa-type"
    link.EntityData.SegmentPath = "link" + types.AddNoKeyToken(link)
    link.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/router-lsa-type/" + link.EntityData.SegmentPath
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = types.NewOrderedMap()
    link.EntityData.Leafs = types.NewOrderedMap()
    link.EntityData.Leafs.Append("link-type", types.YLeaf{"LinkType", link.LinkType})
    link.EntityData.Leafs.Append("link-metric", types.YLeaf{"LinkMetric", link.LinkMetric})
    link.EntityData.Leafs.Append("link-interface-id", types.YLeaf{"LinkInterfaceId", link.LinkInterfaceId})
    link.EntityData.Leafs.Append("link-neighbor-interface-id", types.YLeaf{"LinkNeighborInterfaceId", link.LinkNeighborInterfaceId})
    link.EntityData.Leafs.Append("link-neighbor-router-id", types.YLeaf{"LinkNeighborRouterId", link.LinkNeighborRouterId})

    link.EntityData.YListKeys = []string {}

    return &(link.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType
// Network LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor router list. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborRouter []interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetEntityData() *types.CommonEntityData {
    networkLsaType.EntityData.YFilter = networkLsaType.YFilter
    networkLsaType.EntityData.YangName = "network-lsa-type"
    networkLsaType.EntityData.BundleName = "cisco_ios_xr"
    networkLsaType.EntityData.ParentYangName = "lsa-info"
    networkLsaType.EntityData.SegmentPath = "network-lsa-type"
    networkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + networkLsaType.EntityData.SegmentPath
    networkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkLsaType.EntityData.Children = types.NewOrderedMap()
    networkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &networkLsaType.LsaHeader})
    networkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &networkLsaType.LsaDetail})
    networkLsaType.EntityData.Leafs = types.NewOrderedMap()
    networkLsaType.EntityData.Leafs.Append("neighbor-router", types.YLeaf{"NeighborRouter", networkLsaType.NeighborRouter})

    networkLsaType.EntityData.YListKeys = []string {}

    return &(networkLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "network-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/network-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "network-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/network-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType
// Inter Area Prefix LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetEntityData() *types.CommonEntityData {
    interAreaPrefixLsaType.EntityData.YFilter = interAreaPrefixLsaType.YFilter
    interAreaPrefixLsaType.EntityData.YangName = "inter-area-prefix-lsa-type"
    interAreaPrefixLsaType.EntityData.BundleName = "cisco_ios_xr"
    interAreaPrefixLsaType.EntityData.ParentYangName = "lsa-info"
    interAreaPrefixLsaType.EntityData.SegmentPath = "inter-area-prefix-lsa-type"
    interAreaPrefixLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + interAreaPrefixLsaType.EntityData.SegmentPath
    interAreaPrefixLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interAreaPrefixLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interAreaPrefixLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interAreaPrefixLsaType.EntityData.Children = types.NewOrderedMap()
    interAreaPrefixLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &interAreaPrefixLsaType.LsaHeader})
    interAreaPrefixLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &interAreaPrefixLsaType.LsaDetail})
    interAreaPrefixLsaType.EntityData.Leafs = types.NewOrderedMap()
    interAreaPrefixLsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", interAreaPrefixLsaType.Prefix})
    interAreaPrefixLsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interAreaPrefixLsaType.PrefixLength})
    interAreaPrefixLsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", interAreaPrefixLsaType.Priority})

    interAreaPrefixLsaType.EntityData.YListKeys = []string {}

    return &(interAreaPrefixLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "inter-area-prefix-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/inter-area-prefix-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "inter-area-prefix-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/inter-area-prefix-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType
// Inter Area Router LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetEntityData() *types.CommonEntityData {
    interAreaRouterLsaType.EntityData.YFilter = interAreaRouterLsaType.YFilter
    interAreaRouterLsaType.EntityData.YangName = "inter-area-router-lsa-type"
    interAreaRouterLsaType.EntityData.BundleName = "cisco_ios_xr"
    interAreaRouterLsaType.EntityData.ParentYangName = "lsa-info"
    interAreaRouterLsaType.EntityData.SegmentPath = "inter-area-router-lsa-type"
    interAreaRouterLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + interAreaRouterLsaType.EntityData.SegmentPath
    interAreaRouterLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interAreaRouterLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interAreaRouterLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interAreaRouterLsaType.EntityData.Children = types.NewOrderedMap()
    interAreaRouterLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &interAreaRouterLsaType.LsaHeader})
    interAreaRouterLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &interAreaRouterLsaType.LsaDetail})
    interAreaRouterLsaType.EntityData.Leafs = types.NewOrderedMap()
    interAreaRouterLsaType.EntityData.Leafs.Append("lsa-router-id", types.YLeaf{"LsaRouterId", interAreaRouterLsaType.LsaRouterId})

    interAreaRouterLsaType.EntityData.YListKeys = []string {}

    return &(interAreaRouterLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "inter-area-router-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/inter-area-router-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "inter-area-router-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/inter-area-router-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType
// External LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetEntityData() *types.CommonEntityData {
    externalLsaType.EntityData.YFilter = externalLsaType.YFilter
    externalLsaType.EntityData.YangName = "external-lsa-type"
    externalLsaType.EntityData.BundleName = "cisco_ios_xr"
    externalLsaType.EntityData.ParentYangName = "lsa-info"
    externalLsaType.EntityData.SegmentPath = "external-lsa-type"
    externalLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + externalLsaType.EntityData.SegmentPath
    externalLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalLsaType.EntityData.Children = types.NewOrderedMap()
    externalLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &externalLsaType.LsaHeader})
    externalLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &externalLsaType.LsaDetail})
    externalLsaType.EntityData.Leafs = types.NewOrderedMap()
    externalLsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", externalLsaType.Prefix})
    externalLsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", externalLsaType.PrefixLength})
    externalLsaType.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", externalLsaType.MetricType})
    externalLsaType.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", externalLsaType.TosCost})
    externalLsaType.EntityData.Leafs.Append("is-forwarding-address-set", types.YLeaf{"IsForwardingAddressSet", externalLsaType.IsForwardingAddressSet})
    externalLsaType.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", externalLsaType.ForwardingAddress})
    externalLsaType.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", externalLsaType.ExternalTag})
    externalLsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", externalLsaType.Priority})

    externalLsaType.EntityData.YListKeys = []string {}

    return &(externalLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "external-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/external-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "external-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/external-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType
// NSSA External LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetEntityData() *types.CommonEntityData {
    nssalsaType.EntityData.YFilter = nssalsaType.YFilter
    nssalsaType.EntityData.YangName = "nssalsa-type"
    nssalsaType.EntityData.BundleName = "cisco_ios_xr"
    nssalsaType.EntityData.ParentYangName = "lsa-info"
    nssalsaType.EntityData.SegmentPath = "nssalsa-type"
    nssalsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + nssalsaType.EntityData.SegmentPath
    nssalsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nssalsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nssalsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nssalsaType.EntityData.Children = types.NewOrderedMap()
    nssalsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &nssalsaType.LsaHeader})
    nssalsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &nssalsaType.LsaDetail})
    nssalsaType.EntityData.Leafs = types.NewOrderedMap()
    nssalsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", nssalsaType.Prefix})
    nssalsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", nssalsaType.PrefixLength})
    nssalsaType.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", nssalsaType.MetricType})
    nssalsaType.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", nssalsaType.TosCost})
    nssalsaType.EntityData.Leafs.Append("is-forwarding-address-set", types.YLeaf{"IsForwardingAddressSet", nssalsaType.IsForwardingAddressSet})
    nssalsaType.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", nssalsaType.ForwardingAddress})
    nssalsaType.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", nssalsaType.ExternalTag})
    nssalsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", nssalsaType.Priority})

    nssalsaType.EntityData.YListKeys = []string {}

    return &(nssalsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "nssalsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/nssalsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "nssalsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/nssalsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType
// Link LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // LSA link local . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LsaLinkLocal interface{}

    // Router priority . The type is interface{} with range: 0..255.
    RouterPriority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix.
    Prefix []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetEntityData() *types.CommonEntityData {
    linkLsaType.EntityData.YFilter = linkLsaType.YFilter
    linkLsaType.EntityData.YangName = "link-lsa-type"
    linkLsaType.EntityData.BundleName = "cisco_ios_xr"
    linkLsaType.EntityData.ParentYangName = "lsa-info"
    linkLsaType.EntityData.SegmentPath = "link-lsa-type"
    linkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + linkLsaType.EntityData.SegmentPath
    linkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkLsaType.EntityData.Children = types.NewOrderedMap()
    linkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &linkLsaType.LsaHeader})
    linkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &linkLsaType.LsaDetail})
    linkLsaType.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range linkLsaType.Prefix {
        types.SetYListKey(linkLsaType.Prefix[i], i)
        linkLsaType.EntityData.Children.Append(types.GetSegmentPath(linkLsaType.Prefix[i]), types.YChild{"Prefix", linkLsaType.Prefix[i]})
    }
    linkLsaType.EntityData.Leafs = types.NewOrderedMap()
    linkLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkLsaType.InterfaceName})
    linkLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", linkLsaType.IsVirtualLink})
    linkLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", linkLsaType.VirtualLinkId})
    linkLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", linkLsaType.IsShamLink})
    linkLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", linkLsaType.ShamLinkId})
    linkLsaType.EntityData.Leafs.Append("lsa-link-local", types.YLeaf{"LsaLinkLocal", linkLsaType.LsaLinkLocal})
    linkLsaType.EntityData.Leafs.Append("router-priority", types.YLeaf{"RouterPriority", linkLsaType.RouterPriority})

    linkLsaType.EntityData.YListKeys = []string {}

    return &(linkLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "link-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/link-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "link-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/link-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "link-lsa-type"
    prefix.EntityData.SegmentPath = "prefix" + types.AddNoKeyToken(prefix)
    prefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/link-lsa-type/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-length", types.YLeaf{"Ospfv3PrefixLength", prefix.Ospfv3PrefixLength})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-options", types.YLeaf{"Ospfv3PrefixOptions", prefix.Ospfv3PrefixOptions})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-metric", types.YLeaf{"Ospfv3PrefixMetric", prefix.Ospfv3PrefixMetric})
    prefix.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", prefix.Priority})

    prefix.EntityData.YListKeys = []string {}

    return &(prefix.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType
// Intra Area Prefix LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference type . The type is Ospfv3Lsa1.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // Reference advertised router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ReferenceAdvertisedRouter interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix.
    Prefix []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetEntityData() *types.CommonEntityData {
    intraAreaPrefixLsaType.EntityData.YFilter = intraAreaPrefixLsaType.YFilter
    intraAreaPrefixLsaType.EntityData.YangName = "intra-area-prefix-lsa-type"
    intraAreaPrefixLsaType.EntityData.BundleName = "cisco_ios_xr"
    intraAreaPrefixLsaType.EntityData.ParentYangName = "lsa-info"
    intraAreaPrefixLsaType.EntityData.SegmentPath = "intra-area-prefix-lsa-type"
    intraAreaPrefixLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + intraAreaPrefixLsaType.EntityData.SegmentPath
    intraAreaPrefixLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    intraAreaPrefixLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    intraAreaPrefixLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    intraAreaPrefixLsaType.EntityData.Children = types.NewOrderedMap()
    intraAreaPrefixLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &intraAreaPrefixLsaType.LsaHeader})
    intraAreaPrefixLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &intraAreaPrefixLsaType.LsaDetail})
    intraAreaPrefixLsaType.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range intraAreaPrefixLsaType.Prefix {
        types.SetYListKey(intraAreaPrefixLsaType.Prefix[i], i)
        intraAreaPrefixLsaType.EntityData.Children.Append(types.GetSegmentPath(intraAreaPrefixLsaType.Prefix[i]), types.YChild{"Prefix", intraAreaPrefixLsaType.Prefix[i]})
    }
    intraAreaPrefixLsaType.EntityData.Leafs = types.NewOrderedMap()
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-type", types.YLeaf{"ReferenceType", intraAreaPrefixLsaType.ReferenceType})
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-lsa-id", types.YLeaf{"ReferenceLsaId", intraAreaPrefixLsaType.ReferenceLsaId})
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-advertised-router", types.YLeaf{"ReferenceAdvertisedRouter", intraAreaPrefixLsaType.ReferenceAdvertisedRouter})

    intraAreaPrefixLsaType.EntityData.YListKeys = []string {}

    return &(intraAreaPrefixLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    prefix.EntityData.SegmentPath = "prefix" + types.AddNoKeyToken(prefix)
    prefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-length", types.YLeaf{"Ospfv3PrefixLength", prefix.Ospfv3PrefixLength})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-options", types.YLeaf{"Ospfv3PrefixOptions", prefix.Ospfv3PrefixOptions})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-metric", types.YLeaf{"Ospfv3PrefixMetric", prefix.Ospfv3PrefixMetric})
    prefix.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", prefix.Priority})

    prefix.EntityData.YListKeys = []string {}

    return &(prefix.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa
// Grace LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // The grace periord where helper routers should wait before advertising it
    // fully adjacent(s) . The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is Ospfv3GracefulRestartReason.
    GraceReason interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetEntityData() *types.CommonEntityData {
    graceLsa.EntityData.YFilter = graceLsa.YFilter
    graceLsa.EntityData.YangName = "grace-lsa"
    graceLsa.EntityData.BundleName = "cisco_ios_xr"
    graceLsa.EntityData.ParentYangName = "lsa-info"
    graceLsa.EntityData.SegmentPath = "grace-lsa"
    graceLsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + graceLsa.EntityData.SegmentPath
    graceLsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    graceLsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    graceLsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    graceLsa.EntityData.Children = types.NewOrderedMap()
    graceLsa.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &graceLsa.LsaHeader})
    graceLsa.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &graceLsa.LsaDetail})
    graceLsa.EntityData.Leafs = types.NewOrderedMap()
    graceLsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", graceLsa.InterfaceName})
    graceLsa.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", graceLsa.IsVirtualLink})
    graceLsa.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", graceLsa.VirtualLinkId})
    graceLsa.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", graceLsa.IsShamLink})
    graceLsa.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", graceLsa.ShamLinkId})
    graceLsa.EntityData.Leafs.Append("grace-period", types.YLeaf{"GracePeriod", graceLsa.GracePeriod})
    graceLsa.EntityData.Leafs.Append("grace-reason", types.YLeaf{"GraceReason", graceLsa.GraceReason})

    graceLsa.EntityData.YListKeys = []string {}

    return &(graceLsa.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "grace-lsa"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/grace-lsa/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "grace-lsa"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/grace-lsa/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType
// Unknown Link Scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetEntityData() *types.CommonEntityData {
    unknownLinkLsaType.EntityData.YFilter = unknownLinkLsaType.YFilter
    unknownLinkLsaType.EntityData.YangName = "unknown-link-lsa-type"
    unknownLinkLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownLinkLsaType.EntityData.ParentYangName = "lsa-info"
    unknownLinkLsaType.EntityData.SegmentPath = "unknown-link-lsa-type"
    unknownLinkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + unknownLinkLsaType.EntityData.SegmentPath
    unknownLinkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownLinkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownLinkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownLinkLsaType.EntityData.Children = types.NewOrderedMap()
    unknownLinkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownLinkLsaType.LsaHeader})
    unknownLinkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownLinkLsaType.LsaDetail})
    unknownLinkLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownLinkLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownLinkLsaType.InterfaceName})
    unknownLinkLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownLinkLsaType.IsVirtualLink})
    unknownLinkLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownLinkLsaType.VirtualLinkId})
    unknownLinkLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownLinkLsaType.IsShamLink})
    unknownLinkLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownLinkLsaType.ShamLinkId})

    unknownLinkLsaType.EntityData.YListKeys = []string {}

    return &(unknownLinkLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-link-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/unknown-link-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-link-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/unknown-link-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType
// Unknown-Area scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetEntityData() *types.CommonEntityData {
    unknownAreaLsaType.EntityData.YFilter = unknownAreaLsaType.YFilter
    unknownAreaLsaType.EntityData.YangName = "unknown-area-lsa-type"
    unknownAreaLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownAreaLsaType.EntityData.ParentYangName = "lsa-info"
    unknownAreaLsaType.EntityData.SegmentPath = "unknown-area-lsa-type"
    unknownAreaLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + unknownAreaLsaType.EntityData.SegmentPath
    unknownAreaLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownAreaLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownAreaLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownAreaLsaType.EntityData.Children = types.NewOrderedMap()
    unknownAreaLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownAreaLsaType.LsaHeader})
    unknownAreaLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownAreaLsaType.LsaDetail})
    unknownAreaLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownAreaLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownAreaLsaType.InterfaceName})
    unknownAreaLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownAreaLsaType.IsVirtualLink})
    unknownAreaLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownAreaLsaType.VirtualLinkId})
    unknownAreaLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownAreaLsaType.IsShamLink})
    unknownAreaLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownAreaLsaType.ShamLinkId})

    unknownAreaLsaType.EntityData.YListKeys = []string {}

    return &(unknownAreaLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-area-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/unknown-area-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-area-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/unknown-area-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType
// Unknown-AS scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetEntityData() *types.CommonEntityData {
    unknownAslsaType.EntityData.YFilter = unknownAslsaType.YFilter
    unknownAslsaType.EntityData.YangName = "unknown-aslsa-type"
    unknownAslsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownAslsaType.EntityData.ParentYangName = "lsa-info"
    unknownAslsaType.EntityData.SegmentPath = "unknown-aslsa-type"
    unknownAslsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + unknownAslsaType.EntityData.SegmentPath
    unknownAslsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownAslsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownAslsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownAslsaType.EntityData.Children = types.NewOrderedMap()
    unknownAslsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownAslsaType.LsaHeader})
    unknownAslsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownAslsaType.LsaDetail})
    unknownAslsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownAslsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownAslsaType.InterfaceName})
    unknownAslsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownAslsaType.IsVirtualLink})
    unknownAslsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownAslsaType.VirtualLinkId})
    unknownAslsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownAslsaType.IsShamLink})
    unknownAslsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownAslsaType.ShamLinkId})

    unknownAslsaType.EntityData.YListKeys = []string {}

    return &(unknownAslsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-aslsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/unknown-aslsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-aslsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/unknown-aslsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType
// Unknown LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetEntityData() *types.CommonEntityData {
    unknownLsaType.EntityData.YFilter = unknownLsaType.YFilter
    unknownLsaType.EntityData.YangName = "unknown-lsa-type"
    unknownLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownLsaType.EntityData.ParentYangName = "lsa-info"
    unknownLsaType.EntityData.SegmentPath = "unknown-lsa-type"
    unknownLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + unknownLsaType.EntityData.SegmentPath
    unknownLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownLsaType.EntityData.Children = types.NewOrderedMap()
    unknownLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownLsaType.LsaHeader})
    unknownLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownLsaType.LsaDetail})
    unknownLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownLsaType.InterfaceName})
    unknownLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownLsaType.IsVirtualLink})
    unknownLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownLsaType.VirtualLinkId})
    unknownLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownLsaType.IsShamLink})
    unknownLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownLsaType.ShamLinkId})

    unknownLsaType.EntityData.YListKeys = []string {}

    return &(unknownLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/unknown-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-table/lsa/lsa-info/unknown-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable
// Database LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database LSA information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa.
    Lsa []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa
}

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable) GetEntityData() *types.CommonEntityData {
    lsaInternalTable.EntityData.YFilter = lsaInternalTable.YFilter
    lsaInternalTable.EntityData.YangName = "lsa-internal-table"
    lsaInternalTable.EntityData.BundleName = "cisco_ios_xr"
    lsaInternalTable.EntityData.ParentYangName = "database-table"
    lsaInternalTable.EntityData.SegmentPath = "lsa-internal-table"
    lsaInternalTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/" + lsaInternalTable.EntityData.SegmentPath
    lsaInternalTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaInternalTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaInternalTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaInternalTable.EntityData.Children = types.NewOrderedMap()
    lsaInternalTable.EntityData.Children.Append("lsa", types.YChild{"Lsa", nil})
    for i := range lsaInternalTable.Lsa {
        types.SetYListKey(lsaInternalTable.Lsa[i], i)
        lsaInternalTable.EntityData.Children.Append(types.GetSegmentPath(lsaInternalTable.Lsa[i]), types.YChild{"Lsa", lsaInternalTable.Lsa[i]})
    }
    lsaInternalTable.EntityData.Leafs = types.NewOrderedMap()

    lsaInternalTable.EntityData.YListKeys = []string {}

    return &(lsaInternalTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa
// Database LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // LSA type. The type is Ospfv3Lsa.
    LsType interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Link state ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Summary of all LSAs or LSA specific information .
    LsaInfo Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetEntityData() *types.CommonEntityData {
    lsa.EntityData.YFilter = lsa.YFilter
    lsa.EntityData.YangName = "lsa"
    lsa.EntityData.BundleName = "cisco_ios_xr"
    lsa.EntityData.ParentYangName = "lsa-internal-table"
    lsa.EntityData.SegmentPath = "lsa" + types.AddNoKeyToken(lsa)
    lsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/" + lsa.EntityData.SegmentPath
    lsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsa.EntityData.Children = types.NewOrderedMap()
    lsa.EntityData.Children.Append("lsa-info", types.YChild{"LsaInfo", &lsa.LsaInfo})
    lsa.EntityData.Leafs = types.NewOrderedMap()
    lsa.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", lsa.AreaId})
    lsa.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsa.LsType})
    lsa.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsa.AdvertisingRouter})
    lsa.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsa.LsId})
    lsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsa.InterfaceName})

    lsa.EntityData.YListKeys = []string {}

    return &(lsa.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo
// Summary of all LSAs or LSA specific information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSAInfoType. The type is Ospfv3LsaInfoTypes.
    LsaInfoType interface{}

    // Summary information of LSAs.
    LsaSummaryInfo Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo

    // Router LSA.
    RouterLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType

    // Inter Area Prefix LSA.
    InterAreaPrefixLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType

    // Inter Area Router LSA.
    InterAreaRouterLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType

    // External LSA.
    ExternalLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType

    // NSSA External LSA.
    NssalsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType

    // Link LSA.
    LinkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType

    // Intra Area Prefix LSA.
    IntraAreaPrefixLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType

    // Grace LSA.
    GraceLsa Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa

    // Unknown Link Scope LSA.
    UnknownLinkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType

    // Unknown-Area scope LSA.
    UnknownAreaLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType

    // Unknown-AS scope LSA.
    UnknownAslsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType

    // Unknown LSA.
    UnknownLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetEntityData() *types.CommonEntityData {
    lsaInfo.EntityData.YFilter = lsaInfo.YFilter
    lsaInfo.EntityData.YangName = "lsa-info"
    lsaInfo.EntityData.BundleName = "cisco_ios_xr"
    lsaInfo.EntityData.ParentYangName = "lsa"
    lsaInfo.EntityData.SegmentPath = "lsa-info"
    lsaInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/" + lsaInfo.EntityData.SegmentPath
    lsaInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaInfo.EntityData.Children = types.NewOrderedMap()
    lsaInfo.EntityData.Children.Append("lsa-summary-info", types.YChild{"LsaSummaryInfo", &lsaInfo.LsaSummaryInfo})
    lsaInfo.EntityData.Children.Append("router-lsa-type", types.YChild{"RouterLsaType", &lsaInfo.RouterLsaType})
    lsaInfo.EntityData.Children.Append("network-lsa-type", types.YChild{"NetworkLsaType", &lsaInfo.NetworkLsaType})
    lsaInfo.EntityData.Children.Append("inter-area-prefix-lsa-type", types.YChild{"InterAreaPrefixLsaType", &lsaInfo.InterAreaPrefixLsaType})
    lsaInfo.EntityData.Children.Append("inter-area-router-lsa-type", types.YChild{"InterAreaRouterLsaType", &lsaInfo.InterAreaRouterLsaType})
    lsaInfo.EntityData.Children.Append("external-lsa-type", types.YChild{"ExternalLsaType", &lsaInfo.ExternalLsaType})
    lsaInfo.EntityData.Children.Append("nssalsa-type", types.YChild{"NssalsaType", &lsaInfo.NssalsaType})
    lsaInfo.EntityData.Children.Append("link-lsa-type", types.YChild{"LinkLsaType", &lsaInfo.LinkLsaType})
    lsaInfo.EntityData.Children.Append("intra-area-prefix-lsa-type", types.YChild{"IntraAreaPrefixLsaType", &lsaInfo.IntraAreaPrefixLsaType})
    lsaInfo.EntityData.Children.Append("grace-lsa", types.YChild{"GraceLsa", &lsaInfo.GraceLsa})
    lsaInfo.EntityData.Children.Append("unknown-link-lsa-type", types.YChild{"UnknownLinkLsaType", &lsaInfo.UnknownLinkLsaType})
    lsaInfo.EntityData.Children.Append("unknown-area-lsa-type", types.YChild{"UnknownAreaLsaType", &lsaInfo.UnknownAreaLsaType})
    lsaInfo.EntityData.Children.Append("unknown-aslsa-type", types.YChild{"UnknownAslsaType", &lsaInfo.UnknownAslsaType})
    lsaInfo.EntityData.Children.Append("unknown-lsa-type", types.YChild{"UnknownLsaType", &lsaInfo.UnknownLsaType})
    lsaInfo.EntityData.Leafs = types.NewOrderedMap()
    lsaInfo.EntityData.Leafs.Append("lsa-info-type", types.YLeaf{"LsaInfoType", lsaInfo.LsaInfoType})

    lsaInfo.EntityData.YListKeys = []string {}

    return &(lsaInfo.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo
// Summary information of LSAs
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of links. The type is interface{} with range: 0..65535.
    Links interface{}

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Reference type . The type is interface{} with range: 0..65535.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // OSPFv3 address Prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetEntityData() *types.CommonEntityData {
    lsaSummaryInfo.EntityData.YFilter = lsaSummaryInfo.YFilter
    lsaSummaryInfo.EntityData.YangName = "lsa-summary-info"
    lsaSummaryInfo.EntityData.BundleName = "cisco_ios_xr"
    lsaSummaryInfo.EntityData.ParentYangName = "lsa-info"
    lsaSummaryInfo.EntityData.SegmentPath = "lsa-summary-info"
    lsaSummaryInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + lsaSummaryInfo.EntityData.SegmentPath
    lsaSummaryInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaSummaryInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaSummaryInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaSummaryInfo.EntityData.Children = types.NewOrderedMap()
    lsaSummaryInfo.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &lsaSummaryInfo.LsaHeader})
    lsaSummaryInfo.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &lsaSummaryInfo.LsaDetail})
    lsaSummaryInfo.EntityData.Leafs = types.NewOrderedMap()
    lsaSummaryInfo.EntityData.Leafs.Append("links", types.YLeaf{"Links", lsaSummaryInfo.Links})
    lsaSummaryInfo.EntityData.Leafs.Append("router-la-bits", types.YLeaf{"RouterLaBits", lsaSummaryInfo.RouterLaBits})
    lsaSummaryInfo.EntityData.Leafs.Append("reference-type", types.YLeaf{"ReferenceType", lsaSummaryInfo.ReferenceType})
    lsaSummaryInfo.EntityData.Leafs.Append("reference-lsa-id", types.YLeaf{"ReferenceLsaId", lsaSummaryInfo.ReferenceLsaId})
    lsaSummaryInfo.EntityData.Leafs.Append("lsa-router-id", types.YLeaf{"LsaRouterId", lsaSummaryInfo.LsaRouterId})
    lsaSummaryInfo.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", lsaSummaryInfo.Prefix})
    lsaSummaryInfo.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", lsaSummaryInfo.PrefixLength})
    lsaSummaryInfo.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsaSummaryInfo.InterfaceName})
    lsaSummaryInfo.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", lsaSummaryInfo.IsVirtualLink})
    lsaSummaryInfo.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", lsaSummaryInfo.VirtualLinkId})
    lsaSummaryInfo.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", lsaSummaryInfo.IsShamLink})
    lsaSummaryInfo.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", lsaSummaryInfo.ShamLinkId})

    lsaSummaryInfo.EntityData.YListKeys = []string {}

    return &(lsaSummaryInfo.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "lsa-summary-info"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/lsa-summary-info/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "lsa-summary-info"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/lsa-summary-info/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType
// Router LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail

    // Router LSA Reverse-Path Forwarding information .
    RpfPath Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath

    // List of links in this LSA. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link.
    Link []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetEntityData() *types.CommonEntityData {
    routerLsaType.EntityData.YFilter = routerLsaType.YFilter
    routerLsaType.EntityData.YangName = "router-lsa-type"
    routerLsaType.EntityData.BundleName = "cisco_ios_xr"
    routerLsaType.EntityData.ParentYangName = "lsa-info"
    routerLsaType.EntityData.SegmentPath = "router-lsa-type"
    routerLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + routerLsaType.EntityData.SegmentPath
    routerLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routerLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routerLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routerLsaType.EntityData.Children = types.NewOrderedMap()
    routerLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &routerLsaType.LsaHeader})
    routerLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &routerLsaType.LsaDetail})
    routerLsaType.EntityData.Children.Append("rpf-path", types.YChild{"RpfPath", &routerLsaType.RpfPath})
    routerLsaType.EntityData.Children.Append("link", types.YChild{"Link", nil})
    for i := range routerLsaType.Link {
        types.SetYListKey(routerLsaType.Link[i], i)
        routerLsaType.EntityData.Children.Append(types.GetSegmentPath(routerLsaType.Link[i]), types.YChild{"Link", routerLsaType.Link[i]})
    }
    routerLsaType.EntityData.Leafs = types.NewOrderedMap()
    routerLsaType.EntityData.Leafs.Append("router-la-bits", types.YLeaf{"RouterLaBits", routerLsaType.RouterLaBits})

    routerLsaType.EntityData.YListKeys = []string {}

    return &(routerLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "router-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/router-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "router-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/router-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath
// Router LSA Reverse-Path Forwarding information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RPF multicast next hop . The type is interface{} with range: 0..4294967295.
    RpfMulticastNextHop interface{}

    // RPF multicast IDB . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetEntityData() *types.CommonEntityData {
    rpfPath.EntityData.YFilter = rpfPath.YFilter
    rpfPath.EntityData.YangName = "rpf-path"
    rpfPath.EntityData.BundleName = "cisco_ios_xr"
    rpfPath.EntityData.ParentYangName = "router-lsa-type"
    rpfPath.EntityData.SegmentPath = "rpf-path"
    rpfPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/router-lsa-type/" + rpfPath.EntityData.SegmentPath
    rpfPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rpfPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rpfPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rpfPath.EntityData.Children = types.NewOrderedMap()
    rpfPath.EntityData.Leafs = types.NewOrderedMap()
    rpfPath.EntityData.Leafs.Append("rpf-multicast-next-hop", types.YLeaf{"RpfMulticastNextHop", rpfPath.RpfMulticastNextHop})
    rpfPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", rpfPath.InterfaceName})

    rpfPath.EntityData.YListKeys = []string {}

    return &(rpfPath.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link
// List of links in this LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Type of link. The type is Ospfv3Link.
    LinkType interface{}

    // LSA link metric . The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // LSA link interface ID . The type is interface{} with range: 0..4294967295.
    LinkInterfaceId interface{}

    // LSA link neighbor interface ID . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborInterfaceId interface{}

    // LSA link neigbhor router id . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborRouterId interface{}
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "router-lsa-type"
    link.EntityData.SegmentPath = "link" + types.AddNoKeyToken(link)
    link.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/router-lsa-type/" + link.EntityData.SegmentPath
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = types.NewOrderedMap()
    link.EntityData.Leafs = types.NewOrderedMap()
    link.EntityData.Leafs.Append("link-type", types.YLeaf{"LinkType", link.LinkType})
    link.EntityData.Leafs.Append("link-metric", types.YLeaf{"LinkMetric", link.LinkMetric})
    link.EntityData.Leafs.Append("link-interface-id", types.YLeaf{"LinkInterfaceId", link.LinkInterfaceId})
    link.EntityData.Leafs.Append("link-neighbor-interface-id", types.YLeaf{"LinkNeighborInterfaceId", link.LinkNeighborInterfaceId})
    link.EntityData.Leafs.Append("link-neighbor-router-id", types.YLeaf{"LinkNeighborRouterId", link.LinkNeighborRouterId})

    link.EntityData.YListKeys = []string {}

    return &(link.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType
// Network LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor router list. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborRouter []interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetEntityData() *types.CommonEntityData {
    networkLsaType.EntityData.YFilter = networkLsaType.YFilter
    networkLsaType.EntityData.YangName = "network-lsa-type"
    networkLsaType.EntityData.BundleName = "cisco_ios_xr"
    networkLsaType.EntityData.ParentYangName = "lsa-info"
    networkLsaType.EntityData.SegmentPath = "network-lsa-type"
    networkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + networkLsaType.EntityData.SegmentPath
    networkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkLsaType.EntityData.Children = types.NewOrderedMap()
    networkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &networkLsaType.LsaHeader})
    networkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &networkLsaType.LsaDetail})
    networkLsaType.EntityData.Leafs = types.NewOrderedMap()
    networkLsaType.EntityData.Leafs.Append("neighbor-router", types.YLeaf{"NeighborRouter", networkLsaType.NeighborRouter})

    networkLsaType.EntityData.YListKeys = []string {}

    return &(networkLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "network-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/network-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "network-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/network-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType
// Inter Area Prefix LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetEntityData() *types.CommonEntityData {
    interAreaPrefixLsaType.EntityData.YFilter = interAreaPrefixLsaType.YFilter
    interAreaPrefixLsaType.EntityData.YangName = "inter-area-prefix-lsa-type"
    interAreaPrefixLsaType.EntityData.BundleName = "cisco_ios_xr"
    interAreaPrefixLsaType.EntityData.ParentYangName = "lsa-info"
    interAreaPrefixLsaType.EntityData.SegmentPath = "inter-area-prefix-lsa-type"
    interAreaPrefixLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + interAreaPrefixLsaType.EntityData.SegmentPath
    interAreaPrefixLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interAreaPrefixLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interAreaPrefixLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interAreaPrefixLsaType.EntityData.Children = types.NewOrderedMap()
    interAreaPrefixLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &interAreaPrefixLsaType.LsaHeader})
    interAreaPrefixLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &interAreaPrefixLsaType.LsaDetail})
    interAreaPrefixLsaType.EntityData.Leafs = types.NewOrderedMap()
    interAreaPrefixLsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", interAreaPrefixLsaType.Prefix})
    interAreaPrefixLsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interAreaPrefixLsaType.PrefixLength})
    interAreaPrefixLsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", interAreaPrefixLsaType.Priority})

    interAreaPrefixLsaType.EntityData.YListKeys = []string {}

    return &(interAreaPrefixLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "inter-area-prefix-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/inter-area-prefix-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "inter-area-prefix-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/inter-area-prefix-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType
// Inter Area Router LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetEntityData() *types.CommonEntityData {
    interAreaRouterLsaType.EntityData.YFilter = interAreaRouterLsaType.YFilter
    interAreaRouterLsaType.EntityData.YangName = "inter-area-router-lsa-type"
    interAreaRouterLsaType.EntityData.BundleName = "cisco_ios_xr"
    interAreaRouterLsaType.EntityData.ParentYangName = "lsa-info"
    interAreaRouterLsaType.EntityData.SegmentPath = "inter-area-router-lsa-type"
    interAreaRouterLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + interAreaRouterLsaType.EntityData.SegmentPath
    interAreaRouterLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interAreaRouterLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interAreaRouterLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interAreaRouterLsaType.EntityData.Children = types.NewOrderedMap()
    interAreaRouterLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &interAreaRouterLsaType.LsaHeader})
    interAreaRouterLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &interAreaRouterLsaType.LsaDetail})
    interAreaRouterLsaType.EntityData.Leafs = types.NewOrderedMap()
    interAreaRouterLsaType.EntityData.Leafs.Append("lsa-router-id", types.YLeaf{"LsaRouterId", interAreaRouterLsaType.LsaRouterId})

    interAreaRouterLsaType.EntityData.YListKeys = []string {}

    return &(interAreaRouterLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "inter-area-router-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/inter-area-router-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "inter-area-router-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/inter-area-router-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType
// External LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetEntityData() *types.CommonEntityData {
    externalLsaType.EntityData.YFilter = externalLsaType.YFilter
    externalLsaType.EntityData.YangName = "external-lsa-type"
    externalLsaType.EntityData.BundleName = "cisco_ios_xr"
    externalLsaType.EntityData.ParentYangName = "lsa-info"
    externalLsaType.EntityData.SegmentPath = "external-lsa-type"
    externalLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + externalLsaType.EntityData.SegmentPath
    externalLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalLsaType.EntityData.Children = types.NewOrderedMap()
    externalLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &externalLsaType.LsaHeader})
    externalLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &externalLsaType.LsaDetail})
    externalLsaType.EntityData.Leafs = types.NewOrderedMap()
    externalLsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", externalLsaType.Prefix})
    externalLsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", externalLsaType.PrefixLength})
    externalLsaType.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", externalLsaType.MetricType})
    externalLsaType.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", externalLsaType.TosCost})
    externalLsaType.EntityData.Leafs.Append("is-forwarding-address-set", types.YLeaf{"IsForwardingAddressSet", externalLsaType.IsForwardingAddressSet})
    externalLsaType.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", externalLsaType.ForwardingAddress})
    externalLsaType.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", externalLsaType.ExternalTag})
    externalLsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", externalLsaType.Priority})

    externalLsaType.EntityData.YListKeys = []string {}

    return &(externalLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "external-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/external-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "external-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/external-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType
// NSSA External LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetEntityData() *types.CommonEntityData {
    nssalsaType.EntityData.YFilter = nssalsaType.YFilter
    nssalsaType.EntityData.YangName = "nssalsa-type"
    nssalsaType.EntityData.BundleName = "cisco_ios_xr"
    nssalsaType.EntityData.ParentYangName = "lsa-info"
    nssalsaType.EntityData.SegmentPath = "nssalsa-type"
    nssalsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + nssalsaType.EntityData.SegmentPath
    nssalsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nssalsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nssalsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nssalsaType.EntityData.Children = types.NewOrderedMap()
    nssalsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &nssalsaType.LsaHeader})
    nssalsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &nssalsaType.LsaDetail})
    nssalsaType.EntityData.Leafs = types.NewOrderedMap()
    nssalsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", nssalsaType.Prefix})
    nssalsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", nssalsaType.PrefixLength})
    nssalsaType.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", nssalsaType.MetricType})
    nssalsaType.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", nssalsaType.TosCost})
    nssalsaType.EntityData.Leafs.Append("is-forwarding-address-set", types.YLeaf{"IsForwardingAddressSet", nssalsaType.IsForwardingAddressSet})
    nssalsaType.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", nssalsaType.ForwardingAddress})
    nssalsaType.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", nssalsaType.ExternalTag})
    nssalsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", nssalsaType.Priority})

    nssalsaType.EntityData.YListKeys = []string {}

    return &(nssalsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "nssalsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/nssalsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "nssalsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/nssalsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType
// Link LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // LSA link local . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LsaLinkLocal interface{}

    // Router priority . The type is interface{} with range: 0..255.
    RouterPriority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix.
    Prefix []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetEntityData() *types.CommonEntityData {
    linkLsaType.EntityData.YFilter = linkLsaType.YFilter
    linkLsaType.EntityData.YangName = "link-lsa-type"
    linkLsaType.EntityData.BundleName = "cisco_ios_xr"
    linkLsaType.EntityData.ParentYangName = "lsa-info"
    linkLsaType.EntityData.SegmentPath = "link-lsa-type"
    linkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + linkLsaType.EntityData.SegmentPath
    linkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkLsaType.EntityData.Children = types.NewOrderedMap()
    linkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &linkLsaType.LsaHeader})
    linkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &linkLsaType.LsaDetail})
    linkLsaType.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range linkLsaType.Prefix {
        types.SetYListKey(linkLsaType.Prefix[i], i)
        linkLsaType.EntityData.Children.Append(types.GetSegmentPath(linkLsaType.Prefix[i]), types.YChild{"Prefix", linkLsaType.Prefix[i]})
    }
    linkLsaType.EntityData.Leafs = types.NewOrderedMap()
    linkLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkLsaType.InterfaceName})
    linkLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", linkLsaType.IsVirtualLink})
    linkLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", linkLsaType.VirtualLinkId})
    linkLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", linkLsaType.IsShamLink})
    linkLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", linkLsaType.ShamLinkId})
    linkLsaType.EntityData.Leafs.Append("lsa-link-local", types.YLeaf{"LsaLinkLocal", linkLsaType.LsaLinkLocal})
    linkLsaType.EntityData.Leafs.Append("router-priority", types.YLeaf{"RouterPriority", linkLsaType.RouterPriority})

    linkLsaType.EntityData.YListKeys = []string {}

    return &(linkLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "link-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/link-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "link-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/link-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "link-lsa-type"
    prefix.EntityData.SegmentPath = "prefix" + types.AddNoKeyToken(prefix)
    prefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/link-lsa-type/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-length", types.YLeaf{"Ospfv3PrefixLength", prefix.Ospfv3PrefixLength})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-options", types.YLeaf{"Ospfv3PrefixOptions", prefix.Ospfv3PrefixOptions})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-metric", types.YLeaf{"Ospfv3PrefixMetric", prefix.Ospfv3PrefixMetric})
    prefix.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", prefix.Priority})

    prefix.EntityData.YListKeys = []string {}

    return &(prefix.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType
// Intra Area Prefix LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference type . The type is Ospfv3Lsa1.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // Reference advertised router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ReferenceAdvertisedRouter interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix.
    Prefix []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetEntityData() *types.CommonEntityData {
    intraAreaPrefixLsaType.EntityData.YFilter = intraAreaPrefixLsaType.YFilter
    intraAreaPrefixLsaType.EntityData.YangName = "intra-area-prefix-lsa-type"
    intraAreaPrefixLsaType.EntityData.BundleName = "cisco_ios_xr"
    intraAreaPrefixLsaType.EntityData.ParentYangName = "lsa-info"
    intraAreaPrefixLsaType.EntityData.SegmentPath = "intra-area-prefix-lsa-type"
    intraAreaPrefixLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + intraAreaPrefixLsaType.EntityData.SegmentPath
    intraAreaPrefixLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    intraAreaPrefixLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    intraAreaPrefixLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    intraAreaPrefixLsaType.EntityData.Children = types.NewOrderedMap()
    intraAreaPrefixLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &intraAreaPrefixLsaType.LsaHeader})
    intraAreaPrefixLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &intraAreaPrefixLsaType.LsaDetail})
    intraAreaPrefixLsaType.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range intraAreaPrefixLsaType.Prefix {
        types.SetYListKey(intraAreaPrefixLsaType.Prefix[i], i)
        intraAreaPrefixLsaType.EntityData.Children.Append(types.GetSegmentPath(intraAreaPrefixLsaType.Prefix[i]), types.YChild{"Prefix", intraAreaPrefixLsaType.Prefix[i]})
    }
    intraAreaPrefixLsaType.EntityData.Leafs = types.NewOrderedMap()
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-type", types.YLeaf{"ReferenceType", intraAreaPrefixLsaType.ReferenceType})
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-lsa-id", types.YLeaf{"ReferenceLsaId", intraAreaPrefixLsaType.ReferenceLsaId})
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-advertised-router", types.YLeaf{"ReferenceAdvertisedRouter", intraAreaPrefixLsaType.ReferenceAdvertisedRouter})

    intraAreaPrefixLsaType.EntityData.YListKeys = []string {}

    return &(intraAreaPrefixLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    prefix.EntityData.SegmentPath = "prefix" + types.AddNoKeyToken(prefix)
    prefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-length", types.YLeaf{"Ospfv3PrefixLength", prefix.Ospfv3PrefixLength})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-options", types.YLeaf{"Ospfv3PrefixOptions", prefix.Ospfv3PrefixOptions})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-metric", types.YLeaf{"Ospfv3PrefixMetric", prefix.Ospfv3PrefixMetric})
    prefix.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", prefix.Priority})

    prefix.EntityData.YListKeys = []string {}

    return &(prefix.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa
// Grace LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // The grace periord where helper routers should wait before advertising it
    // fully adjacent(s) . The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is Ospfv3GracefulRestartReason.
    GraceReason interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetEntityData() *types.CommonEntityData {
    graceLsa.EntityData.YFilter = graceLsa.YFilter
    graceLsa.EntityData.YangName = "grace-lsa"
    graceLsa.EntityData.BundleName = "cisco_ios_xr"
    graceLsa.EntityData.ParentYangName = "lsa-info"
    graceLsa.EntityData.SegmentPath = "grace-lsa"
    graceLsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + graceLsa.EntityData.SegmentPath
    graceLsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    graceLsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    graceLsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    graceLsa.EntityData.Children = types.NewOrderedMap()
    graceLsa.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &graceLsa.LsaHeader})
    graceLsa.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &graceLsa.LsaDetail})
    graceLsa.EntityData.Leafs = types.NewOrderedMap()
    graceLsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", graceLsa.InterfaceName})
    graceLsa.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", graceLsa.IsVirtualLink})
    graceLsa.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", graceLsa.VirtualLinkId})
    graceLsa.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", graceLsa.IsShamLink})
    graceLsa.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", graceLsa.ShamLinkId})
    graceLsa.EntityData.Leafs.Append("grace-period", types.YLeaf{"GracePeriod", graceLsa.GracePeriod})
    graceLsa.EntityData.Leafs.Append("grace-reason", types.YLeaf{"GraceReason", graceLsa.GraceReason})

    graceLsa.EntityData.YListKeys = []string {}

    return &(graceLsa.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "grace-lsa"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/grace-lsa/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "grace-lsa"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/grace-lsa/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType
// Unknown Link Scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetEntityData() *types.CommonEntityData {
    unknownLinkLsaType.EntityData.YFilter = unknownLinkLsaType.YFilter
    unknownLinkLsaType.EntityData.YangName = "unknown-link-lsa-type"
    unknownLinkLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownLinkLsaType.EntityData.ParentYangName = "lsa-info"
    unknownLinkLsaType.EntityData.SegmentPath = "unknown-link-lsa-type"
    unknownLinkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + unknownLinkLsaType.EntityData.SegmentPath
    unknownLinkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownLinkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownLinkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownLinkLsaType.EntityData.Children = types.NewOrderedMap()
    unknownLinkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownLinkLsaType.LsaHeader})
    unknownLinkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownLinkLsaType.LsaDetail})
    unknownLinkLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownLinkLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownLinkLsaType.InterfaceName})
    unknownLinkLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownLinkLsaType.IsVirtualLink})
    unknownLinkLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownLinkLsaType.VirtualLinkId})
    unknownLinkLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownLinkLsaType.IsShamLink})
    unknownLinkLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownLinkLsaType.ShamLinkId})

    unknownLinkLsaType.EntityData.YListKeys = []string {}

    return &(unknownLinkLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-link-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/unknown-link-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-link-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/unknown-link-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType
// Unknown-Area scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetEntityData() *types.CommonEntityData {
    unknownAreaLsaType.EntityData.YFilter = unknownAreaLsaType.YFilter
    unknownAreaLsaType.EntityData.YangName = "unknown-area-lsa-type"
    unknownAreaLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownAreaLsaType.EntityData.ParentYangName = "lsa-info"
    unknownAreaLsaType.EntityData.SegmentPath = "unknown-area-lsa-type"
    unknownAreaLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + unknownAreaLsaType.EntityData.SegmentPath
    unknownAreaLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownAreaLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownAreaLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownAreaLsaType.EntityData.Children = types.NewOrderedMap()
    unknownAreaLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownAreaLsaType.LsaHeader})
    unknownAreaLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownAreaLsaType.LsaDetail})
    unknownAreaLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownAreaLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownAreaLsaType.InterfaceName})
    unknownAreaLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownAreaLsaType.IsVirtualLink})
    unknownAreaLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownAreaLsaType.VirtualLinkId})
    unknownAreaLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownAreaLsaType.IsShamLink})
    unknownAreaLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownAreaLsaType.ShamLinkId})

    unknownAreaLsaType.EntityData.YListKeys = []string {}

    return &(unknownAreaLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-area-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/unknown-area-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-area-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/unknown-area-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType
// Unknown-AS scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetEntityData() *types.CommonEntityData {
    unknownAslsaType.EntityData.YFilter = unknownAslsaType.YFilter
    unknownAslsaType.EntityData.YangName = "unknown-aslsa-type"
    unknownAslsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownAslsaType.EntityData.ParentYangName = "lsa-info"
    unknownAslsaType.EntityData.SegmentPath = "unknown-aslsa-type"
    unknownAslsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + unknownAslsaType.EntityData.SegmentPath
    unknownAslsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownAslsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownAslsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownAslsaType.EntityData.Children = types.NewOrderedMap()
    unknownAslsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownAslsaType.LsaHeader})
    unknownAslsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownAslsaType.LsaDetail})
    unknownAslsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownAslsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownAslsaType.InterfaceName})
    unknownAslsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownAslsaType.IsVirtualLink})
    unknownAslsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownAslsaType.VirtualLinkId})
    unknownAslsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownAslsaType.IsShamLink})
    unknownAslsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownAslsaType.ShamLinkId})

    unknownAslsaType.EntityData.YListKeys = []string {}

    return &(unknownAslsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-aslsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/unknown-aslsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-aslsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/unknown-aslsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType
// Unknown LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetEntityData() *types.CommonEntityData {
    unknownLsaType.EntityData.YFilter = unknownLsaType.YFilter
    unknownLsaType.EntityData.YangName = "unknown-lsa-type"
    unknownLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownLsaType.EntityData.ParentYangName = "lsa-info"
    unknownLsaType.EntityData.SegmentPath = "unknown-lsa-type"
    unknownLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + unknownLsaType.EntityData.SegmentPath
    unknownLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownLsaType.EntityData.Children = types.NewOrderedMap()
    unknownLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownLsaType.LsaHeader})
    unknownLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownLsaType.LsaDetail})
    unknownLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownLsaType.InterfaceName})
    unknownLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownLsaType.IsVirtualLink})
    unknownLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownLsaType.VirtualLinkId})
    unknownLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownLsaType.IsShamLink})
    unknownLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownLsaType.ShamLinkId})

    unknownLsaType.EntityData.YListKeys = []string {}

    return &(unknownLsaType.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/unknown-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/unknown-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable
// Database summary table
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database Summary information.
    DatabaseSummary Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary
}

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable) GetEntityData() *types.CommonEntityData {
    databaseSummaryTable.EntityData.YFilter = databaseSummaryTable.YFilter
    databaseSummaryTable.EntityData.YangName = "database-summary-table"
    databaseSummaryTable.EntityData.BundleName = "cisco_ios_xr"
    databaseSummaryTable.EntityData.ParentYangName = "area"
    databaseSummaryTable.EntityData.SegmentPath = "database-summary-table"
    databaseSummaryTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/" + databaseSummaryTable.EntityData.SegmentPath
    databaseSummaryTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseSummaryTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseSummaryTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseSummaryTable.EntityData.Children = types.NewOrderedMap()
    databaseSummaryTable.EntityData.Children.Append("database-summary", types.YChild{"DatabaseSummary", &databaseSummaryTable.DatabaseSummary})
    databaseSummaryTable.EntityData.Leafs = types.NewOrderedMap()

    databaseSummaryTable.EntityData.YListKeys = []string {}

    return &(databaseSummaryTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary
// Database Summary information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DatabaseRouterId interface{}

    // If true, opaque database is capable . The type is bool.
    IsOpaqueDatabaseCapable interface{}

    // OSPFv3 database counters .
    DatabaseCounters Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters

    // OSPFv3 Area Database list . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase.
    AreaDatabase []*Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase
}

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetEntityData() *types.CommonEntityData {
    databaseSummary.EntityData.YFilter = databaseSummary.YFilter
    databaseSummary.EntityData.YangName = "database-summary"
    databaseSummary.EntityData.BundleName = "cisco_ios_xr"
    databaseSummary.EntityData.ParentYangName = "database-summary-table"
    databaseSummary.EntityData.SegmentPath = "database-summary"
    databaseSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-summary-table/" + databaseSummary.EntityData.SegmentPath
    databaseSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseSummary.EntityData.Children = types.NewOrderedMap()
    databaseSummary.EntityData.Children.Append("database-counters", types.YChild{"DatabaseCounters", &databaseSummary.DatabaseCounters})
    databaseSummary.EntityData.Children.Append("area-database", types.YChild{"AreaDatabase", nil})
    for i := range databaseSummary.AreaDatabase {
        types.SetYListKey(databaseSummary.AreaDatabase[i], i)
        databaseSummary.EntityData.Children.Append(types.GetSegmentPath(databaseSummary.AreaDatabase[i]), types.YChild{"AreaDatabase", databaseSummary.AreaDatabase[i]})
    }
    databaseSummary.EntityData.Leafs = types.NewOrderedMap()
    databaseSummary.EntityData.Leafs.Append("database-router-id", types.YLeaf{"DatabaseRouterId", databaseSummary.DatabaseRouterId})
    databaseSummary.EntityData.Leafs.Append("is-opaque-database-capable", types.YLeaf{"IsOpaqueDatabaseCapable", databaseSummary.IsOpaqueDatabaseCapable})

    databaseSummary.EntityData.YListKeys = []string {}

    return &(databaseSummary.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters
// OSPFv3 database counters 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // lsa. The type is slice of interface{} with range: 0..4294967295.
    Lsa []interface{}

    // deleted lsa. The type is slice of interface{} with range: 0..4294967295.
    DeletedLsa []interface{}

    // max age lsa. The type is slice of interface{} with range: 0..4294967295.
    MaxAgeLsa []interface{}

    // lsa checksum. The type is slice of interface{} with range: 0..4294967295.
    LsaChecksum []interface{}
}

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetEntityData() *types.CommonEntityData {
    databaseCounters.EntityData.YFilter = databaseCounters.YFilter
    databaseCounters.EntityData.YangName = "database-counters"
    databaseCounters.EntityData.BundleName = "cisco_ios_xr"
    databaseCounters.EntityData.ParentYangName = "database-summary"
    databaseCounters.EntityData.SegmentPath = "database-counters"
    databaseCounters.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-summary-table/database-summary/" + databaseCounters.EntityData.SegmentPath
    databaseCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseCounters.EntityData.Children = types.NewOrderedMap()
    databaseCounters.EntityData.Leafs = types.NewOrderedMap()
    databaseCounters.EntityData.Leafs.Append("lsa", types.YLeaf{"Lsa", databaseCounters.Lsa})
    databaseCounters.EntityData.Leafs.Append("deleted-lsa", types.YLeaf{"DeletedLsa", databaseCounters.DeletedLsa})
    databaseCounters.EntityData.Leafs.Append("max-age-lsa", types.YLeaf{"MaxAgeLsa", databaseCounters.MaxAgeLsa})
    databaseCounters.EntityData.Leafs.Append("lsa-checksum", types.YLeaf{"LsaChecksum", databaseCounters.LsaChecksum})

    databaseCounters.EntityData.YListKeys = []string {}

    return &(databaseCounters.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase
// OSPFv3 Area Database list 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // Area database summary .
    AreaDatabaseSummary Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary
}

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetEntityData() *types.CommonEntityData {
    areaDatabase.EntityData.YFilter = areaDatabase.YFilter
    areaDatabase.EntityData.YangName = "area-database"
    areaDatabase.EntityData.BundleName = "cisco_ios_xr"
    areaDatabase.EntityData.ParentYangName = "database-summary"
    areaDatabase.EntityData.SegmentPath = "area-database" + types.AddNoKeyToken(areaDatabase)
    areaDatabase.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-summary-table/database-summary/" + areaDatabase.EntityData.SegmentPath
    areaDatabase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaDatabase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaDatabase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaDatabase.EntityData.Children = types.NewOrderedMap()
    areaDatabase.EntityData.Children.Append("area-database-summary", types.YChild{"AreaDatabaseSummary", &areaDatabase.AreaDatabaseSummary})
    areaDatabase.EntityData.Leafs = types.NewOrderedMap()
    areaDatabase.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", areaDatabase.LsaAreaId})

    areaDatabase.EntityData.YListKeys = []string {}

    return &(areaDatabase.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary
// Area database summary 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // lsa. The type is slice of interface{} with range: 0..4294967295.
    Lsa []interface{}

    // deleted lsa. The type is slice of interface{} with range: 0..4294967295.
    DeletedLsa []interface{}

    // max age lsa. The type is slice of interface{} with range: 0..4294967295.
    MaxAgeLsa []interface{}

    // lsa checksum. The type is slice of interface{} with range: 0..4294967295.
    LsaChecksum []interface{}
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetEntityData() *types.CommonEntityData {
    areaDatabaseSummary.EntityData.YFilter = areaDatabaseSummary.YFilter
    areaDatabaseSummary.EntityData.YangName = "area-database-summary"
    areaDatabaseSummary.EntityData.BundleName = "cisco_ios_xr"
    areaDatabaseSummary.EntityData.ParentYangName = "area-database"
    areaDatabaseSummary.EntityData.SegmentPath = "area-database-summary"
    areaDatabaseSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/areas/area/database-summary-table/database-summary/area-database/" + areaDatabaseSummary.EntityData.SegmentPath
    areaDatabaseSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaDatabaseSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaDatabaseSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaDatabaseSummary.EntityData.Children = types.NewOrderedMap()
    areaDatabaseSummary.EntityData.Leafs = types.NewOrderedMap()
    areaDatabaseSummary.EntityData.Leafs.Append("lsa", types.YLeaf{"Lsa", areaDatabaseSummary.Lsa})
    areaDatabaseSummary.EntityData.Leafs.Append("deleted-lsa", types.YLeaf{"DeletedLsa", areaDatabaseSummary.DeletedLsa})
    areaDatabaseSummary.EntityData.Leafs.Append("max-age-lsa", types.YLeaf{"MaxAgeLsa", areaDatabaseSummary.MaxAgeLsa})
    areaDatabaseSummary.EntityData.Leafs.Append("lsa-checksum", types.YLeaf{"LsaChecksum", areaDatabaseSummary.LsaChecksum})

    areaDatabaseSummary.EntityData.YListKeys = []string {}

    return &(areaDatabaseSummary.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes
// OSPFv3 internal route information table
type Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 internal route information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute.
    InternalRoute []*Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute
}

func (internalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes) GetEntityData() *types.CommonEntityData {
    internalRoutes.EntityData.YFilter = internalRoutes.YFilter
    internalRoutes.EntityData.YangName = "internal-routes"
    internalRoutes.EntityData.BundleName = "cisco_ios_xr"
    internalRoutes.EntityData.ParentYangName = "vrf"
    internalRoutes.EntityData.SegmentPath = "internal-routes"
    internalRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + internalRoutes.EntityData.SegmentPath
    internalRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    internalRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    internalRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    internalRoutes.EntityData.Children = types.NewOrderedMap()
    internalRoutes.EntityData.Children.Append("internal-route", types.YChild{"InternalRoute", nil})
    for i := range internalRoutes.InternalRoute {
        types.SetYListKey(internalRoutes.InternalRoute[i], i)
        internalRoutes.EntityData.Children.Append(types.GetSegmentPath(internalRoutes.InternalRoute[i]), types.YChild{"InternalRoute", internalRoutes.InternalRoute[i]})
    }
    internalRoutes.EntityData.Leafs = types.NewOrderedMap()

    internalRoutes.EntityData.YListKeys = []string {}

    return &(internalRoutes.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute
// OSPFv3 internal route information
type Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route area ID . The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // Common Route topology information.
    RouteTopology Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology

    // List of topology source information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource.
    RouteSource []*Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource

    // List of paths to this route. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath.
    RoutePath []*Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath
}

func (internalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute) GetEntityData() *types.CommonEntityData {
    internalRoute.EntityData.YFilter = internalRoute.YFilter
    internalRoute.EntityData.YangName = "internal-route"
    internalRoute.EntityData.BundleName = "cisco_ios_xr"
    internalRoute.EntityData.ParentYangName = "internal-routes"
    internalRoute.EntityData.SegmentPath = "internal-route" + types.AddNoKeyToken(internalRoute)
    internalRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/internal-routes/" + internalRoute.EntityData.SegmentPath
    internalRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    internalRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    internalRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    internalRoute.EntityData.Children = types.NewOrderedMap()
    internalRoute.EntityData.Children.Append("route-topology", types.YChild{"RouteTopology", &internalRoute.RouteTopology})
    internalRoute.EntityData.Children.Append("route-source", types.YChild{"RouteSource", nil})
    for i := range internalRoute.RouteSource {
        types.SetYListKey(internalRoute.RouteSource[i], i)
        internalRoute.EntityData.Children.Append(types.GetSegmentPath(internalRoute.RouteSource[i]), types.YChild{"RouteSource", internalRoute.RouteSource[i]})
    }
    internalRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range internalRoute.RoutePath {
        types.SetYListKey(internalRoute.RoutePath[i], i)
        internalRoute.EntityData.Children.Append(types.GetSegmentPath(internalRoute.RoutePath[i]), types.YChild{"RoutePath", internalRoute.RoutePath[i]})
    }
    internalRoute.EntityData.Leafs = types.NewOrderedMap()
    internalRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", internalRoute.Prefix})
    internalRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", internalRoute.PrefixLength})
    internalRoute.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", internalRoute.RouteAreaId})

    internalRoute.EntityData.YListKeys = []string {}

    return &(internalRoute.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology
// Common Route topology information
type Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Route distance . The type is interface{} with range: 0..4294967295.
    RouteDistance interface{}

    // Route cost . The type is interface{} with range: 0..4294967295.
    RouteCost interface{}

    // Route type. The type is interface{} with range: 0..4294967295.
    RouteType interface{}
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology) GetEntityData() *types.CommonEntityData {
    routeTopology.EntityData.YFilter = routeTopology.YFilter
    routeTopology.EntityData.YangName = "route-topology"
    routeTopology.EntityData.BundleName = "cisco_ios_xr"
    routeTopology.EntityData.ParentYangName = "internal-route"
    routeTopology.EntityData.SegmentPath = "route-topology"
    routeTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/internal-routes/internal-route/" + routeTopology.EntityData.SegmentPath
    routeTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeTopology.EntityData.Children = types.NewOrderedMap()
    routeTopology.EntityData.Leafs = types.NewOrderedMap()
    routeTopology.EntityData.Leafs.Append("route-id", types.YLeaf{"RouteId", routeTopology.RouteId})
    routeTopology.EntityData.Leafs.Append("route-distance", types.YLeaf{"RouteDistance", routeTopology.RouteDistance})
    routeTopology.EntityData.Leafs.Append("route-cost", types.YLeaf{"RouteCost", routeTopology.RouteCost})
    routeTopology.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", routeTopology.RouteType})

    routeTopology.EntityData.YListKeys = []string {}

    return &(routeTopology.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource
// List of topology source information
type Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Route source of the advertising router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSourceAdverstingRouter interface{}

    // Route source ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSourceId interface{}

    // Type of LSA advertising the prefix, see RFC5340. The type is interface{}
    // with range: 0..4294967295.
    RouteSourceLsaType interface{}
}

func (routeSource *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource) GetEntityData() *types.CommonEntityData {
    routeSource.EntityData.YFilter = routeSource.YFilter
    routeSource.EntityData.YangName = "route-source"
    routeSource.EntityData.BundleName = "cisco_ios_xr"
    routeSource.EntityData.ParentYangName = "internal-route"
    routeSource.EntityData.SegmentPath = "route-source" + types.AddNoKeyToken(routeSource)
    routeSource.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/internal-routes/internal-route/" + routeSource.EntityData.SegmentPath
    routeSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeSource.EntityData.Children = types.NewOrderedMap()
    routeSource.EntityData.Leafs = types.NewOrderedMap()
    routeSource.EntityData.Leafs.Append("route-source-adversting-router", types.YLeaf{"RouteSourceAdverstingRouter", routeSource.RouteSourceAdverstingRouter})
    routeSource.EntityData.Leafs.Append("route-source-id", types.YLeaf{"RouteSourceId", routeSource.RouteSourceId})
    routeSource.EntityData.Leafs.Append("route-source-lsa-type", types.YLeaf{"RouteSourceLsaType", routeSource.RouteSourceLsaType})

    routeSource.EntityData.YListKeys = []string {}

    return &(routeSource.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath
// List of paths to this route
type Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Route path interface name . The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Route path interface Index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndex interface{}

    // Route path next hop . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RoutePathNextHop interface{}

    // Path ID of path. The type is interface{} with range: 0..65535.
    RoutePathId interface{}

    // Backup Path Info.
    RouteBackupPath Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath

    // NeighborNextHop. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_NeighborNextHop
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "internal-route"
    routePath.EntityData.SegmentPath = "route-path" + types.AddNoKeyToken(routePath)
    routePath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/internal-routes/internal-route/" + routePath.EntityData.SegmentPath
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("route-backup-path", types.YChild{"RouteBackupPath", &routePath.RouteBackupPath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        types.SetYListKey(routePath.NeighborNextHop[i], i)
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", routePath.InterfaceName})
    routePath.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", routePath.InterfaceIndex})
    routePath.EntityData.Leafs.Append("route-path-next-hop", types.YLeaf{"RoutePathNextHop", routePath.RoutePathNextHop})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath
// Backup Path Info
type Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetEntityData() *types.CommonEntityData {
    routeBackupPath.EntityData.YFilter = routeBackupPath.YFilter
    routeBackupPath.EntityData.YangName = "route-backup-path"
    routeBackupPath.EntityData.BundleName = "cisco_ios_xr"
    routeBackupPath.EntityData.ParentYangName = "route-path"
    routeBackupPath.EntityData.SegmentPath = "route-backup-path"
    routeBackupPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/internal-routes/internal-route/route-path/" + routeBackupPath.EntityData.SegmentPath
    routeBackupPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeBackupPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeBackupPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeBackupPath.EntityData.Children = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs.Append("backup-route-interface-name", types.YLeaf{"BackupRouteInterfaceName", routeBackupPath.BackupRouteInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("backup-route-next-hop-address", types.YLeaf{"BackupRouteNextHopAddress", routeBackupPath.BackupRouteNextHopAddress})
    routeBackupPath.EntityData.Leafs.Append("backup-route-source", types.YLeaf{"BackupRouteSource", routeBackupPath.BackupRouteSource})
    routeBackupPath.EntityData.Leafs.Append("backup-metric", types.YLeaf{"BackupMetric", routeBackupPath.BackupMetric})
    routeBackupPath.EntityData.Leafs.Append("primary-path", types.YLeaf{"PrimaryPath", routeBackupPath.PrimaryPath})
    routeBackupPath.EntityData.Leafs.Append("line-card-disjoint", types.YLeaf{"LineCardDisjoint", routeBackupPath.LineCardDisjoint})
    routeBackupPath.EntityData.Leafs.Append("downstream", types.YLeaf{"Downstream", routeBackupPath.Downstream})
    routeBackupPath.EntityData.Leafs.Append("node-protect", types.YLeaf{"NodeProtect", routeBackupPath.NodeProtect})
    routeBackupPath.EntityData.Leafs.Append("srlg-disjoint", types.YLeaf{"SrlgDisjoint", routeBackupPath.SrlgDisjoint})

    routeBackupPath.EntityData.YListKeys = []string {}

    return &(routeBackupPath.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop" + types.AddNoKeyToken(neighborNextHop)
    neighborNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/internal-routes/internal-route/route-path/" + neighborNextHop.EntityData.SegmentPath
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas
// Protocol area table 
type Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area information . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea.
    ProtocolArea []*Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea
}

func (protocolAreas *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas) GetEntityData() *types.CommonEntityData {
    protocolAreas.EntityData.YFilter = protocolAreas.YFilter
    protocolAreas.EntityData.YangName = "protocol-areas"
    protocolAreas.EntityData.BundleName = "cisco_ios_xr"
    protocolAreas.EntityData.ParentYangName = "vrf"
    protocolAreas.EntityData.SegmentPath = "protocol-areas"
    protocolAreas.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + protocolAreas.EntityData.SegmentPath
    protocolAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolAreas.EntityData.Children = types.NewOrderedMap()
    protocolAreas.EntityData.Children.Append("protocol-area", types.YChild{"ProtocolArea", nil})
    for i := range protocolAreas.ProtocolArea {
        protocolAreas.EntityData.Children.Append(types.GetSegmentPath(protocolAreas.ProtocolArea[i]), types.YChild{"ProtocolArea", protocolAreas.ProtocolArea[i]})
    }
    protocolAreas.EntityData.Leafs = types.NewOrderedMap()

    protocolAreas.EntityData.YListKeys = []string {}

    return &(protocolAreas.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea
// Area information 
type Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Area ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AreaId interface{}

    // Area ID string in decimal and dotted-decimal format. The type is string
    // with length: 0..16.
    ProtocolAreaId interface{}

    // Distribute List In. The type is string.
    DistributeListIn interface{}

    // Interface list. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface.
    ProtocolInterface []*Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface
}

func (protocolArea *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea) GetEntityData() *types.CommonEntityData {
    protocolArea.EntityData.YFilter = protocolArea.YFilter
    protocolArea.EntityData.YangName = "protocol-area"
    protocolArea.EntityData.BundleName = "cisco_ios_xr"
    protocolArea.EntityData.ParentYangName = "protocol-areas"
    protocolArea.EntityData.SegmentPath = "protocol-area" + types.AddKeyToken(protocolArea.AreaId, "area-id")
    protocolArea.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/protocol-areas/" + protocolArea.EntityData.SegmentPath
    protocolArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolArea.EntityData.Children = types.NewOrderedMap()
    protocolArea.EntityData.Children.Append("protocol-interface", types.YChild{"ProtocolInterface", nil})
    for i := range protocolArea.ProtocolInterface {
        types.SetYListKey(protocolArea.ProtocolInterface[i], i)
        protocolArea.EntityData.Children.Append(types.GetSegmentPath(protocolArea.ProtocolInterface[i]), types.YChild{"ProtocolInterface", protocolArea.ProtocolInterface[i]})
    }
    protocolArea.EntityData.Leafs = types.NewOrderedMap()
    protocolArea.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", protocolArea.AreaId})
    protocolArea.EntityData.Leafs.Append("protocol-area-id", types.YLeaf{"ProtocolAreaId", protocolArea.ProtocolAreaId})
    protocolArea.EntityData.Leafs.Append("distribute-list-in", types.YLeaf{"DistributeListIn", protocolArea.DistributeListIn})

    protocolArea.EntityData.YListKeys = []string {"AreaId"}

    return &(protocolArea.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface
// Interface list
type Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Protocol interface name . The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Distribute List In. The type is string.
    DistributeListIn interface{}
}

func (protocolInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetEntityData() *types.CommonEntityData {
    protocolInterface.EntityData.YFilter = protocolInterface.YFilter
    protocolInterface.EntityData.YangName = "protocol-interface"
    protocolInterface.EntityData.BundleName = "cisco_ios_xr"
    protocolInterface.EntityData.ParentYangName = "protocol-area"
    protocolInterface.EntityData.SegmentPath = "protocol-interface" + types.AddNoKeyToken(protocolInterface)
    protocolInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/protocol-areas/protocol-area/" + protocolInterface.EntityData.SegmentPath
    protocolInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolInterface.EntityData.Children = types.NewOrderedMap()
    protocolInterface.EntityData.Leafs = types.NewOrderedMap()
    protocolInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", protocolInterface.InterfaceName})
    protocolInterface.EntityData.Leafs.Append("distribute-list-in", types.YLeaf{"DistributeListIn", protocolInterface.DistributeListIn})

    protocolInterface.EntityData.YListKeys = []string {}

    return &(protocolInterface.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes
// OSPFv3 connected route information table
type Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 connected route information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute.
    ConnectedRoute []*Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute
}

func (connectedRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes) GetEntityData() *types.CommonEntityData {
    connectedRoutes.EntityData.YFilter = connectedRoutes.YFilter
    connectedRoutes.EntityData.YangName = "connected-routes"
    connectedRoutes.EntityData.BundleName = "cisco_ios_xr"
    connectedRoutes.EntityData.ParentYangName = "vrf"
    connectedRoutes.EntityData.SegmentPath = "connected-routes"
    connectedRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + connectedRoutes.EntityData.SegmentPath
    connectedRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedRoutes.EntityData.Children = types.NewOrderedMap()
    connectedRoutes.EntityData.Children.Append("connected-route", types.YChild{"ConnectedRoute", nil})
    for i := range connectedRoutes.ConnectedRoute {
        types.SetYListKey(connectedRoutes.ConnectedRoute[i], i)
        connectedRoutes.EntityData.Children.Append(types.GetSegmentPath(connectedRoutes.ConnectedRoute[i]), types.YChild{"ConnectedRoute", connectedRoutes.ConnectedRoute[i]})
    }
    connectedRoutes.EntityData.Leafs = types.NewOrderedMap()

    connectedRoutes.EntityData.YListKeys = []string {}

    return &(connectedRoutes.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute
// OSPFv3 connected route information
type Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Common Route topology information.
    RouteTopology Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology

    // List of paths to this route. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath.
    RoutePath []*Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath
}

func (connectedRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute) GetEntityData() *types.CommonEntityData {
    connectedRoute.EntityData.YFilter = connectedRoute.YFilter
    connectedRoute.EntityData.YangName = "connected-route"
    connectedRoute.EntityData.BundleName = "cisco_ios_xr"
    connectedRoute.EntityData.ParentYangName = "connected-routes"
    connectedRoute.EntityData.SegmentPath = "connected-route" + types.AddNoKeyToken(connectedRoute)
    connectedRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/connected-routes/" + connectedRoute.EntityData.SegmentPath
    connectedRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedRoute.EntityData.Children = types.NewOrderedMap()
    connectedRoute.EntityData.Children.Append("route-topology", types.YChild{"RouteTopology", &connectedRoute.RouteTopology})
    connectedRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range connectedRoute.RoutePath {
        types.SetYListKey(connectedRoute.RoutePath[i], i)
        connectedRoute.EntityData.Children.Append(types.GetSegmentPath(connectedRoute.RoutePath[i]), types.YChild{"RoutePath", connectedRoute.RoutePath[i]})
    }
    connectedRoute.EntityData.Leafs = types.NewOrderedMap()
    connectedRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", connectedRoute.Prefix})
    connectedRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", connectedRoute.PrefixLength})

    connectedRoute.EntityData.YListKeys = []string {}

    return &(connectedRoute.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology
// Common Route topology information
type Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Route distance . The type is interface{} with range: 0..4294967295.
    RouteDistance interface{}

    // Route cost . The type is interface{} with range: 0..4294967295.
    RouteCost interface{}

    // Route type. The type is interface{} with range: 0..4294967295.
    RouteType interface{}
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetEntityData() *types.CommonEntityData {
    routeTopology.EntityData.YFilter = routeTopology.YFilter
    routeTopology.EntityData.YangName = "route-topology"
    routeTopology.EntityData.BundleName = "cisco_ios_xr"
    routeTopology.EntityData.ParentYangName = "connected-route"
    routeTopology.EntityData.SegmentPath = "route-topology"
    routeTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/connected-routes/connected-route/" + routeTopology.EntityData.SegmentPath
    routeTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeTopology.EntityData.Children = types.NewOrderedMap()
    routeTopology.EntityData.Leafs = types.NewOrderedMap()
    routeTopology.EntityData.Leafs.Append("route-id", types.YLeaf{"RouteId", routeTopology.RouteId})
    routeTopology.EntityData.Leafs.Append("route-distance", types.YLeaf{"RouteDistance", routeTopology.RouteDistance})
    routeTopology.EntityData.Leafs.Append("route-cost", types.YLeaf{"RouteCost", routeTopology.RouteCost})
    routeTopology.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", routeTopology.RouteType})

    routeTopology.EntityData.YListKeys = []string {}

    return &(routeTopology.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath
// List of paths to this route
type Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Route path interface name . The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Route path interface Index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndex interface{}

    // Route path next hop . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RoutePathNextHop interface{}

    // Path ID of path. The type is interface{} with range: 0..65535.
    RoutePathId interface{}

    // Backup Path Info.
    RouteBackupPath Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath

    // NeighborNextHop. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "connected-route"
    routePath.EntityData.SegmentPath = "route-path" + types.AddNoKeyToken(routePath)
    routePath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/connected-routes/connected-route/" + routePath.EntityData.SegmentPath
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("route-backup-path", types.YChild{"RouteBackupPath", &routePath.RouteBackupPath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        types.SetYListKey(routePath.NeighborNextHop[i], i)
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", routePath.InterfaceName})
    routePath.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", routePath.InterfaceIndex})
    routePath.EntityData.Leafs.Append("route-path-next-hop", types.YLeaf{"RoutePathNextHop", routePath.RoutePathNextHop})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath
// Backup Path Info
type Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetEntityData() *types.CommonEntityData {
    routeBackupPath.EntityData.YFilter = routeBackupPath.YFilter
    routeBackupPath.EntityData.YangName = "route-backup-path"
    routeBackupPath.EntityData.BundleName = "cisco_ios_xr"
    routeBackupPath.EntityData.ParentYangName = "route-path"
    routeBackupPath.EntityData.SegmentPath = "route-backup-path"
    routeBackupPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/connected-routes/connected-route/route-path/" + routeBackupPath.EntityData.SegmentPath
    routeBackupPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeBackupPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeBackupPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeBackupPath.EntityData.Children = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs.Append("backup-route-interface-name", types.YLeaf{"BackupRouteInterfaceName", routeBackupPath.BackupRouteInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("backup-route-next-hop-address", types.YLeaf{"BackupRouteNextHopAddress", routeBackupPath.BackupRouteNextHopAddress})
    routeBackupPath.EntityData.Leafs.Append("backup-route-source", types.YLeaf{"BackupRouteSource", routeBackupPath.BackupRouteSource})
    routeBackupPath.EntityData.Leafs.Append("backup-metric", types.YLeaf{"BackupMetric", routeBackupPath.BackupMetric})
    routeBackupPath.EntityData.Leafs.Append("primary-path", types.YLeaf{"PrimaryPath", routeBackupPath.PrimaryPath})
    routeBackupPath.EntityData.Leafs.Append("line-card-disjoint", types.YLeaf{"LineCardDisjoint", routeBackupPath.LineCardDisjoint})
    routeBackupPath.EntityData.Leafs.Append("downstream", types.YLeaf{"Downstream", routeBackupPath.Downstream})
    routeBackupPath.EntityData.Leafs.Append("node-protect", types.YLeaf{"NodeProtect", routeBackupPath.NodeProtect})
    routeBackupPath.EntityData.Leafs.Append("srlg-disjoint", types.YLeaf{"SrlgDisjoint", routeBackupPath.SrlgDisjoint})

    routeBackupPath.EntityData.YListKeys = []string {}

    return &(routeBackupPath.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop" + types.AddNoKeyToken(neighborNextHop)
    neighborNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/connected-routes/connected-route/route-path/" + neighborNextHop.EntityData.SegmentPath
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics
// Container for Statistics
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol table.
    ProtocolStats Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats

    // OSPFv3 RIB batch statistics.
    SpfStats Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats

    // OSPF Prefix SPF Prioritization statistics.
    RawioStats Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats

    // OSPF Prefix SPF Prioritization statistics.
    PrefixPriorityStats Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats

    // OSPFv3 RIB batch statistics.
    VrfRibBatchStats Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats
}

func (vrfStatistics *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics) GetEntityData() *types.CommonEntityData {
    vrfStatistics.EntityData.YFilter = vrfStatistics.YFilter
    vrfStatistics.EntityData.YangName = "vrf-statistics"
    vrfStatistics.EntityData.BundleName = "cisco_ios_xr"
    vrfStatistics.EntityData.ParentYangName = "vrf"
    vrfStatistics.EntityData.SegmentPath = "vrf-statistics"
    vrfStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + vrfStatistics.EntityData.SegmentPath
    vrfStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfStatistics.EntityData.Children = types.NewOrderedMap()
    vrfStatistics.EntityData.Children.Append("protocol-stats", types.YChild{"ProtocolStats", &vrfStatistics.ProtocolStats})
    vrfStatistics.EntityData.Children.Append("spf-stats", types.YChild{"SpfStats", &vrfStatistics.SpfStats})
    vrfStatistics.EntityData.Children.Append("rawio-stats", types.YChild{"RawioStats", &vrfStatistics.RawioStats})
    vrfStatistics.EntityData.Children.Append("prefix-priority-stats", types.YChild{"PrefixPriorityStats", &vrfStatistics.PrefixPriorityStats})
    vrfStatistics.EntityData.Children.Append("vrf-rib-batch-stats", types.YChild{"VrfRibBatchStats", &vrfStatistics.VrfRibBatchStats})
    vrfStatistics.EntityData.Leafs = types.NewOrderedMap()

    vrfStatistics.EntityData.YListKeys = []string {}

    return &(vrfStatistics.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats
// Protocol table
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol statistics for an interface. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat.
    ProtocolStat []*Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat
}

func (protocolStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats) GetEntityData() *types.CommonEntityData {
    protocolStats.EntityData.YFilter = protocolStats.YFilter
    protocolStats.EntityData.YangName = "protocol-stats"
    protocolStats.EntityData.BundleName = "cisco_ios_xr"
    protocolStats.EntityData.ParentYangName = "vrf-statistics"
    protocolStats.EntityData.SegmentPath = "protocol-stats"
    protocolStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/vrf-statistics/" + protocolStats.EntityData.SegmentPath
    protocolStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolStats.EntityData.Children = types.NewOrderedMap()
    protocolStats.EntityData.Children.Append("protocol-stat", types.YChild{"ProtocolStat", nil})
    for i := range protocolStats.ProtocolStat {
        protocolStats.EntityData.Children.Append(types.GetSegmentPath(protocolStats.ProtocolStat[i]), types.YChild{"ProtocolStat", protocolStats.ProtocolStat[i]})
    }
    protocolStats.EntityData.Leafs = types.NewOrderedMap()

    protocolStats.EntityData.YListKeys = []string {}

    return &(protocolStats.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat
// Protocol statistics for an interface
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Total inputs packets. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalInPackets interface{}

    // Hello packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloInPackets interface{}

    // Database Description Packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesInPackets interface{}

    // Database Description LSAs in. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesInLsAs interface{}

    // LSA Requests in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqInPackets interface{}

    // LS Requests in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqInLsAs interface{}

    // LS Updates Packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdInPackets interface{}

    // LS Updates ignored. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdInIgnored interface{}

    // LS Updates LSAs in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdInLsAs interface{}

    // LS Acks Packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckInPackets interface{}

    // LS Ack LSAs in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckInLsAs interface{}

    // Total Out Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalOutPackets interface{}

    // Hello Out Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloOutPackets interface{}

    // Database Description Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesOutPackets interface{}

    // Database Description LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesOutLsAs interface{}

    // LS Request Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqOutPackets interface{}

    // LS Reuqests LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqOutLsAs interface{}

    // LS Update Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdOutPackets interface{}

    // LS Update LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdOutLsAs interface{}

    // LS Ack Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckOutPackets interface{}

    // LS Ack LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckOutLsAs interface{}

    // Dropped in GS. The type is interface{} with range: 0..18446744073709551615.
    DroppedInGs interface{}

    // Checksum Errors. The type is interface{} with range:
    // 0..18446744073709551615.
    ChecksumErr interface{}
}

func (protocolStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat) GetEntityData() *types.CommonEntityData {
    protocolStat.EntityData.YFilter = protocolStat.YFilter
    protocolStat.EntityData.YangName = "protocol-stat"
    protocolStat.EntityData.BundleName = "cisco_ios_xr"
    protocolStat.EntityData.ParentYangName = "protocol-stats"
    protocolStat.EntityData.SegmentPath = "protocol-stat" + types.AddKeyToken(protocolStat.InterfaceName, "interface-name")
    protocolStat.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/vrf-statistics/protocol-stats/" + protocolStat.EntityData.SegmentPath
    protocolStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolStat.EntityData.Children = types.NewOrderedMap()
    protocolStat.EntityData.Leafs = types.NewOrderedMap()
    protocolStat.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", protocolStat.InterfaceName})
    protocolStat.EntityData.Leafs.Append("total-in-packets", types.YLeaf{"TotalInPackets", protocolStat.TotalInPackets})
    protocolStat.EntityData.Leafs.Append("hello-in-packets", types.YLeaf{"HelloInPackets", protocolStat.HelloInPackets})
    protocolStat.EntityData.Leafs.Append("dbdes-in-packets", types.YLeaf{"DbdesInPackets", protocolStat.DbdesInPackets})
    protocolStat.EntityData.Leafs.Append("dbdes-in-ls-as", types.YLeaf{"DbdesInLsAs", protocolStat.DbdesInLsAs})
    protocolStat.EntityData.Leafs.Append("ls-req-in-packets", types.YLeaf{"LsReqInPackets", protocolStat.LsReqInPackets})
    protocolStat.EntityData.Leafs.Append("ls-req-in-ls-as", types.YLeaf{"LsReqInLsAs", protocolStat.LsReqInLsAs})
    protocolStat.EntityData.Leafs.Append("ls-upd-in-packets", types.YLeaf{"LsUpdInPackets", protocolStat.LsUpdInPackets})
    protocolStat.EntityData.Leafs.Append("ls-upd-in-ignored", types.YLeaf{"LsUpdInIgnored", protocolStat.LsUpdInIgnored})
    protocolStat.EntityData.Leafs.Append("ls-upd-in-ls-as", types.YLeaf{"LsUpdInLsAs", protocolStat.LsUpdInLsAs})
    protocolStat.EntityData.Leafs.Append("ls-ack-in-packets", types.YLeaf{"LsAckInPackets", protocolStat.LsAckInPackets})
    protocolStat.EntityData.Leafs.Append("ls-ack-in-ls-as", types.YLeaf{"LsAckInLsAs", protocolStat.LsAckInLsAs})
    protocolStat.EntityData.Leafs.Append("total-out-packets", types.YLeaf{"TotalOutPackets", protocolStat.TotalOutPackets})
    protocolStat.EntityData.Leafs.Append("hello-out-packets", types.YLeaf{"HelloOutPackets", protocolStat.HelloOutPackets})
    protocolStat.EntityData.Leafs.Append("dbdes-out-packets", types.YLeaf{"DbdesOutPackets", protocolStat.DbdesOutPackets})
    protocolStat.EntityData.Leafs.Append("dbdes-out-ls-as", types.YLeaf{"DbdesOutLsAs", protocolStat.DbdesOutLsAs})
    protocolStat.EntityData.Leafs.Append("ls-req-out-packets", types.YLeaf{"LsReqOutPackets", protocolStat.LsReqOutPackets})
    protocolStat.EntityData.Leafs.Append("ls-req-out-ls-as", types.YLeaf{"LsReqOutLsAs", protocolStat.LsReqOutLsAs})
    protocolStat.EntityData.Leafs.Append("ls-upd-out-packets", types.YLeaf{"LsUpdOutPackets", protocolStat.LsUpdOutPackets})
    protocolStat.EntityData.Leafs.Append("ls-upd-out-ls-as", types.YLeaf{"LsUpdOutLsAs", protocolStat.LsUpdOutLsAs})
    protocolStat.EntityData.Leafs.Append("ls-ack-out-packets", types.YLeaf{"LsAckOutPackets", protocolStat.LsAckOutPackets})
    protocolStat.EntityData.Leafs.Append("ls-ack-out-ls-as", types.YLeaf{"LsAckOutLsAs", protocolStat.LsAckOutLsAs})
    protocolStat.EntityData.Leafs.Append("dropped-in-gs", types.YLeaf{"DroppedInGs", protocolStat.DroppedInGs})
    protocolStat.EntityData.Leafs.Append("checksum-err", types.YLeaf{"ChecksumErr", protocolStat.ChecksumErr})

    protocolStat.EntityData.YListKeys = []string {"InterfaceName"}

    return &(protocolStat.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats
// OSPFv3 RIB batch statistics
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SPF statistics header.
    SpfHeader Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader

    // List of SPF run-time statistics. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime.
    SpfRuntime []*Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime
}

func (spfStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats) GetEntityData() *types.CommonEntityData {
    spfStats.EntityData.YFilter = spfStats.YFilter
    spfStats.EntityData.YangName = "spf-stats"
    spfStats.EntityData.BundleName = "cisco_ios_xr"
    spfStats.EntityData.ParentYangName = "vrf-statistics"
    spfStats.EntityData.SegmentPath = "spf-stats"
    spfStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/vrf-statistics/" + spfStats.EntityData.SegmentPath
    spfStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfStats.EntityData.Children = types.NewOrderedMap()
    spfStats.EntityData.Children.Append("spf-header", types.YChild{"SpfHeader", &spfStats.SpfHeader})
    spfStats.EntityData.Children.Append("spf-runtime", types.YChild{"SpfRuntime", nil})
    for i := range spfStats.SpfRuntime {
        types.SetYListKey(spfStats.SpfRuntime[i], i)
        spfStats.EntityData.Children.Append(types.GetSegmentPath(spfStats.SpfRuntime[i]), types.YChild{"SpfRuntime", spfStats.SpfRuntime[i]})
    }
    spfStats.EntityData.Leafs = types.NewOrderedMap()

    spfStats.EntityData.YListKeys = []string {}

    return &(spfStats.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader
// SPF statistics header
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderRouterId interface{}

    // Number of SPF calculations. The type is interface{} with range:
    // 0..4294967295.
    HeaderSpFs interface{}

    // List of Areas with SPF statistics. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary.
    AreaSummary []*Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary
}

func (spfHeader *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader) GetEntityData() *types.CommonEntityData {
    spfHeader.EntityData.YFilter = spfHeader.YFilter
    spfHeader.EntityData.YangName = "spf-header"
    spfHeader.EntityData.BundleName = "cisco_ios_xr"
    spfHeader.EntityData.ParentYangName = "spf-stats"
    spfHeader.EntityData.SegmentPath = "spf-header"
    spfHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/vrf-statistics/spf-stats/" + spfHeader.EntityData.SegmentPath
    spfHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfHeader.EntityData.Children = types.NewOrderedMap()
    spfHeader.EntityData.Children.Append("area-summary", types.YChild{"AreaSummary", nil})
    for i := range spfHeader.AreaSummary {
        types.SetYListKey(spfHeader.AreaSummary[i], i)
        spfHeader.EntityData.Children.Append(types.GetSegmentPath(spfHeader.AreaSummary[i]), types.YChild{"AreaSummary", spfHeader.AreaSummary[i]})
    }
    spfHeader.EntityData.Leafs = types.NewOrderedMap()
    spfHeader.EntityData.Leafs.Append("header-router-id", types.YLeaf{"HeaderRouterId", spfHeader.HeaderRouterId})
    spfHeader.EntityData.Leafs.Append("header-sp-fs", types.YLeaf{"HeaderSpFs", spfHeader.HeaderSpFs})

    spfHeader.EntityData.YListKeys = []string {}

    return &(spfHeader.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary
// List of Areas with SPF statistics
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID of the area SPF statistics. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // Number of SPF calculations. The type is interface{} with range:
    // 0..4294967295.
    SpFs interface{}
}

func (areaSummary *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetEntityData() *types.CommonEntityData {
    areaSummary.EntityData.YFilter = areaSummary.YFilter
    areaSummary.EntityData.YangName = "area-summary"
    areaSummary.EntityData.BundleName = "cisco_ios_xr"
    areaSummary.EntityData.ParentYangName = "spf-header"
    areaSummary.EntityData.SegmentPath = "area-summary" + types.AddNoKeyToken(areaSummary)
    areaSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/vrf-statistics/spf-stats/spf-header/" + areaSummary.EntityData.SegmentPath
    areaSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaSummary.EntityData.Children = types.NewOrderedMap()
    areaSummary.EntityData.Leafs = types.NewOrderedMap()
    areaSummary.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", areaSummary.AreaId})
    areaSummary.EntityData.Leafs.Append("sp-fs", types.YLeaf{"SpFs", areaSummary.SpFs})

    areaSummary.EntityData.YListKeys = []string {}

    return &(areaSummary.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime
// List of SPF run-time statistics
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // SPF calculation start time. The type is interface{} with range:
    // 0..4294967295.
    StartTime interface{}

    // Number of routes added to RIB. The type is interface{} with range:
    // 0..4294967295.
    RibAddRoutes interface{}

    // Number of routes deleted from RIB. The type is interface{} with range:
    // 0..4294967295.
    RibDeleteRoutes interface{}

    // Reasons for triggering an SPF calculation Bit 1 - Router LSA update Bit 2 -
    // Network LSA update Bit 3 - Inter-Area Prefix LSA update Bit 4 - Inter-Area
    // Router LSA update Bit 5 - AS External LSA update Bit 6 - MOSPF LSA update
    // Bit 7 - Type 7 AS External LSA update Bit 8 - Link LSA update Bit 9 -
    // Prefix LSA update. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ReasonFlags interface{}

    // Number of LSA changes triggering an SPF calculation. The type is
    // interface{} with range: -32768..32767.
    LsaChanges interface{}

    // Global SPF times.
    GlobalTime Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime

    // List of LSAs triggering the SPF calculation. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa.
    Lsa []*Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa

    // List of per-area SPF statistics. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat.
    AreaStat []*Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat
}

func (spfRuntime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime) GetEntityData() *types.CommonEntityData {
    spfRuntime.EntityData.YFilter = spfRuntime.YFilter
    spfRuntime.EntityData.YangName = "spf-runtime"
    spfRuntime.EntityData.BundleName = "cisco_ios_xr"
    spfRuntime.EntityData.ParentYangName = "spf-stats"
    spfRuntime.EntityData.SegmentPath = "spf-runtime" + types.AddNoKeyToken(spfRuntime)
    spfRuntime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/vrf-statistics/spf-stats/" + spfRuntime.EntityData.SegmentPath
    spfRuntime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfRuntime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfRuntime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfRuntime.EntityData.Children = types.NewOrderedMap()
    spfRuntime.EntityData.Children.Append("global-time", types.YChild{"GlobalTime", &spfRuntime.GlobalTime})
    spfRuntime.EntityData.Children.Append("lsa", types.YChild{"Lsa", nil})
    for i := range spfRuntime.Lsa {
        types.SetYListKey(spfRuntime.Lsa[i], i)
        spfRuntime.EntityData.Children.Append(types.GetSegmentPath(spfRuntime.Lsa[i]), types.YChild{"Lsa", spfRuntime.Lsa[i]})
    }
    spfRuntime.EntityData.Children.Append("area-stat", types.YChild{"AreaStat", nil})
    for i := range spfRuntime.AreaStat {
        types.SetYListKey(spfRuntime.AreaStat[i], i)
        spfRuntime.EntityData.Children.Append(types.GetSegmentPath(spfRuntime.AreaStat[i]), types.YChild{"AreaStat", spfRuntime.AreaStat[i]})
    }
    spfRuntime.EntityData.Leafs = types.NewOrderedMap()
    spfRuntime.EntityData.Leafs.Append("start-time", types.YLeaf{"StartTime", spfRuntime.StartTime})
    spfRuntime.EntityData.Leafs.Append("rib-add-routes", types.YLeaf{"RibAddRoutes", spfRuntime.RibAddRoutes})
    spfRuntime.EntityData.Leafs.Append("rib-delete-routes", types.YLeaf{"RibDeleteRoutes", spfRuntime.RibDeleteRoutes})
    spfRuntime.EntityData.Leafs.Append("reason-flags", types.YLeaf{"ReasonFlags", spfRuntime.ReasonFlags})
    spfRuntime.EntityData.Leafs.Append("lsa-changes", types.YLeaf{"LsaChanges", spfRuntime.LsaChanges})

    spfRuntime.EntityData.YListKeys = []string {}

    return &(spfRuntime.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime
// Global SPF times
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Dijkstra time in msec. The type is interface{} with range: 0..4294967295.
    Dijkstra interface{}

    // Intra-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefixDel interface{}

    // Inter-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefixDel interface{}

    // External prefix processing time in msec. The type is interface{} with
    // range: 0..4294967295.
    ExternalPrefix interface{}

    // External prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    ExternalPrefixDel interface{}

    // RIB add processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibAdd interface{}

    // RIB deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibDel interface{}
}

func (globalTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetEntityData() *types.CommonEntityData {
    globalTime.EntityData.YFilter = globalTime.YFilter
    globalTime.EntityData.YangName = "global-time"
    globalTime.EntityData.BundleName = "cisco_ios_xr"
    globalTime.EntityData.ParentYangName = "spf-runtime"
    globalTime.EntityData.SegmentPath = "global-time"
    globalTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/vrf-statistics/spf-stats/spf-runtime/" + globalTime.EntityData.SegmentPath
    globalTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalTime.EntityData.Children = types.NewOrderedMap()
    globalTime.EntityData.Leafs = types.NewOrderedMap()
    globalTime.EntityData.Leafs.Append("dijkstra", types.YLeaf{"Dijkstra", globalTime.Dijkstra})
    globalTime.EntityData.Leafs.Append("intra-prefix", types.YLeaf{"IntraPrefix", globalTime.IntraPrefix})
    globalTime.EntityData.Leafs.Append("intra-prefix-del", types.YLeaf{"IntraPrefixDel", globalTime.IntraPrefixDel})
    globalTime.EntityData.Leafs.Append("inter-prefix", types.YLeaf{"InterPrefix", globalTime.InterPrefix})
    globalTime.EntityData.Leafs.Append("inter-prefix-del", types.YLeaf{"InterPrefixDel", globalTime.InterPrefixDel})
    globalTime.EntityData.Leafs.Append("external-prefix", types.YLeaf{"ExternalPrefix", globalTime.ExternalPrefix})
    globalTime.EntityData.Leafs.Append("external-prefix-del", types.YLeaf{"ExternalPrefixDel", globalTime.ExternalPrefixDel})
    globalTime.EntityData.Leafs.Append("rib-add", types.YLeaf{"RibAdd", globalTime.RibAdd})
    globalTime.EntityData.Leafs.Append("rib-del", types.YLeaf{"RibDel", globalTime.RibDel})

    globalTime.EntityData.YListKeys = []string {}

    return &(globalTime.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa
// List of LSAs triggering the SPF calculation
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID. The type is interface{} with range: 0..4294967295.
    LsaAreaId interface{}

    // Advertising router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaAdvertisingRouter interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // LSA type. The type is interface{} with range: 0..255.
    LsaType interface{}

    // If true, the LSA change is a flush. The type is bool.
    LsaFlush interface{}
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetEntityData() *types.CommonEntityData {
    lsa.EntityData.YFilter = lsa.YFilter
    lsa.EntityData.YangName = "lsa"
    lsa.EntityData.BundleName = "cisco_ios_xr"
    lsa.EntityData.ParentYangName = "spf-runtime"
    lsa.EntityData.SegmentPath = "lsa" + types.AddNoKeyToken(lsa)
    lsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/vrf-statistics/spf-stats/spf-runtime/" + lsa.EntityData.SegmentPath
    lsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsa.EntityData.Children = types.NewOrderedMap()
    lsa.EntityData.Leafs = types.NewOrderedMap()
    lsa.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsa.LsaAreaId})
    lsa.EntityData.Leafs.Append("lsa-advertising-router", types.YLeaf{"LsaAdvertisingRouter", lsa.LsaAdvertisingRouter})
    lsa.EntityData.Leafs.Append("lsa-id", types.YLeaf{"LsaId", lsa.LsaId})
    lsa.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsa.LsaType})
    lsa.EntityData.Leafs.Append("lsa-flush", types.YLeaf{"LsaFlush", lsa.LsaFlush})

    lsa.EntityData.YListKeys = []string {}

    return &(lsa.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat
// List of per-area SPF statistics
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID for area of these SPF statistics. The type is interface{} with
    // range: 0..4294967295.
    SpfStatAreaId interface{}

    // Counts of LSA types triggering an SPF calculation. The type is slice of
    // interface{} with range: 0..4294967295.
    SpfStatLsaTypeCount []interface{}

    // SPF time calculations.
    SpfStatTime Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime
}

func (areaStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetEntityData() *types.CommonEntityData {
    areaStat.EntityData.YFilter = areaStat.YFilter
    areaStat.EntityData.YangName = "area-stat"
    areaStat.EntityData.BundleName = "cisco_ios_xr"
    areaStat.EntityData.ParentYangName = "spf-runtime"
    areaStat.EntityData.SegmentPath = "area-stat" + types.AddNoKeyToken(areaStat)
    areaStat.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/vrf-statistics/spf-stats/spf-runtime/" + areaStat.EntityData.SegmentPath
    areaStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaStat.EntityData.Children = types.NewOrderedMap()
    areaStat.EntityData.Children.Append("spf-stat-time", types.YChild{"SpfStatTime", &areaStat.SpfStatTime})
    areaStat.EntityData.Leafs = types.NewOrderedMap()
    areaStat.EntityData.Leafs.Append("spf-stat-area-id", types.YLeaf{"SpfStatAreaId", areaStat.SpfStatAreaId})
    areaStat.EntityData.Leafs.Append("spf-stat-lsa-type-count", types.YLeaf{"SpfStatLsaTypeCount", areaStat.SpfStatLsaTypeCount})

    areaStat.EntityData.YListKeys = []string {}

    return &(areaStat.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime
// SPF time calculations
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Dijkstra time in msec. The type is interface{} with range: 0..4294967295.
    Dijkstra interface{}

    // Intra-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefixDel interface{}

    // Inter-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefixDel interface{}

    // External prefix processing time in msec. The type is interface{} with
    // range: 0..4294967295.
    ExternalPrefix interface{}

    // External prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    ExternalPrefixDel interface{}

    // RIB add processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibAdd interface{}

    // RIB deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibDel interface{}
}

func (spfStatTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetEntityData() *types.CommonEntityData {
    spfStatTime.EntityData.YFilter = spfStatTime.YFilter
    spfStatTime.EntityData.YangName = "spf-stat-time"
    spfStatTime.EntityData.BundleName = "cisco_ios_xr"
    spfStatTime.EntityData.ParentYangName = "area-stat"
    spfStatTime.EntityData.SegmentPath = "spf-stat-time"
    spfStatTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/vrf-statistics/spf-stats/spf-runtime/area-stat/" + spfStatTime.EntityData.SegmentPath
    spfStatTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfStatTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfStatTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfStatTime.EntityData.Children = types.NewOrderedMap()
    spfStatTime.EntityData.Leafs = types.NewOrderedMap()
    spfStatTime.EntityData.Leafs.Append("dijkstra", types.YLeaf{"Dijkstra", spfStatTime.Dijkstra})
    spfStatTime.EntityData.Leafs.Append("intra-prefix", types.YLeaf{"IntraPrefix", spfStatTime.IntraPrefix})
    spfStatTime.EntityData.Leafs.Append("intra-prefix-del", types.YLeaf{"IntraPrefixDel", spfStatTime.IntraPrefixDel})
    spfStatTime.EntityData.Leafs.Append("inter-prefix", types.YLeaf{"InterPrefix", spfStatTime.InterPrefix})
    spfStatTime.EntityData.Leafs.Append("inter-prefix-del", types.YLeaf{"InterPrefixDel", spfStatTime.InterPrefixDel})
    spfStatTime.EntityData.Leafs.Append("external-prefix", types.YLeaf{"ExternalPrefix", spfStatTime.ExternalPrefix})
    spfStatTime.EntityData.Leafs.Append("external-prefix-del", types.YLeaf{"ExternalPrefixDel", spfStatTime.ExternalPrefixDel})
    spfStatTime.EntityData.Leafs.Append("rib-add", types.YLeaf{"RibAdd", spfStatTime.RibAdd})
    spfStatTime.EntityData.Leafs.Append("rib-del", types.YLeaf{"RibDel", spfStatTime.RibDel})

    spfStatTime.EntityData.YListKeys = []string {}

    return &(spfStatTime.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats
// OSPF Prefix SPF Prioritization statistics
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Raw Connections Open. The type is interface{} with range:
    // 0..18446744073709551615.
    RawConnOpen interface{}

    // Raw Connections Close. The type is interface{} with range:
    // 0..18446744073709551615.
    RawConnClose interface{}

    // Raw Connections Error. The type is interface{} with range:
    // 0..18446744073709551615.
    RawConnError interface{}

    // Received Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    InPackets interface{}

    // Received Bytes. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    InBytes interface{}

    // Received Long Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    InLongPackets interface{}

    // In Malloc Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InMallocDrops interface{}

    // In Handle Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InHandleDrops interface{}

    // In Short Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InShortDrops interface{}

    // In Error Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InErrorDrops interface{}

    // In IPSEC Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InIpsecDrops interface{}

    // In Queue Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InQueueDrops interface{}

    // Packets Sent. The type is interface{} with range: 0..18446744073709551615.
    OutPackets interface{}

    // Sent Bytes. The type is interface{} with range: 0..18446744073709551615.
    // Units are byte.
    OutBytes interface{}

    // No FileDescriptor Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    OutNofdDrops interface{}

    // Error Drops. The type is interface{} with range: 0..18446744073709551615.
    OutErrorDrops interface{}

    // Out IPSEC Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    OutIpsecDrops interface{}

    // No Packet Buffers. The type is interface{} with range:
    // 0..18446744073709551615.
    OutNopakDrops interface{}

    // PAK API Errors. The type is interface{} with range:
    // 0..18446744073709551615.
    OutPakapiErrors interface{}

    // Raw Connection State. The type is interface{} with range: 0..4294967295.
    RawConnState interface{}
}

func (rawioStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats) GetEntityData() *types.CommonEntityData {
    rawioStats.EntityData.YFilter = rawioStats.YFilter
    rawioStats.EntityData.YangName = "rawio-stats"
    rawioStats.EntityData.BundleName = "cisco_ios_xr"
    rawioStats.EntityData.ParentYangName = "vrf-statistics"
    rawioStats.EntityData.SegmentPath = "rawio-stats"
    rawioStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/vrf-statistics/" + rawioStats.EntityData.SegmentPath
    rawioStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rawioStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rawioStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rawioStats.EntityData.Children = types.NewOrderedMap()
    rawioStats.EntityData.Leafs = types.NewOrderedMap()
    rawioStats.EntityData.Leafs.Append("raw-conn-open", types.YLeaf{"RawConnOpen", rawioStats.RawConnOpen})
    rawioStats.EntityData.Leafs.Append("raw-conn-close", types.YLeaf{"RawConnClose", rawioStats.RawConnClose})
    rawioStats.EntityData.Leafs.Append("raw-conn-error", types.YLeaf{"RawConnError", rawioStats.RawConnError})
    rawioStats.EntityData.Leafs.Append("in-packets", types.YLeaf{"InPackets", rawioStats.InPackets})
    rawioStats.EntityData.Leafs.Append("in-bytes", types.YLeaf{"InBytes", rawioStats.InBytes})
    rawioStats.EntityData.Leafs.Append("in-long-packets", types.YLeaf{"InLongPackets", rawioStats.InLongPackets})
    rawioStats.EntityData.Leafs.Append("in-malloc-drops", types.YLeaf{"InMallocDrops", rawioStats.InMallocDrops})
    rawioStats.EntityData.Leafs.Append("in-handle-drops", types.YLeaf{"InHandleDrops", rawioStats.InHandleDrops})
    rawioStats.EntityData.Leafs.Append("in-short-drops", types.YLeaf{"InShortDrops", rawioStats.InShortDrops})
    rawioStats.EntityData.Leafs.Append("in-error-drops", types.YLeaf{"InErrorDrops", rawioStats.InErrorDrops})
    rawioStats.EntityData.Leafs.Append("in-ipsec-drops", types.YLeaf{"InIpsecDrops", rawioStats.InIpsecDrops})
    rawioStats.EntityData.Leafs.Append("in-queue-drops", types.YLeaf{"InQueueDrops", rawioStats.InQueueDrops})
    rawioStats.EntityData.Leafs.Append("out-packets", types.YLeaf{"OutPackets", rawioStats.OutPackets})
    rawioStats.EntityData.Leafs.Append("out-bytes", types.YLeaf{"OutBytes", rawioStats.OutBytes})
    rawioStats.EntityData.Leafs.Append("out-nofd-drops", types.YLeaf{"OutNofdDrops", rawioStats.OutNofdDrops})
    rawioStats.EntityData.Leafs.Append("out-error-drops", types.YLeaf{"OutErrorDrops", rawioStats.OutErrorDrops})
    rawioStats.EntityData.Leafs.Append("out-ipsec-drops", types.YLeaf{"OutIpsecDrops", rawioStats.OutIpsecDrops})
    rawioStats.EntityData.Leafs.Append("out-nopak-drops", types.YLeaf{"OutNopakDrops", rawioStats.OutNopakDrops})
    rawioStats.EntityData.Leafs.Append("out-pakapi-errors", types.YLeaf{"OutPakapiErrors", rawioStats.OutPakapiErrors})
    rawioStats.EntityData.Leafs.Append("raw-conn-state", types.YLeaf{"RawConnState", rawioStats.RawConnState})

    rawioStats.EntityData.YListKeys = []string {}

    return &(rawioStats.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats
// OSPF Prefix SPF Prioritization statistics
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority classifications. The type is interface{} with range:
    // 0..4294967295.
    Critical interface{}

    // High priority classifications. The type is interface{} with range:
    // 0..4294967295.
    High interface{}

    // Medium priority classifications. The type is interface{} with range:
    // 0..4294967295.
    Medium interface{}

    // Low priority classifications. The type is interface{} with range:
    // 0..4294967295.
    Low interface{}
}

func (prefixPriorityStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats) GetEntityData() *types.CommonEntityData {
    prefixPriorityStats.EntityData.YFilter = prefixPriorityStats.YFilter
    prefixPriorityStats.EntityData.YangName = "prefix-priority-stats"
    prefixPriorityStats.EntityData.BundleName = "cisco_ios_xr"
    prefixPriorityStats.EntityData.ParentYangName = "vrf-statistics"
    prefixPriorityStats.EntityData.SegmentPath = "prefix-priority-stats"
    prefixPriorityStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/vrf-statistics/" + prefixPriorityStats.EntityData.SegmentPath
    prefixPriorityStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixPriorityStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixPriorityStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixPriorityStats.EntityData.Children = types.NewOrderedMap()
    prefixPriorityStats.EntityData.Leafs = types.NewOrderedMap()
    prefixPriorityStats.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", prefixPriorityStats.Critical})
    prefixPriorityStats.EntityData.Leafs.Append("high", types.YLeaf{"High", prefixPriorityStats.High})
    prefixPriorityStats.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", prefixPriorityStats.Medium})
    prefixPriorityStats.EntityData.Leafs.Append("low", types.YLeaf{"Low", prefixPriorityStats.Low})

    prefixPriorityStats.EntityData.YListKeys = []string {}

    return &(prefixPriorityStats.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats
// OSPFv3 RIB batch statistics
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // No. of RIB batches sent. The type is interface{} with range: 0..4294967295.
    BatchesSent interface{}

    // No. of Routes sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    RoutesSent interface{}

    // No of Pending Routes. The type is interface{} with range: 0..4294967295.
    RoutesPending interface{}

    // Max No. of Routes in a batch. The type is interface{} with range:
    // 0..4294967295.
    MaxRoutes interface{}

    // No. of Paths sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsSent interface{}

    // No. of paths waiting to be sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsPending interface{}

    // No. of paths added to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsAdd interface{}

    // No. of paths add errors. The type is interface{} with range: 0..4294967295.
    PathsAddErrs interface{}

    // No. of paths del sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsDel interface{}

    // No. of Paths del errors. The type is interface{} with range: 0..4294967295.
    PathsDelErrs interface{}
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats) GetEntityData() *types.CommonEntityData {
    vrfRibBatchStats.EntityData.YFilter = vrfRibBatchStats.YFilter
    vrfRibBatchStats.EntityData.YangName = "vrf-rib-batch-stats"
    vrfRibBatchStats.EntityData.BundleName = "cisco_ios_xr"
    vrfRibBatchStats.EntityData.ParentYangName = "vrf-statistics"
    vrfRibBatchStats.EntityData.SegmentPath = "vrf-rib-batch-stats"
    vrfRibBatchStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/vrf-statistics/" + vrfRibBatchStats.EntityData.SegmentPath
    vrfRibBatchStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRibBatchStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRibBatchStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRibBatchStats.EntityData.Children = types.NewOrderedMap()
    vrfRibBatchStats.EntityData.Leafs = types.NewOrderedMap()
    vrfRibBatchStats.EntityData.Leafs.Append("batches-sent", types.YLeaf{"BatchesSent", vrfRibBatchStats.BatchesSent})
    vrfRibBatchStats.EntityData.Leafs.Append("routes-sent", types.YLeaf{"RoutesSent", vrfRibBatchStats.RoutesSent})
    vrfRibBatchStats.EntityData.Leafs.Append("routes-pending", types.YLeaf{"RoutesPending", vrfRibBatchStats.RoutesPending})
    vrfRibBatchStats.EntityData.Leafs.Append("max-routes", types.YLeaf{"MaxRoutes", vrfRibBatchStats.MaxRoutes})
    vrfRibBatchStats.EntityData.Leafs.Append("paths-sent", types.YLeaf{"PathsSent", vrfRibBatchStats.PathsSent})
    vrfRibBatchStats.EntityData.Leafs.Append("paths-pending", types.YLeaf{"PathsPending", vrfRibBatchStats.PathsPending})
    vrfRibBatchStats.EntityData.Leafs.Append("paths-add", types.YLeaf{"PathsAdd", vrfRibBatchStats.PathsAdd})
    vrfRibBatchStats.EntityData.Leafs.Append("paths-add-errs", types.YLeaf{"PathsAddErrs", vrfRibBatchStats.PathsAddErrs})
    vrfRibBatchStats.EntityData.Leafs.Append("paths-del", types.YLeaf{"PathsDel", vrfRibBatchStats.PathsDel})
    vrfRibBatchStats.EntityData.Leafs.Append("paths-del-errs", types.YLeaf{"PathsDelErrs", vrfRibBatchStats.PathsDelErrs})

    vrfRibBatchStats.EntityData.YListKeys = []string {}

    return &(vrfRibBatchStats.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary
// OSPFv3 summary
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 protocol summary.
    Protocol Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol

    // OSPFv3 summary.
    Ospfv3 Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3

    // OSPFv3 route summary.
    Route Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route
}

func (summary *Ospfv3_Processes_Process_Vrfs_Vrf_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "vrf"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("protocol", types.YChild{"Protocol", &summary.Protocol})
    summary.EntityData.Children.Append("ospfv3", types.YChild{"Ospfv3", &summary.Ospfv3})
    summary.EntityData.Children.Append("route", types.YChild{"Route", &summary.Route})
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol
// OSPFv3 protocol summary
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ProtocolRouterId interface{}

    // Administrative distance. The type is interface{} with range: 0..4294967295.
    AdministrativeDistance interface{}

    // Administrative Distance for Inter Area routes. The type is interface{} with
    // range: 0..4294967295.
    AdministrativeDistanceInterArea interface{}

    // Administrative Distance for External routes. The type is interface{} with
    // range: 0..4294967295.
    AdministrativeDistanceExternal interface{}

    // If true, Graceful restart is enabled . The type is bool.
    IsGracefulRestart interface{}

    // Distribute List In. The type is string.
    DistributeListIn interface{}
}

func (protocol *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol) GetEntityData() *types.CommonEntityData {
    protocol.EntityData.YFilter = protocol.YFilter
    protocol.EntityData.YangName = "protocol"
    protocol.EntityData.BundleName = "cisco_ios_xr"
    protocol.EntityData.ParentYangName = "summary"
    protocol.EntityData.SegmentPath = "protocol"
    protocol.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/summary/" + protocol.EntityData.SegmentPath
    protocol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocol.EntityData.Children = types.NewOrderedMap()
    protocol.EntityData.Leafs = types.NewOrderedMap()
    protocol.EntityData.Leafs.Append("protocol-router-id", types.YLeaf{"ProtocolRouterId", protocol.ProtocolRouterId})
    protocol.EntityData.Leafs.Append("administrative-distance", types.YLeaf{"AdministrativeDistance", protocol.AdministrativeDistance})
    protocol.EntityData.Leafs.Append("administrative-distance-inter-area", types.YLeaf{"AdministrativeDistanceInterArea", protocol.AdministrativeDistanceInterArea})
    protocol.EntityData.Leafs.Append("administrative-distance-external", types.YLeaf{"AdministrativeDistanceExternal", protocol.AdministrativeDistanceExternal})
    protocol.EntityData.Leafs.Append("is-graceful-restart", types.YLeaf{"IsGracefulRestart", protocol.IsGracefulRestart})
    protocol.EntityData.Leafs.Append("distribute-list-in", types.YLeaf{"DistributeListIn", protocol.DistributeListIn})

    protocol.EntityData.YListKeys = []string {}

    return &(protocol.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3
// OSPFv3 summary
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // If true, the process is running as stanby role. The type is bool.
    IsRoleStandby interface{}

    // Role, V1/V2 Active/Standby. The type is interface{} with range:
    // 0..4294967295.
    Role interface{}

    // If true, NSR is enabled. The type is bool.
    IsNsrEnabled interface{}

    // Trigger RP Switchover on detectable process restart. The type is bool.
    IsNsrSwitchoverOnRestart interface{}

    // Stalled Router ID . The type is bool.
    IsRouterIdStalled interface{}

    // Opaque LSA capable . The type is bool.
    IsOpaqueCapable interface{}

    // If true, is an area border router. The type is bool.
    IsAreaBorderRouter interface{}

    // If true, is an AS border router. The type is bool.
    IsAsBorderRouter interface{}

    // If true, prefer type 7 LSAs over type 5. The type is bool.
    CapabilityPreferType7 interface{}

    // Redistribution metric . The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // If true, origin is by default . The type is bool.
    IsDefaultOriginated interface{}

    // If true, default always . The type is bool.
    IsDefaultAlways interface{}

    // Default metric . The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Default metric type . The type is Ospfv3DefaultMetric.
    DefaultMetricType interface{}

    // Default tag . The type is interface{} with range: 0..4294967295.
    DefaultTag interface{}

    // If true, is a default policy . The type is bool.
    IsDefaultPolicy interface{}

    // Default policy name . The type is string.
    DefaultPolicyName interface{}

    // Scheduling delay for SPF (ms). The type is interface{} with range:
    // 0..4294967295.
    SpfStartTime interface{}

    // Minimum delay time between SPF runs (ms). The type is interface{} with
    // range: 0..4294967295.
    SpfHoldTime interface{}

    // Maximum delay time between SPF runs (ms). The type is interface{} with
    // range: 0..4294967295.
    SpfMaximumTime interface{}

    // Initial LSA throttle delay (ms). The type is interface{} with range:
    // 0..4294967295.
    LsaStartTime interface{}

    // Second delay before generating next LSA (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaHoldTime interface{}

    // Maximum delay before generating an LSA (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaMaximumTime interface{}

    // Minimum time between LSA regeneration (ms). The type is interface{} with
    // range: 0..4294967295.
    MinimumLsaInterval interface{}

    // LSA refresh interval (sec). The type is interface{} with range:
    // 0..4294967295.
    LsaGroupInterval interface{}

    // LSA flood pacing timer (ms). The type is interface{} with range:
    // 0..4294967295.
    LsaFloodPacingInterval interface{}

    // LSA retransmission pacing timer (ms). The type is interface{} with range:
    // 0..4294967295.
    LsaRetransmissionPacingInterval interface{}

    // Number of AS scope LSAs. The type is interface{} with range: 0..4294967295.
    AsLsAs interface{}

    // Number of opaque LSAs. The type is interface{} with range: 0..4294967295.
    OpaqueLsas interface{}

    // Sum of opaque LSA checksum. The type is interface{} with range:
    // 0..4294967295.
    OpaqueLsaChecksum interface{}

    // Number of external and AS opaque LSAs with demand circut bit not set. The
    // type is interface{} with range: 0..4294967295.
    AsDcBitlessLsAs interface{}

    // Number of external and AS opaque LSAs with do not age set . The type is
    // interface{} with range: 0..4294967295.
    AsDoNotAgeLsAs interface{}

    // Number of areas. The type is interface{} with range: 0..65535.
    Areas interface{}

    // Number of normal areas. The type is interface{} with range: 0..65535.
    NormalAreas interface{}

    // Number of stub and total stub areas. The type is interface{} with range:
    // 0..65535.
    StubAreas interface{}

    // Number of NSSA areas. The type is interface{} with range: 0..65535.
    NssaAreas interface{}

    // Length of AS LSAs flood list. The type is interface{} with range:
    // 0..4294967295.
    AsLsaFloodListLength interface{}

    // If true, grace restart is enabled . The type is bool.
    IsGraceRestartEnabled interface{}

    // Length of time since the last NSF (s). The type is interface{} with range:
    // 0..4294967295.
    LastNsfTime interface{}

    // Grace time to resync . The type is interface{} with range: 0..4294967295.
    GraceResyncTime interface{}

    // Maximum number of interfaces. The type is interface{} with range:
    // 0..4294967295.
    MaximumInterfaces interface{}

    // Maximum number of paths. The type is interface{} with range: 0..4294967295.
    MaximumPaths interface{}

    // The number of redistributed prefixes allowed. The type is interface{} with
    // range: 0..4294967295.
    RedistributionLimit interface{}

    // When the number of redistributed prefixes reaches this threshold, a warning
    // message is issued . The type is interface{} with range: 0..4294967295.
    RedistributionThreshold interface{}

    // If true, auto cost is enabled. The type is bool.
    IsAutoCost interface{}

    // Reference Bandwdith. The type is interface{} with range: 0..4294967295.
    ReferenceBandwidth interface{}

    // Context name. The type is string with length: 0..32.
    ContextName interface{}

    // If true, snmp trap is enabled. The type is bool.
    SnmpTrapEnabled interface{}

    // Graceful shutdown state. The type is Ospfv3GracefulShutdownState.
    GracefulShutdownState interface{}

    // Domain ID information.
    DomainId Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId

    // Stub Router Information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter.
    StubRouter []*Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter

    // IPFRR-Tiebreakers list. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers.
    IpfrrTiebreakers []*Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers
}

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3) GetEntityData() *types.CommonEntityData {
    ospfv3.EntityData.YFilter = ospfv3.YFilter
    ospfv3.EntityData.YangName = "ospfv3"
    ospfv3.EntityData.BundleName = "cisco_ios_xr"
    ospfv3.EntityData.ParentYangName = "summary"
    ospfv3.EntityData.SegmentPath = "ospfv3"
    ospfv3.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/summary/" + ospfv3.EntityData.SegmentPath
    ospfv3.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ospfv3.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ospfv3.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ospfv3.EntityData.Children = types.NewOrderedMap()
    ospfv3.EntityData.Children.Append("domain-id", types.YChild{"DomainId", &ospfv3.DomainId})
    ospfv3.EntityData.Children.Append("stub-router", types.YChild{"StubRouter", nil})
    for i := range ospfv3.StubRouter {
        types.SetYListKey(ospfv3.StubRouter[i], i)
        ospfv3.EntityData.Children.Append(types.GetSegmentPath(ospfv3.StubRouter[i]), types.YChild{"StubRouter", ospfv3.StubRouter[i]})
    }
    ospfv3.EntityData.Children.Append("ipfrr-tiebreakers", types.YChild{"IpfrrTiebreakers", nil})
    for i := range ospfv3.IpfrrTiebreakers {
        types.SetYListKey(ospfv3.IpfrrTiebreakers[i], i)
        ospfv3.EntityData.Children.Append(types.GetSegmentPath(ospfv3.IpfrrTiebreakers[i]), types.YChild{"IpfrrTiebreakers", ospfv3.IpfrrTiebreakers[i]})
    }
    ospfv3.EntityData.Leafs = types.NewOrderedMap()
    ospfv3.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", ospfv3.RouterId})
    ospfv3.EntityData.Leafs.Append("is-role-standby", types.YLeaf{"IsRoleStandby", ospfv3.IsRoleStandby})
    ospfv3.EntityData.Leafs.Append("role", types.YLeaf{"Role", ospfv3.Role})
    ospfv3.EntityData.Leafs.Append("is-nsr-enabled", types.YLeaf{"IsNsrEnabled", ospfv3.IsNsrEnabled})
    ospfv3.EntityData.Leafs.Append("is-nsr-switchover-on-restart", types.YLeaf{"IsNsrSwitchoverOnRestart", ospfv3.IsNsrSwitchoverOnRestart})
    ospfv3.EntityData.Leafs.Append("is-router-id-stalled", types.YLeaf{"IsRouterIdStalled", ospfv3.IsRouterIdStalled})
    ospfv3.EntityData.Leafs.Append("is-opaque-capable", types.YLeaf{"IsOpaqueCapable", ospfv3.IsOpaqueCapable})
    ospfv3.EntityData.Leafs.Append("is-area-border-router", types.YLeaf{"IsAreaBorderRouter", ospfv3.IsAreaBorderRouter})
    ospfv3.EntityData.Leafs.Append("is-as-border-router", types.YLeaf{"IsAsBorderRouter", ospfv3.IsAsBorderRouter})
    ospfv3.EntityData.Leafs.Append("capability-prefer-type7", types.YLeaf{"CapabilityPreferType7", ospfv3.CapabilityPreferType7})
    ospfv3.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ospfv3.Metric})
    ospfv3.EntityData.Leafs.Append("is-default-originated", types.YLeaf{"IsDefaultOriginated", ospfv3.IsDefaultOriginated})
    ospfv3.EntityData.Leafs.Append("is-default-always", types.YLeaf{"IsDefaultAlways", ospfv3.IsDefaultAlways})
    ospfv3.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", ospfv3.DefaultMetric})
    ospfv3.EntityData.Leafs.Append("default-metric-type", types.YLeaf{"DefaultMetricType", ospfv3.DefaultMetricType})
    ospfv3.EntityData.Leafs.Append("default-tag", types.YLeaf{"DefaultTag", ospfv3.DefaultTag})
    ospfv3.EntityData.Leafs.Append("is-default-policy", types.YLeaf{"IsDefaultPolicy", ospfv3.IsDefaultPolicy})
    ospfv3.EntityData.Leafs.Append("default-policy-name", types.YLeaf{"DefaultPolicyName", ospfv3.DefaultPolicyName})
    ospfv3.EntityData.Leafs.Append("spf-start-time", types.YLeaf{"SpfStartTime", ospfv3.SpfStartTime})
    ospfv3.EntityData.Leafs.Append("spf-hold-time", types.YLeaf{"SpfHoldTime", ospfv3.SpfHoldTime})
    ospfv3.EntityData.Leafs.Append("spf-maximum-time", types.YLeaf{"SpfMaximumTime", ospfv3.SpfMaximumTime})
    ospfv3.EntityData.Leafs.Append("lsa-start-time", types.YLeaf{"LsaStartTime", ospfv3.LsaStartTime})
    ospfv3.EntityData.Leafs.Append("lsa-hold-time", types.YLeaf{"LsaHoldTime", ospfv3.LsaHoldTime})
    ospfv3.EntityData.Leafs.Append("lsa-maximum-time", types.YLeaf{"LsaMaximumTime", ospfv3.LsaMaximumTime})
    ospfv3.EntityData.Leafs.Append("minimum-lsa-interval", types.YLeaf{"MinimumLsaInterval", ospfv3.MinimumLsaInterval})
    ospfv3.EntityData.Leafs.Append("lsa-group-interval", types.YLeaf{"LsaGroupInterval", ospfv3.LsaGroupInterval})
    ospfv3.EntityData.Leafs.Append("lsa-flood-pacing-interval", types.YLeaf{"LsaFloodPacingInterval", ospfv3.LsaFloodPacingInterval})
    ospfv3.EntityData.Leafs.Append("lsa-retransmission-pacing-interval", types.YLeaf{"LsaRetransmissionPacingInterval", ospfv3.LsaRetransmissionPacingInterval})
    ospfv3.EntityData.Leafs.Append("as-ls-as", types.YLeaf{"AsLsAs", ospfv3.AsLsAs})
    ospfv3.EntityData.Leafs.Append("opaque-lsas", types.YLeaf{"OpaqueLsas", ospfv3.OpaqueLsas})
    ospfv3.EntityData.Leafs.Append("opaque-lsa-checksum", types.YLeaf{"OpaqueLsaChecksum", ospfv3.OpaqueLsaChecksum})
    ospfv3.EntityData.Leafs.Append("as-dc-bitless-ls-as", types.YLeaf{"AsDcBitlessLsAs", ospfv3.AsDcBitlessLsAs})
    ospfv3.EntityData.Leafs.Append("as-do-not-age-ls-as", types.YLeaf{"AsDoNotAgeLsAs", ospfv3.AsDoNotAgeLsAs})
    ospfv3.EntityData.Leafs.Append("areas", types.YLeaf{"Areas", ospfv3.Areas})
    ospfv3.EntityData.Leafs.Append("normal-areas", types.YLeaf{"NormalAreas", ospfv3.NormalAreas})
    ospfv3.EntityData.Leafs.Append("stub-areas", types.YLeaf{"StubAreas", ospfv3.StubAreas})
    ospfv3.EntityData.Leafs.Append("nssa-areas", types.YLeaf{"NssaAreas", ospfv3.NssaAreas})
    ospfv3.EntityData.Leafs.Append("as-lsa-flood-list-length", types.YLeaf{"AsLsaFloodListLength", ospfv3.AsLsaFloodListLength})
    ospfv3.EntityData.Leafs.Append("is-grace-restart-enabled", types.YLeaf{"IsGraceRestartEnabled", ospfv3.IsGraceRestartEnabled})
    ospfv3.EntityData.Leafs.Append("last-nsf-time", types.YLeaf{"LastNsfTime", ospfv3.LastNsfTime})
    ospfv3.EntityData.Leafs.Append("grace-resync-time", types.YLeaf{"GraceResyncTime", ospfv3.GraceResyncTime})
    ospfv3.EntityData.Leafs.Append("maximum-interfaces", types.YLeaf{"MaximumInterfaces", ospfv3.MaximumInterfaces})
    ospfv3.EntityData.Leafs.Append("maximum-paths", types.YLeaf{"MaximumPaths", ospfv3.MaximumPaths})
    ospfv3.EntityData.Leafs.Append("redistribution-limit", types.YLeaf{"RedistributionLimit", ospfv3.RedistributionLimit})
    ospfv3.EntityData.Leafs.Append("redistribution-threshold", types.YLeaf{"RedistributionThreshold", ospfv3.RedistributionThreshold})
    ospfv3.EntityData.Leafs.Append("is-auto-cost", types.YLeaf{"IsAutoCost", ospfv3.IsAutoCost})
    ospfv3.EntityData.Leafs.Append("reference-bandwidth", types.YLeaf{"ReferenceBandwidth", ospfv3.ReferenceBandwidth})
    ospfv3.EntityData.Leafs.Append("context-name", types.YLeaf{"ContextName", ospfv3.ContextName})
    ospfv3.EntityData.Leafs.Append("snmp-trap-enabled", types.YLeaf{"SnmpTrapEnabled", ospfv3.SnmpTrapEnabled})
    ospfv3.EntityData.Leafs.Append("graceful-shutdown-state", types.YLeaf{"GracefulShutdownState", ospfv3.GracefulShutdownState})

    ospfv3.EntityData.YListKeys = []string {}

    return &(ospfv3.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId
// Domain ID information
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Primary Domain ID.
    PrimaryDomainId Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId

    // List of secondary domain IDs. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId.
    SecondaryDomainId []*Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId
}

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId) GetEntityData() *types.CommonEntityData {
    domainId.EntityData.YFilter = domainId.YFilter
    domainId.EntityData.YangName = "domain-id"
    domainId.EntityData.BundleName = "cisco_ios_xr"
    domainId.EntityData.ParentYangName = "ospfv3"
    domainId.EntityData.SegmentPath = "domain-id"
    domainId.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/summary/ospfv3/" + domainId.EntityData.SegmentPath
    domainId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    domainId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    domainId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    domainId.EntityData.Children = types.NewOrderedMap()
    domainId.EntityData.Children.Append("primary-domain-id", types.YChild{"PrimaryDomainId", &domainId.PrimaryDomainId})
    domainId.EntityData.Children.Append("secondary-domain-id", types.YChild{"SecondaryDomainId", nil})
    for i := range domainId.SecondaryDomainId {
        types.SetYListKey(domainId.SecondaryDomainId[i], i)
        domainId.EntityData.Children.Append(types.GetSegmentPath(domainId.SecondaryDomainId[i]), types.YChild{"SecondaryDomainId", domainId.SecondaryDomainId[i]})
    }
    domainId.EntityData.Leafs = types.NewOrderedMap()

    domainId.EntityData.YListKeys = []string {}

    return &(domainId.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId
// Primary Domain ID
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Domain ID Type. The type is interface{} with range: 0..65535.
    DomainIdType interface{}

    // Domain ID value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    DomainIdValue interface{}
}

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetEntityData() *types.CommonEntityData {
    primaryDomainId.EntityData.YFilter = primaryDomainId.YFilter
    primaryDomainId.EntityData.YangName = "primary-domain-id"
    primaryDomainId.EntityData.BundleName = "cisco_ios_xr"
    primaryDomainId.EntityData.ParentYangName = "domain-id"
    primaryDomainId.EntityData.SegmentPath = "primary-domain-id"
    primaryDomainId.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/summary/ospfv3/domain-id/" + primaryDomainId.EntityData.SegmentPath
    primaryDomainId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    primaryDomainId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    primaryDomainId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    primaryDomainId.EntityData.Children = types.NewOrderedMap()
    primaryDomainId.EntityData.Leafs = types.NewOrderedMap()
    primaryDomainId.EntityData.Leafs.Append("domain-id-type", types.YLeaf{"DomainIdType", primaryDomainId.DomainIdType})
    primaryDomainId.EntityData.Leafs.Append("domain-id-value", types.YLeaf{"DomainIdValue", primaryDomainId.DomainIdValue})

    primaryDomainId.EntityData.YListKeys = []string {}

    return &(primaryDomainId.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId
// List of secondary domain IDs
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Domain ID Type. The type is interface{} with range: 0..65535.
    DomainIdType interface{}

    // Domain ID value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    DomainIdValue interface{}
}

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetEntityData() *types.CommonEntityData {
    secondaryDomainId.EntityData.YFilter = secondaryDomainId.YFilter
    secondaryDomainId.EntityData.YangName = "secondary-domain-id"
    secondaryDomainId.EntityData.BundleName = "cisco_ios_xr"
    secondaryDomainId.EntityData.ParentYangName = "domain-id"
    secondaryDomainId.EntityData.SegmentPath = "secondary-domain-id" + types.AddNoKeyToken(secondaryDomainId)
    secondaryDomainId.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/summary/ospfv3/domain-id/" + secondaryDomainId.EntityData.SegmentPath
    secondaryDomainId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    secondaryDomainId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    secondaryDomainId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    secondaryDomainId.EntityData.Children = types.NewOrderedMap()
    secondaryDomainId.EntityData.Leafs = types.NewOrderedMap()
    secondaryDomainId.EntityData.Leafs.Append("domain-id-type", types.YLeaf{"DomainIdType", secondaryDomainId.DomainIdType})
    secondaryDomainId.EntityData.Leafs.Append("domain-id-value", types.YLeaf{"DomainIdValue", secondaryDomainId.DomainIdValue})

    secondaryDomainId.EntityData.YListKeys = []string {}

    return &(secondaryDomainId.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter
// Stub Router Information
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Stub router mode. The type is StubRouterMode.
    Mode interface{}

    // If true, stub router mode is active. The type is bool.
    Active interface{}

    // Remaining time (in seconds) in stub router mode. The type is interface{}
    // with range: 0..4294967295. Units are second.
    RemainingTime interface{}

    // Reason for entering stub router mode. The type is StubRouterTrigger.
    SetReason interface{}

    // Reason for clearing stub router condition. The type is
    // StubRouterExitReason.
    UnsetReason interface{}

    // If true, advertise maximum metric for stub links. The type is bool.
    IncludeStubLinks interface{}

    // Metric for summary LSAs in max-metric mode. The type is interface{} with
    // range: 0..4294967295.
    SummaryLsaMetric interface{}

    // Metric for external LSAs in max-metric mode. The type is interface{} with
    // range: 0..4294967295.
    ExternalLsaMetric interface{}

    // Reason for being in ABR off mode. The type is StubRouterAbrOffReason.
    AbrOffReason interface{}

    // Timestamp (relative to 1970/1/1 00:00) when stub router condition was
    // cleared.
    UnsetTime Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime

    // Timestamp (relative to 1970/1/1 00:00) when stub router mode was activated.
    StartTime Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime

    // Timestamp (relative to 1970/1/1 00:00) when ABR duties were resumed.
    AbrResumeTime Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime

    // Triggers for entering stub router mode. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger.
    Trigger []*Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger
}

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter) GetEntityData() *types.CommonEntityData {
    stubRouter.EntityData.YFilter = stubRouter.YFilter
    stubRouter.EntityData.YangName = "stub-router"
    stubRouter.EntityData.BundleName = "cisco_ios_xr"
    stubRouter.EntityData.ParentYangName = "ospfv3"
    stubRouter.EntityData.SegmentPath = "stub-router" + types.AddNoKeyToken(stubRouter)
    stubRouter.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/summary/ospfv3/" + stubRouter.EntityData.SegmentPath
    stubRouter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stubRouter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stubRouter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stubRouter.EntityData.Children = types.NewOrderedMap()
    stubRouter.EntityData.Children.Append("unset-time", types.YChild{"UnsetTime", &stubRouter.UnsetTime})
    stubRouter.EntityData.Children.Append("start-time", types.YChild{"StartTime", &stubRouter.StartTime})
    stubRouter.EntityData.Children.Append("abr-resume-time", types.YChild{"AbrResumeTime", &stubRouter.AbrResumeTime})
    stubRouter.EntityData.Children.Append("trigger", types.YChild{"Trigger", nil})
    for i := range stubRouter.Trigger {
        types.SetYListKey(stubRouter.Trigger[i], i)
        stubRouter.EntityData.Children.Append(types.GetSegmentPath(stubRouter.Trigger[i]), types.YChild{"Trigger", stubRouter.Trigger[i]})
    }
    stubRouter.EntityData.Leafs = types.NewOrderedMap()
    stubRouter.EntityData.Leafs.Append("mode", types.YLeaf{"Mode", stubRouter.Mode})
    stubRouter.EntityData.Leafs.Append("active", types.YLeaf{"Active", stubRouter.Active})
    stubRouter.EntityData.Leafs.Append("remaining-time", types.YLeaf{"RemainingTime", stubRouter.RemainingTime})
    stubRouter.EntityData.Leafs.Append("set-reason", types.YLeaf{"SetReason", stubRouter.SetReason})
    stubRouter.EntityData.Leafs.Append("unset-reason", types.YLeaf{"UnsetReason", stubRouter.UnsetReason})
    stubRouter.EntityData.Leafs.Append("include-stub-links", types.YLeaf{"IncludeStubLinks", stubRouter.IncludeStubLinks})
    stubRouter.EntityData.Leafs.Append("summary-lsa-metric", types.YLeaf{"SummaryLsaMetric", stubRouter.SummaryLsaMetric})
    stubRouter.EntityData.Leafs.Append("external-lsa-metric", types.YLeaf{"ExternalLsaMetric", stubRouter.ExternalLsaMetric})
    stubRouter.EntityData.Leafs.Append("abr-off-reason", types.YLeaf{"AbrOffReason", stubRouter.AbrOffReason})

    stubRouter.EntityData.YListKeys = []string {}

    return &(stubRouter.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime
// Timestamp (relative to 1970/1/1 00:00) when stub
// router condition was cleared
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime) GetEntityData() *types.CommonEntityData {
    unsetTime.EntityData.YFilter = unsetTime.YFilter
    unsetTime.EntityData.YangName = "unset-time"
    unsetTime.EntityData.BundleName = "cisco_ios_xr"
    unsetTime.EntityData.ParentYangName = "stub-router"
    unsetTime.EntityData.SegmentPath = "unset-time"
    unsetTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/summary/ospfv3/stub-router/" + unsetTime.EntityData.SegmentPath
    unsetTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unsetTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unsetTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unsetTime.EntityData.Children = types.NewOrderedMap()
    unsetTime.EntityData.Leafs = types.NewOrderedMap()
    unsetTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", unsetTime.Second})
    unsetTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", unsetTime.Nanosecond})

    unsetTime.EntityData.YListKeys = []string {}

    return &(unsetTime.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime
// Timestamp (relative to 1970/1/1 00:00) when stub
// router mode was activated
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime) GetEntityData() *types.CommonEntityData {
    startTime.EntityData.YFilter = startTime.YFilter
    startTime.EntityData.YangName = "start-time"
    startTime.EntityData.BundleName = "cisco_ios_xr"
    startTime.EntityData.ParentYangName = "stub-router"
    startTime.EntityData.SegmentPath = "start-time"
    startTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/summary/ospfv3/stub-router/" + startTime.EntityData.SegmentPath
    startTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    startTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    startTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    startTime.EntityData.Children = types.NewOrderedMap()
    startTime.EntityData.Leafs = types.NewOrderedMap()
    startTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", startTime.Second})
    startTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", startTime.Nanosecond})

    startTime.EntityData.YListKeys = []string {}

    return &(startTime.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime
// Timestamp (relative to 1970/1/1 00:00) when ABR
// duties were resumed
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (abrResumeTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetEntityData() *types.CommonEntityData {
    abrResumeTime.EntityData.YFilter = abrResumeTime.YFilter
    abrResumeTime.EntityData.YangName = "abr-resume-time"
    abrResumeTime.EntityData.BundleName = "cisco_ios_xr"
    abrResumeTime.EntityData.ParentYangName = "stub-router"
    abrResumeTime.EntityData.SegmentPath = "abr-resume-time"
    abrResumeTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/summary/ospfv3/stub-router/" + abrResumeTime.EntityData.SegmentPath
    abrResumeTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    abrResumeTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    abrResumeTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    abrResumeTime.EntityData.Children = types.NewOrderedMap()
    abrResumeTime.EntityData.Leafs = types.NewOrderedMap()
    abrResumeTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", abrResumeTime.Second})
    abrResumeTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", abrResumeTime.Nanosecond})

    abrResumeTime.EntityData.YListKeys = []string {}

    return &(abrResumeTime.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger
// Triggers for entering stub router mode
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Stub Router Trigger type. The type is StubRouterTrigger.
    Trigger interface{}

    // If true, stub router is terminated when BGP converges. The type is bool.
    WaitForBgp interface{}

    // Reason for clearing stub router condition. The type is
    // StubRouterExitReason.
    UnsetReason interface{}

    // Time (in seconds) to stay in stub router mode. The type is interface{} with
    // range: 0..4294967295. Units are second.
    Time interface{}

    // Timestamp (relative to 1970/1/1 00:00) when stub router condition was
    // cleared.
    UnsetTime Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime

    // Timestamp (relative to 1970/1/1 00:00) when stub router mode was activated.
    StartTime Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime
}

func (trigger *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger) GetEntityData() *types.CommonEntityData {
    trigger.EntityData.YFilter = trigger.YFilter
    trigger.EntityData.YangName = "trigger"
    trigger.EntityData.BundleName = "cisco_ios_xr"
    trigger.EntityData.ParentYangName = "stub-router"
    trigger.EntityData.SegmentPath = "trigger" + types.AddNoKeyToken(trigger)
    trigger.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/summary/ospfv3/stub-router/" + trigger.EntityData.SegmentPath
    trigger.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trigger.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trigger.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trigger.EntityData.Children = types.NewOrderedMap()
    trigger.EntityData.Children.Append("unset-time", types.YChild{"UnsetTime", &trigger.UnsetTime})
    trigger.EntityData.Children.Append("start-time", types.YChild{"StartTime", &trigger.StartTime})
    trigger.EntityData.Leafs = types.NewOrderedMap()
    trigger.EntityData.Leafs.Append("trigger", types.YLeaf{"Trigger", trigger.Trigger})
    trigger.EntityData.Leafs.Append("wait-for-bgp", types.YLeaf{"WaitForBgp", trigger.WaitForBgp})
    trigger.EntityData.Leafs.Append("unset-reason", types.YLeaf{"UnsetReason", trigger.UnsetReason})
    trigger.EntityData.Leafs.Append("time", types.YLeaf{"Time", trigger.Time})

    trigger.EntityData.YListKeys = []string {}

    return &(trigger.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime
// Timestamp (relative to 1970/1/1 00:00) when stub
// router condition was cleared
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetEntityData() *types.CommonEntityData {
    unsetTime.EntityData.YFilter = unsetTime.YFilter
    unsetTime.EntityData.YangName = "unset-time"
    unsetTime.EntityData.BundleName = "cisco_ios_xr"
    unsetTime.EntityData.ParentYangName = "trigger"
    unsetTime.EntityData.SegmentPath = "unset-time"
    unsetTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/summary/ospfv3/stub-router/trigger/" + unsetTime.EntityData.SegmentPath
    unsetTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unsetTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unsetTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unsetTime.EntityData.Children = types.NewOrderedMap()
    unsetTime.EntityData.Leafs = types.NewOrderedMap()
    unsetTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", unsetTime.Second})
    unsetTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", unsetTime.Nanosecond})

    unsetTime.EntityData.YListKeys = []string {}

    return &(unsetTime.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime
// Timestamp (relative to 1970/1/1 00:00) when stub
// router mode was activated
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetEntityData() *types.CommonEntityData {
    startTime.EntityData.YFilter = startTime.YFilter
    startTime.EntityData.YangName = "start-time"
    startTime.EntityData.BundleName = "cisco_ios_xr"
    startTime.EntityData.ParentYangName = "trigger"
    startTime.EntityData.SegmentPath = "start-time"
    startTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/summary/ospfv3/stub-router/trigger/" + startTime.EntityData.SegmentPath
    startTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    startTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    startTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    startTime.EntityData.Children = types.NewOrderedMap()
    startTime.EntityData.Leafs = types.NewOrderedMap()
    startTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", startTime.Second})
    startTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", startTime.Nanosecond})

    startTime.EntityData.YListKeys = []string {}

    return &(startTime.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers
// IPFRR-Tiebreakers list
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Tiebreaker Type. The type is IpfrrTbrkr.
    TiebreakerType interface{}

    // Tiebreaker Index. The type is interface{} with range: 0..4294967295.
    TiebreakerIndex interface{}
}

func (ipfrrTiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers) GetEntityData() *types.CommonEntityData {
    ipfrrTiebreakers.EntityData.YFilter = ipfrrTiebreakers.YFilter
    ipfrrTiebreakers.EntityData.YangName = "ipfrr-tiebreakers"
    ipfrrTiebreakers.EntityData.BundleName = "cisco_ios_xr"
    ipfrrTiebreakers.EntityData.ParentYangName = "ospfv3"
    ipfrrTiebreakers.EntityData.SegmentPath = "ipfrr-tiebreakers" + types.AddNoKeyToken(ipfrrTiebreakers)
    ipfrrTiebreakers.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/summary/ospfv3/" + ipfrrTiebreakers.EntityData.SegmentPath
    ipfrrTiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipfrrTiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipfrrTiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipfrrTiebreakers.EntityData.Children = types.NewOrderedMap()
    ipfrrTiebreakers.EntityData.Leafs = types.NewOrderedMap()
    ipfrrTiebreakers.EntityData.Leafs.Append("tiebreaker-type", types.YLeaf{"TiebreakerType", ipfrrTiebreakers.TiebreakerType})
    ipfrrTiebreakers.EntityData.Leafs.Append("tiebreaker-index", types.YLeaf{"TiebreakerIndex", ipfrrTiebreakers.TiebreakerIndex})

    ipfrrTiebreakers.EntityData.YListKeys = []string {}

    return &(ipfrrTiebreakers.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route
// OSPFv3 route summary
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route summary of a route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Intra route summary . The type is interface{} with range: 0..4294967295.
    IntraAreaRoute interface{}

    // Inter route summary . The type is interface{} with range: 0..4294967295.
    InterAreaRoute interface{}

    // Extern 1 route summary . The type is interface{} with range: 0..4294967295.
    ExternOneRoute interface{}

    // Extern 2 route summary . The type is interface{} with range: 0..4294967295.
    ExternTwoRoute interface{}

    // NSSA 1 route summary . The type is interface{} with range: 0..4294967295.
    NssaOneRoute interface{}

    // NSSA 2 route summary . The type is interface{} with range: 0..4294967295.
    NssaTwoRoute interface{}

    // Total route summary . The type is interface{} with range: 0..4294967295.
    TotalSentRoute interface{}

    // Route connected . The type is interface{} with range: 0..4294967295.
    RouteConnected interface{}

    // Redistribution route summary . The type is interface{} with range:
    // 0..4294967295.
    RedistributionRoute interface{}

    // Total route received summary. The type is interface{} with range:
    // 0..4294967295.
    TotalReceivedRoute interface{}
}

func (route *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route) GetEntityData() *types.CommonEntityData {
    route.EntityData.YFilter = route.YFilter
    route.EntityData.YangName = "route"
    route.EntityData.BundleName = "cisco_ios_xr"
    route.EntityData.ParentYangName = "summary"
    route.EntityData.SegmentPath = "route"
    route.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/summary/" + route.EntityData.SegmentPath
    route.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    route.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    route.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    route.EntityData.Children = types.NewOrderedMap()
    route.EntityData.Leafs = types.NewOrderedMap()
    route.EntityData.Leafs.Append("route-id", types.YLeaf{"RouteId", route.RouteId})
    route.EntityData.Leafs.Append("intra-area-route", types.YLeaf{"IntraAreaRoute", route.IntraAreaRoute})
    route.EntityData.Leafs.Append("inter-area-route", types.YLeaf{"InterAreaRoute", route.InterAreaRoute})
    route.EntityData.Leafs.Append("extern-one-route", types.YLeaf{"ExternOneRoute", route.ExternOneRoute})
    route.EntityData.Leafs.Append("extern-two-route", types.YLeaf{"ExternTwoRoute", route.ExternTwoRoute})
    route.EntityData.Leafs.Append("nssa-one-route", types.YLeaf{"NssaOneRoute", route.NssaOneRoute})
    route.EntityData.Leafs.Append("nssa-two-route", types.YLeaf{"NssaTwoRoute", route.NssaTwoRoute})
    route.EntityData.Leafs.Append("total-sent-route", types.YLeaf{"TotalSentRoute", route.TotalSentRoute})
    route.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", route.RouteConnected})
    route.EntityData.Leafs.Append("redistribution-route", types.YLeaf{"RedistributionRoute", route.RedistributionRoute})
    route.EntityData.Leafs.Append("total-received-route", types.YLeaf{"TotalReceivedRoute", route.TotalReceivedRoute})

    route.EntityData.YListKeys = []string {}

    return &(route.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable
// OSPFv3 retransmission list information table for
// all areas
type Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 retransmission list information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission.
    Retransmission []*Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission
}

func (retransmissionListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable) GetEntityData() *types.CommonEntityData {
    retransmissionListProcessTable.EntityData.YFilter = retransmissionListProcessTable.YFilter
    retransmissionListProcessTable.EntityData.YangName = "retransmission-list-process-table"
    retransmissionListProcessTable.EntityData.BundleName = "cisco_ios_xr"
    retransmissionListProcessTable.EntityData.ParentYangName = "vrf"
    retransmissionListProcessTable.EntityData.SegmentPath = "retransmission-list-process-table"
    retransmissionListProcessTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + retransmissionListProcessTable.EntityData.SegmentPath
    retransmissionListProcessTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionListProcessTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionListProcessTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionListProcessTable.EntityData.Children = types.NewOrderedMap()
    retransmissionListProcessTable.EntityData.Children.Append("retransmission", types.YChild{"Retransmission", nil})
    for i := range retransmissionListProcessTable.Retransmission {
        types.SetYListKey(retransmissionListProcessTable.Retransmission[i], i)
        retransmissionListProcessTable.EntityData.Children.Append(types.GetSegmentPath(retransmissionListProcessTable.Retransmission[i]), types.YChild{"Retransmission", retransmissionListProcessTable.Retransmission[i]})
    }
    retransmissionListProcessTable.EntityData.Leafs = types.NewOrderedMap()

    retransmissionListProcessTable.EntityData.YListKeys = []string {}

    return &(retransmissionListProcessTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission
// OSPFv3 retransmission list information
type Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RetransmissionNeighborAddress interface{}

    // If true, virtual link is retransmitted . The type is bool.
    IsRetransmissionvirtualLink interface{}

    // Retransmission virtual link ID . The type is interface{} with range:
    // 0..4294967295.
    RetransmissionvirtualLinkId interface{}

    // If true, sham link is retransmitted . The type is bool.
    IsRetransmissionShamLink interface{}

    // Retransmission sham link ID . The type is interface{} with range:
    // 0..4294967295.
    RetransmissionShamLinkId interface{}

    // Amount of time remaining on retransmission timer (ms). The type is
    // interface{} with range: 0..4294967295.
    RetransmissionTimer interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    RetransmissionLength interface{}

    // List of virtual link scope entries . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb.
    RetransmissionvirtualLinkDb []*Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb

    // List of area scope entries. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb.
    RetransmissionAreaDb []*Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb

    // List of AS scope entries. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb.
    RetransmissionAsdb []*Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb
}

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission) GetEntityData() *types.CommonEntityData {
    retransmission.EntityData.YFilter = retransmission.YFilter
    retransmission.EntityData.YangName = "retransmission"
    retransmission.EntityData.BundleName = "cisco_ios_xr"
    retransmission.EntityData.ParentYangName = "retransmission-list-process-table"
    retransmission.EntityData.SegmentPath = "retransmission" + types.AddNoKeyToken(retransmission)
    retransmission.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/retransmission-list-process-table/" + retransmission.EntityData.SegmentPath
    retransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmission.EntityData.Children = types.NewOrderedMap()
    retransmission.EntityData.Children.Append("retransmissionvirtual-link-db", types.YChild{"RetransmissionvirtualLinkDb", nil})
    for i := range retransmission.RetransmissionvirtualLinkDb {
        types.SetYListKey(retransmission.RetransmissionvirtualLinkDb[i], i)
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionvirtualLinkDb[i]), types.YChild{"RetransmissionvirtualLinkDb", retransmission.RetransmissionvirtualLinkDb[i]})
    }
    retransmission.EntityData.Children.Append("retransmission-area-db", types.YChild{"RetransmissionAreaDb", nil})
    for i := range retransmission.RetransmissionAreaDb {
        types.SetYListKey(retransmission.RetransmissionAreaDb[i], i)
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionAreaDb[i]), types.YChild{"RetransmissionAreaDb", retransmission.RetransmissionAreaDb[i]})
    }
    retransmission.EntityData.Children.Append("retransmission-asdb", types.YChild{"RetransmissionAsdb", nil})
    for i := range retransmission.RetransmissionAsdb {
        types.SetYListKey(retransmission.RetransmissionAsdb[i], i)
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionAsdb[i]), types.YChild{"RetransmissionAsdb", retransmission.RetransmissionAsdb[i]})
    }
    retransmission.EntityData.Leafs = types.NewOrderedMap()
    retransmission.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", retransmission.InterfaceName})
    retransmission.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", retransmission.NeighborAddress})
    retransmission.EntityData.Leafs.Append("retransmission-neighbor-address", types.YLeaf{"RetransmissionNeighborAddress", retransmission.RetransmissionNeighborAddress})
    retransmission.EntityData.Leafs.Append("is-retransmissionvirtual-link", types.YLeaf{"IsRetransmissionvirtualLink", retransmission.IsRetransmissionvirtualLink})
    retransmission.EntityData.Leafs.Append("retransmissionvirtual-link-id", types.YLeaf{"RetransmissionvirtualLinkId", retransmission.RetransmissionvirtualLinkId})
    retransmission.EntityData.Leafs.Append("is-retransmission-sham-link", types.YLeaf{"IsRetransmissionShamLink", retransmission.IsRetransmissionShamLink})
    retransmission.EntityData.Leafs.Append("retransmission-sham-link-id", types.YLeaf{"RetransmissionShamLinkId", retransmission.RetransmissionShamLinkId})
    retransmission.EntityData.Leafs.Append("retransmission-timer", types.YLeaf{"RetransmissionTimer", retransmission.RetransmissionTimer})
    retransmission.EntityData.Leafs.Append("retransmission-length", types.YLeaf{"RetransmissionLength", retransmission.RetransmissionLength})

    retransmission.EntityData.YListKeys = []string {}

    return &(retransmission.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb
// List of virtual link scope entries 
type Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetEntityData() *types.CommonEntityData {
    retransmissionvirtualLinkDb.EntityData.YFilter = retransmissionvirtualLinkDb.YFilter
    retransmissionvirtualLinkDb.EntityData.YangName = "retransmissionvirtual-link-db"
    retransmissionvirtualLinkDb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionvirtualLinkDb.EntityData.ParentYangName = "retransmission"
    retransmissionvirtualLinkDb.EntityData.SegmentPath = "retransmissionvirtual-link-db" + types.AddNoKeyToken(retransmissionvirtualLinkDb)
    retransmissionvirtualLinkDb.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/retransmission-list-process-table/retransmission/" + retransmissionvirtualLinkDb.EntityData.SegmentPath
    retransmissionvirtualLinkDb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionvirtualLinkDb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionvirtualLinkDb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionvirtualLinkDb.EntityData.Children = types.NewOrderedMap()
    retransmissionvirtualLinkDb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionvirtualLinkDb.HeaderLsaType})
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionvirtualLinkDb.HeaderLsaAge})
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", retransmissionvirtualLinkDb.HeaderLsaId})
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionvirtualLinkDb.HeaderAdvertisingRouter})
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionvirtualLinkDb.HeaderSequenceNumber})

    retransmissionvirtualLinkDb.EntityData.YListKeys = []string {}

    return &(retransmissionvirtualLinkDb.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb
// List of area scope entries
type Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetEntityData() *types.CommonEntityData {
    retransmissionAreaDb.EntityData.YFilter = retransmissionAreaDb.YFilter
    retransmissionAreaDb.EntityData.YangName = "retransmission-area-db"
    retransmissionAreaDb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionAreaDb.EntityData.ParentYangName = "retransmission"
    retransmissionAreaDb.EntityData.SegmentPath = "retransmission-area-db" + types.AddNoKeyToken(retransmissionAreaDb)
    retransmissionAreaDb.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/retransmission-list-process-table/retransmission/" + retransmissionAreaDb.EntityData.SegmentPath
    retransmissionAreaDb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionAreaDb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionAreaDb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionAreaDb.EntityData.Children = types.NewOrderedMap()
    retransmissionAreaDb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionAreaDb.HeaderLsaType})
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionAreaDb.HeaderLsaAge})
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", retransmissionAreaDb.HeaderLsaId})
    retransmissionAreaDb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionAreaDb.HeaderAdvertisingRouter})
    retransmissionAreaDb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionAreaDb.HeaderSequenceNumber})

    retransmissionAreaDb.EntityData.YListKeys = []string {}

    return &(retransmissionAreaDb.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb
// List of AS scope entries
type Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetEntityData() *types.CommonEntityData {
    retransmissionAsdb.EntityData.YFilter = retransmissionAsdb.YFilter
    retransmissionAsdb.EntityData.YangName = "retransmission-asdb"
    retransmissionAsdb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionAsdb.EntityData.ParentYangName = "retransmission"
    retransmissionAsdb.EntityData.SegmentPath = "retransmission-asdb" + types.AddNoKeyToken(retransmissionAsdb)
    retransmissionAsdb.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/retransmission-list-process-table/retransmission/" + retransmissionAsdb.EntityData.SegmentPath
    retransmissionAsdb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionAsdb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionAsdb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionAsdb.EntityData.Children = types.NewOrderedMap()
    retransmissionAsdb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionAsdb.HeaderLsaType})
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionAsdb.HeaderLsaAge})
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", retransmissionAsdb.HeaderLsaId})
    retransmissionAsdb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionAsdb.HeaderAdvertisingRouter})
    retransmissionAsdb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionAsdb.HeaderSequenceNumber})

    retransmissionAsdb.EntityData.YListKeys = []string {}

    return &(retransmissionAsdb.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums
// Bad Checksum Packets information table
type Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bad Checksum Packet information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum.
    BadChecksum []*Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum
}

func (badChecksums *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums) GetEntityData() *types.CommonEntityData {
    badChecksums.EntityData.YFilter = badChecksums.YFilter
    badChecksums.EntityData.YangName = "bad-checksums"
    badChecksums.EntityData.BundleName = "cisco_ios_xr"
    badChecksums.EntityData.ParentYangName = "vrf"
    badChecksums.EntityData.SegmentPath = "bad-checksums"
    badChecksums.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + badChecksums.EntityData.SegmentPath
    badChecksums.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    badChecksums.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    badChecksums.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    badChecksums.EntityData.Children = types.NewOrderedMap()
    badChecksums.EntityData.Children.Append("bad-checksum", types.YChild{"BadChecksum", nil})
    for i := range badChecksums.BadChecksum {
        badChecksums.EntityData.Children.Append(types.GetSegmentPath(badChecksums.BadChecksum[i]), types.YChild{"BadChecksum", badChecksums.BadChecksum[i]})
    }
    badChecksums.EntityData.Leafs = types.NewOrderedMap()

    badChecksums.EntityData.YListKeys = []string {}

    return &(badChecksums.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum
// Bad Checksum Packet information
type Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Bad Checksum Packets number. The type is
    // interface{} with range: 0..9.
    PacketNumber interface{}

    // Received Checksum. The type is interface{} with range: 0..65535.
    ReceivedChecksum interface{}

    // Computed Checksum. The type is interface{} with range: 0..65535.
    ComputedChecksum interface{}

    // Received Hexadecimal Data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ReceivedData interface{}

    // Packet Timestamp (relative to 1970/1/1 00:00).
    Timestamp Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp
}

func (badChecksum *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum) GetEntityData() *types.CommonEntityData {
    badChecksum.EntityData.YFilter = badChecksum.YFilter
    badChecksum.EntityData.YangName = "bad-checksum"
    badChecksum.EntityData.BundleName = "cisco_ios_xr"
    badChecksum.EntityData.ParentYangName = "bad-checksums"
    badChecksum.EntityData.SegmentPath = "bad-checksum" + types.AddKeyToken(badChecksum.PacketNumber, "packet-number")
    badChecksum.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/bad-checksums/" + badChecksum.EntityData.SegmentPath
    badChecksum.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    badChecksum.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    badChecksum.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    badChecksum.EntityData.Children = types.NewOrderedMap()
    badChecksum.EntityData.Children.Append("timestamp", types.YChild{"Timestamp", &badChecksum.Timestamp})
    badChecksum.EntityData.Leafs = types.NewOrderedMap()
    badChecksum.EntityData.Leafs.Append("packet-number", types.YLeaf{"PacketNumber", badChecksum.PacketNumber})
    badChecksum.EntityData.Leafs.Append("received-checksum", types.YLeaf{"ReceivedChecksum", badChecksum.ReceivedChecksum})
    badChecksum.EntityData.Leafs.Append("computed-checksum", types.YLeaf{"ComputedChecksum", badChecksum.ComputedChecksum})
    badChecksum.EntityData.Leafs.Append("received-data", types.YLeaf{"ReceivedData", badChecksum.ReceivedData})

    badChecksum.EntityData.YListKeys = []string {"PacketNumber"}

    return &(badChecksum.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp
// Packet Timestamp (relative to 1970/1/1 00:00)
type Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (timestamp *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp) GetEntityData() *types.CommonEntityData {
    timestamp.EntityData.YFilter = timestamp.YFilter
    timestamp.EntityData.YangName = "timestamp"
    timestamp.EntityData.BundleName = "cisco_ios_xr"
    timestamp.EntityData.ParentYangName = "bad-checksum"
    timestamp.EntityData.SegmentPath = "timestamp"
    timestamp.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/bad-checksums/bad-checksum/" + timestamp.EntityData.SegmentPath
    timestamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timestamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timestamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timestamp.EntityData.Children = types.NewOrderedMap()
    timestamp.EntityData.Leafs = types.NewOrderedMap()
    timestamp.EntityData.Leafs.Append("second", types.YLeaf{"Second", timestamp.Second})
    timestamp.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", timestamp.Nanosecond})

    timestamp.EntityData.YListKeys = []string {}

    return &(timestamp.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable
// Database summary table
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database Summary information.
    DatabaseSummary Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary
}

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable) GetEntityData() *types.CommonEntityData {
    databaseSummaryTable.EntityData.YFilter = databaseSummaryTable.YFilter
    databaseSummaryTable.EntityData.YangName = "database-summary-table"
    databaseSummaryTable.EntityData.BundleName = "cisco_ios_xr"
    databaseSummaryTable.EntityData.ParentYangName = "vrf"
    databaseSummaryTable.EntityData.SegmentPath = "database-summary-table"
    databaseSummaryTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + databaseSummaryTable.EntityData.SegmentPath
    databaseSummaryTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseSummaryTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseSummaryTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseSummaryTable.EntityData.Children = types.NewOrderedMap()
    databaseSummaryTable.EntityData.Children.Append("database-summary", types.YChild{"DatabaseSummary", &databaseSummaryTable.DatabaseSummary})
    databaseSummaryTable.EntityData.Leafs = types.NewOrderedMap()

    databaseSummaryTable.EntityData.YListKeys = []string {}

    return &(databaseSummaryTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary
// Database Summary information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DatabaseRouterId interface{}

    // If true, opaque database is capable . The type is bool.
    IsOpaqueDatabaseCapable interface{}

    // OSPFv3 database counters .
    DatabaseCounters Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters

    // OSPFv3 Area Database list . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase.
    AreaDatabase []*Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase
}

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary) GetEntityData() *types.CommonEntityData {
    databaseSummary.EntityData.YFilter = databaseSummary.YFilter
    databaseSummary.EntityData.YangName = "database-summary"
    databaseSummary.EntityData.BundleName = "cisco_ios_xr"
    databaseSummary.EntityData.ParentYangName = "database-summary-table"
    databaseSummary.EntityData.SegmentPath = "database-summary"
    databaseSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-summary-table/" + databaseSummary.EntityData.SegmentPath
    databaseSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseSummary.EntityData.Children = types.NewOrderedMap()
    databaseSummary.EntityData.Children.Append("database-counters", types.YChild{"DatabaseCounters", &databaseSummary.DatabaseCounters})
    databaseSummary.EntityData.Children.Append("area-database", types.YChild{"AreaDatabase", nil})
    for i := range databaseSummary.AreaDatabase {
        types.SetYListKey(databaseSummary.AreaDatabase[i], i)
        databaseSummary.EntityData.Children.Append(types.GetSegmentPath(databaseSummary.AreaDatabase[i]), types.YChild{"AreaDatabase", databaseSummary.AreaDatabase[i]})
    }
    databaseSummary.EntityData.Leafs = types.NewOrderedMap()
    databaseSummary.EntityData.Leafs.Append("database-router-id", types.YLeaf{"DatabaseRouterId", databaseSummary.DatabaseRouterId})
    databaseSummary.EntityData.Leafs.Append("is-opaque-database-capable", types.YLeaf{"IsOpaqueDatabaseCapable", databaseSummary.IsOpaqueDatabaseCapable})

    databaseSummary.EntityData.YListKeys = []string {}

    return &(databaseSummary.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters
// OSPFv3 database counters 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // lsa. The type is slice of interface{} with range: 0..4294967295.
    Lsa []interface{}

    // deleted lsa. The type is slice of interface{} with range: 0..4294967295.
    DeletedLsa []interface{}

    // max age lsa. The type is slice of interface{} with range: 0..4294967295.
    MaxAgeLsa []interface{}

    // lsa checksum. The type is slice of interface{} with range: 0..4294967295.
    LsaChecksum []interface{}
}

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetEntityData() *types.CommonEntityData {
    databaseCounters.EntityData.YFilter = databaseCounters.YFilter
    databaseCounters.EntityData.YangName = "database-counters"
    databaseCounters.EntityData.BundleName = "cisco_ios_xr"
    databaseCounters.EntityData.ParentYangName = "database-summary"
    databaseCounters.EntityData.SegmentPath = "database-counters"
    databaseCounters.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-summary-table/database-summary/" + databaseCounters.EntityData.SegmentPath
    databaseCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseCounters.EntityData.Children = types.NewOrderedMap()
    databaseCounters.EntityData.Leafs = types.NewOrderedMap()
    databaseCounters.EntityData.Leafs.Append("lsa", types.YLeaf{"Lsa", databaseCounters.Lsa})
    databaseCounters.EntityData.Leafs.Append("deleted-lsa", types.YLeaf{"DeletedLsa", databaseCounters.DeletedLsa})
    databaseCounters.EntityData.Leafs.Append("max-age-lsa", types.YLeaf{"MaxAgeLsa", databaseCounters.MaxAgeLsa})
    databaseCounters.EntityData.Leafs.Append("lsa-checksum", types.YLeaf{"LsaChecksum", databaseCounters.LsaChecksum})

    databaseCounters.EntityData.YListKeys = []string {}

    return &(databaseCounters.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase
// OSPFv3 Area Database list 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // Area database summary .
    AreaDatabaseSummary Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary
}

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetEntityData() *types.CommonEntityData {
    areaDatabase.EntityData.YFilter = areaDatabase.YFilter
    areaDatabase.EntityData.YangName = "area-database"
    areaDatabase.EntityData.BundleName = "cisco_ios_xr"
    areaDatabase.EntityData.ParentYangName = "database-summary"
    areaDatabase.EntityData.SegmentPath = "area-database" + types.AddNoKeyToken(areaDatabase)
    areaDatabase.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-summary-table/database-summary/" + areaDatabase.EntityData.SegmentPath
    areaDatabase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaDatabase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaDatabase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaDatabase.EntityData.Children = types.NewOrderedMap()
    areaDatabase.EntityData.Children.Append("area-database-summary", types.YChild{"AreaDatabaseSummary", &areaDatabase.AreaDatabaseSummary})
    areaDatabase.EntityData.Leafs = types.NewOrderedMap()
    areaDatabase.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", areaDatabase.LsaAreaId})

    areaDatabase.EntityData.YListKeys = []string {}

    return &(areaDatabase.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary
// Area database summary 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // lsa. The type is slice of interface{} with range: 0..4294967295.
    Lsa []interface{}

    // deleted lsa. The type is slice of interface{} with range: 0..4294967295.
    DeletedLsa []interface{}

    // max age lsa. The type is slice of interface{} with range: 0..4294967295.
    MaxAgeLsa []interface{}

    // lsa checksum. The type is slice of interface{} with range: 0..4294967295.
    LsaChecksum []interface{}
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetEntityData() *types.CommonEntityData {
    areaDatabaseSummary.EntityData.YFilter = areaDatabaseSummary.YFilter
    areaDatabaseSummary.EntityData.YangName = "area-database-summary"
    areaDatabaseSummary.EntityData.BundleName = "cisco_ios_xr"
    areaDatabaseSummary.EntityData.ParentYangName = "area-database"
    areaDatabaseSummary.EntityData.SegmentPath = "area-database-summary"
    areaDatabaseSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/database-summary-table/database-summary/area-database/" + areaDatabaseSummary.EntityData.SegmentPath
    areaDatabaseSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaDatabaseSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaDatabaseSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaDatabaseSummary.EntityData.Children = types.NewOrderedMap()
    areaDatabaseSummary.EntityData.Leafs = types.NewOrderedMap()
    areaDatabaseSummary.EntityData.Leafs.Append("lsa", types.YLeaf{"Lsa", areaDatabaseSummary.Lsa})
    areaDatabaseSummary.EntityData.Leafs.Append("deleted-lsa", types.YLeaf{"DeletedLsa", areaDatabaseSummary.DeletedLsa})
    areaDatabaseSummary.EntityData.Leafs.Append("max-age-lsa", types.YLeaf{"MaxAgeLsa", areaDatabaseSummary.MaxAgeLsa})
    areaDatabaseSummary.EntityData.Leafs.Append("lsa-checksum", types.YLeaf{"LsaChecksum", areaDatabaseSummary.LsaChecksum})

    areaDatabaseSummary.EntityData.YListKeys = []string {}

    return &(areaDatabaseSummary.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable
// OSPFv3 neighbor information table for all areas
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 neighbor detail information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor.
    Neighbor []*Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor
}

func (neighborProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable) GetEntityData() *types.CommonEntityData {
    neighborProcessTable.EntityData.YFilter = neighborProcessTable.YFilter
    neighborProcessTable.EntityData.YangName = "neighbor-process-table"
    neighborProcessTable.EntityData.BundleName = "cisco_ios_xr"
    neighborProcessTable.EntityData.ParentYangName = "vrf"
    neighborProcessTable.EntityData.SegmentPath = "neighbor-process-table"
    neighborProcessTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + neighborProcessTable.EntityData.SegmentPath
    neighborProcessTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborProcessTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborProcessTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborProcessTable.EntityData.Children = types.NewOrderedMap()
    neighborProcessTable.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighborProcessTable.Neighbor {
        types.SetYListKey(neighborProcessTable.Neighbor[i], i)
        neighborProcessTable.EntityData.Children.Append(types.GetSegmentPath(neighborProcessTable.Neighbor[i]), types.YChild{"Neighbor", neighborProcessTable.Neighbor[i]})
    }
    neighborProcessTable.EntityData.Leafs = types.NewOrderedMap()

    neighborProcessTable.EntityData.YListKeys = []string {}

    return &(neighborProcessTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor
// OSPFv3 neighbor detail information
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Neighbor interface ID. The type is interface{} with range: 0..4294967295.
    NeighborInterfaceId interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is Ospfv3NeighborState.
    NeighborState interface{}

    // Designated router . The type is string with length: 0..9.
    NeighborDesignatedRouter interface{}

    // Time until neighbor's dead timer expires (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborUpTime interface{}

    // Neighbor virtual link id . The type is interface{} with range:
    // 0..4294967295.
    NeighborVirtualLinkId interface{}

    // If true, neighbor is on a virtual link . The type is bool.
    IsNeighborVirtualLink interface{}

    // Neighbor sham link id . The type is interface{} with range: 0..4294967295.
    NeighborShamLinkId interface{}

    // If true, neighbor is on a sham link . The type is bool.
    IsNeighborShamLink interface{}

    // Detailed OSPFv3 neighbor information .
    NeighborDetail Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail

    // Neighbor BFD information.
    NeighborBfdInfo Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbor-process-table"
    neighbor.EntityData.SegmentPath = "neighbor" + types.AddNoKeyToken(neighbor)
    neighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/neighbor-process-table/" + neighbor.EntityData.SegmentPath
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("neighbor-detail", types.YChild{"NeighborDetail", &neighbor.NeighborDetail})
    neighbor.EntityData.Children.Append("neighbor-bfd-info", types.YChild{"NeighborBfdInfo", &neighbor.NeighborBfdInfo})
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", neighbor.InterfaceName})
    neighbor.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighbor.NeighborAddress})
    neighbor.EntityData.Leafs.Append("neighbor-address-xr", types.YLeaf{"NeighborAddressXr", neighbor.NeighborAddressXr})
    neighbor.EntityData.Leafs.Append("neighbor-interface-id", types.YLeaf{"NeighborInterfaceId", neighbor.NeighborInterfaceId})
    neighbor.EntityData.Leafs.Append("neighbor-dr-priority", types.YLeaf{"NeighborDrPriority", neighbor.NeighborDrPriority})
    neighbor.EntityData.Leafs.Append("neighbor-state", types.YLeaf{"NeighborState", neighbor.NeighborState})
    neighbor.EntityData.Leafs.Append("neighbor-designated-router", types.YLeaf{"NeighborDesignatedRouter", neighbor.NeighborDesignatedRouter})
    neighbor.EntityData.Leafs.Append("neighbor-dead-timer", types.YLeaf{"NeighborDeadTimer", neighbor.NeighborDeadTimer})
    neighbor.EntityData.Leafs.Append("neighbor-up-time", types.YLeaf{"NeighborUpTime", neighbor.NeighborUpTime})
    neighbor.EntityData.Leafs.Append("neighbor-virtual-link-id", types.YLeaf{"NeighborVirtualLinkId", neighbor.NeighborVirtualLinkId})
    neighbor.EntityData.Leafs.Append("is-neighbor-virtual-link", types.YLeaf{"IsNeighborVirtualLink", neighbor.IsNeighborVirtualLink})
    neighbor.EntityData.Leafs.Append("neighbor-sham-link-id", types.YLeaf{"NeighborShamLinkId", neighbor.NeighborShamLinkId})
    neighbor.EntityData.Leafs.Append("is-neighbor-sham-link", types.YLeaf{"IsNeighborShamLink", neighbor.IsNeighborShamLink})

    neighbor.EntityData.YListKeys = []string {}

    return &(neighbor.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail
// Detailed OSPFv3 neighbor information 
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of state changes . The type is interface{} with range: 0..65535.
    StateChanges interface{}

    // Cost of path to this neighbor . The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs . The type is bool.
    IsNeighborFiltered interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Ospfv3Interface.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // Remaining time when ignore timer is running . The type is interface{} with
    // range: 0..4294967295.
    NeighborIgnoreTimer interface{}

    // This is bitmask of neighbor's option field received . The type is
    // interface{} with range: 0..4294967295.
    NeighborOption interface{}

    // Number of pending events . The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // Retransmission information with this neighbor.
    NeighborRetransmission Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail) GetEntityData() *types.CommonEntityData {
    neighborDetail.EntityData.YFilter = neighborDetail.YFilter
    neighborDetail.EntityData.YangName = "neighbor-detail"
    neighborDetail.EntityData.BundleName = "cisco_ios_xr"
    neighborDetail.EntityData.ParentYangName = "neighbor"
    neighborDetail.EntityData.SegmentPath = "neighbor-detail"
    neighborDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/neighbor-process-table/neighbor/" + neighborDetail.EntityData.SegmentPath
    neighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetail.EntityData.Children = types.NewOrderedMap()
    neighborDetail.EntityData.Children.Append("neighbor-retransmission", types.YChild{"NeighborRetransmission", &neighborDetail.NeighborRetransmission})
    neighborDetail.EntityData.Leafs = types.NewOrderedMap()
    neighborDetail.EntityData.Leafs.Append("state-changes", types.YLeaf{"StateChanges", neighborDetail.StateChanges})
    neighborDetail.EntityData.Leafs.Append("neighbor-cost", types.YLeaf{"NeighborCost", neighborDetail.NeighborCost})
    neighborDetail.EntityData.Leafs.Append("is-neighbor-filtered", types.YLeaf{"IsNeighborFiltered", neighborDetail.IsNeighborFiltered})
    neighborDetail.EntityData.Leafs.Append("neighbor-designated-router-address", types.YLeaf{"NeighborDesignatedRouterAddress", neighborDetail.NeighborDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-backup-designated-router-address", types.YLeaf{"NeighborBackupDesignatedRouterAddress", neighborDetail.NeighborBackupDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("interface-type", types.YLeaf{"InterfaceType", neighborDetail.InterfaceType})
    neighborDetail.EntityData.Leafs.Append("poll-interval", types.YLeaf{"PollInterval", neighborDetail.PollInterval})
    neighborDetail.EntityData.Leafs.Append("next-poll-interval", types.YLeaf{"NextPollInterval", neighborDetail.NextPollInterval})
    neighborDetail.EntityData.Leafs.Append("neighbor-ignore-timer", types.YLeaf{"NeighborIgnoreTimer", neighborDetail.NeighborIgnoreTimer})
    neighborDetail.EntityData.Leafs.Append("neighbor-option", types.YLeaf{"NeighborOption", neighborDetail.NeighborOption})
    neighborDetail.EntityData.Leafs.Append("pending-events", types.YLeaf{"PendingEvents", neighborDetail.PendingEvents})

    neighborDetail.EntityData.YListKeys = []string {}

    return &(neighborDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission
// Retransmission information with this neighbor
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetEntityData() *types.CommonEntityData {
    neighborRetransmission.EntityData.YFilter = neighborRetransmission.YFilter
    neighborRetransmission.EntityData.YangName = "neighbor-retransmission"
    neighborRetransmission.EntityData.BundleName = "cisco_ios_xr"
    neighborRetransmission.EntityData.ParentYangName = "neighbor-detail"
    neighborRetransmission.EntityData.SegmentPath = "neighbor-retransmission"
    neighborRetransmission.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/neighbor-process-table/neighbor/neighbor-detail/" + neighborRetransmission.EntityData.SegmentPath
    neighborRetransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborRetransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborRetransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborRetransmission.EntityData.Children = types.NewOrderedMap()
    neighborRetransmission.EntityData.Leafs = types.NewOrderedMap()
    neighborRetransmission.EntityData.Leafs.Append("database-descriptor-retransmissions", types.YLeaf{"DatabaseDescriptorRetransmissions", neighborRetransmission.DatabaseDescriptorRetransmissions})
    neighborRetransmission.EntityData.Leafs.Append("area-flood-index", types.YLeaf{"AreaFloodIndex", neighborRetransmission.AreaFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", neighborRetransmission.AsFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-flood-index", types.YLeaf{"LinkFloodIndex", neighborRetransmission.LinkFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("neighbor-retransmissions", types.YLeaf{"NeighborRetransmissions", neighborRetransmission.NeighborRetransmissions})
    neighborRetransmission.EntityData.Leafs.Append("retransmissions", types.YLeaf{"Retransmissions", neighborRetransmission.Retransmissions})
    neighborRetransmission.EntityData.Leafs.Append("area-first-flood", types.YLeaf{"AreaFirstFlood", neighborRetransmission.AreaFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("area-first-flood-index", types.YLeaf{"AreaFirstFloodIndex", neighborRetransmission.AreaFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-first-flood", types.YLeaf{"AsFirstFlood", neighborRetransmission.AsFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("as-first-flood-index", types.YLeaf{"AsFirstFloodIndex", neighborRetransmission.AsFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-first-flood", types.YLeaf{"LinkFirstFlood", neighborRetransmission.LinkFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("link-first-flood-index", types.YLeaf{"LinkFirstFloodIndex", neighborRetransmission.LinkFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("area-next-flood", types.YLeaf{"AreaNextFlood", neighborRetransmission.AreaNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("area-next-flood-index", types.YLeaf{"AreaNextFloodIndex", neighborRetransmission.AreaNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-next-flood", types.YLeaf{"AsNextFlood", neighborRetransmission.AsNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("as-next-flood-index", types.YLeaf{"AsNextFloodIndex", neighborRetransmission.AsNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-next-flood", types.YLeaf{"LinkNextFlood", neighborRetransmission.LinkNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("link-next-flood-index", types.YLeaf{"LinkNextFloodIndex", neighborRetransmission.LinkNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", neighborRetransmission.LastRetransmissionLength})
    neighborRetransmission.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", neighborRetransmission.MaximumRetransmissionLength})
    neighborRetransmission.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", neighborRetransmission.LastRetransmissionTime})
    neighborRetransmission.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", neighborRetransmission.MaximumRetransmissionTime})
    neighborRetransmission.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", neighborRetransmission.LsaRetransmissionTimer})

    neighborRetransmission.EntityData.YListKeys = []string {}

    return &(neighborRetransmission.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo
// Neighbor BFD information
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetEntityData() *types.CommonEntityData {
    neighborBfdInfo.EntityData.YFilter = neighborBfdInfo.YFilter
    neighborBfdInfo.EntityData.YangName = "neighbor-bfd-info"
    neighborBfdInfo.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInfo.EntityData.ParentYangName = "neighbor"
    neighborBfdInfo.EntityData.SegmentPath = "neighbor-bfd-info"
    neighborBfdInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/neighbor-process-table/neighbor/" + neighborBfdInfo.EntityData.SegmentPath
    neighborBfdInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInfo.EntityData.Children = types.NewOrderedMap()
    neighborBfdInfo.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInfo.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInfo.BfdIntfEnableMode})
    neighborBfdInfo.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInfo.BfdStatusFlag})

    neighborBfdInfo.EntityData.YListKeys = []string {}

    return &(neighborBfdInfo.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes
// OSPFv3 fast reroute topology information table
type Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 fast reroute topology information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute.
    FastReroute []*Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute
}

func (fastReroutes *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes) GetEntityData() *types.CommonEntityData {
    fastReroutes.EntityData.YFilter = fastReroutes.YFilter
    fastReroutes.EntityData.YangName = "fast-reroutes"
    fastReroutes.EntityData.BundleName = "cisco_ios_xr"
    fastReroutes.EntityData.ParentYangName = "vrf"
    fastReroutes.EntityData.SegmentPath = "fast-reroutes"
    fastReroutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + fastReroutes.EntityData.SegmentPath
    fastReroutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroutes.EntityData.Children = types.NewOrderedMap()
    fastReroutes.EntityData.Children.Append("fast-reroute", types.YChild{"FastReroute", nil})
    for i := range fastReroutes.FastReroute {
        types.SetYListKey(fastReroutes.FastReroute[i], i)
        fastReroutes.EntityData.Children.Append(types.GetSegmentPath(fastReroutes.FastReroute[i]), types.YChild{"FastReroute", fastReroutes.FastReroute[i]})
    }
    fastReroutes.EntityData.Leafs = types.NewOrderedMap()

    fastReroutes.EntityData.YListKeys = []string {}

    return &(fastReroutes.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute
// OSPFv3 fast reroute topology information
type Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // AreaID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area ID string in decimal or dotted decimal format. The type is string with
    // length: 0..16.
    IpfrrTopoAreaId interface{}

    // OSPF Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpfrrRouterId interface{}

    // IPFRR Topology Revision. The type is interface{} with range: 0..4294967295.
    IpfrrAreaRevision interface{}

    // IPFRR Topology entries. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo.
    IpfrrTopo []*Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "fast-reroutes"
    fastReroute.EntityData.SegmentPath = "fast-reroute" + types.AddNoKeyToken(fastReroute)
    fastReroute.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/fast-reroutes/" + fastReroute.EntityData.SegmentPath
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = types.NewOrderedMap()
    fastReroute.EntityData.Children.Append("ipfrr-topo", types.YChild{"IpfrrTopo", nil})
    for i := range fastReroute.IpfrrTopo {
        types.SetYListKey(fastReroute.IpfrrTopo[i], i)
        fastReroute.EntityData.Children.Append(types.GetSegmentPath(fastReroute.IpfrrTopo[i]), types.YChild{"IpfrrTopo", fastReroute.IpfrrTopo[i]})
    }
    fastReroute.EntityData.Leafs = types.NewOrderedMap()
    fastReroute.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", fastReroute.RouterId})
    fastReroute.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", fastReroute.AreaId})
    fastReroute.EntityData.Leafs.Append("ipfrr-topo-area-id", types.YLeaf{"IpfrrTopoAreaId", fastReroute.IpfrrTopoAreaId})
    fastReroute.EntityData.Leafs.Append("ipfrr-router-id", types.YLeaf{"IpfrrRouterId", fastReroute.IpfrrRouterId})
    fastReroute.EntityData.Leafs.Append("ipfrr-area-revision", types.YLeaf{"IpfrrAreaRevision", fastReroute.IpfrrAreaRevision})

    fastReroute.EntityData.YListKeys = []string {}

    return &(fastReroute.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo
// IPFRR Topology entries
type Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // IPFRR Topology Node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NodeId interface{}

    // IPFRR Topology LSA ID. The type is interface{} with range: 0..4294967295.
    Lsaid interface{}

    // IPFRR Topology Distance. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // IPFRR Topoogy Type-4 entry. The type is bool.
    Type4 interface{}

    // IPFRR Topology Revision. The type is interface{} with range: 0..4294967295.
    Revision interface{}

    // IPFRR Topology Neighbor Sourced. The type is bool.
    NeighborSourced interface{}

    // IPFRR Topology DR entry. The type is bool.
    Dr interface{}
}

func (ipfrrTopo *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo) GetEntityData() *types.CommonEntityData {
    ipfrrTopo.EntityData.YFilter = ipfrrTopo.YFilter
    ipfrrTopo.EntityData.YangName = "ipfrr-topo"
    ipfrrTopo.EntityData.BundleName = "cisco_ios_xr"
    ipfrrTopo.EntityData.ParentYangName = "fast-reroute"
    ipfrrTopo.EntityData.SegmentPath = "ipfrr-topo" + types.AddNoKeyToken(ipfrrTopo)
    ipfrrTopo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/fast-reroutes/fast-reroute/" + ipfrrTopo.EntityData.SegmentPath
    ipfrrTopo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipfrrTopo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipfrrTopo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipfrrTopo.EntityData.Children = types.NewOrderedMap()
    ipfrrTopo.EntityData.Leafs = types.NewOrderedMap()
    ipfrrTopo.EntityData.Leafs.Append("node-id", types.YLeaf{"NodeId", ipfrrTopo.NodeId})
    ipfrrTopo.EntityData.Leafs.Append("lsaid", types.YLeaf{"Lsaid", ipfrrTopo.Lsaid})
    ipfrrTopo.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", ipfrrTopo.Distance})
    ipfrrTopo.EntityData.Leafs.Append("type4", types.YLeaf{"Type4", ipfrrTopo.Type4})
    ipfrrTopo.EntityData.Leafs.Append("revision", types.YLeaf{"Revision", ipfrrTopo.Revision})
    ipfrrTopo.EntityData.Leafs.Append("neighbor-sourced", types.YLeaf{"NeighborSourced", ipfrrTopo.NeighborSourced})
    ipfrrTopo.EntityData.Leafs.Append("dr", types.YLeaf{"Dr", ipfrrTopo.Dr})

    ipfrrTopo.EntityData.YListKeys = []string {}

    return &(ipfrrTopo.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable
// OSPFv3 interface brief information table for all
// areas
type Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface brief information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief.
    InterfaceBrief []*Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief
}

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable) GetEntityData() *types.CommonEntityData {
    interfaceBriefProcessTable.EntityData.YFilter = interfaceBriefProcessTable.YFilter
    interfaceBriefProcessTable.EntityData.YangName = "interface-brief-process-table"
    interfaceBriefProcessTable.EntityData.BundleName = "cisco_ios_xr"
    interfaceBriefProcessTable.EntityData.ParentYangName = "vrf"
    interfaceBriefProcessTable.EntityData.SegmentPath = "interface-brief-process-table"
    interfaceBriefProcessTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + interfaceBriefProcessTable.EntityData.SegmentPath
    interfaceBriefProcessTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBriefProcessTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBriefProcessTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBriefProcessTable.EntityData.Children = types.NewOrderedMap()
    interfaceBriefProcessTable.EntityData.Children.Append("interface-brief", types.YChild{"InterfaceBrief", nil})
    for i := range interfaceBriefProcessTable.InterfaceBrief {
        interfaceBriefProcessTable.EntityData.Children.Append(types.GetSegmentPath(interfaceBriefProcessTable.InterfaceBrief[i]), types.YChild{"InterfaceBrief", interfaceBriefProcessTable.InterfaceBrief[i]})
    }
    interfaceBriefProcessTable.EntityData.Leafs = types.NewOrderedMap()

    interfaceBriefProcessTable.EntityData.YListKeys = []string {}

    return &(interfaceBriefProcessTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief
// Interface brief information
type Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is Ospfv3InterfaceState.
    OspfInterfaceState interface{}

    // Total number of neighbors . The type is interface{} with range: 0..65535.
    InterfaceNeighbors interface{}

    // Total number of adjacent neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjacentNeighbors interface{}

    // Network type. The type is Ospfv3Interface.
    NetworkType interface{}
}

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief) GetEntityData() *types.CommonEntityData {
    interfaceBrief.EntityData.YFilter = interfaceBrief.YFilter
    interfaceBrief.EntityData.YangName = "interface-brief"
    interfaceBrief.EntityData.BundleName = "cisco_ios_xr"
    interfaceBrief.EntityData.ParentYangName = "interface-brief-process-table"
    interfaceBrief.EntityData.SegmentPath = "interface-brief" + types.AddKeyToken(interfaceBrief.InterfaceName, "interface-name")
    interfaceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/interface-brief-process-table/" + interfaceBrief.EntityData.SegmentPath
    interfaceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBrief.EntityData.Children = types.NewOrderedMap()
    interfaceBrief.EntityData.Leafs = types.NewOrderedMap()
    interfaceBrief.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceBrief.InterfaceName})
    interfaceBrief.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", interfaceBrief.InterfaceAddress})
    interfaceBrief.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", interfaceBrief.InterfaceLinkCost})
    interfaceBrief.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", interfaceBrief.OspfInterfaceState})
    interfaceBrief.EntityData.Leafs.Append("interface-neighbors", types.YLeaf{"InterfaceNeighbors", interfaceBrief.InterfaceNeighbors})
    interfaceBrief.EntityData.Leafs.Append("interface-adjacent-neighbors", types.YLeaf{"InterfaceAdjacentNeighbors", interfaceBrief.InterfaceAdjacentNeighbors})
    interfaceBrief.EntityData.Leafs.Append("network-type", types.YLeaf{"NetworkType", interfaceBrief.NetworkType})

    interfaceBrief.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceBrief.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable
// OSPFv3 neighbor information table for all areas
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 neighbor detail information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail.
    NeighborDetail []*Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail
}

func (neighborDetailProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable) GetEntityData() *types.CommonEntityData {
    neighborDetailProcessTable.EntityData.YFilter = neighborDetailProcessTable.YFilter
    neighborDetailProcessTable.EntityData.YangName = "neighbor-detail-process-table"
    neighborDetailProcessTable.EntityData.BundleName = "cisco_ios_xr"
    neighborDetailProcessTable.EntityData.ParentYangName = "vrf"
    neighborDetailProcessTable.EntityData.SegmentPath = "neighbor-detail-process-table"
    neighborDetailProcessTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/" + neighborDetailProcessTable.EntityData.SegmentPath
    neighborDetailProcessTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetailProcessTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetailProcessTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetailProcessTable.EntityData.Children = types.NewOrderedMap()
    neighborDetailProcessTable.EntityData.Children.Append("neighbor-detail", types.YChild{"NeighborDetail", nil})
    for i := range neighborDetailProcessTable.NeighborDetail {
        types.SetYListKey(neighborDetailProcessTable.NeighborDetail[i], i)
        neighborDetailProcessTable.EntityData.Children.Append(types.GetSegmentPath(neighborDetailProcessTable.NeighborDetail[i]), types.YChild{"NeighborDetail", neighborDetailProcessTable.NeighborDetail[i]})
    }
    neighborDetailProcessTable.EntityData.Leafs = types.NewOrderedMap()

    neighborDetailProcessTable.EntityData.YListKeys = []string {}

    return &(neighborDetailProcessTable.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail
// OSPFv3 neighbor detail information
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Neighbor interface ID. The type is interface{} with range: 0..4294967295.
    NeighborInterfaceId interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is Ospfv3NeighborState.
    NeighborState interface{}

    // Designated router . The type is string with length: 0..9.
    NeighborDesignatedRouter interface{}

    // Time until neighbor's dead timer expires (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborUpTime interface{}

    // Neighbor virtual link id . The type is interface{} with range:
    // 0..4294967295.
    NeighborVirtualLinkId interface{}

    // If true, neighbor is on a virtual link . The type is bool.
    IsNeighborVirtualLink interface{}

    // Neighbor sham link id . The type is interface{} with range: 0..4294967295.
    NeighborShamLinkId interface{}

    // If true, neighbor is on a sham link . The type is bool.
    IsNeighborShamLink interface{}

    // Detailed OSPFv3 neighbor information .
    NeighborDetail Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail

    // Neighbor BFD information.
    NeighborBfdInfo Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail) GetEntityData() *types.CommonEntityData {
    neighborDetail.EntityData.YFilter = neighborDetail.YFilter
    neighborDetail.EntityData.YangName = "neighbor-detail"
    neighborDetail.EntityData.BundleName = "cisco_ios_xr"
    neighborDetail.EntityData.ParentYangName = "neighbor-detail-process-table"
    neighborDetail.EntityData.SegmentPath = "neighbor-detail" + types.AddNoKeyToken(neighborDetail)
    neighborDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/neighbor-detail-process-table/" + neighborDetail.EntityData.SegmentPath
    neighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetail.EntityData.Children = types.NewOrderedMap()
    neighborDetail.EntityData.Children.Append("neighbor-detail", types.YChild{"NeighborDetail", &neighborDetail.NeighborDetail})
    neighborDetail.EntityData.Children.Append("neighbor-bfd-info", types.YChild{"NeighborBfdInfo", &neighborDetail.NeighborBfdInfo})
    neighborDetail.EntityData.Leafs = types.NewOrderedMap()
    neighborDetail.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", neighborDetail.InterfaceName})
    neighborDetail.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighborDetail.NeighborAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-address-xr", types.YLeaf{"NeighborAddressXr", neighborDetail.NeighborAddressXr})
    neighborDetail.EntityData.Leafs.Append("neighbor-interface-id", types.YLeaf{"NeighborInterfaceId", neighborDetail.NeighborInterfaceId})
    neighborDetail.EntityData.Leafs.Append("neighbor-dr-priority", types.YLeaf{"NeighborDrPriority", neighborDetail.NeighborDrPriority})
    neighborDetail.EntityData.Leafs.Append("neighbor-state", types.YLeaf{"NeighborState", neighborDetail.NeighborState})
    neighborDetail.EntityData.Leafs.Append("neighbor-designated-router", types.YLeaf{"NeighborDesignatedRouter", neighborDetail.NeighborDesignatedRouter})
    neighborDetail.EntityData.Leafs.Append("neighbor-dead-timer", types.YLeaf{"NeighborDeadTimer", neighborDetail.NeighborDeadTimer})
    neighborDetail.EntityData.Leafs.Append("neighbor-up-time", types.YLeaf{"NeighborUpTime", neighborDetail.NeighborUpTime})
    neighborDetail.EntityData.Leafs.Append("neighbor-virtual-link-id", types.YLeaf{"NeighborVirtualLinkId", neighborDetail.NeighborVirtualLinkId})
    neighborDetail.EntityData.Leafs.Append("is-neighbor-virtual-link", types.YLeaf{"IsNeighborVirtualLink", neighborDetail.IsNeighborVirtualLink})
    neighborDetail.EntityData.Leafs.Append("neighbor-sham-link-id", types.YLeaf{"NeighborShamLinkId", neighborDetail.NeighborShamLinkId})
    neighborDetail.EntityData.Leafs.Append("is-neighbor-sham-link", types.YLeaf{"IsNeighborShamLink", neighborDetail.IsNeighborShamLink})

    neighborDetail.EntityData.YListKeys = []string {}

    return &(neighborDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail
// Detailed OSPFv3 neighbor information 
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of state changes . The type is interface{} with range: 0..65535.
    StateChanges interface{}

    // Cost of path to this neighbor . The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs . The type is bool.
    IsNeighborFiltered interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Ospfv3Interface.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // Remaining time when ignore timer is running . The type is interface{} with
    // range: 0..4294967295.
    NeighborIgnoreTimer interface{}

    // This is bitmask of neighbor's option field received . The type is
    // interface{} with range: 0..4294967295.
    NeighborOption interface{}

    // Number of pending events . The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // Retransmission information with this neighbor.
    NeighborRetransmission Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetEntityData() *types.CommonEntityData {
    neighborDetail.EntityData.YFilter = neighborDetail.YFilter
    neighborDetail.EntityData.YangName = "neighbor-detail"
    neighborDetail.EntityData.BundleName = "cisco_ios_xr"
    neighborDetail.EntityData.ParentYangName = "neighbor-detail"
    neighborDetail.EntityData.SegmentPath = "neighbor-detail"
    neighborDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/neighbor-detail-process-table/neighbor-detail/" + neighborDetail.EntityData.SegmentPath
    neighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetail.EntityData.Children = types.NewOrderedMap()
    neighborDetail.EntityData.Children.Append("neighbor-retransmission", types.YChild{"NeighborRetransmission", &neighborDetail.NeighborRetransmission})
    neighborDetail.EntityData.Leafs = types.NewOrderedMap()
    neighborDetail.EntityData.Leafs.Append("state-changes", types.YLeaf{"StateChanges", neighborDetail.StateChanges})
    neighborDetail.EntityData.Leafs.Append("neighbor-cost", types.YLeaf{"NeighborCost", neighborDetail.NeighborCost})
    neighborDetail.EntityData.Leafs.Append("is-neighbor-filtered", types.YLeaf{"IsNeighborFiltered", neighborDetail.IsNeighborFiltered})
    neighborDetail.EntityData.Leafs.Append("neighbor-designated-router-address", types.YLeaf{"NeighborDesignatedRouterAddress", neighborDetail.NeighborDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-backup-designated-router-address", types.YLeaf{"NeighborBackupDesignatedRouterAddress", neighborDetail.NeighborBackupDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("interface-type", types.YLeaf{"InterfaceType", neighborDetail.InterfaceType})
    neighborDetail.EntityData.Leafs.Append("poll-interval", types.YLeaf{"PollInterval", neighborDetail.PollInterval})
    neighborDetail.EntityData.Leafs.Append("next-poll-interval", types.YLeaf{"NextPollInterval", neighborDetail.NextPollInterval})
    neighborDetail.EntityData.Leafs.Append("neighbor-ignore-timer", types.YLeaf{"NeighborIgnoreTimer", neighborDetail.NeighborIgnoreTimer})
    neighborDetail.EntityData.Leafs.Append("neighbor-option", types.YLeaf{"NeighborOption", neighborDetail.NeighborOption})
    neighborDetail.EntityData.Leafs.Append("pending-events", types.YLeaf{"PendingEvents", neighborDetail.PendingEvents})

    neighborDetail.EntityData.YListKeys = []string {}

    return &(neighborDetail.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission
// Retransmission information with this neighbor
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetEntityData() *types.CommonEntityData {
    neighborRetransmission.EntityData.YFilter = neighborRetransmission.YFilter
    neighborRetransmission.EntityData.YangName = "neighbor-retransmission"
    neighborRetransmission.EntityData.BundleName = "cisco_ios_xr"
    neighborRetransmission.EntityData.ParentYangName = "neighbor-detail"
    neighborRetransmission.EntityData.SegmentPath = "neighbor-retransmission"
    neighborRetransmission.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/neighbor-detail-process-table/neighbor-detail/neighbor-detail/" + neighborRetransmission.EntityData.SegmentPath
    neighborRetransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborRetransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborRetransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborRetransmission.EntityData.Children = types.NewOrderedMap()
    neighborRetransmission.EntityData.Leafs = types.NewOrderedMap()
    neighborRetransmission.EntityData.Leafs.Append("database-descriptor-retransmissions", types.YLeaf{"DatabaseDescriptorRetransmissions", neighborRetransmission.DatabaseDescriptorRetransmissions})
    neighborRetransmission.EntityData.Leafs.Append("area-flood-index", types.YLeaf{"AreaFloodIndex", neighborRetransmission.AreaFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", neighborRetransmission.AsFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-flood-index", types.YLeaf{"LinkFloodIndex", neighborRetransmission.LinkFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("neighbor-retransmissions", types.YLeaf{"NeighborRetransmissions", neighborRetransmission.NeighborRetransmissions})
    neighborRetransmission.EntityData.Leafs.Append("retransmissions", types.YLeaf{"Retransmissions", neighborRetransmission.Retransmissions})
    neighborRetransmission.EntityData.Leafs.Append("area-first-flood", types.YLeaf{"AreaFirstFlood", neighborRetransmission.AreaFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("area-first-flood-index", types.YLeaf{"AreaFirstFloodIndex", neighborRetransmission.AreaFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-first-flood", types.YLeaf{"AsFirstFlood", neighborRetransmission.AsFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("as-first-flood-index", types.YLeaf{"AsFirstFloodIndex", neighborRetransmission.AsFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-first-flood", types.YLeaf{"LinkFirstFlood", neighborRetransmission.LinkFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("link-first-flood-index", types.YLeaf{"LinkFirstFloodIndex", neighborRetransmission.LinkFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("area-next-flood", types.YLeaf{"AreaNextFlood", neighborRetransmission.AreaNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("area-next-flood-index", types.YLeaf{"AreaNextFloodIndex", neighborRetransmission.AreaNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-next-flood", types.YLeaf{"AsNextFlood", neighborRetransmission.AsNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("as-next-flood-index", types.YLeaf{"AsNextFloodIndex", neighborRetransmission.AsNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-next-flood", types.YLeaf{"LinkNextFlood", neighborRetransmission.LinkNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("link-next-flood-index", types.YLeaf{"LinkNextFloodIndex", neighborRetransmission.LinkNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", neighborRetransmission.LastRetransmissionLength})
    neighborRetransmission.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", neighborRetransmission.MaximumRetransmissionLength})
    neighborRetransmission.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", neighborRetransmission.LastRetransmissionTime})
    neighborRetransmission.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", neighborRetransmission.MaximumRetransmissionTime})
    neighborRetransmission.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", neighborRetransmission.LsaRetransmissionTimer})

    neighborRetransmission.EntityData.YListKeys = []string {}

    return &(neighborRetransmission.EntityData)
}

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo
// Neighbor BFD information
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetEntityData() *types.CommonEntityData {
    neighborBfdInfo.EntityData.YFilter = neighborBfdInfo.YFilter
    neighborBfdInfo.EntityData.YangName = "neighbor-bfd-info"
    neighborBfdInfo.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInfo.EntityData.ParentYangName = "neighbor-detail"
    neighborBfdInfo.EntityData.SegmentPath = "neighbor-bfd-info"
    neighborBfdInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/vrfs/vrf/neighbor-detail-process-table/neighbor-detail/" + neighborBfdInfo.EntityData.SegmentPath
    neighborBfdInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInfo.EntityData.Children = types.NewOrderedMap()
    neighborBfdInfo.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInfo.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInfo.BfdIntfEnableMode})
    neighborBfdInfo.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInfo.BfdStatusFlag})

    neighborBfdInfo.EntityData.YListKeys = []string {}

    return &(neighborBfdInfo.EntityData)
}

// Ospfv3_Processes_Process_Statistics
// Container for Statistics
type Ospfv3_Processes_Process_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF NSR statistics.
    NsrStats Ospfv3_Processes_Process_Statistics_NsrStats

    // OSPFv3 RIB thread statistics.
    RibThreadStats Ospfv3_Processes_Process_Statistics_RibThreadStats

    // OSPF ISSU statistics.
    IssuStats Ospfv3_Processes_Process_Statistics_IssuStats

    // OSPF NSR packet library statistics.
    NsrPlStats Ospfv3_Processes_Process_Statistics_NsrPlStats

    // Protocol table.
    ProtocolStats Ospfv3_Processes_Process_Statistics_ProtocolStats

    // OSPFv3 RIB batch statistics.
    SpfStats Ospfv3_Processes_Process_Statistics_SpfStats

    // OSPF Prefix SPF Prioritization statistics.
    RawioStats Ospfv3_Processes_Process_Statistics_RawioStats

    // OSPF Prefix SPF Prioritization statistics.
    PrefixPriorityStats Ospfv3_Processes_Process_Statistics_PrefixPriorityStats

    // OSPFv3 RIB batch statistics.
    VrfRibBatchStats Ospfv3_Processes_Process_Statistics_VrfRibBatchStats
}

func (statistics *Ospfv3_Processes_Process_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "process"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("nsr-stats", types.YChild{"NsrStats", &statistics.NsrStats})
    statistics.EntityData.Children.Append("rib-thread-stats", types.YChild{"RibThreadStats", &statistics.RibThreadStats})
    statistics.EntityData.Children.Append("issu-stats", types.YChild{"IssuStats", &statistics.IssuStats})
    statistics.EntityData.Children.Append("nsr-pl-stats", types.YChild{"NsrPlStats", &statistics.NsrPlStats})
    statistics.EntityData.Children.Append("protocol-stats", types.YChild{"ProtocolStats", &statistics.ProtocolStats})
    statistics.EntityData.Children.Append("spf-stats", types.YChild{"SpfStats", &statistics.SpfStats})
    statistics.EntityData.Children.Append("rawio-stats", types.YChild{"RawioStats", &statistics.RawioStats})
    statistics.EntityData.Children.Append("prefix-priority-stats", types.YChild{"PrefixPriorityStats", &statistics.PrefixPriorityStats})
    statistics.EntityData.Children.Append("vrf-rib-batch-stats", types.YChild{"VrfRibBatchStats", &statistics.VrfRibBatchStats})
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Ospfv3_Processes_Process_Statistics_NsrStats
// OSPF NSR statistics
type Ospfv3_Processes_Process_Statistics_NsrStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NSR revision. The type is interface{} with range: -2147483648..2147483647.
    NsrRevision interface{}

    // FSM state. The type is interface{} with range: -2147483648..2147483647.
    NsrFsmState interface{}

    // NSR version. The type is interface{} with range: 0..4294967295.
    NsrVersion interface{}

    // My nodeid. The type is interface{} with range: 0..4294967295.
    NsrNodeId interface{}

    // Partner NSR version. The type is interface{} with range: 0..4294967295.
    NsrPeerVersion interface{}

    // Partner NodeID. The type is interface{} with range: 0..4294967295.
    NsrPeerNodeId interface{}

    // Fabric MTU. The type is interface{} with range: 0..4294967295.
    NsrMtu interface{}

    // NBR QAD queue id. The type is interface{} with range: 0..4294967295.
    NsrNbrQadQid interface{}

    // LSA QAD queue id. The type is interface{} with range: 0..4294967295.
    NsrLsaQadQid interface{}

    // NBR QAD pending msg. The type is interface{} with range: 0..4294967295.
    NsrNbrQadMdataCount interface{}

    // LSA QAD pending msgs. The type is interface{} with range: 0..4294967295.
    NsrLsaQadMdataCount interface{}

    // Pending init-sync NBR msgs. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrNbrInitSyncPendCount interface{}

    // Pending init-sync LSA msgs. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrLsaInitSyncPendCount interface{}

    // Neighbor TLV sequence no. The type is interface{} with range:
    // 0..4294967295.
    NsrNbrSeqNo interface{}

    // Interface TLV sequence no. The type is interface{} with range:
    // 0..4294967295.
    NsrIntfSeqNo interface{}

    // Timers processed per pulse. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrTmrQuant interface{}

    // Attempts to connect to active. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveAttempts interface{}

    // Failures to connect to active. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveFails interface{}

    // Conn to active opens. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveOpens interface{}

    // Conn to active closes. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveCloses interface{}

    // Conn to active errors. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveErrors interface{}

    // Nsr Fsm Flags information. The type is slice of string.
    NsrFsmFlag []interface{}

    // Nsr Fsm Running Timers. The type is slice of string.
    NsrFsmRunningTimer []interface{}

    // NSR thread scheduler stats.
    NsrThdStats Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats

    // Rtr thread NSR pulse handler stats.
    NsrRtrThdSched Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched

    // Nsr Issu Milestones. The type is slice of
    // Ospfv3_Processes_Process_Statistics_NsrStats_NsrIssuMilestone.
    NsrIssuMilestone []*Ospfv3_Processes_Process_Statistics_NsrStats_NsrIssuMilestone

    // Nsr Error History List. The type is slice of
    // Ospfv3_Processes_Process_Statistics_NsrStats_NsrErrHistory.
    NsrErrHistory []*Ospfv3_Processes_Process_Statistics_NsrStats_NsrErrHistory
}

func (nsrStats *Ospfv3_Processes_Process_Statistics_NsrStats) GetEntityData() *types.CommonEntityData {
    nsrStats.EntityData.YFilter = nsrStats.YFilter
    nsrStats.EntityData.YangName = "nsr-stats"
    nsrStats.EntityData.BundleName = "cisco_ios_xr"
    nsrStats.EntityData.ParentYangName = "statistics"
    nsrStats.EntityData.SegmentPath = "nsr-stats"
    nsrStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/" + nsrStats.EntityData.SegmentPath
    nsrStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrStats.EntityData.Children = types.NewOrderedMap()
    nsrStats.EntityData.Children.Append("nsr-thd-stats", types.YChild{"NsrThdStats", &nsrStats.NsrThdStats})
    nsrStats.EntityData.Children.Append("nsr-rtr-thd-sched", types.YChild{"NsrRtrThdSched", &nsrStats.NsrRtrThdSched})
    nsrStats.EntityData.Children.Append("nsr-issu-milestone", types.YChild{"NsrIssuMilestone", nil})
    for i := range nsrStats.NsrIssuMilestone {
        types.SetYListKey(nsrStats.NsrIssuMilestone[i], i)
        nsrStats.EntityData.Children.Append(types.GetSegmentPath(nsrStats.NsrIssuMilestone[i]), types.YChild{"NsrIssuMilestone", nsrStats.NsrIssuMilestone[i]})
    }
    nsrStats.EntityData.Children.Append("nsr-err-history", types.YChild{"NsrErrHistory", nil})
    for i := range nsrStats.NsrErrHistory {
        types.SetYListKey(nsrStats.NsrErrHistory[i], i)
        nsrStats.EntityData.Children.Append(types.GetSegmentPath(nsrStats.NsrErrHistory[i]), types.YChild{"NsrErrHistory", nsrStats.NsrErrHistory[i]})
    }
    nsrStats.EntityData.Leafs = types.NewOrderedMap()
    nsrStats.EntityData.Leafs.Append("nsr-revision", types.YLeaf{"NsrRevision", nsrStats.NsrRevision})
    nsrStats.EntityData.Leafs.Append("nsr-fsm-state", types.YLeaf{"NsrFsmState", nsrStats.NsrFsmState})
    nsrStats.EntityData.Leafs.Append("nsr-version", types.YLeaf{"NsrVersion", nsrStats.NsrVersion})
    nsrStats.EntityData.Leafs.Append("nsr-node-id", types.YLeaf{"NsrNodeId", nsrStats.NsrNodeId})
    nsrStats.EntityData.Leafs.Append("nsr-peer-version", types.YLeaf{"NsrPeerVersion", nsrStats.NsrPeerVersion})
    nsrStats.EntityData.Leafs.Append("nsr-peer-node-id", types.YLeaf{"NsrPeerNodeId", nsrStats.NsrPeerNodeId})
    nsrStats.EntityData.Leafs.Append("nsr-mtu", types.YLeaf{"NsrMtu", nsrStats.NsrMtu})
    nsrStats.EntityData.Leafs.Append("nsr-nbr-qad-qid", types.YLeaf{"NsrNbrQadQid", nsrStats.NsrNbrQadQid})
    nsrStats.EntityData.Leafs.Append("nsr-lsa-qad-qid", types.YLeaf{"NsrLsaQadQid", nsrStats.NsrLsaQadQid})
    nsrStats.EntityData.Leafs.Append("nsr-nbr-qad-mdata-count", types.YLeaf{"NsrNbrQadMdataCount", nsrStats.NsrNbrQadMdataCount})
    nsrStats.EntityData.Leafs.Append("nsr-lsa-qad-mdata-count", types.YLeaf{"NsrLsaQadMdataCount", nsrStats.NsrLsaQadMdataCount})
    nsrStats.EntityData.Leafs.Append("nsr-nbr-init-sync-pend-count", types.YLeaf{"NsrNbrInitSyncPendCount", nsrStats.NsrNbrInitSyncPendCount})
    nsrStats.EntityData.Leafs.Append("nsr-lsa-init-sync-pend-count", types.YLeaf{"NsrLsaInitSyncPendCount", nsrStats.NsrLsaInitSyncPendCount})
    nsrStats.EntityData.Leafs.Append("nsr-nbr-seq-no", types.YLeaf{"NsrNbrSeqNo", nsrStats.NsrNbrSeqNo})
    nsrStats.EntityData.Leafs.Append("nsr-intf-seq-no", types.YLeaf{"NsrIntfSeqNo", nsrStats.NsrIntfSeqNo})
    nsrStats.EntityData.Leafs.Append("nsr-tmr-quant", types.YLeaf{"NsrTmrQuant", nsrStats.NsrTmrQuant})
    nsrStats.EntityData.Leafs.Append("nsr-conn-to-active-attempts", types.YLeaf{"NsrConnToActiveAttempts", nsrStats.NsrConnToActiveAttempts})
    nsrStats.EntityData.Leafs.Append("nsr-conn-to-active-fails", types.YLeaf{"NsrConnToActiveFails", nsrStats.NsrConnToActiveFails})
    nsrStats.EntityData.Leafs.Append("nsr-conn-to-active-opens", types.YLeaf{"NsrConnToActiveOpens", nsrStats.NsrConnToActiveOpens})
    nsrStats.EntityData.Leafs.Append("nsr-conn-to-active-closes", types.YLeaf{"NsrConnToActiveCloses", nsrStats.NsrConnToActiveCloses})
    nsrStats.EntityData.Leafs.Append("nsr-conn-to-active-errors", types.YLeaf{"NsrConnToActiveErrors", nsrStats.NsrConnToActiveErrors})
    nsrStats.EntityData.Leafs.Append("nsr-fsm-flag", types.YLeaf{"NsrFsmFlag", nsrStats.NsrFsmFlag})
    nsrStats.EntityData.Leafs.Append("nsr-fsm-running-timer", types.YLeaf{"NsrFsmRunningTimer", nsrStats.NsrFsmRunningTimer})

    nsrStats.EntityData.YListKeys = []string {}

    return &(nsrStats.EntityData)
}

// Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats
// NSR thread scheduler stats
type Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Events processed per pulse. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrPulseQuant interface{}

    // Events pending. The type is interface{} with range: 0..4294967295.
    NsrEventsInQ interface{}

    // Events to Router thread. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrEventsTx interface{}

    // Events processed. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrEventsRx interface{}

    // Bad pulses received. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrBadPulsesRx interface{}

    // Good pulses received. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrGoodPulsesRx interface{}

    // Pulses to Router thread. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulsesTx interface{}

    // Pulse send failures. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulseTxFails interface{}

    // nsr pri. The type is slice of
    // Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri.
    NsrPri []*Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri
}

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats) GetEntityData() *types.CommonEntityData {
    nsrThdStats.EntityData.YFilter = nsrThdStats.YFilter
    nsrThdStats.EntityData.YangName = "nsr-thd-stats"
    nsrThdStats.EntityData.BundleName = "cisco_ios_xr"
    nsrThdStats.EntityData.ParentYangName = "nsr-stats"
    nsrThdStats.EntityData.SegmentPath = "nsr-thd-stats"
    nsrThdStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/nsr-stats/" + nsrThdStats.EntityData.SegmentPath
    nsrThdStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrThdStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrThdStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrThdStats.EntityData.Children = types.NewOrderedMap()
    nsrThdStats.EntityData.Children.Append("nsr-pri", types.YChild{"NsrPri", nil})
    for i := range nsrThdStats.NsrPri {
        types.SetYListKey(nsrThdStats.NsrPri[i], i)
        nsrThdStats.EntityData.Children.Append(types.GetSegmentPath(nsrThdStats.NsrPri[i]), types.YChild{"NsrPri", nsrThdStats.NsrPri[i]})
    }
    nsrThdStats.EntityData.Leafs = types.NewOrderedMap()
    nsrThdStats.EntityData.Leafs.Append("nsr-pulse-quant", types.YLeaf{"NsrPulseQuant", nsrThdStats.NsrPulseQuant})
    nsrThdStats.EntityData.Leafs.Append("nsr-events-in-q", types.YLeaf{"NsrEventsInQ", nsrThdStats.NsrEventsInQ})
    nsrThdStats.EntityData.Leafs.Append("nsr-events-tx", types.YLeaf{"NsrEventsTx", nsrThdStats.NsrEventsTx})
    nsrThdStats.EntityData.Leafs.Append("nsr-events-rx", types.YLeaf{"NsrEventsRx", nsrThdStats.NsrEventsRx})
    nsrThdStats.EntityData.Leafs.Append("nsr-bad-pulses-rx", types.YLeaf{"NsrBadPulsesRx", nsrThdStats.NsrBadPulsesRx})
    nsrThdStats.EntityData.Leafs.Append("nsr-good-pulses-rx", types.YLeaf{"NsrGoodPulsesRx", nsrThdStats.NsrGoodPulsesRx})
    nsrThdStats.EntityData.Leafs.Append("nsr-pulses-tx", types.YLeaf{"NsrPulsesTx", nsrThdStats.NsrPulsesTx})
    nsrThdStats.EntityData.Leafs.Append("nsr-pulse-tx-fails", types.YLeaf{"NsrPulseTxFails", nsrThdStats.NsrPulseTxFails})

    nsrThdStats.EntityData.YListKeys = []string {}

    return &(nsrThdStats.EntityData)
}

// Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri
// nsr pri
type Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Priority Type. The type is OspfNsrSchedPri.
    NsrSchedPri interface{}

    // Priority Queue. The type is interface{} with range: 0..255.
    NsrSchedQuant interface{}

    // Remaining quantum. The type is interface{} with range: 0..255.
    NsrSchedRemainQuant interface{}

    // Events pending. The type is interface{} with range: 0..65535.
    NsrSchedEvsInQ interface{}

    // Max Queued. The type is interface{} with range: 0..65535.
    NsrSchedMaxEvs interface{}

    // Peak queue length. The type is interface{} with range: 0..65535.
    NsrSchedPeakQLen interface{}

    // Events queued. The type is interface{} with range: 0..18446744073709551615.
    NsrSchedEvsQd interface{}

    // Event enqueue fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEnqFails interface{}

    // Events dequeued. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsDeqd interface{}
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri) GetEntityData() *types.CommonEntityData {
    nsrPri.EntityData.YFilter = nsrPri.YFilter
    nsrPri.EntityData.YangName = "nsr-pri"
    nsrPri.EntityData.BundleName = "cisco_ios_xr"
    nsrPri.EntityData.ParentYangName = "nsr-thd-stats"
    nsrPri.EntityData.SegmentPath = "nsr-pri" + types.AddNoKeyToken(nsrPri)
    nsrPri.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/nsr-stats/nsr-thd-stats/" + nsrPri.EntityData.SegmentPath
    nsrPri.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPri.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPri.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPri.EntityData.Children = types.NewOrderedMap()
    nsrPri.EntityData.Leafs = types.NewOrderedMap()
    nsrPri.EntityData.Leafs.Append("nsr-sched-pri", types.YLeaf{"NsrSchedPri", nsrPri.NsrSchedPri})
    nsrPri.EntityData.Leafs.Append("nsr-sched-quant", types.YLeaf{"NsrSchedQuant", nsrPri.NsrSchedQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-remain-quant", types.YLeaf{"NsrSchedRemainQuant", nsrPri.NsrSchedRemainQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-in-q", types.YLeaf{"NsrSchedEvsInQ", nsrPri.NsrSchedEvsInQ})
    nsrPri.EntityData.Leafs.Append("nsr-sched-max-evs", types.YLeaf{"NsrSchedMaxEvs", nsrPri.NsrSchedMaxEvs})
    nsrPri.EntityData.Leafs.Append("nsr-sched-peak-q-len", types.YLeaf{"NsrSchedPeakQLen", nsrPri.NsrSchedPeakQLen})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-qd", types.YLeaf{"NsrSchedEvsQd", nsrPri.NsrSchedEvsQd})
    nsrPri.EntityData.Leafs.Append("nsr-sched-enq-fails", types.YLeaf{"NsrSchedEnqFails", nsrPri.NsrSchedEnqFails})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-deqd", types.YLeaf{"NsrSchedEvsDeqd", nsrPri.NsrSchedEvsDeqd})

    nsrPri.EntityData.YListKeys = []string {}

    return &(nsrPri.EntityData)
}

// Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched
// Rtr thread NSR pulse handler stats
type Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Events processed per pulse. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrPulseQuant interface{}

    // Events pending. The type is interface{} with range: 0..4294967295.
    NsrEventsInQ interface{}

    // Events to Router thread. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrEventsTx interface{}

    // Events processed. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrEventsRx interface{}

    // Bad pulses received. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrBadPulsesRx interface{}

    // Good pulses received. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrGoodPulsesRx interface{}

    // Pulses to Router thread. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulsesTx interface{}

    // Pulse send failures. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulseTxFails interface{}

    // nsr pri. The type is slice of
    // Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri.
    NsrPri []*Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri
}

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched) GetEntityData() *types.CommonEntityData {
    nsrRtrThdSched.EntityData.YFilter = nsrRtrThdSched.YFilter
    nsrRtrThdSched.EntityData.YangName = "nsr-rtr-thd-sched"
    nsrRtrThdSched.EntityData.BundleName = "cisco_ios_xr"
    nsrRtrThdSched.EntityData.ParentYangName = "nsr-stats"
    nsrRtrThdSched.EntityData.SegmentPath = "nsr-rtr-thd-sched"
    nsrRtrThdSched.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/nsr-stats/" + nsrRtrThdSched.EntityData.SegmentPath
    nsrRtrThdSched.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrRtrThdSched.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrRtrThdSched.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrRtrThdSched.EntityData.Children = types.NewOrderedMap()
    nsrRtrThdSched.EntityData.Children.Append("nsr-pri", types.YChild{"NsrPri", nil})
    for i := range nsrRtrThdSched.NsrPri {
        types.SetYListKey(nsrRtrThdSched.NsrPri[i], i)
        nsrRtrThdSched.EntityData.Children.Append(types.GetSegmentPath(nsrRtrThdSched.NsrPri[i]), types.YChild{"NsrPri", nsrRtrThdSched.NsrPri[i]})
    }
    nsrRtrThdSched.EntityData.Leafs = types.NewOrderedMap()
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-pulse-quant", types.YLeaf{"NsrPulseQuant", nsrRtrThdSched.NsrPulseQuant})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-events-in-q", types.YLeaf{"NsrEventsInQ", nsrRtrThdSched.NsrEventsInQ})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-events-tx", types.YLeaf{"NsrEventsTx", nsrRtrThdSched.NsrEventsTx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-events-rx", types.YLeaf{"NsrEventsRx", nsrRtrThdSched.NsrEventsRx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-bad-pulses-rx", types.YLeaf{"NsrBadPulsesRx", nsrRtrThdSched.NsrBadPulsesRx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-good-pulses-rx", types.YLeaf{"NsrGoodPulsesRx", nsrRtrThdSched.NsrGoodPulsesRx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-pulses-tx", types.YLeaf{"NsrPulsesTx", nsrRtrThdSched.NsrPulsesTx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-pulse-tx-fails", types.YLeaf{"NsrPulseTxFails", nsrRtrThdSched.NsrPulseTxFails})

    nsrRtrThdSched.EntityData.YListKeys = []string {}

    return &(nsrRtrThdSched.EntityData)
}

// Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri
// nsr pri
type Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Priority Type. The type is OspfNsrSchedPri.
    NsrSchedPri interface{}

    // Priority Queue. The type is interface{} with range: 0..255.
    NsrSchedQuant interface{}

    // Remaining quantum. The type is interface{} with range: 0..255.
    NsrSchedRemainQuant interface{}

    // Events pending. The type is interface{} with range: 0..65535.
    NsrSchedEvsInQ interface{}

    // Max Queued. The type is interface{} with range: 0..65535.
    NsrSchedMaxEvs interface{}

    // Peak queue length. The type is interface{} with range: 0..65535.
    NsrSchedPeakQLen interface{}

    // Events queued. The type is interface{} with range: 0..18446744073709551615.
    NsrSchedEvsQd interface{}

    // Event enqueue fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEnqFails interface{}

    // Events dequeued. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsDeqd interface{}
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri) GetEntityData() *types.CommonEntityData {
    nsrPri.EntityData.YFilter = nsrPri.YFilter
    nsrPri.EntityData.YangName = "nsr-pri"
    nsrPri.EntityData.BundleName = "cisco_ios_xr"
    nsrPri.EntityData.ParentYangName = "nsr-rtr-thd-sched"
    nsrPri.EntityData.SegmentPath = "nsr-pri" + types.AddNoKeyToken(nsrPri)
    nsrPri.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/nsr-stats/nsr-rtr-thd-sched/" + nsrPri.EntityData.SegmentPath
    nsrPri.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPri.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPri.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPri.EntityData.Children = types.NewOrderedMap()
    nsrPri.EntityData.Leafs = types.NewOrderedMap()
    nsrPri.EntityData.Leafs.Append("nsr-sched-pri", types.YLeaf{"NsrSchedPri", nsrPri.NsrSchedPri})
    nsrPri.EntityData.Leafs.Append("nsr-sched-quant", types.YLeaf{"NsrSchedQuant", nsrPri.NsrSchedQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-remain-quant", types.YLeaf{"NsrSchedRemainQuant", nsrPri.NsrSchedRemainQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-in-q", types.YLeaf{"NsrSchedEvsInQ", nsrPri.NsrSchedEvsInQ})
    nsrPri.EntityData.Leafs.Append("nsr-sched-max-evs", types.YLeaf{"NsrSchedMaxEvs", nsrPri.NsrSchedMaxEvs})
    nsrPri.EntityData.Leafs.Append("nsr-sched-peak-q-len", types.YLeaf{"NsrSchedPeakQLen", nsrPri.NsrSchedPeakQLen})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-qd", types.YLeaf{"NsrSchedEvsQd", nsrPri.NsrSchedEvsQd})
    nsrPri.EntityData.Leafs.Append("nsr-sched-enq-fails", types.YLeaf{"NsrSchedEnqFails", nsrPri.NsrSchedEnqFails})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-deqd", types.YLeaf{"NsrSchedEvsDeqd", nsrPri.NsrSchedEvsDeqd})

    nsrPri.EntityData.YListKeys = []string {}

    return &(nsrPri.EntityData)
}

// Ospfv3_Processes_Process_Statistics_NsrStats_NsrIssuMilestone
// Nsr Issu Milestones
type Ospfv3_Processes_Process_Statistics_NsrStats_NsrIssuMilestone struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Milestone Name. The type is string.
    MilestoneName interface{}

    // Milestone Status. The type is string.
    MilestoneStatus interface{}
}

func (nsrIssuMilestone *Ospfv3_Processes_Process_Statistics_NsrStats_NsrIssuMilestone) GetEntityData() *types.CommonEntityData {
    nsrIssuMilestone.EntityData.YFilter = nsrIssuMilestone.YFilter
    nsrIssuMilestone.EntityData.YangName = "nsr-issu-milestone"
    nsrIssuMilestone.EntityData.BundleName = "cisco_ios_xr"
    nsrIssuMilestone.EntityData.ParentYangName = "nsr-stats"
    nsrIssuMilestone.EntityData.SegmentPath = "nsr-issu-milestone" + types.AddNoKeyToken(nsrIssuMilestone)
    nsrIssuMilestone.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/nsr-stats/" + nsrIssuMilestone.EntityData.SegmentPath
    nsrIssuMilestone.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrIssuMilestone.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrIssuMilestone.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrIssuMilestone.EntityData.Children = types.NewOrderedMap()
    nsrIssuMilestone.EntityData.Leafs = types.NewOrderedMap()
    nsrIssuMilestone.EntityData.Leafs.Append("milestone-name", types.YLeaf{"MilestoneName", nsrIssuMilestone.MilestoneName})
    nsrIssuMilestone.EntityData.Leafs.Append("milestone-status", types.YLeaf{"MilestoneStatus", nsrIssuMilestone.MilestoneStatus})

    nsrIssuMilestone.EntityData.YListKeys = []string {}

    return &(nsrIssuMilestone.EntityData)
}

// Ospfv3_Processes_Process_Statistics_NsrStats_NsrErrHistory
// Nsr Error History List
type Ospfv3_Processes_Process_Statistics_NsrStats_NsrErrHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Nsr Revision version. The type is interface{} with range: 0..4294967295.
    NsrRevisionversion interface{}

    // Total errors for this nsr revision version. The type is interface{} with
    // range: -2147483648..2147483647.
    TotalErrors interface{}

    // List of erros. The type is slice of
    // Ospfv3_Processes_Process_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo.
    NsrErrorInfo []*Ospfv3_Processes_Process_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo
}

func (nsrErrHistory *Ospfv3_Processes_Process_Statistics_NsrStats_NsrErrHistory) GetEntityData() *types.CommonEntityData {
    nsrErrHistory.EntityData.YFilter = nsrErrHistory.YFilter
    nsrErrHistory.EntityData.YangName = "nsr-err-history"
    nsrErrHistory.EntityData.BundleName = "cisco_ios_xr"
    nsrErrHistory.EntityData.ParentYangName = "nsr-stats"
    nsrErrHistory.EntityData.SegmentPath = "nsr-err-history" + types.AddNoKeyToken(nsrErrHistory)
    nsrErrHistory.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/nsr-stats/" + nsrErrHistory.EntityData.SegmentPath
    nsrErrHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrErrHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrErrHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrErrHistory.EntityData.Children = types.NewOrderedMap()
    nsrErrHistory.EntityData.Children.Append("nsr-error-info", types.YChild{"NsrErrorInfo", nil})
    for i := range nsrErrHistory.NsrErrorInfo {
        types.SetYListKey(nsrErrHistory.NsrErrorInfo[i], i)
        nsrErrHistory.EntityData.Children.Append(types.GetSegmentPath(nsrErrHistory.NsrErrorInfo[i]), types.YChild{"NsrErrorInfo", nsrErrHistory.NsrErrorInfo[i]})
    }
    nsrErrHistory.EntityData.Leafs = types.NewOrderedMap()
    nsrErrHistory.EntityData.Leafs.Append("nsr-revisionversion", types.YLeaf{"NsrRevisionversion", nsrErrHistory.NsrRevisionversion})
    nsrErrHistory.EntityData.Leafs.Append("total-errors", types.YLeaf{"TotalErrors", nsrErrHistory.TotalErrors})

    nsrErrHistory.EntityData.YListKeys = []string {}

    return &(nsrErrHistory.EntityData)
}

// Ospfv3_Processes_Process_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo
// List of erros
type Ospfv3_Processes_Process_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Count this error hit during the Nsr Revision. The type is interface{} with
    // range: -2147483648..2147483647.
    ErrCount interface{}

    // Error Information. The type is string.
    ErrInfoString interface{}

    // Time this error was last hit.
    LastErrTime Ospfv3_Processes_Process_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo_LastErrTime
}

func (nsrErrorInfo *Ospfv3_Processes_Process_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo) GetEntityData() *types.CommonEntityData {
    nsrErrorInfo.EntityData.YFilter = nsrErrorInfo.YFilter
    nsrErrorInfo.EntityData.YangName = "nsr-error-info"
    nsrErrorInfo.EntityData.BundleName = "cisco_ios_xr"
    nsrErrorInfo.EntityData.ParentYangName = "nsr-err-history"
    nsrErrorInfo.EntityData.SegmentPath = "nsr-error-info" + types.AddNoKeyToken(nsrErrorInfo)
    nsrErrorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/nsr-stats/nsr-err-history/" + nsrErrorInfo.EntityData.SegmentPath
    nsrErrorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrErrorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrErrorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrErrorInfo.EntityData.Children = types.NewOrderedMap()
    nsrErrorInfo.EntityData.Children.Append("last-err-time", types.YChild{"LastErrTime", &nsrErrorInfo.LastErrTime})
    nsrErrorInfo.EntityData.Leafs = types.NewOrderedMap()
    nsrErrorInfo.EntityData.Leafs.Append("err-count", types.YLeaf{"ErrCount", nsrErrorInfo.ErrCount})
    nsrErrorInfo.EntityData.Leafs.Append("err-info-string", types.YLeaf{"ErrInfoString", nsrErrorInfo.ErrInfoString})

    nsrErrorInfo.EntityData.YListKeys = []string {}

    return &(nsrErrorInfo.EntityData)
}

// Ospfv3_Processes_Process_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo_LastErrTime
// Time this error was last hit
type Ospfv3_Processes_Process_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo_LastErrTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (lastErrTime *Ospfv3_Processes_Process_Statistics_NsrStats_NsrErrHistory_NsrErrorInfo_LastErrTime) GetEntityData() *types.CommonEntityData {
    lastErrTime.EntityData.YFilter = lastErrTime.YFilter
    lastErrTime.EntityData.YangName = "last-err-time"
    lastErrTime.EntityData.BundleName = "cisco_ios_xr"
    lastErrTime.EntityData.ParentYangName = "nsr-error-info"
    lastErrTime.EntityData.SegmentPath = "last-err-time"
    lastErrTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/nsr-stats/nsr-err-history/nsr-error-info/" + lastErrTime.EntityData.SegmentPath
    lastErrTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastErrTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastErrTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastErrTime.EntityData.Children = types.NewOrderedMap()
    lastErrTime.EntityData.Leafs = types.NewOrderedMap()
    lastErrTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", lastErrTime.Second})
    lastErrTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", lastErrTime.Nanosecond})

    lastErrTime.EntityData.YListKeys = []string {}

    return &(lastErrTime.EntityData)
}

// Ospfv3_Processes_Process_Statistics_RibThreadStats
// OSPFv3 RIB thread statistics
type Ospfv3_Processes_Process_Statistics_RibThreadStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RIB Thread Active Indicator. The type is bool.
    WqThreadActive interface{}

    // Signals sent to RIB Thread. The type is interface{} with range:
    // 0..4294967295.
    WqSignals interface{}

    // Rib Base Clock. The type is interface{} with range:
    // 0..18446744073709551615.
    RibBaseClock interface{}

    // No. of Rib batches sent. The type is interface{} with range: 0..4294967295.
    RibBatchSent interface{}

    // No. of Rib batches purged. The type is interface{} with range:
    // 0..4294967295.
    RibBatchPurged interface{}

    // Rib drop version. The type is interface{} with range: 0..4294967295.
    RibDropVersion interface{}

    // Rib drop connections. The type is interface{} with range: 0..4294967295.
    RibDropConn interface{}

    // Rib Batches Ok. The type is interface{} with range: 0..4294967295.
    RibBatchOk interface{}

    // Rib Batches Back up. The type is interface{} with range: 0..4294967295.
    RibBatchBackup interface{}

    // Rib Batches Limit. The type is interface{} with range: 0..4294967295.
    RibBatchLimit interface{}

    // Batches no table. The type is interface{} with range: 0..4294967295.
    RibBatchNoTable interface{}

    // Batches with some error. The type is interface{} with range: 0..4294967295.
    RibBatchSomeErr interface{}

    // Batch errors. The type is interface{} with range: 0..4294967295.
    RibBatchErr interface{}

    // Route table limit. The type is interface{} with range: 0..4294967295.
    RibRouteLimit interface{}

    // Route some errors. The type is interface{} with range: 0..4294967295.
    RibRouteSomeErr interface{}

    // Route Errors. The type is interface{} with range: 0..4294967295.
    RibRouteErr interface{}

    // Route path limits. The type is interface{} with range: 0..4294967295.
    RibPathLimit interface{}

    // Route path errors. The type is interface{} with range: 0..4294967295.
    RibPathErr interface{}

    // Max time entry was in queue. The type is interface{} with range:
    // 0..18446744073709551615.
    RibMaxLatency interface{}

    // Sum latencies to calc average. The type is interface{} with range:
    // 0..18446744073709551615.
    RibSumLatency interface{}

    // Inter Thread Queue.
    ThreadQ Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ

    // rib base time.
    RibBaseTime Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime

    // holdq. The type is slice of
    // Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq.
    Holdq []*Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq
}

func (ribThreadStats *Ospfv3_Processes_Process_Statistics_RibThreadStats) GetEntityData() *types.CommonEntityData {
    ribThreadStats.EntityData.YFilter = ribThreadStats.YFilter
    ribThreadStats.EntityData.YangName = "rib-thread-stats"
    ribThreadStats.EntityData.BundleName = "cisco_ios_xr"
    ribThreadStats.EntityData.ParentYangName = "statistics"
    ribThreadStats.EntityData.SegmentPath = "rib-thread-stats"
    ribThreadStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/" + ribThreadStats.EntityData.SegmentPath
    ribThreadStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribThreadStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribThreadStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribThreadStats.EntityData.Children = types.NewOrderedMap()
    ribThreadStats.EntityData.Children.Append("thread-q", types.YChild{"ThreadQ", &ribThreadStats.ThreadQ})
    ribThreadStats.EntityData.Children.Append("rib-base-time", types.YChild{"RibBaseTime", &ribThreadStats.RibBaseTime})
    ribThreadStats.EntityData.Children.Append("holdq", types.YChild{"Holdq", nil})
    for i := range ribThreadStats.Holdq {
        types.SetYListKey(ribThreadStats.Holdq[i], i)
        ribThreadStats.EntityData.Children.Append(types.GetSegmentPath(ribThreadStats.Holdq[i]), types.YChild{"Holdq", ribThreadStats.Holdq[i]})
    }
    ribThreadStats.EntityData.Leafs = types.NewOrderedMap()
    ribThreadStats.EntityData.Leafs.Append("wq-thread-active", types.YLeaf{"WqThreadActive", ribThreadStats.WqThreadActive})
    ribThreadStats.EntityData.Leafs.Append("wq-signals", types.YLeaf{"WqSignals", ribThreadStats.WqSignals})
    ribThreadStats.EntityData.Leafs.Append("rib-base-clock", types.YLeaf{"RibBaseClock", ribThreadStats.RibBaseClock})
    ribThreadStats.EntityData.Leafs.Append("rib-batch-sent", types.YLeaf{"RibBatchSent", ribThreadStats.RibBatchSent})
    ribThreadStats.EntityData.Leafs.Append("rib-batch-purged", types.YLeaf{"RibBatchPurged", ribThreadStats.RibBatchPurged})
    ribThreadStats.EntityData.Leafs.Append("rib-drop-version", types.YLeaf{"RibDropVersion", ribThreadStats.RibDropVersion})
    ribThreadStats.EntityData.Leafs.Append("rib-drop-conn", types.YLeaf{"RibDropConn", ribThreadStats.RibDropConn})
    ribThreadStats.EntityData.Leafs.Append("rib-batch-ok", types.YLeaf{"RibBatchOk", ribThreadStats.RibBatchOk})
    ribThreadStats.EntityData.Leafs.Append("rib-batch-backup", types.YLeaf{"RibBatchBackup", ribThreadStats.RibBatchBackup})
    ribThreadStats.EntityData.Leafs.Append("rib-batch-limit", types.YLeaf{"RibBatchLimit", ribThreadStats.RibBatchLimit})
    ribThreadStats.EntityData.Leafs.Append("rib-batch-no-table", types.YLeaf{"RibBatchNoTable", ribThreadStats.RibBatchNoTable})
    ribThreadStats.EntityData.Leafs.Append("rib-batch-some-err", types.YLeaf{"RibBatchSomeErr", ribThreadStats.RibBatchSomeErr})
    ribThreadStats.EntityData.Leafs.Append("rib-batch-err", types.YLeaf{"RibBatchErr", ribThreadStats.RibBatchErr})
    ribThreadStats.EntityData.Leafs.Append("rib-route-limit", types.YLeaf{"RibRouteLimit", ribThreadStats.RibRouteLimit})
    ribThreadStats.EntityData.Leafs.Append("rib-route-some-err", types.YLeaf{"RibRouteSomeErr", ribThreadStats.RibRouteSomeErr})
    ribThreadStats.EntityData.Leafs.Append("rib-route-err", types.YLeaf{"RibRouteErr", ribThreadStats.RibRouteErr})
    ribThreadStats.EntityData.Leafs.Append("rib-path-limit", types.YLeaf{"RibPathLimit", ribThreadStats.RibPathLimit})
    ribThreadStats.EntityData.Leafs.Append("rib-path-err", types.YLeaf{"RibPathErr", ribThreadStats.RibPathErr})
    ribThreadStats.EntityData.Leafs.Append("rib-max-latency", types.YLeaf{"RibMaxLatency", ribThreadStats.RibMaxLatency})
    ribThreadStats.EntityData.Leafs.Append("rib-sum-latency", types.YLeaf{"RibSumLatency", ribThreadStats.RibSumLatency})

    ribThreadStats.EntityData.YListKeys = []string {}

    return &(ribThreadStats.EntityData)
}

// Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ
// Inter Thread Queue
type Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Head Entry Enqueue. The type is interface{} with range:
    // 0..18446744073709551615.
    WqEqtime interface{}

    // Last Entry Dequeue. The type is interface{} with range:
    // 0..18446744073709551615.
    WqDqtime interface{}

    // First Entry Enqueue. The type is interface{} with range:
    // 0..18446744073709551615.
    WqFirstEqtime interface{}

    // Current Work Queue Length. The type is interface{} with range:
    // -2147483648..2147483647.
    WqLenCur interface{}

    // Largest Work Queue Length. The type is interface{} with range:
    // -2147483648..2147483647.
    WqLenMax interface{}

    // Total Entries Enqueued. The type is interface{} with range: 0..4294967295.
    WqTotalEnqueued interface{}

    // Total Entries Dequeued. The type is interface{} with range: 0..4294967295.
    WqTotalDequeued interface{}

    // Enqueue Errors. The type is interface{} with range: 0..4294967295.
    WqEneueueErrs interface{}

    // Dequeue Errors. The type is interface{} with range: 0..4294967295.
    WqDequeueErrs interface{}

    // Max Time Entry Was In Q. The type is interface{} with range:
    // 0..18446744073709551615.
    WqMaxLatency interface{}

    // Sum Latencies To Calc Average. The type is interface{} with range:
    // 0..18446744073709551615.
    WqSumLatency interface{}
}

func (threadQ *Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ) GetEntityData() *types.CommonEntityData {
    threadQ.EntityData.YFilter = threadQ.YFilter
    threadQ.EntityData.YangName = "thread-q"
    threadQ.EntityData.BundleName = "cisco_ios_xr"
    threadQ.EntityData.ParentYangName = "rib-thread-stats"
    threadQ.EntityData.SegmentPath = "thread-q"
    threadQ.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/rib-thread-stats/" + threadQ.EntityData.SegmentPath
    threadQ.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threadQ.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threadQ.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threadQ.EntityData.Children = types.NewOrderedMap()
    threadQ.EntityData.Leafs = types.NewOrderedMap()
    threadQ.EntityData.Leafs.Append("wq-eqtime", types.YLeaf{"WqEqtime", threadQ.WqEqtime})
    threadQ.EntityData.Leafs.Append("wq-dqtime", types.YLeaf{"WqDqtime", threadQ.WqDqtime})
    threadQ.EntityData.Leafs.Append("wq-first-eqtime", types.YLeaf{"WqFirstEqtime", threadQ.WqFirstEqtime})
    threadQ.EntityData.Leafs.Append("wq-len-cur", types.YLeaf{"WqLenCur", threadQ.WqLenCur})
    threadQ.EntityData.Leafs.Append("wq-len-max", types.YLeaf{"WqLenMax", threadQ.WqLenMax})
    threadQ.EntityData.Leafs.Append("wq-total-enqueued", types.YLeaf{"WqTotalEnqueued", threadQ.WqTotalEnqueued})
    threadQ.EntityData.Leafs.Append("wq-total-dequeued", types.YLeaf{"WqTotalDequeued", threadQ.WqTotalDequeued})
    threadQ.EntityData.Leafs.Append("wq-eneueue-errs", types.YLeaf{"WqEneueueErrs", threadQ.WqEneueueErrs})
    threadQ.EntityData.Leafs.Append("wq-dequeue-errs", types.YLeaf{"WqDequeueErrs", threadQ.WqDequeueErrs})
    threadQ.EntityData.Leafs.Append("wq-max-latency", types.YLeaf{"WqMaxLatency", threadQ.WqMaxLatency})
    threadQ.EntityData.Leafs.Append("wq-sum-latency", types.YLeaf{"WqSumLatency", threadQ.WqSumLatency})

    threadQ.EntityData.YListKeys = []string {}

    return &(threadQ.EntityData)
}

// Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime
// rib base time
type Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (ribBaseTime *Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime) GetEntityData() *types.CommonEntityData {
    ribBaseTime.EntityData.YFilter = ribBaseTime.YFilter
    ribBaseTime.EntityData.YangName = "rib-base-time"
    ribBaseTime.EntityData.BundleName = "cisco_ios_xr"
    ribBaseTime.EntityData.ParentYangName = "rib-thread-stats"
    ribBaseTime.EntityData.SegmentPath = "rib-base-time"
    ribBaseTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/rib-thread-stats/" + ribBaseTime.EntityData.SegmentPath
    ribBaseTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribBaseTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribBaseTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribBaseTime.EntityData.Children = types.NewOrderedMap()
    ribBaseTime.EntityData.Leafs = types.NewOrderedMap()
    ribBaseTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", ribBaseTime.Second})
    ribBaseTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", ribBaseTime.Nanosecond})

    ribBaseTime.EntityData.YListKeys = []string {}

    return &(ribBaseTime.EntityData)
}

// Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq
// holdq
type Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Head Entry Enqueue. The type is interface{} with range:
    // 0..18446744073709551615.
    WqEqtime interface{}

    // Last Entry Dequeue. The type is interface{} with range:
    // 0..18446744073709551615.
    WqDqtime interface{}

    // First Entry Enqueue. The type is interface{} with range:
    // 0..18446744073709551615.
    WqFirstEqtime interface{}

    // Current Work Queue Length. The type is interface{} with range:
    // -2147483648..2147483647.
    WqLenCur interface{}

    // Largest Work Queue Length. The type is interface{} with range:
    // -2147483648..2147483647.
    WqLenMax interface{}

    // Total Entries Enqueued. The type is interface{} with range: 0..4294967295.
    WqTotalEnqueued interface{}

    // Total Entries Dequeued. The type is interface{} with range: 0..4294967295.
    WqTotalDequeued interface{}

    // Enqueue Errors. The type is interface{} with range: 0..4294967295.
    WqEneueueErrs interface{}

    // Dequeue Errors. The type is interface{} with range: 0..4294967295.
    WqDequeueErrs interface{}

    // Max Time Entry Was In Q. The type is interface{} with range:
    // 0..18446744073709551615.
    WqMaxLatency interface{}

    // Sum Latencies To Calc Average. The type is interface{} with range:
    // 0..18446744073709551615.
    WqSumLatency interface{}
}

func (holdq *Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq) GetEntityData() *types.CommonEntityData {
    holdq.EntityData.YFilter = holdq.YFilter
    holdq.EntityData.YangName = "holdq"
    holdq.EntityData.BundleName = "cisco_ios_xr"
    holdq.EntityData.ParentYangName = "rib-thread-stats"
    holdq.EntityData.SegmentPath = "holdq" + types.AddNoKeyToken(holdq)
    holdq.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/rib-thread-stats/" + holdq.EntityData.SegmentPath
    holdq.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    holdq.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    holdq.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    holdq.EntityData.Children = types.NewOrderedMap()
    holdq.EntityData.Leafs = types.NewOrderedMap()
    holdq.EntityData.Leafs.Append("wq-eqtime", types.YLeaf{"WqEqtime", holdq.WqEqtime})
    holdq.EntityData.Leafs.Append("wq-dqtime", types.YLeaf{"WqDqtime", holdq.WqDqtime})
    holdq.EntityData.Leafs.Append("wq-first-eqtime", types.YLeaf{"WqFirstEqtime", holdq.WqFirstEqtime})
    holdq.EntityData.Leafs.Append("wq-len-cur", types.YLeaf{"WqLenCur", holdq.WqLenCur})
    holdq.EntityData.Leafs.Append("wq-len-max", types.YLeaf{"WqLenMax", holdq.WqLenMax})
    holdq.EntityData.Leafs.Append("wq-total-enqueued", types.YLeaf{"WqTotalEnqueued", holdq.WqTotalEnqueued})
    holdq.EntityData.Leafs.Append("wq-total-dequeued", types.YLeaf{"WqTotalDequeued", holdq.WqTotalDequeued})
    holdq.EntityData.Leafs.Append("wq-eneueue-errs", types.YLeaf{"WqEneueueErrs", holdq.WqEneueueErrs})
    holdq.EntityData.Leafs.Append("wq-dequeue-errs", types.YLeaf{"WqDequeueErrs", holdq.WqDequeueErrs})
    holdq.EntityData.Leafs.Append("wq-max-latency", types.YLeaf{"WqMaxLatency", holdq.WqMaxLatency})
    holdq.EntityData.Leafs.Append("wq-sum-latency", types.YLeaf{"WqSumLatency", holdq.WqSumLatency})

    holdq.EntityData.YListKeys = []string {}

    return &(holdq.EntityData)
}

// Ospfv3_Processes_Process_Statistics_IssuStats
// OSPF ISSU statistics
type Ospfv3_Processes_Process_Statistics_IssuStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // NSR revision. The type is interface{} with range: -2147483648..2147483647.
    NsrRevision interface{}

    // FSM state. The type is interface{} with range: -2147483648..2147483647.
    NsrFsmState interface{}

    // NSR version. The type is interface{} with range: 0..4294967295.
    NsrVersion interface{}

    // My nodeid. The type is interface{} with range: 0..4294967295.
    NsrNodeId interface{}

    // Partner NSR version. The type is interface{} with range: 0..4294967295.
    NsrPeerVersion interface{}

    // Partner NodeID. The type is interface{} with range: 0..4294967295.
    NsrPeerNodeId interface{}

    // Fabric MTU. The type is interface{} with range: 0..4294967295.
    NsrMtu interface{}

    // NBR QAD queue id. The type is interface{} with range: 0..4294967295.
    NsrNbrQadQid interface{}

    // LSA QAD queue id. The type is interface{} with range: 0..4294967295.
    NsrLsaQadQid interface{}

    // NBR QAD pending msg. The type is interface{} with range: 0..4294967295.
    NsrNbrQadMdataCount interface{}

    // LSA QAD pending msgs. The type is interface{} with range: 0..4294967295.
    NsrLsaQadMdataCount interface{}

    // Pending init-sync NBR msgs. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrNbrInitSyncPendCount interface{}

    // Pending init-sync LSA msgs. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrLsaInitSyncPendCount interface{}

    // Neighbor TLV sequence no. The type is interface{} with range:
    // 0..4294967295.
    NsrNbrSeqNo interface{}

    // Interface TLV sequence no. The type is interface{} with range:
    // 0..4294967295.
    NsrIntfSeqNo interface{}

    // Timers processed per pulse. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrTmrQuant interface{}

    // Attempts to connect to active. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveAttempts interface{}

    // Failures to connect to active. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveFails interface{}

    // Conn to active opens. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveOpens interface{}

    // Conn to active closes. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveCloses interface{}

    // Conn to active errors. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveErrors interface{}

    // Nsr Fsm Flags information. The type is slice of string.
    NsrFsmFlag []interface{}

    // Nsr Fsm Running Timers. The type is slice of string.
    NsrFsmRunningTimer []interface{}

    // NSR thread scheduler stats.
    NsrThdStats Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats

    // Rtr thread NSR pulse handler stats.
    NsrRtrThdSched Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched

    // Nsr Issu Milestones. The type is slice of
    // Ospfv3_Processes_Process_Statistics_IssuStats_NsrIssuMilestone.
    NsrIssuMilestone []*Ospfv3_Processes_Process_Statistics_IssuStats_NsrIssuMilestone

    // Nsr Error History List. The type is slice of
    // Ospfv3_Processes_Process_Statistics_IssuStats_NsrErrHistory.
    NsrErrHistory []*Ospfv3_Processes_Process_Statistics_IssuStats_NsrErrHistory
}

func (issuStats *Ospfv3_Processes_Process_Statistics_IssuStats) GetEntityData() *types.CommonEntityData {
    issuStats.EntityData.YFilter = issuStats.YFilter
    issuStats.EntityData.YangName = "issu-stats"
    issuStats.EntityData.BundleName = "cisco_ios_xr"
    issuStats.EntityData.ParentYangName = "statistics"
    issuStats.EntityData.SegmentPath = "issu-stats"
    issuStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/" + issuStats.EntityData.SegmentPath
    issuStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    issuStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    issuStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    issuStats.EntityData.Children = types.NewOrderedMap()
    issuStats.EntityData.Children.Append("nsr-thd-stats", types.YChild{"NsrThdStats", &issuStats.NsrThdStats})
    issuStats.EntityData.Children.Append("nsr-rtr-thd-sched", types.YChild{"NsrRtrThdSched", &issuStats.NsrRtrThdSched})
    issuStats.EntityData.Children.Append("nsr-issu-milestone", types.YChild{"NsrIssuMilestone", nil})
    for i := range issuStats.NsrIssuMilestone {
        types.SetYListKey(issuStats.NsrIssuMilestone[i], i)
        issuStats.EntityData.Children.Append(types.GetSegmentPath(issuStats.NsrIssuMilestone[i]), types.YChild{"NsrIssuMilestone", issuStats.NsrIssuMilestone[i]})
    }
    issuStats.EntityData.Children.Append("nsr-err-history", types.YChild{"NsrErrHistory", nil})
    for i := range issuStats.NsrErrHistory {
        types.SetYListKey(issuStats.NsrErrHistory[i], i)
        issuStats.EntityData.Children.Append(types.GetSegmentPath(issuStats.NsrErrHistory[i]), types.YChild{"NsrErrHistory", issuStats.NsrErrHistory[i]})
    }
    issuStats.EntityData.Leafs = types.NewOrderedMap()
    issuStats.EntityData.Leafs.Append("nsr-revision", types.YLeaf{"NsrRevision", issuStats.NsrRevision})
    issuStats.EntityData.Leafs.Append("nsr-fsm-state", types.YLeaf{"NsrFsmState", issuStats.NsrFsmState})
    issuStats.EntityData.Leafs.Append("nsr-version", types.YLeaf{"NsrVersion", issuStats.NsrVersion})
    issuStats.EntityData.Leafs.Append("nsr-node-id", types.YLeaf{"NsrNodeId", issuStats.NsrNodeId})
    issuStats.EntityData.Leafs.Append("nsr-peer-version", types.YLeaf{"NsrPeerVersion", issuStats.NsrPeerVersion})
    issuStats.EntityData.Leafs.Append("nsr-peer-node-id", types.YLeaf{"NsrPeerNodeId", issuStats.NsrPeerNodeId})
    issuStats.EntityData.Leafs.Append("nsr-mtu", types.YLeaf{"NsrMtu", issuStats.NsrMtu})
    issuStats.EntityData.Leafs.Append("nsr-nbr-qad-qid", types.YLeaf{"NsrNbrQadQid", issuStats.NsrNbrQadQid})
    issuStats.EntityData.Leafs.Append("nsr-lsa-qad-qid", types.YLeaf{"NsrLsaQadQid", issuStats.NsrLsaQadQid})
    issuStats.EntityData.Leafs.Append("nsr-nbr-qad-mdata-count", types.YLeaf{"NsrNbrQadMdataCount", issuStats.NsrNbrQadMdataCount})
    issuStats.EntityData.Leafs.Append("nsr-lsa-qad-mdata-count", types.YLeaf{"NsrLsaQadMdataCount", issuStats.NsrLsaQadMdataCount})
    issuStats.EntityData.Leafs.Append("nsr-nbr-init-sync-pend-count", types.YLeaf{"NsrNbrInitSyncPendCount", issuStats.NsrNbrInitSyncPendCount})
    issuStats.EntityData.Leafs.Append("nsr-lsa-init-sync-pend-count", types.YLeaf{"NsrLsaInitSyncPendCount", issuStats.NsrLsaInitSyncPendCount})
    issuStats.EntityData.Leafs.Append("nsr-nbr-seq-no", types.YLeaf{"NsrNbrSeqNo", issuStats.NsrNbrSeqNo})
    issuStats.EntityData.Leafs.Append("nsr-intf-seq-no", types.YLeaf{"NsrIntfSeqNo", issuStats.NsrIntfSeqNo})
    issuStats.EntityData.Leafs.Append("nsr-tmr-quant", types.YLeaf{"NsrTmrQuant", issuStats.NsrTmrQuant})
    issuStats.EntityData.Leafs.Append("nsr-conn-to-active-attempts", types.YLeaf{"NsrConnToActiveAttempts", issuStats.NsrConnToActiveAttempts})
    issuStats.EntityData.Leafs.Append("nsr-conn-to-active-fails", types.YLeaf{"NsrConnToActiveFails", issuStats.NsrConnToActiveFails})
    issuStats.EntityData.Leafs.Append("nsr-conn-to-active-opens", types.YLeaf{"NsrConnToActiveOpens", issuStats.NsrConnToActiveOpens})
    issuStats.EntityData.Leafs.Append("nsr-conn-to-active-closes", types.YLeaf{"NsrConnToActiveCloses", issuStats.NsrConnToActiveCloses})
    issuStats.EntityData.Leafs.Append("nsr-conn-to-active-errors", types.YLeaf{"NsrConnToActiveErrors", issuStats.NsrConnToActiveErrors})
    issuStats.EntityData.Leafs.Append("nsr-fsm-flag", types.YLeaf{"NsrFsmFlag", issuStats.NsrFsmFlag})
    issuStats.EntityData.Leafs.Append("nsr-fsm-running-timer", types.YLeaf{"NsrFsmRunningTimer", issuStats.NsrFsmRunningTimer})

    issuStats.EntityData.YListKeys = []string {}

    return &(issuStats.EntityData)
}

// Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats
// NSR thread scheduler stats
type Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Events processed per pulse. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrPulseQuant interface{}

    // Events pending. The type is interface{} with range: 0..4294967295.
    NsrEventsInQ interface{}

    // Events to Router thread. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrEventsTx interface{}

    // Events processed. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrEventsRx interface{}

    // Bad pulses received. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrBadPulsesRx interface{}

    // Good pulses received. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrGoodPulsesRx interface{}

    // Pulses to Router thread. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulsesTx interface{}

    // Pulse send failures. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulseTxFails interface{}

    // nsr pri. The type is slice of
    // Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri.
    NsrPri []*Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri
}

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats) GetEntityData() *types.CommonEntityData {
    nsrThdStats.EntityData.YFilter = nsrThdStats.YFilter
    nsrThdStats.EntityData.YangName = "nsr-thd-stats"
    nsrThdStats.EntityData.BundleName = "cisco_ios_xr"
    nsrThdStats.EntityData.ParentYangName = "issu-stats"
    nsrThdStats.EntityData.SegmentPath = "nsr-thd-stats"
    nsrThdStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/issu-stats/" + nsrThdStats.EntityData.SegmentPath
    nsrThdStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrThdStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrThdStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrThdStats.EntityData.Children = types.NewOrderedMap()
    nsrThdStats.EntityData.Children.Append("nsr-pri", types.YChild{"NsrPri", nil})
    for i := range nsrThdStats.NsrPri {
        types.SetYListKey(nsrThdStats.NsrPri[i], i)
        nsrThdStats.EntityData.Children.Append(types.GetSegmentPath(nsrThdStats.NsrPri[i]), types.YChild{"NsrPri", nsrThdStats.NsrPri[i]})
    }
    nsrThdStats.EntityData.Leafs = types.NewOrderedMap()
    nsrThdStats.EntityData.Leafs.Append("nsr-pulse-quant", types.YLeaf{"NsrPulseQuant", nsrThdStats.NsrPulseQuant})
    nsrThdStats.EntityData.Leafs.Append("nsr-events-in-q", types.YLeaf{"NsrEventsInQ", nsrThdStats.NsrEventsInQ})
    nsrThdStats.EntityData.Leafs.Append("nsr-events-tx", types.YLeaf{"NsrEventsTx", nsrThdStats.NsrEventsTx})
    nsrThdStats.EntityData.Leafs.Append("nsr-events-rx", types.YLeaf{"NsrEventsRx", nsrThdStats.NsrEventsRx})
    nsrThdStats.EntityData.Leafs.Append("nsr-bad-pulses-rx", types.YLeaf{"NsrBadPulsesRx", nsrThdStats.NsrBadPulsesRx})
    nsrThdStats.EntityData.Leafs.Append("nsr-good-pulses-rx", types.YLeaf{"NsrGoodPulsesRx", nsrThdStats.NsrGoodPulsesRx})
    nsrThdStats.EntityData.Leafs.Append("nsr-pulses-tx", types.YLeaf{"NsrPulsesTx", nsrThdStats.NsrPulsesTx})
    nsrThdStats.EntityData.Leafs.Append("nsr-pulse-tx-fails", types.YLeaf{"NsrPulseTxFails", nsrThdStats.NsrPulseTxFails})

    nsrThdStats.EntityData.YListKeys = []string {}

    return &(nsrThdStats.EntityData)
}

// Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri
// nsr pri
type Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Priority Type. The type is OspfNsrSchedPri.
    NsrSchedPri interface{}

    // Priority Queue. The type is interface{} with range: 0..255.
    NsrSchedQuant interface{}

    // Remaining quantum. The type is interface{} with range: 0..255.
    NsrSchedRemainQuant interface{}

    // Events pending. The type is interface{} with range: 0..65535.
    NsrSchedEvsInQ interface{}

    // Max Queued. The type is interface{} with range: 0..65535.
    NsrSchedMaxEvs interface{}

    // Peak queue length. The type is interface{} with range: 0..65535.
    NsrSchedPeakQLen interface{}

    // Events queued. The type is interface{} with range: 0..18446744073709551615.
    NsrSchedEvsQd interface{}

    // Event enqueue fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEnqFails interface{}

    // Events dequeued. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsDeqd interface{}
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri) GetEntityData() *types.CommonEntityData {
    nsrPri.EntityData.YFilter = nsrPri.YFilter
    nsrPri.EntityData.YangName = "nsr-pri"
    nsrPri.EntityData.BundleName = "cisco_ios_xr"
    nsrPri.EntityData.ParentYangName = "nsr-thd-stats"
    nsrPri.EntityData.SegmentPath = "nsr-pri" + types.AddNoKeyToken(nsrPri)
    nsrPri.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/issu-stats/nsr-thd-stats/" + nsrPri.EntityData.SegmentPath
    nsrPri.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPri.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPri.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPri.EntityData.Children = types.NewOrderedMap()
    nsrPri.EntityData.Leafs = types.NewOrderedMap()
    nsrPri.EntityData.Leafs.Append("nsr-sched-pri", types.YLeaf{"NsrSchedPri", nsrPri.NsrSchedPri})
    nsrPri.EntityData.Leafs.Append("nsr-sched-quant", types.YLeaf{"NsrSchedQuant", nsrPri.NsrSchedQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-remain-quant", types.YLeaf{"NsrSchedRemainQuant", nsrPri.NsrSchedRemainQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-in-q", types.YLeaf{"NsrSchedEvsInQ", nsrPri.NsrSchedEvsInQ})
    nsrPri.EntityData.Leafs.Append("nsr-sched-max-evs", types.YLeaf{"NsrSchedMaxEvs", nsrPri.NsrSchedMaxEvs})
    nsrPri.EntityData.Leafs.Append("nsr-sched-peak-q-len", types.YLeaf{"NsrSchedPeakQLen", nsrPri.NsrSchedPeakQLen})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-qd", types.YLeaf{"NsrSchedEvsQd", nsrPri.NsrSchedEvsQd})
    nsrPri.EntityData.Leafs.Append("nsr-sched-enq-fails", types.YLeaf{"NsrSchedEnqFails", nsrPri.NsrSchedEnqFails})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-deqd", types.YLeaf{"NsrSchedEvsDeqd", nsrPri.NsrSchedEvsDeqd})

    nsrPri.EntityData.YListKeys = []string {}

    return &(nsrPri.EntityData)
}

// Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched
// Rtr thread NSR pulse handler stats
type Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Events processed per pulse. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrPulseQuant interface{}

    // Events pending. The type is interface{} with range: 0..4294967295.
    NsrEventsInQ interface{}

    // Events to Router thread. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrEventsTx interface{}

    // Events processed. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrEventsRx interface{}

    // Bad pulses received. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrBadPulsesRx interface{}

    // Good pulses received. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrGoodPulsesRx interface{}

    // Pulses to Router thread. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulsesTx interface{}

    // Pulse send failures. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulseTxFails interface{}

    // nsr pri. The type is slice of
    // Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri.
    NsrPri []*Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri
}

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched) GetEntityData() *types.CommonEntityData {
    nsrRtrThdSched.EntityData.YFilter = nsrRtrThdSched.YFilter
    nsrRtrThdSched.EntityData.YangName = "nsr-rtr-thd-sched"
    nsrRtrThdSched.EntityData.BundleName = "cisco_ios_xr"
    nsrRtrThdSched.EntityData.ParentYangName = "issu-stats"
    nsrRtrThdSched.EntityData.SegmentPath = "nsr-rtr-thd-sched"
    nsrRtrThdSched.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/issu-stats/" + nsrRtrThdSched.EntityData.SegmentPath
    nsrRtrThdSched.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrRtrThdSched.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrRtrThdSched.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrRtrThdSched.EntityData.Children = types.NewOrderedMap()
    nsrRtrThdSched.EntityData.Children.Append("nsr-pri", types.YChild{"NsrPri", nil})
    for i := range nsrRtrThdSched.NsrPri {
        types.SetYListKey(nsrRtrThdSched.NsrPri[i], i)
        nsrRtrThdSched.EntityData.Children.Append(types.GetSegmentPath(nsrRtrThdSched.NsrPri[i]), types.YChild{"NsrPri", nsrRtrThdSched.NsrPri[i]})
    }
    nsrRtrThdSched.EntityData.Leafs = types.NewOrderedMap()
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-pulse-quant", types.YLeaf{"NsrPulseQuant", nsrRtrThdSched.NsrPulseQuant})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-events-in-q", types.YLeaf{"NsrEventsInQ", nsrRtrThdSched.NsrEventsInQ})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-events-tx", types.YLeaf{"NsrEventsTx", nsrRtrThdSched.NsrEventsTx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-events-rx", types.YLeaf{"NsrEventsRx", nsrRtrThdSched.NsrEventsRx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-bad-pulses-rx", types.YLeaf{"NsrBadPulsesRx", nsrRtrThdSched.NsrBadPulsesRx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-good-pulses-rx", types.YLeaf{"NsrGoodPulsesRx", nsrRtrThdSched.NsrGoodPulsesRx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-pulses-tx", types.YLeaf{"NsrPulsesTx", nsrRtrThdSched.NsrPulsesTx})
    nsrRtrThdSched.EntityData.Leafs.Append("nsr-pulse-tx-fails", types.YLeaf{"NsrPulseTxFails", nsrRtrThdSched.NsrPulseTxFails})

    nsrRtrThdSched.EntityData.YListKeys = []string {}

    return &(nsrRtrThdSched.EntityData)
}

// Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri
// nsr pri
type Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Priority Type. The type is OspfNsrSchedPri.
    NsrSchedPri interface{}

    // Priority Queue. The type is interface{} with range: 0..255.
    NsrSchedQuant interface{}

    // Remaining quantum. The type is interface{} with range: 0..255.
    NsrSchedRemainQuant interface{}

    // Events pending. The type is interface{} with range: 0..65535.
    NsrSchedEvsInQ interface{}

    // Max Queued. The type is interface{} with range: 0..65535.
    NsrSchedMaxEvs interface{}

    // Peak queue length. The type is interface{} with range: 0..65535.
    NsrSchedPeakQLen interface{}

    // Events queued. The type is interface{} with range: 0..18446744073709551615.
    NsrSchedEvsQd interface{}

    // Event enqueue fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEnqFails interface{}

    // Events dequeued. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsDeqd interface{}
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri) GetEntityData() *types.CommonEntityData {
    nsrPri.EntityData.YFilter = nsrPri.YFilter
    nsrPri.EntityData.YangName = "nsr-pri"
    nsrPri.EntityData.BundleName = "cisco_ios_xr"
    nsrPri.EntityData.ParentYangName = "nsr-rtr-thd-sched"
    nsrPri.EntityData.SegmentPath = "nsr-pri" + types.AddNoKeyToken(nsrPri)
    nsrPri.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/issu-stats/nsr-rtr-thd-sched/" + nsrPri.EntityData.SegmentPath
    nsrPri.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPri.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPri.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPri.EntityData.Children = types.NewOrderedMap()
    nsrPri.EntityData.Leafs = types.NewOrderedMap()
    nsrPri.EntityData.Leafs.Append("nsr-sched-pri", types.YLeaf{"NsrSchedPri", nsrPri.NsrSchedPri})
    nsrPri.EntityData.Leafs.Append("nsr-sched-quant", types.YLeaf{"NsrSchedQuant", nsrPri.NsrSchedQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-remain-quant", types.YLeaf{"NsrSchedRemainQuant", nsrPri.NsrSchedRemainQuant})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-in-q", types.YLeaf{"NsrSchedEvsInQ", nsrPri.NsrSchedEvsInQ})
    nsrPri.EntityData.Leafs.Append("nsr-sched-max-evs", types.YLeaf{"NsrSchedMaxEvs", nsrPri.NsrSchedMaxEvs})
    nsrPri.EntityData.Leafs.Append("nsr-sched-peak-q-len", types.YLeaf{"NsrSchedPeakQLen", nsrPri.NsrSchedPeakQLen})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-qd", types.YLeaf{"NsrSchedEvsQd", nsrPri.NsrSchedEvsQd})
    nsrPri.EntityData.Leafs.Append("nsr-sched-enq-fails", types.YLeaf{"NsrSchedEnqFails", nsrPri.NsrSchedEnqFails})
    nsrPri.EntityData.Leafs.Append("nsr-sched-evs-deqd", types.YLeaf{"NsrSchedEvsDeqd", nsrPri.NsrSchedEvsDeqd})

    nsrPri.EntityData.YListKeys = []string {}

    return &(nsrPri.EntityData)
}

// Ospfv3_Processes_Process_Statistics_IssuStats_NsrIssuMilestone
// Nsr Issu Milestones
type Ospfv3_Processes_Process_Statistics_IssuStats_NsrIssuMilestone struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Milestone Name. The type is string.
    MilestoneName interface{}

    // Milestone Status. The type is string.
    MilestoneStatus interface{}
}

func (nsrIssuMilestone *Ospfv3_Processes_Process_Statistics_IssuStats_NsrIssuMilestone) GetEntityData() *types.CommonEntityData {
    nsrIssuMilestone.EntityData.YFilter = nsrIssuMilestone.YFilter
    nsrIssuMilestone.EntityData.YangName = "nsr-issu-milestone"
    nsrIssuMilestone.EntityData.BundleName = "cisco_ios_xr"
    nsrIssuMilestone.EntityData.ParentYangName = "issu-stats"
    nsrIssuMilestone.EntityData.SegmentPath = "nsr-issu-milestone" + types.AddNoKeyToken(nsrIssuMilestone)
    nsrIssuMilestone.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/issu-stats/" + nsrIssuMilestone.EntityData.SegmentPath
    nsrIssuMilestone.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrIssuMilestone.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrIssuMilestone.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrIssuMilestone.EntityData.Children = types.NewOrderedMap()
    nsrIssuMilestone.EntityData.Leafs = types.NewOrderedMap()
    nsrIssuMilestone.EntityData.Leafs.Append("milestone-name", types.YLeaf{"MilestoneName", nsrIssuMilestone.MilestoneName})
    nsrIssuMilestone.EntityData.Leafs.Append("milestone-status", types.YLeaf{"MilestoneStatus", nsrIssuMilestone.MilestoneStatus})

    nsrIssuMilestone.EntityData.YListKeys = []string {}

    return &(nsrIssuMilestone.EntityData)
}

// Ospfv3_Processes_Process_Statistics_IssuStats_NsrErrHistory
// Nsr Error History List
type Ospfv3_Processes_Process_Statistics_IssuStats_NsrErrHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Nsr Revision version. The type is interface{} with range: 0..4294967295.
    NsrRevisionversion interface{}

    // Total errors for this nsr revision version. The type is interface{} with
    // range: -2147483648..2147483647.
    TotalErrors interface{}

    // List of erros. The type is slice of
    // Ospfv3_Processes_Process_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo.
    NsrErrorInfo []*Ospfv3_Processes_Process_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo
}

func (nsrErrHistory *Ospfv3_Processes_Process_Statistics_IssuStats_NsrErrHistory) GetEntityData() *types.CommonEntityData {
    nsrErrHistory.EntityData.YFilter = nsrErrHistory.YFilter
    nsrErrHistory.EntityData.YangName = "nsr-err-history"
    nsrErrHistory.EntityData.BundleName = "cisco_ios_xr"
    nsrErrHistory.EntityData.ParentYangName = "issu-stats"
    nsrErrHistory.EntityData.SegmentPath = "nsr-err-history" + types.AddNoKeyToken(nsrErrHistory)
    nsrErrHistory.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/issu-stats/" + nsrErrHistory.EntityData.SegmentPath
    nsrErrHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrErrHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrErrHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrErrHistory.EntityData.Children = types.NewOrderedMap()
    nsrErrHistory.EntityData.Children.Append("nsr-error-info", types.YChild{"NsrErrorInfo", nil})
    for i := range nsrErrHistory.NsrErrorInfo {
        types.SetYListKey(nsrErrHistory.NsrErrorInfo[i], i)
        nsrErrHistory.EntityData.Children.Append(types.GetSegmentPath(nsrErrHistory.NsrErrorInfo[i]), types.YChild{"NsrErrorInfo", nsrErrHistory.NsrErrorInfo[i]})
    }
    nsrErrHistory.EntityData.Leafs = types.NewOrderedMap()
    nsrErrHistory.EntityData.Leafs.Append("nsr-revisionversion", types.YLeaf{"NsrRevisionversion", nsrErrHistory.NsrRevisionversion})
    nsrErrHistory.EntityData.Leafs.Append("total-errors", types.YLeaf{"TotalErrors", nsrErrHistory.TotalErrors})

    nsrErrHistory.EntityData.YListKeys = []string {}

    return &(nsrErrHistory.EntityData)
}

// Ospfv3_Processes_Process_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo
// List of erros
type Ospfv3_Processes_Process_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Count this error hit during the Nsr Revision. The type is interface{} with
    // range: -2147483648..2147483647.
    ErrCount interface{}

    // Error Information. The type is string.
    ErrInfoString interface{}

    // Time this error was last hit.
    LastErrTime Ospfv3_Processes_Process_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo_LastErrTime
}

func (nsrErrorInfo *Ospfv3_Processes_Process_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo) GetEntityData() *types.CommonEntityData {
    nsrErrorInfo.EntityData.YFilter = nsrErrorInfo.YFilter
    nsrErrorInfo.EntityData.YangName = "nsr-error-info"
    nsrErrorInfo.EntityData.BundleName = "cisco_ios_xr"
    nsrErrorInfo.EntityData.ParentYangName = "nsr-err-history"
    nsrErrorInfo.EntityData.SegmentPath = "nsr-error-info" + types.AddNoKeyToken(nsrErrorInfo)
    nsrErrorInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/issu-stats/nsr-err-history/" + nsrErrorInfo.EntityData.SegmentPath
    nsrErrorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrErrorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrErrorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrErrorInfo.EntityData.Children = types.NewOrderedMap()
    nsrErrorInfo.EntityData.Children.Append("last-err-time", types.YChild{"LastErrTime", &nsrErrorInfo.LastErrTime})
    nsrErrorInfo.EntityData.Leafs = types.NewOrderedMap()
    nsrErrorInfo.EntityData.Leafs.Append("err-count", types.YLeaf{"ErrCount", nsrErrorInfo.ErrCount})
    nsrErrorInfo.EntityData.Leafs.Append("err-info-string", types.YLeaf{"ErrInfoString", nsrErrorInfo.ErrInfoString})

    nsrErrorInfo.EntityData.YListKeys = []string {}

    return &(nsrErrorInfo.EntityData)
}

// Ospfv3_Processes_Process_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo_LastErrTime
// Time this error was last hit
type Ospfv3_Processes_Process_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo_LastErrTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (lastErrTime *Ospfv3_Processes_Process_Statistics_IssuStats_NsrErrHistory_NsrErrorInfo_LastErrTime) GetEntityData() *types.CommonEntityData {
    lastErrTime.EntityData.YFilter = lastErrTime.YFilter
    lastErrTime.EntityData.YangName = "last-err-time"
    lastErrTime.EntityData.BundleName = "cisco_ios_xr"
    lastErrTime.EntityData.ParentYangName = "nsr-error-info"
    lastErrTime.EntityData.SegmentPath = "last-err-time"
    lastErrTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/issu-stats/nsr-err-history/nsr-error-info/" + lastErrTime.EntityData.SegmentPath
    lastErrTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastErrTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastErrTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastErrTime.EntityData.Children = types.NewOrderedMap()
    lastErrTime.EntityData.Leafs = types.NewOrderedMap()
    lastErrTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", lastErrTime.Second})
    lastErrTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", lastErrTime.Nanosecond})

    lastErrTime.EntityData.YListKeys = []string {}

    return &(lastErrTime.EntityData)
}

// Ospfv3_Processes_Process_Statistics_NsrPlStats
// OSPF NSR packet library statistics
type Ospfv3_Processes_Process_Statistics_NsrPlStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ncd pri. The type is slice of
    // Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri.
    NcdPri []*Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri
}

func (nsrPlStats *Ospfv3_Processes_Process_Statistics_NsrPlStats) GetEntityData() *types.CommonEntityData {
    nsrPlStats.EntityData.YFilter = nsrPlStats.YFilter
    nsrPlStats.EntityData.YangName = "nsr-pl-stats"
    nsrPlStats.EntityData.BundleName = "cisco_ios_xr"
    nsrPlStats.EntityData.ParentYangName = "statistics"
    nsrPlStats.EntityData.SegmentPath = "nsr-pl-stats"
    nsrPlStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/" + nsrPlStats.EntityData.SegmentPath
    nsrPlStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPlStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPlStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPlStats.EntityData.Children = types.NewOrderedMap()
    nsrPlStats.EntityData.Children.Append("ncd-pri", types.YChild{"NcdPri", nil})
    for i := range nsrPlStats.NcdPri {
        types.SetYListKey(nsrPlStats.NcdPri[i], i)
        nsrPlStats.EntityData.Children.Append(types.GetSegmentPath(nsrPlStats.NcdPri[i]), types.YChild{"NcdPri", nsrPlStats.NcdPri[i]})
    }
    nsrPlStats.EntityData.Leafs = types.NewOrderedMap()

    nsrPlStats.EntityData.YListKeys = []string {}

    return &(nsrPlStats.EntityData)
}

// Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri
// ncd pri
type Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Total sent. The type is slice of interface{} with range:
    // 0..18446744073709551615.
    NumSent []interface{}

    // Total recvd. The type is slice of interface{} with range:
    // 0..18446744073709551615.
    NumRecv []interface{}

    // Sent Error/drops. The type is slice of
    // Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop.
    NumSentDrop []*Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop

    // Recv Errors/drops. The type is slice of
    // Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop.
    NumRecvDrop []*Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop
}

func (ncdPri *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri) GetEntityData() *types.CommonEntityData {
    ncdPri.EntityData.YFilter = ncdPri.YFilter
    ncdPri.EntityData.YangName = "ncd-pri"
    ncdPri.EntityData.BundleName = "cisco_ios_xr"
    ncdPri.EntityData.ParentYangName = "nsr-pl-stats"
    ncdPri.EntityData.SegmentPath = "ncd-pri" + types.AddNoKeyToken(ncdPri)
    ncdPri.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/nsr-pl-stats/" + ncdPri.EntityData.SegmentPath
    ncdPri.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ncdPri.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ncdPri.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ncdPri.EntityData.Children = types.NewOrderedMap()
    ncdPri.EntityData.Children.Append("num-sent-drop", types.YChild{"NumSentDrop", nil})
    for i := range ncdPri.NumSentDrop {
        types.SetYListKey(ncdPri.NumSentDrop[i], i)
        ncdPri.EntityData.Children.Append(types.GetSegmentPath(ncdPri.NumSentDrop[i]), types.YChild{"NumSentDrop", ncdPri.NumSentDrop[i]})
    }
    ncdPri.EntityData.Children.Append("num-recv-drop", types.YChild{"NumRecvDrop", nil})
    for i := range ncdPri.NumRecvDrop {
        types.SetYListKey(ncdPri.NumRecvDrop[i], i)
        ncdPri.EntityData.Children.Append(types.GetSegmentPath(ncdPri.NumRecvDrop[i]), types.YChild{"NumRecvDrop", ncdPri.NumRecvDrop[i]})
    }
    ncdPri.EntityData.Leafs = types.NewOrderedMap()
    ncdPri.EntityData.Leafs.Append("num-sent", types.YLeaf{"NumSent", ncdPri.NumSent})
    ncdPri.EntityData.Leafs.Append("num-recv", types.YLeaf{"NumRecv", ncdPri.NumRecv})

    ncdPri.EntityData.YListKeys = []string {}

    return &(ncdPri.EntityData)
}

// Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop
// Sent Error/drops
type Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // nsr pl send drop array. The type is slice of interface{} with range:
    // 0..4294967295.
    NsrPlSendDropArray []interface{}
}

func (numSentDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop) GetEntityData() *types.CommonEntityData {
    numSentDrop.EntityData.YFilter = numSentDrop.YFilter
    numSentDrop.EntityData.YangName = "num-sent-drop"
    numSentDrop.EntityData.BundleName = "cisco_ios_xr"
    numSentDrop.EntityData.ParentYangName = "ncd-pri"
    numSentDrop.EntityData.SegmentPath = "num-sent-drop" + types.AddNoKeyToken(numSentDrop)
    numSentDrop.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/nsr-pl-stats/ncd-pri/" + numSentDrop.EntityData.SegmentPath
    numSentDrop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    numSentDrop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    numSentDrop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    numSentDrop.EntityData.Children = types.NewOrderedMap()
    numSentDrop.EntityData.Leafs = types.NewOrderedMap()
    numSentDrop.EntityData.Leafs.Append("nsr-pl-send-drop-array", types.YLeaf{"NsrPlSendDropArray", numSentDrop.NsrPlSendDropArray})

    numSentDrop.EntityData.YListKeys = []string {}

    return &(numSentDrop.EntityData)
}

// Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop
// Recv Errors/drops
type Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // nsr pl recv drop array. The type is slice of interface{} with range:
    // 0..4294967295.
    NsrPlRecvDropArray []interface{}
}

func (numRecvDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop) GetEntityData() *types.CommonEntityData {
    numRecvDrop.EntityData.YFilter = numRecvDrop.YFilter
    numRecvDrop.EntityData.YangName = "num-recv-drop"
    numRecvDrop.EntityData.BundleName = "cisco_ios_xr"
    numRecvDrop.EntityData.ParentYangName = "ncd-pri"
    numRecvDrop.EntityData.SegmentPath = "num-recv-drop" + types.AddNoKeyToken(numRecvDrop)
    numRecvDrop.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/nsr-pl-stats/ncd-pri/" + numRecvDrop.EntityData.SegmentPath
    numRecvDrop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    numRecvDrop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    numRecvDrop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    numRecvDrop.EntityData.Children = types.NewOrderedMap()
    numRecvDrop.EntityData.Leafs = types.NewOrderedMap()
    numRecvDrop.EntityData.Leafs.Append("nsr-pl-recv-drop-array", types.YLeaf{"NsrPlRecvDropArray", numRecvDrop.NsrPlRecvDropArray})

    numRecvDrop.EntityData.YListKeys = []string {}

    return &(numRecvDrop.EntityData)
}

// Ospfv3_Processes_Process_Statistics_ProtocolStats
// Protocol table
type Ospfv3_Processes_Process_Statistics_ProtocolStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol statistics for an interface. The type is slice of
    // Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat.
    ProtocolStat []*Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat
}

func (protocolStats *Ospfv3_Processes_Process_Statistics_ProtocolStats) GetEntityData() *types.CommonEntityData {
    protocolStats.EntityData.YFilter = protocolStats.YFilter
    protocolStats.EntityData.YangName = "protocol-stats"
    protocolStats.EntityData.BundleName = "cisco_ios_xr"
    protocolStats.EntityData.ParentYangName = "statistics"
    protocolStats.EntityData.SegmentPath = "protocol-stats"
    protocolStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/" + protocolStats.EntityData.SegmentPath
    protocolStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolStats.EntityData.Children = types.NewOrderedMap()
    protocolStats.EntityData.Children.Append("protocol-stat", types.YChild{"ProtocolStat", nil})
    for i := range protocolStats.ProtocolStat {
        protocolStats.EntityData.Children.Append(types.GetSegmentPath(protocolStats.ProtocolStat[i]), types.YChild{"ProtocolStat", protocolStats.ProtocolStat[i]})
    }
    protocolStats.EntityData.Leafs = types.NewOrderedMap()

    protocolStats.EntityData.YListKeys = []string {}

    return &(protocolStats.EntityData)
}

// Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat
// Protocol statistics for an interface
type Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Total inputs packets. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalInPackets interface{}

    // Hello packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloInPackets interface{}

    // Database Description Packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesInPackets interface{}

    // Database Description LSAs in. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesInLsAs interface{}

    // LSA Requests in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqInPackets interface{}

    // LS Requests in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqInLsAs interface{}

    // LS Updates Packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdInPackets interface{}

    // LS Updates ignored. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdInIgnored interface{}

    // LS Updates LSAs in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdInLsAs interface{}

    // LS Acks Packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckInPackets interface{}

    // LS Ack LSAs in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckInLsAs interface{}

    // Total Out Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalOutPackets interface{}

    // Hello Out Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloOutPackets interface{}

    // Database Description Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesOutPackets interface{}

    // Database Description LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesOutLsAs interface{}

    // LS Request Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqOutPackets interface{}

    // LS Reuqests LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqOutLsAs interface{}

    // LS Update Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdOutPackets interface{}

    // LS Update LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdOutLsAs interface{}

    // LS Ack Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckOutPackets interface{}

    // LS Ack LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckOutLsAs interface{}

    // Dropped in GS. The type is interface{} with range: 0..18446744073709551615.
    DroppedInGs interface{}

    // Checksum Errors. The type is interface{} with range:
    // 0..18446744073709551615.
    ChecksumErr interface{}
}

func (protocolStat *Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat) GetEntityData() *types.CommonEntityData {
    protocolStat.EntityData.YFilter = protocolStat.YFilter
    protocolStat.EntityData.YangName = "protocol-stat"
    protocolStat.EntityData.BundleName = "cisco_ios_xr"
    protocolStat.EntityData.ParentYangName = "protocol-stats"
    protocolStat.EntityData.SegmentPath = "protocol-stat" + types.AddKeyToken(protocolStat.InterfaceName, "interface-name")
    protocolStat.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/protocol-stats/" + protocolStat.EntityData.SegmentPath
    protocolStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolStat.EntityData.Children = types.NewOrderedMap()
    protocolStat.EntityData.Leafs = types.NewOrderedMap()
    protocolStat.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", protocolStat.InterfaceName})
    protocolStat.EntityData.Leafs.Append("total-in-packets", types.YLeaf{"TotalInPackets", protocolStat.TotalInPackets})
    protocolStat.EntityData.Leafs.Append("hello-in-packets", types.YLeaf{"HelloInPackets", protocolStat.HelloInPackets})
    protocolStat.EntityData.Leafs.Append("dbdes-in-packets", types.YLeaf{"DbdesInPackets", protocolStat.DbdesInPackets})
    protocolStat.EntityData.Leafs.Append("dbdes-in-ls-as", types.YLeaf{"DbdesInLsAs", protocolStat.DbdesInLsAs})
    protocolStat.EntityData.Leafs.Append("ls-req-in-packets", types.YLeaf{"LsReqInPackets", protocolStat.LsReqInPackets})
    protocolStat.EntityData.Leafs.Append("ls-req-in-ls-as", types.YLeaf{"LsReqInLsAs", protocolStat.LsReqInLsAs})
    protocolStat.EntityData.Leafs.Append("ls-upd-in-packets", types.YLeaf{"LsUpdInPackets", protocolStat.LsUpdInPackets})
    protocolStat.EntityData.Leafs.Append("ls-upd-in-ignored", types.YLeaf{"LsUpdInIgnored", protocolStat.LsUpdInIgnored})
    protocolStat.EntityData.Leafs.Append("ls-upd-in-ls-as", types.YLeaf{"LsUpdInLsAs", protocolStat.LsUpdInLsAs})
    protocolStat.EntityData.Leafs.Append("ls-ack-in-packets", types.YLeaf{"LsAckInPackets", protocolStat.LsAckInPackets})
    protocolStat.EntityData.Leafs.Append("ls-ack-in-ls-as", types.YLeaf{"LsAckInLsAs", protocolStat.LsAckInLsAs})
    protocolStat.EntityData.Leafs.Append("total-out-packets", types.YLeaf{"TotalOutPackets", protocolStat.TotalOutPackets})
    protocolStat.EntityData.Leafs.Append("hello-out-packets", types.YLeaf{"HelloOutPackets", protocolStat.HelloOutPackets})
    protocolStat.EntityData.Leafs.Append("dbdes-out-packets", types.YLeaf{"DbdesOutPackets", protocolStat.DbdesOutPackets})
    protocolStat.EntityData.Leafs.Append("dbdes-out-ls-as", types.YLeaf{"DbdesOutLsAs", protocolStat.DbdesOutLsAs})
    protocolStat.EntityData.Leafs.Append("ls-req-out-packets", types.YLeaf{"LsReqOutPackets", protocolStat.LsReqOutPackets})
    protocolStat.EntityData.Leafs.Append("ls-req-out-ls-as", types.YLeaf{"LsReqOutLsAs", protocolStat.LsReqOutLsAs})
    protocolStat.EntityData.Leafs.Append("ls-upd-out-packets", types.YLeaf{"LsUpdOutPackets", protocolStat.LsUpdOutPackets})
    protocolStat.EntityData.Leafs.Append("ls-upd-out-ls-as", types.YLeaf{"LsUpdOutLsAs", protocolStat.LsUpdOutLsAs})
    protocolStat.EntityData.Leafs.Append("ls-ack-out-packets", types.YLeaf{"LsAckOutPackets", protocolStat.LsAckOutPackets})
    protocolStat.EntityData.Leafs.Append("ls-ack-out-ls-as", types.YLeaf{"LsAckOutLsAs", protocolStat.LsAckOutLsAs})
    protocolStat.EntityData.Leafs.Append("dropped-in-gs", types.YLeaf{"DroppedInGs", protocolStat.DroppedInGs})
    protocolStat.EntityData.Leafs.Append("checksum-err", types.YLeaf{"ChecksumErr", protocolStat.ChecksumErr})

    protocolStat.EntityData.YListKeys = []string {"InterfaceName"}

    return &(protocolStat.EntityData)
}

// Ospfv3_Processes_Process_Statistics_SpfStats
// OSPFv3 RIB batch statistics
type Ospfv3_Processes_Process_Statistics_SpfStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SPF statistics header.
    SpfHeader Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader

    // List of SPF run-time statistics. The type is slice of
    // Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime.
    SpfRuntime []*Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime
}

func (spfStats *Ospfv3_Processes_Process_Statistics_SpfStats) GetEntityData() *types.CommonEntityData {
    spfStats.EntityData.YFilter = spfStats.YFilter
    spfStats.EntityData.YangName = "spf-stats"
    spfStats.EntityData.BundleName = "cisco_ios_xr"
    spfStats.EntityData.ParentYangName = "statistics"
    spfStats.EntityData.SegmentPath = "spf-stats"
    spfStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/" + spfStats.EntityData.SegmentPath
    spfStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfStats.EntityData.Children = types.NewOrderedMap()
    spfStats.EntityData.Children.Append("spf-header", types.YChild{"SpfHeader", &spfStats.SpfHeader})
    spfStats.EntityData.Children.Append("spf-runtime", types.YChild{"SpfRuntime", nil})
    for i := range spfStats.SpfRuntime {
        types.SetYListKey(spfStats.SpfRuntime[i], i)
        spfStats.EntityData.Children.Append(types.GetSegmentPath(spfStats.SpfRuntime[i]), types.YChild{"SpfRuntime", spfStats.SpfRuntime[i]})
    }
    spfStats.EntityData.Leafs = types.NewOrderedMap()

    spfStats.EntityData.YListKeys = []string {}

    return &(spfStats.EntityData)
}

// Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader
// SPF statistics header
type Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderRouterId interface{}

    // Number of SPF calculations. The type is interface{} with range:
    // 0..4294967295.
    HeaderSpFs interface{}

    // List of Areas with SPF statistics. The type is slice of
    // Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary.
    AreaSummary []*Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary
}

func (spfHeader *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader) GetEntityData() *types.CommonEntityData {
    spfHeader.EntityData.YFilter = spfHeader.YFilter
    spfHeader.EntityData.YangName = "spf-header"
    spfHeader.EntityData.BundleName = "cisco_ios_xr"
    spfHeader.EntityData.ParentYangName = "spf-stats"
    spfHeader.EntityData.SegmentPath = "spf-header"
    spfHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/spf-stats/" + spfHeader.EntityData.SegmentPath
    spfHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfHeader.EntityData.Children = types.NewOrderedMap()
    spfHeader.EntityData.Children.Append("area-summary", types.YChild{"AreaSummary", nil})
    for i := range spfHeader.AreaSummary {
        types.SetYListKey(spfHeader.AreaSummary[i], i)
        spfHeader.EntityData.Children.Append(types.GetSegmentPath(spfHeader.AreaSummary[i]), types.YChild{"AreaSummary", spfHeader.AreaSummary[i]})
    }
    spfHeader.EntityData.Leafs = types.NewOrderedMap()
    spfHeader.EntityData.Leafs.Append("header-router-id", types.YLeaf{"HeaderRouterId", spfHeader.HeaderRouterId})
    spfHeader.EntityData.Leafs.Append("header-sp-fs", types.YLeaf{"HeaderSpFs", spfHeader.HeaderSpFs})

    spfHeader.EntityData.YListKeys = []string {}

    return &(spfHeader.EntityData)
}

// Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary
// List of Areas with SPF statistics
type Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID of the area SPF statistics. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // Number of SPF calculations. The type is interface{} with range:
    // 0..4294967295.
    SpFs interface{}
}

func (areaSummary *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary) GetEntityData() *types.CommonEntityData {
    areaSummary.EntityData.YFilter = areaSummary.YFilter
    areaSummary.EntityData.YangName = "area-summary"
    areaSummary.EntityData.BundleName = "cisco_ios_xr"
    areaSummary.EntityData.ParentYangName = "spf-header"
    areaSummary.EntityData.SegmentPath = "area-summary" + types.AddNoKeyToken(areaSummary)
    areaSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/spf-stats/spf-header/" + areaSummary.EntityData.SegmentPath
    areaSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaSummary.EntityData.Children = types.NewOrderedMap()
    areaSummary.EntityData.Leafs = types.NewOrderedMap()
    areaSummary.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", areaSummary.AreaId})
    areaSummary.EntityData.Leafs.Append("sp-fs", types.YLeaf{"SpFs", areaSummary.SpFs})

    areaSummary.EntityData.YListKeys = []string {}

    return &(areaSummary.EntityData)
}

// Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime
// List of SPF run-time statistics
type Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // SPF calculation start time. The type is interface{} with range:
    // 0..4294967295.
    StartTime interface{}

    // Number of routes added to RIB. The type is interface{} with range:
    // 0..4294967295.
    RibAddRoutes interface{}

    // Number of routes deleted from RIB. The type is interface{} with range:
    // 0..4294967295.
    RibDeleteRoutes interface{}

    // Reasons for triggering an SPF calculation Bit 1 - Router LSA update Bit 2 -
    // Network LSA update Bit 3 - Inter-Area Prefix LSA update Bit 4 - Inter-Area
    // Router LSA update Bit 5 - AS External LSA update Bit 6 - MOSPF LSA update
    // Bit 7 - Type 7 AS External LSA update Bit 8 - Link LSA update Bit 9 -
    // Prefix LSA update. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ReasonFlags interface{}

    // Number of LSA changes triggering an SPF calculation. The type is
    // interface{} with range: -32768..32767.
    LsaChanges interface{}

    // Global SPF times.
    GlobalTime Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime

    // List of LSAs triggering the SPF calculation. The type is slice of
    // Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa.
    Lsa []*Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa

    // List of per-area SPF statistics. The type is slice of
    // Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat.
    AreaStat []*Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat
}

func (spfRuntime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime) GetEntityData() *types.CommonEntityData {
    spfRuntime.EntityData.YFilter = spfRuntime.YFilter
    spfRuntime.EntityData.YangName = "spf-runtime"
    spfRuntime.EntityData.BundleName = "cisco_ios_xr"
    spfRuntime.EntityData.ParentYangName = "spf-stats"
    spfRuntime.EntityData.SegmentPath = "spf-runtime" + types.AddNoKeyToken(spfRuntime)
    spfRuntime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/spf-stats/" + spfRuntime.EntityData.SegmentPath
    spfRuntime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfRuntime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfRuntime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfRuntime.EntityData.Children = types.NewOrderedMap()
    spfRuntime.EntityData.Children.Append("global-time", types.YChild{"GlobalTime", &spfRuntime.GlobalTime})
    spfRuntime.EntityData.Children.Append("lsa", types.YChild{"Lsa", nil})
    for i := range spfRuntime.Lsa {
        types.SetYListKey(spfRuntime.Lsa[i], i)
        spfRuntime.EntityData.Children.Append(types.GetSegmentPath(spfRuntime.Lsa[i]), types.YChild{"Lsa", spfRuntime.Lsa[i]})
    }
    spfRuntime.EntityData.Children.Append("area-stat", types.YChild{"AreaStat", nil})
    for i := range spfRuntime.AreaStat {
        types.SetYListKey(spfRuntime.AreaStat[i], i)
        spfRuntime.EntityData.Children.Append(types.GetSegmentPath(spfRuntime.AreaStat[i]), types.YChild{"AreaStat", spfRuntime.AreaStat[i]})
    }
    spfRuntime.EntityData.Leafs = types.NewOrderedMap()
    spfRuntime.EntityData.Leafs.Append("start-time", types.YLeaf{"StartTime", spfRuntime.StartTime})
    spfRuntime.EntityData.Leafs.Append("rib-add-routes", types.YLeaf{"RibAddRoutes", spfRuntime.RibAddRoutes})
    spfRuntime.EntityData.Leafs.Append("rib-delete-routes", types.YLeaf{"RibDeleteRoutes", spfRuntime.RibDeleteRoutes})
    spfRuntime.EntityData.Leafs.Append("reason-flags", types.YLeaf{"ReasonFlags", spfRuntime.ReasonFlags})
    spfRuntime.EntityData.Leafs.Append("lsa-changes", types.YLeaf{"LsaChanges", spfRuntime.LsaChanges})

    spfRuntime.EntityData.YListKeys = []string {}

    return &(spfRuntime.EntityData)
}

// Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime
// Global SPF times
type Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Dijkstra time in msec. The type is interface{} with range: 0..4294967295.
    Dijkstra interface{}

    // Intra-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefixDel interface{}

    // Inter-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefixDel interface{}

    // External prefix processing time in msec. The type is interface{} with
    // range: 0..4294967295.
    ExternalPrefix interface{}

    // External prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    ExternalPrefixDel interface{}

    // RIB add processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibAdd interface{}

    // RIB deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibDel interface{}
}

func (globalTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime) GetEntityData() *types.CommonEntityData {
    globalTime.EntityData.YFilter = globalTime.YFilter
    globalTime.EntityData.YangName = "global-time"
    globalTime.EntityData.BundleName = "cisco_ios_xr"
    globalTime.EntityData.ParentYangName = "spf-runtime"
    globalTime.EntityData.SegmentPath = "global-time"
    globalTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/spf-stats/spf-runtime/" + globalTime.EntityData.SegmentPath
    globalTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalTime.EntityData.Children = types.NewOrderedMap()
    globalTime.EntityData.Leafs = types.NewOrderedMap()
    globalTime.EntityData.Leafs.Append("dijkstra", types.YLeaf{"Dijkstra", globalTime.Dijkstra})
    globalTime.EntityData.Leafs.Append("intra-prefix", types.YLeaf{"IntraPrefix", globalTime.IntraPrefix})
    globalTime.EntityData.Leafs.Append("intra-prefix-del", types.YLeaf{"IntraPrefixDel", globalTime.IntraPrefixDel})
    globalTime.EntityData.Leafs.Append("inter-prefix", types.YLeaf{"InterPrefix", globalTime.InterPrefix})
    globalTime.EntityData.Leafs.Append("inter-prefix-del", types.YLeaf{"InterPrefixDel", globalTime.InterPrefixDel})
    globalTime.EntityData.Leafs.Append("external-prefix", types.YLeaf{"ExternalPrefix", globalTime.ExternalPrefix})
    globalTime.EntityData.Leafs.Append("external-prefix-del", types.YLeaf{"ExternalPrefixDel", globalTime.ExternalPrefixDel})
    globalTime.EntityData.Leafs.Append("rib-add", types.YLeaf{"RibAdd", globalTime.RibAdd})
    globalTime.EntityData.Leafs.Append("rib-del", types.YLeaf{"RibDel", globalTime.RibDel})

    globalTime.EntityData.YListKeys = []string {}

    return &(globalTime.EntityData)
}

// Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa
// List of LSAs triggering the SPF calculation
type Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID. The type is interface{} with range: 0..4294967295.
    LsaAreaId interface{}

    // Advertising router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaAdvertisingRouter interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // LSA type. The type is interface{} with range: 0..255.
    LsaType interface{}

    // If true, the LSA change is a flush. The type is bool.
    LsaFlush interface{}
}

func (lsa *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa) GetEntityData() *types.CommonEntityData {
    lsa.EntityData.YFilter = lsa.YFilter
    lsa.EntityData.YangName = "lsa"
    lsa.EntityData.BundleName = "cisco_ios_xr"
    lsa.EntityData.ParentYangName = "spf-runtime"
    lsa.EntityData.SegmentPath = "lsa" + types.AddNoKeyToken(lsa)
    lsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/spf-stats/spf-runtime/" + lsa.EntityData.SegmentPath
    lsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsa.EntityData.Children = types.NewOrderedMap()
    lsa.EntityData.Leafs = types.NewOrderedMap()
    lsa.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsa.LsaAreaId})
    lsa.EntityData.Leafs.Append("lsa-advertising-router", types.YLeaf{"LsaAdvertisingRouter", lsa.LsaAdvertisingRouter})
    lsa.EntityData.Leafs.Append("lsa-id", types.YLeaf{"LsaId", lsa.LsaId})
    lsa.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsa.LsaType})
    lsa.EntityData.Leafs.Append("lsa-flush", types.YLeaf{"LsaFlush", lsa.LsaFlush})

    lsa.EntityData.YListKeys = []string {}

    return &(lsa.EntityData)
}

// Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat
// List of per-area SPF statistics
type Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID for area of these SPF statistics. The type is interface{} with
    // range: 0..4294967295.
    SpfStatAreaId interface{}

    // Counts of LSA types triggering an SPF calculation. The type is slice of
    // interface{} with range: 0..4294967295.
    SpfStatLsaTypeCount []interface{}

    // SPF time calculations.
    SpfStatTime Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime
}

func (areaStat *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat) GetEntityData() *types.CommonEntityData {
    areaStat.EntityData.YFilter = areaStat.YFilter
    areaStat.EntityData.YangName = "area-stat"
    areaStat.EntityData.BundleName = "cisco_ios_xr"
    areaStat.EntityData.ParentYangName = "spf-runtime"
    areaStat.EntityData.SegmentPath = "area-stat" + types.AddNoKeyToken(areaStat)
    areaStat.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/spf-stats/spf-runtime/" + areaStat.EntityData.SegmentPath
    areaStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaStat.EntityData.Children = types.NewOrderedMap()
    areaStat.EntityData.Children.Append("spf-stat-time", types.YChild{"SpfStatTime", &areaStat.SpfStatTime})
    areaStat.EntityData.Leafs = types.NewOrderedMap()
    areaStat.EntityData.Leafs.Append("spf-stat-area-id", types.YLeaf{"SpfStatAreaId", areaStat.SpfStatAreaId})
    areaStat.EntityData.Leafs.Append("spf-stat-lsa-type-count", types.YLeaf{"SpfStatLsaTypeCount", areaStat.SpfStatLsaTypeCount})

    areaStat.EntityData.YListKeys = []string {}

    return &(areaStat.EntityData)
}

// Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime
// SPF time calculations
type Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Dijkstra time in msec. The type is interface{} with range: 0..4294967295.
    Dijkstra interface{}

    // Intra-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefixDel interface{}

    // Inter-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefixDel interface{}

    // External prefix processing time in msec. The type is interface{} with
    // range: 0..4294967295.
    ExternalPrefix interface{}

    // External prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    ExternalPrefixDel interface{}

    // RIB add processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibAdd interface{}

    // RIB deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibDel interface{}
}

func (spfStatTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetEntityData() *types.CommonEntityData {
    spfStatTime.EntityData.YFilter = spfStatTime.YFilter
    spfStatTime.EntityData.YangName = "spf-stat-time"
    spfStatTime.EntityData.BundleName = "cisco_ios_xr"
    spfStatTime.EntityData.ParentYangName = "area-stat"
    spfStatTime.EntityData.SegmentPath = "spf-stat-time"
    spfStatTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/spf-stats/spf-runtime/area-stat/" + spfStatTime.EntityData.SegmentPath
    spfStatTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfStatTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfStatTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfStatTime.EntityData.Children = types.NewOrderedMap()
    spfStatTime.EntityData.Leafs = types.NewOrderedMap()
    spfStatTime.EntityData.Leafs.Append("dijkstra", types.YLeaf{"Dijkstra", spfStatTime.Dijkstra})
    spfStatTime.EntityData.Leafs.Append("intra-prefix", types.YLeaf{"IntraPrefix", spfStatTime.IntraPrefix})
    spfStatTime.EntityData.Leafs.Append("intra-prefix-del", types.YLeaf{"IntraPrefixDel", spfStatTime.IntraPrefixDel})
    spfStatTime.EntityData.Leafs.Append("inter-prefix", types.YLeaf{"InterPrefix", spfStatTime.InterPrefix})
    spfStatTime.EntityData.Leafs.Append("inter-prefix-del", types.YLeaf{"InterPrefixDel", spfStatTime.InterPrefixDel})
    spfStatTime.EntityData.Leafs.Append("external-prefix", types.YLeaf{"ExternalPrefix", spfStatTime.ExternalPrefix})
    spfStatTime.EntityData.Leafs.Append("external-prefix-del", types.YLeaf{"ExternalPrefixDel", spfStatTime.ExternalPrefixDel})
    spfStatTime.EntityData.Leafs.Append("rib-add", types.YLeaf{"RibAdd", spfStatTime.RibAdd})
    spfStatTime.EntityData.Leafs.Append("rib-del", types.YLeaf{"RibDel", spfStatTime.RibDel})

    spfStatTime.EntityData.YListKeys = []string {}

    return &(spfStatTime.EntityData)
}

// Ospfv3_Processes_Process_Statistics_RawioStats
// OSPF Prefix SPF Prioritization statistics
type Ospfv3_Processes_Process_Statistics_RawioStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Raw Connections Open. The type is interface{} with range:
    // 0..18446744073709551615.
    RawConnOpen interface{}

    // Raw Connections Close. The type is interface{} with range:
    // 0..18446744073709551615.
    RawConnClose interface{}

    // Raw Connections Error. The type is interface{} with range:
    // 0..18446744073709551615.
    RawConnError interface{}

    // Received Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    InPackets interface{}

    // Received Bytes. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    InBytes interface{}

    // Received Long Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    InLongPackets interface{}

    // In Malloc Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InMallocDrops interface{}

    // In Handle Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InHandleDrops interface{}

    // In Short Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InShortDrops interface{}

    // In Error Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InErrorDrops interface{}

    // In IPSEC Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InIpsecDrops interface{}

    // In Queue Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InQueueDrops interface{}

    // Packets Sent. The type is interface{} with range: 0..18446744073709551615.
    OutPackets interface{}

    // Sent Bytes. The type is interface{} with range: 0..18446744073709551615.
    // Units are byte.
    OutBytes interface{}

    // No FileDescriptor Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    OutNofdDrops interface{}

    // Error Drops. The type is interface{} with range: 0..18446744073709551615.
    OutErrorDrops interface{}

    // Out IPSEC Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    OutIpsecDrops interface{}

    // No Packet Buffers. The type is interface{} with range:
    // 0..18446744073709551615.
    OutNopakDrops interface{}

    // PAK API Errors. The type is interface{} with range:
    // 0..18446744073709551615.
    OutPakapiErrors interface{}

    // Raw Connection State. The type is interface{} with range: 0..4294967295.
    RawConnState interface{}
}

func (rawioStats *Ospfv3_Processes_Process_Statistics_RawioStats) GetEntityData() *types.CommonEntityData {
    rawioStats.EntityData.YFilter = rawioStats.YFilter
    rawioStats.EntityData.YangName = "rawio-stats"
    rawioStats.EntityData.BundleName = "cisco_ios_xr"
    rawioStats.EntityData.ParentYangName = "statistics"
    rawioStats.EntityData.SegmentPath = "rawio-stats"
    rawioStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/" + rawioStats.EntityData.SegmentPath
    rawioStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rawioStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rawioStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rawioStats.EntityData.Children = types.NewOrderedMap()
    rawioStats.EntityData.Leafs = types.NewOrderedMap()
    rawioStats.EntityData.Leafs.Append("raw-conn-open", types.YLeaf{"RawConnOpen", rawioStats.RawConnOpen})
    rawioStats.EntityData.Leafs.Append("raw-conn-close", types.YLeaf{"RawConnClose", rawioStats.RawConnClose})
    rawioStats.EntityData.Leafs.Append("raw-conn-error", types.YLeaf{"RawConnError", rawioStats.RawConnError})
    rawioStats.EntityData.Leafs.Append("in-packets", types.YLeaf{"InPackets", rawioStats.InPackets})
    rawioStats.EntityData.Leafs.Append("in-bytes", types.YLeaf{"InBytes", rawioStats.InBytes})
    rawioStats.EntityData.Leafs.Append("in-long-packets", types.YLeaf{"InLongPackets", rawioStats.InLongPackets})
    rawioStats.EntityData.Leafs.Append("in-malloc-drops", types.YLeaf{"InMallocDrops", rawioStats.InMallocDrops})
    rawioStats.EntityData.Leafs.Append("in-handle-drops", types.YLeaf{"InHandleDrops", rawioStats.InHandleDrops})
    rawioStats.EntityData.Leafs.Append("in-short-drops", types.YLeaf{"InShortDrops", rawioStats.InShortDrops})
    rawioStats.EntityData.Leafs.Append("in-error-drops", types.YLeaf{"InErrorDrops", rawioStats.InErrorDrops})
    rawioStats.EntityData.Leafs.Append("in-ipsec-drops", types.YLeaf{"InIpsecDrops", rawioStats.InIpsecDrops})
    rawioStats.EntityData.Leafs.Append("in-queue-drops", types.YLeaf{"InQueueDrops", rawioStats.InQueueDrops})
    rawioStats.EntityData.Leafs.Append("out-packets", types.YLeaf{"OutPackets", rawioStats.OutPackets})
    rawioStats.EntityData.Leafs.Append("out-bytes", types.YLeaf{"OutBytes", rawioStats.OutBytes})
    rawioStats.EntityData.Leafs.Append("out-nofd-drops", types.YLeaf{"OutNofdDrops", rawioStats.OutNofdDrops})
    rawioStats.EntityData.Leafs.Append("out-error-drops", types.YLeaf{"OutErrorDrops", rawioStats.OutErrorDrops})
    rawioStats.EntityData.Leafs.Append("out-ipsec-drops", types.YLeaf{"OutIpsecDrops", rawioStats.OutIpsecDrops})
    rawioStats.EntityData.Leafs.Append("out-nopak-drops", types.YLeaf{"OutNopakDrops", rawioStats.OutNopakDrops})
    rawioStats.EntityData.Leafs.Append("out-pakapi-errors", types.YLeaf{"OutPakapiErrors", rawioStats.OutPakapiErrors})
    rawioStats.EntityData.Leafs.Append("raw-conn-state", types.YLeaf{"RawConnState", rawioStats.RawConnState})

    rawioStats.EntityData.YListKeys = []string {}

    return &(rawioStats.EntityData)
}

// Ospfv3_Processes_Process_Statistics_PrefixPriorityStats
// OSPF Prefix SPF Prioritization statistics
type Ospfv3_Processes_Process_Statistics_PrefixPriorityStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority classifications. The type is interface{} with range:
    // 0..4294967295.
    Critical interface{}

    // High priority classifications. The type is interface{} with range:
    // 0..4294967295.
    High interface{}

    // Medium priority classifications. The type is interface{} with range:
    // 0..4294967295.
    Medium interface{}

    // Low priority classifications. The type is interface{} with range:
    // 0..4294967295.
    Low interface{}
}

func (prefixPriorityStats *Ospfv3_Processes_Process_Statistics_PrefixPriorityStats) GetEntityData() *types.CommonEntityData {
    prefixPriorityStats.EntityData.YFilter = prefixPriorityStats.YFilter
    prefixPriorityStats.EntityData.YangName = "prefix-priority-stats"
    prefixPriorityStats.EntityData.BundleName = "cisco_ios_xr"
    prefixPriorityStats.EntityData.ParentYangName = "statistics"
    prefixPriorityStats.EntityData.SegmentPath = "prefix-priority-stats"
    prefixPriorityStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/" + prefixPriorityStats.EntityData.SegmentPath
    prefixPriorityStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixPriorityStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixPriorityStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixPriorityStats.EntityData.Children = types.NewOrderedMap()
    prefixPriorityStats.EntityData.Leafs = types.NewOrderedMap()
    prefixPriorityStats.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", prefixPriorityStats.Critical})
    prefixPriorityStats.EntityData.Leafs.Append("high", types.YLeaf{"High", prefixPriorityStats.High})
    prefixPriorityStats.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", prefixPriorityStats.Medium})
    prefixPriorityStats.EntityData.Leafs.Append("low", types.YLeaf{"Low", prefixPriorityStats.Low})

    prefixPriorityStats.EntityData.YListKeys = []string {}

    return &(prefixPriorityStats.EntityData)
}

// Ospfv3_Processes_Process_Statistics_VrfRibBatchStats
// OSPFv3 RIB batch statistics
type Ospfv3_Processes_Process_Statistics_VrfRibBatchStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // No. of RIB batches sent. The type is interface{} with range: 0..4294967295.
    BatchesSent interface{}

    // No. of Routes sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    RoutesSent interface{}

    // No of Pending Routes. The type is interface{} with range: 0..4294967295.
    RoutesPending interface{}

    // Max No. of Routes in a batch. The type is interface{} with range:
    // 0..4294967295.
    MaxRoutes interface{}

    // No. of Paths sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsSent interface{}

    // No. of paths waiting to be sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsPending interface{}

    // No. of paths added to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsAdd interface{}

    // No. of paths add errors. The type is interface{} with range: 0..4294967295.
    PathsAddErrs interface{}

    // No. of paths del sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsDel interface{}

    // No. of Paths del errors. The type is interface{} with range: 0..4294967295.
    PathsDelErrs interface{}
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_Statistics_VrfRibBatchStats) GetEntityData() *types.CommonEntityData {
    vrfRibBatchStats.EntityData.YFilter = vrfRibBatchStats.YFilter
    vrfRibBatchStats.EntityData.YangName = "vrf-rib-batch-stats"
    vrfRibBatchStats.EntityData.BundleName = "cisco_ios_xr"
    vrfRibBatchStats.EntityData.ParentYangName = "statistics"
    vrfRibBatchStats.EntityData.SegmentPath = "vrf-rib-batch-stats"
    vrfRibBatchStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/statistics/" + vrfRibBatchStats.EntityData.SegmentPath
    vrfRibBatchStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRibBatchStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRibBatchStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRibBatchStats.EntityData.Children = types.NewOrderedMap()
    vrfRibBatchStats.EntityData.Leafs = types.NewOrderedMap()
    vrfRibBatchStats.EntityData.Leafs.Append("batches-sent", types.YLeaf{"BatchesSent", vrfRibBatchStats.BatchesSent})
    vrfRibBatchStats.EntityData.Leafs.Append("routes-sent", types.YLeaf{"RoutesSent", vrfRibBatchStats.RoutesSent})
    vrfRibBatchStats.EntityData.Leafs.Append("routes-pending", types.YLeaf{"RoutesPending", vrfRibBatchStats.RoutesPending})
    vrfRibBatchStats.EntityData.Leafs.Append("max-routes", types.YLeaf{"MaxRoutes", vrfRibBatchStats.MaxRoutes})
    vrfRibBatchStats.EntityData.Leafs.Append("paths-sent", types.YLeaf{"PathsSent", vrfRibBatchStats.PathsSent})
    vrfRibBatchStats.EntityData.Leafs.Append("paths-pending", types.YLeaf{"PathsPending", vrfRibBatchStats.PathsPending})
    vrfRibBatchStats.EntityData.Leafs.Append("paths-add", types.YLeaf{"PathsAdd", vrfRibBatchStats.PathsAdd})
    vrfRibBatchStats.EntityData.Leafs.Append("paths-add-errs", types.YLeaf{"PathsAddErrs", vrfRibBatchStats.PathsAddErrs})
    vrfRibBatchStats.EntityData.Leafs.Append("paths-del", types.YLeaf{"PathsDel", vrfRibBatchStats.PathsDel})
    vrfRibBatchStats.EntityData.Leafs.Append("paths-del-errs", types.YLeaf{"PathsDelErrs", vrfRibBatchStats.PathsDelErrs})

    vrfRibBatchStats.EntityData.YListKeys = []string {}

    return &(vrfRibBatchStats.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf
// Operational data for the default VRF
// (instance) in the OSPFv3 process
type Ospfv3_Processes_Process_DefaultVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary prefix information table.
    SummaryPrefixes Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes

    // OSPFv3 border router information table.
    BorderRouters Ospfv3_Processes_Process_DefaultVrf_BorderRouters

    // Sham link information.
    ShamLinkTable Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable

    // OSPFv3 area information table.
    AreaInformations Ospfv3_Processes_Process_DefaultVrf_AreaInformations

    // OSPF Link State Database.
    DatabaseTable Ospfv3_Processes_Process_DefaultVrf_DatabaseTable

    // OSPFv3 interface information table for all areas.
    InterfaceProcessTable Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable

    // Redistribution information table.
    Redistributions Ospfv3_Processes_Process_DefaultVrf_Redistributions

    // OSPFv3 external route information table.
    ExternalRoutes Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes

    // OSPFv3 request list information for all areas.
    RequestListProcessTable Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable

    // Virtual link information.
    VirtualLink Ospfv3_Processes_Process_DefaultVrf_VirtualLink

    // OSPFv3 flood list information table for all areas.
    FloodListProcessTable Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable

    // Summarize OSPFv3 local RIB tables.
    RouteSummary Ospfv3_Processes_Process_DefaultVrf_RouteSummary

    // OSPFv3 area table.
    Areas Ospfv3_Processes_Process_DefaultVrf_Areas

    // OSPFv3 internal route information table.
    InternalRoutes Ospfv3_Processes_Process_DefaultVrf_InternalRoutes

    // Protocol area table .
    ProtocolAreas Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas

    // OSPFv3 connected route information table.
    ConnectedRoutes Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes

    // Container for Statistics.
    VrfStatistics Ospfv3_Processes_Process_DefaultVrf_VrfStatistics

    // OSPFv3 summary.
    Summary Ospfv3_Processes_Process_DefaultVrf_Summary

    // OSPFv3 retransmission list information table for all areas.
    RetransmissionListProcessTable Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable

    // Bad Checksum Packets information table.
    BadChecksums Ospfv3_Processes_Process_DefaultVrf_BadChecksums

    // Database summary table.
    DatabaseSummaryTable Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable

    // OSPFv3 neighbor information table for all areas.
    NeighborProcessTable Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable

    // OSPFv3 fast reroute topology information table.
    FastReroutes Ospfv3_Processes_Process_DefaultVrf_FastReroutes

    // OSPFv3 interface brief information table for all areas.
    InterfaceBriefProcessTable Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable

    // OSPFv3 neighbor information table for all areas.
    NeighborDetailProcessTable Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable
}

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetEntityData() *types.CommonEntityData {
    defaultVrf.EntityData.YFilter = defaultVrf.YFilter
    defaultVrf.EntityData.YangName = "default-vrf"
    defaultVrf.EntityData.BundleName = "cisco_ios_xr"
    defaultVrf.EntityData.ParentYangName = "process"
    defaultVrf.EntityData.SegmentPath = "default-vrf"
    defaultVrf.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/" + defaultVrf.EntityData.SegmentPath
    defaultVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultVrf.EntityData.Children = types.NewOrderedMap()
    defaultVrf.EntityData.Children.Append("summary-prefixes", types.YChild{"SummaryPrefixes", &defaultVrf.SummaryPrefixes})
    defaultVrf.EntityData.Children.Append("border-routers", types.YChild{"BorderRouters", &defaultVrf.BorderRouters})
    defaultVrf.EntityData.Children.Append("sham-link-table", types.YChild{"ShamLinkTable", &defaultVrf.ShamLinkTable})
    defaultVrf.EntityData.Children.Append("area-informations", types.YChild{"AreaInformations", &defaultVrf.AreaInformations})
    defaultVrf.EntityData.Children.Append("database-table", types.YChild{"DatabaseTable", &defaultVrf.DatabaseTable})
    defaultVrf.EntityData.Children.Append("interface-process-table", types.YChild{"InterfaceProcessTable", &defaultVrf.InterfaceProcessTable})
    defaultVrf.EntityData.Children.Append("redistributions", types.YChild{"Redistributions", &defaultVrf.Redistributions})
    defaultVrf.EntityData.Children.Append("external-routes", types.YChild{"ExternalRoutes", &defaultVrf.ExternalRoutes})
    defaultVrf.EntityData.Children.Append("request-list-process-table", types.YChild{"RequestListProcessTable", &defaultVrf.RequestListProcessTable})
    defaultVrf.EntityData.Children.Append("virtual-link", types.YChild{"VirtualLink", &defaultVrf.VirtualLink})
    defaultVrf.EntityData.Children.Append("flood-list-process-table", types.YChild{"FloodListProcessTable", &defaultVrf.FloodListProcessTable})
    defaultVrf.EntityData.Children.Append("route-summary", types.YChild{"RouteSummary", &defaultVrf.RouteSummary})
    defaultVrf.EntityData.Children.Append("areas", types.YChild{"Areas", &defaultVrf.Areas})
    defaultVrf.EntityData.Children.Append("internal-routes", types.YChild{"InternalRoutes", &defaultVrf.InternalRoutes})
    defaultVrf.EntityData.Children.Append("protocol-areas", types.YChild{"ProtocolAreas", &defaultVrf.ProtocolAreas})
    defaultVrf.EntityData.Children.Append("connected-routes", types.YChild{"ConnectedRoutes", &defaultVrf.ConnectedRoutes})
    defaultVrf.EntityData.Children.Append("vrf-statistics", types.YChild{"VrfStatistics", &defaultVrf.VrfStatistics})
    defaultVrf.EntityData.Children.Append("summary", types.YChild{"Summary", &defaultVrf.Summary})
    defaultVrf.EntityData.Children.Append("retransmission-list-process-table", types.YChild{"RetransmissionListProcessTable", &defaultVrf.RetransmissionListProcessTable})
    defaultVrf.EntityData.Children.Append("bad-checksums", types.YChild{"BadChecksums", &defaultVrf.BadChecksums})
    defaultVrf.EntityData.Children.Append("database-summary-table", types.YChild{"DatabaseSummaryTable", &defaultVrf.DatabaseSummaryTable})
    defaultVrf.EntityData.Children.Append("neighbor-process-table", types.YChild{"NeighborProcessTable", &defaultVrf.NeighborProcessTable})
    defaultVrf.EntityData.Children.Append("fast-reroutes", types.YChild{"FastReroutes", &defaultVrf.FastReroutes})
    defaultVrf.EntityData.Children.Append("interface-brief-process-table", types.YChild{"InterfaceBriefProcessTable", &defaultVrf.InterfaceBriefProcessTable})
    defaultVrf.EntityData.Children.Append("neighbor-detail-process-table", types.YChild{"NeighborDetailProcessTable", &defaultVrf.NeighborDetailProcessTable})
    defaultVrf.EntityData.Leafs = types.NewOrderedMap()

    defaultVrf.EntityData.YListKeys = []string {}

    return &(defaultVrf.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes
// Summary prefix information table
type Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary prefix information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix.
    SummaryPrefix []*Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix
}

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetEntityData() *types.CommonEntityData {
    summaryPrefixes.EntityData.YFilter = summaryPrefixes.YFilter
    summaryPrefixes.EntityData.YangName = "summary-prefixes"
    summaryPrefixes.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefixes.EntityData.ParentYangName = "default-vrf"
    summaryPrefixes.EntityData.SegmentPath = "summary-prefixes"
    summaryPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + summaryPrefixes.EntityData.SegmentPath
    summaryPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefixes.EntityData.Children = types.NewOrderedMap()
    summaryPrefixes.EntityData.Children.Append("summary-prefix", types.YChild{"SummaryPrefix", nil})
    for i := range summaryPrefixes.SummaryPrefix {
        types.SetYListKey(summaryPrefixes.SummaryPrefix[i], i)
        summaryPrefixes.EntityData.Children.Append(types.GetSegmentPath(summaryPrefixes.SummaryPrefix[i]), types.YChild{"SummaryPrefix", summaryPrefixes.SummaryPrefix[i]})
    }
    summaryPrefixes.EntityData.Leafs = types.NewOrderedMap()

    summaryPrefixes.EntityData.YListKeys = []string {}

    return &(summaryPrefixes.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix
// Summary prefix information
type Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Summary prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Prefix metric. The type is interface{} with range: 0..4294967295.
    PrefixMetric interface{}

    // Prefix metric type. The type is Ospfv3DefaultMetric.
    PrefixMetricType interface{}

    // Tag. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetEntityData() *types.CommonEntityData {
    summaryPrefix.EntityData.YFilter = summaryPrefix.YFilter
    summaryPrefix.EntityData.YangName = "summary-prefix"
    summaryPrefix.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefix.EntityData.ParentYangName = "summary-prefixes"
    summaryPrefix.EntityData.SegmentPath = "summary-prefix" + types.AddNoKeyToken(summaryPrefix)
    summaryPrefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/summary-prefixes/" + summaryPrefix.EntityData.SegmentPath
    summaryPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefix.EntityData.Children = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs = types.NewOrderedMap()
    summaryPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", summaryPrefix.Prefix})
    summaryPrefix.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", summaryPrefix.PrefixLength})
    summaryPrefix.EntityData.Leafs.Append("prefix-metric", types.YLeaf{"PrefixMetric", summaryPrefix.PrefixMetric})
    summaryPrefix.EntityData.Leafs.Append("prefix-metric-type", types.YLeaf{"PrefixMetricType", summaryPrefix.PrefixMetricType})
    summaryPrefix.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", summaryPrefix.Tag})

    summaryPrefix.EntityData.YListKeys = []string {}

    return &(summaryPrefix.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_BorderRouters
// OSPFv3 border router information table
type Ospfv3_Processes_Process_DefaultVrf_BorderRouters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 border router information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter.
    BorderRouter []*Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter
}

func (borderRouters *Ospfv3_Processes_Process_DefaultVrf_BorderRouters) GetEntityData() *types.CommonEntityData {
    borderRouters.EntityData.YFilter = borderRouters.YFilter
    borderRouters.EntityData.YangName = "border-routers"
    borderRouters.EntityData.BundleName = "cisco_ios_xr"
    borderRouters.EntityData.ParentYangName = "default-vrf"
    borderRouters.EntityData.SegmentPath = "border-routers"
    borderRouters.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + borderRouters.EntityData.SegmentPath
    borderRouters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    borderRouters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    borderRouters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    borderRouters.EntityData.Children = types.NewOrderedMap()
    borderRouters.EntityData.Children.Append("border-router", types.YChild{"BorderRouter", nil})
    for i := range borderRouters.BorderRouter {
        borderRouters.EntityData.Children.Append(types.GetSegmentPath(borderRouters.BorderRouter[i]), types.YChild{"BorderRouter", borderRouters.BorderRouter[i]})
    }
    borderRouters.EntityData.Leafs = types.NewOrderedMap()

    borderRouters.EntityData.YListKeys = []string {}

    return &(borderRouters.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter
// OSPFv3 border router information
type Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Router address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BorderRouterId interface{}

    // List of border router paths. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath.
    BorderRouterPath []*Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath
}

func (borderRouter *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter) GetEntityData() *types.CommonEntityData {
    borderRouter.EntityData.YFilter = borderRouter.YFilter
    borderRouter.EntityData.YangName = "border-router"
    borderRouter.EntityData.BundleName = "cisco_ios_xr"
    borderRouter.EntityData.ParentYangName = "border-routers"
    borderRouter.EntityData.SegmentPath = "border-router" + types.AddKeyToken(borderRouter.BorderRouterId, "border-router-id")
    borderRouter.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/border-routers/" + borderRouter.EntityData.SegmentPath
    borderRouter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    borderRouter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    borderRouter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    borderRouter.EntityData.Children = types.NewOrderedMap()
    borderRouter.EntityData.Children.Append("border-router-path", types.YChild{"BorderRouterPath", nil})
    for i := range borderRouter.BorderRouterPath {
        types.SetYListKey(borderRouter.BorderRouterPath[i], i)
        borderRouter.EntityData.Children.Append(types.GetSegmentPath(borderRouter.BorderRouterPath[i]), types.YChild{"BorderRouterPath", borderRouter.BorderRouterPath[i]})
    }
    borderRouter.EntityData.Leafs = types.NewOrderedMap()
    borderRouter.EntityData.Leafs.Append("border-router-id", types.YLeaf{"BorderRouterId", borderRouter.BorderRouterId})

    borderRouter.EntityData.YListKeys = []string {"BorderRouterId"}

    return &(borderRouter.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath
// List of border router paths
type Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // If true, intra-area router else inter-area router. The type is bool.
    IsIntraAreaRouter interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BorderRouterRouteMetric interface{}

    // Next hop address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BorderRouterNextHop interface{}

    // Next hop interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Border router type . The type is Ospfv3BorderRoute.
    BorderRouterType interface{}

    // Area string in decimal or dotted-decimal format . The type is string with
    // length: 0..16.
    BorderRouterAreaId interface{}

    // SPF version. The type is interface{} with range: 0..4294967295.
    SpfVersion interface{}
}

func (borderRouterPath *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath) GetEntityData() *types.CommonEntityData {
    borderRouterPath.EntityData.YFilter = borderRouterPath.YFilter
    borderRouterPath.EntityData.YangName = "border-router-path"
    borderRouterPath.EntityData.BundleName = "cisco_ios_xr"
    borderRouterPath.EntityData.ParentYangName = "border-router"
    borderRouterPath.EntityData.SegmentPath = "border-router-path" + types.AddNoKeyToken(borderRouterPath)
    borderRouterPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/border-routers/border-router/" + borderRouterPath.EntityData.SegmentPath
    borderRouterPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    borderRouterPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    borderRouterPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    borderRouterPath.EntityData.Children = types.NewOrderedMap()
    borderRouterPath.EntityData.Leafs = types.NewOrderedMap()
    borderRouterPath.EntityData.Leafs.Append("is-intra-area-router", types.YLeaf{"IsIntraAreaRouter", borderRouterPath.IsIntraAreaRouter})
    borderRouterPath.EntityData.Leafs.Append("border-router-route-metric", types.YLeaf{"BorderRouterRouteMetric", borderRouterPath.BorderRouterRouteMetric})
    borderRouterPath.EntityData.Leafs.Append("border-router-next-hop", types.YLeaf{"BorderRouterNextHop", borderRouterPath.BorderRouterNextHop})
    borderRouterPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", borderRouterPath.InterfaceName})
    borderRouterPath.EntityData.Leafs.Append("border-router-type", types.YLeaf{"BorderRouterType", borderRouterPath.BorderRouterType})
    borderRouterPath.EntityData.Leafs.Append("border-router-area-id", types.YLeaf{"BorderRouterAreaId", borderRouterPath.BorderRouterAreaId})
    borderRouterPath.EntityData.Leafs.Append("spf-version", types.YLeaf{"SpfVersion", borderRouterPath.SpfVersion})

    borderRouterPath.EntityData.YListKeys = []string {}

    return &(borderRouterPath.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable
// Sham link information
type Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor on other end of this sham link. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ShamLinkNeighborId interface{}

    // Sham-link source. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ShamLinkSourceAddress interface{}

    // Sham-link dest. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ShamLinkDestAddress interface{}

    // OSPF interface state for the sham link. The type is Ospfv3InterfaceState.
    ShamLinkState interface{}

    // If true, the link runs as demand circuit. The type is bool.
    ShamLinkDemandCircuit interface{}

    // Number of LSA's with demand circuit bit not set. The type is interface{}
    // with range: 0..4294967295.
    ShamLinkDcBitlessLsa interface{}

    // Sham-link ifindex. The type is interface{} with range: 0..4294967295.
    ShamLinkIfindex interface{}

    // Area id. The type is string.
    ShamLinkArea interface{}

    // Cost of the sham link. The type is interface{} with range: 0..65535.
    ShamLinkCost interface{}

    // Transmission delay in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    ShamLinkTransmissionDelay interface{}

    // Hello interval (s). The type is interface{} with range: 0..4294967295.
    ShamLinkHelloInterval interface{}

    // Dead interval (s). The type is interface{} with range: 0..4294967295.
    ShamLinkDeadInterval interface{}

    // Wait interval (s). The type is interface{} with range: 0..4294967295.
    ShamLinkWaitInterval interface{}

    // Retransmission interval (s). The type is interface{} with range:
    // 0..4294967295.
    ShamLinkRetransmissionInterval interface{}

    // Time until next hello (s). The type is interface{} with range:
    // 0..4294967295.
    ShamLinkNextHello interface{}

    // If true, interface is passive. The type is bool.
    ShamLinkPassive interface{}

    // If true, sham link IP security is required . The type is bool.
    IsShamLinkIpSecurityRequired interface{}

    // If true, Sham link IP security is active . The type is bool.
    IsShamLinkIpSecurityActive interface{}

    // If true, sham link authentication is enabled . The type is bool.
    IsShamLinkAuthenticationEnabled interface{}

    // Sham link authentication spi . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkAuthenticationSpi interface{}

    // Sham link authentication transmit . The type is interface{} with range:
    // 0..4294967295.
    ShamLinkAuthenticationTransmit interface{}

    // If true, sham link encryption is enabled . The type is bool.
    IsShamLinkEncryptionEnabled interface{}

    // Sham link encryption spi. The type is interface{} with range:
    // 0..4294967295.
    ShamLinkEncryptionSpi interface{}

    // Sham link encryption transmitted . The type is interface{} with range:
    // 0..4294967295.
    ShamLinkEncryptionTransmitted interface{}

    // Sham link encrypted authentication transmitted . The type is interface{}
    // with range: 0..4294967295.
    ShamLinkEncryptedAuthenticationTransmitted interface{}

    // If true,  enabled. The type is bool.
    ShamLinkGrEnabled interface{}

    // If true, Gracefule restart in progress. The type is bool.
    ShamLinkGr interface{}

    // Time in seconds since last GR. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ShamLinkLastGr interface{}

    // Neighbor information.
    ShamLinkNeighbor Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor
}

func (shamLinkTable *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable) GetEntityData() *types.CommonEntityData {
    shamLinkTable.EntityData.YFilter = shamLinkTable.YFilter
    shamLinkTable.EntityData.YangName = "sham-link-table"
    shamLinkTable.EntityData.BundleName = "cisco_ios_xr"
    shamLinkTable.EntityData.ParentYangName = "default-vrf"
    shamLinkTable.EntityData.SegmentPath = "sham-link-table"
    shamLinkTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + shamLinkTable.EntityData.SegmentPath
    shamLinkTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLinkTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLinkTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLinkTable.EntityData.Children = types.NewOrderedMap()
    shamLinkTable.EntityData.Children.Append("sham-link-neighbor", types.YChild{"ShamLinkNeighbor", &shamLinkTable.ShamLinkNeighbor})
    shamLinkTable.EntityData.Leafs = types.NewOrderedMap()
    shamLinkTable.EntityData.Leafs.Append("sham-link-neighbor-id", types.YLeaf{"ShamLinkNeighborId", shamLinkTable.ShamLinkNeighborId})
    shamLinkTable.EntityData.Leafs.Append("sham-link-source-address", types.YLeaf{"ShamLinkSourceAddress", shamLinkTable.ShamLinkSourceAddress})
    shamLinkTable.EntityData.Leafs.Append("sham-link-dest-address", types.YLeaf{"ShamLinkDestAddress", shamLinkTable.ShamLinkDestAddress})
    shamLinkTable.EntityData.Leafs.Append("sham-link-state", types.YLeaf{"ShamLinkState", shamLinkTable.ShamLinkState})
    shamLinkTable.EntityData.Leafs.Append("sham-link-demand-circuit", types.YLeaf{"ShamLinkDemandCircuit", shamLinkTable.ShamLinkDemandCircuit})
    shamLinkTable.EntityData.Leafs.Append("sham-link-dc-bitless-lsa", types.YLeaf{"ShamLinkDcBitlessLsa", shamLinkTable.ShamLinkDcBitlessLsa})
    shamLinkTable.EntityData.Leafs.Append("sham-link-ifindex", types.YLeaf{"ShamLinkIfindex", shamLinkTable.ShamLinkIfindex})
    shamLinkTable.EntityData.Leafs.Append("sham-link-area", types.YLeaf{"ShamLinkArea", shamLinkTable.ShamLinkArea})
    shamLinkTable.EntityData.Leafs.Append("sham-link-cost", types.YLeaf{"ShamLinkCost", shamLinkTable.ShamLinkCost})
    shamLinkTable.EntityData.Leafs.Append("sham-link-transmission-delay", types.YLeaf{"ShamLinkTransmissionDelay", shamLinkTable.ShamLinkTransmissionDelay})
    shamLinkTable.EntityData.Leafs.Append("sham-link-hello-interval", types.YLeaf{"ShamLinkHelloInterval", shamLinkTable.ShamLinkHelloInterval})
    shamLinkTable.EntityData.Leafs.Append("sham-link-dead-interval", types.YLeaf{"ShamLinkDeadInterval", shamLinkTable.ShamLinkDeadInterval})
    shamLinkTable.EntityData.Leafs.Append("sham-link-wait-interval", types.YLeaf{"ShamLinkWaitInterval", shamLinkTable.ShamLinkWaitInterval})
    shamLinkTable.EntityData.Leafs.Append("sham-link-retransmission-interval", types.YLeaf{"ShamLinkRetransmissionInterval", shamLinkTable.ShamLinkRetransmissionInterval})
    shamLinkTable.EntityData.Leafs.Append("sham-link-next-hello", types.YLeaf{"ShamLinkNextHello", shamLinkTable.ShamLinkNextHello})
    shamLinkTable.EntityData.Leafs.Append("sham-link-passive", types.YLeaf{"ShamLinkPassive", shamLinkTable.ShamLinkPassive})
    shamLinkTable.EntityData.Leafs.Append("is-sham-link-ip-security-required", types.YLeaf{"IsShamLinkIpSecurityRequired", shamLinkTable.IsShamLinkIpSecurityRequired})
    shamLinkTable.EntityData.Leafs.Append("is-sham-link-ip-security-active", types.YLeaf{"IsShamLinkIpSecurityActive", shamLinkTable.IsShamLinkIpSecurityActive})
    shamLinkTable.EntityData.Leafs.Append("is-sham-link-authentication-enabled", types.YLeaf{"IsShamLinkAuthenticationEnabled", shamLinkTable.IsShamLinkAuthenticationEnabled})
    shamLinkTable.EntityData.Leafs.Append("virtual-link-authentication-spi", types.YLeaf{"VirtualLinkAuthenticationSpi", shamLinkTable.VirtualLinkAuthenticationSpi})
    shamLinkTable.EntityData.Leafs.Append("sham-link-authentication-transmit", types.YLeaf{"ShamLinkAuthenticationTransmit", shamLinkTable.ShamLinkAuthenticationTransmit})
    shamLinkTable.EntityData.Leafs.Append("is-sham-link-encryption-enabled", types.YLeaf{"IsShamLinkEncryptionEnabled", shamLinkTable.IsShamLinkEncryptionEnabled})
    shamLinkTable.EntityData.Leafs.Append("sham-link-encryption-spi", types.YLeaf{"ShamLinkEncryptionSpi", shamLinkTable.ShamLinkEncryptionSpi})
    shamLinkTable.EntityData.Leafs.Append("sham-link-encryption-transmitted", types.YLeaf{"ShamLinkEncryptionTransmitted", shamLinkTable.ShamLinkEncryptionTransmitted})
    shamLinkTable.EntityData.Leafs.Append("sham-link-encrypted-authentication-transmitted", types.YLeaf{"ShamLinkEncryptedAuthenticationTransmitted", shamLinkTable.ShamLinkEncryptedAuthenticationTransmitted})
    shamLinkTable.EntityData.Leafs.Append("sham-link-gr-enabled", types.YLeaf{"ShamLinkGrEnabled", shamLinkTable.ShamLinkGrEnabled})
    shamLinkTable.EntityData.Leafs.Append("sham-link-gr", types.YLeaf{"ShamLinkGr", shamLinkTable.ShamLinkGr})
    shamLinkTable.EntityData.Leafs.Append("sham-link-last-gr", types.YLeaf{"ShamLinkLastGr", shamLinkTable.ShamLinkLastGr})

    shamLinkTable.EntityData.YListKeys = []string {}

    return &(shamLinkTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor
// Neighbor information
type Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true Hellos suppressed. The type is bool.
    ShamLinkSuppressHello interface{}

    // Adjacency state. The type is Ospfv3NeighborState.
    ShamLinkState interface{}

    // Neighbor retransmission info.
    ShamLinkRetransmission Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission
}

func (shamLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor) GetEntityData() *types.CommonEntityData {
    shamLinkNeighbor.EntityData.YFilter = shamLinkNeighbor.YFilter
    shamLinkNeighbor.EntityData.YangName = "sham-link-neighbor"
    shamLinkNeighbor.EntityData.BundleName = "cisco_ios_xr"
    shamLinkNeighbor.EntityData.ParentYangName = "sham-link-table"
    shamLinkNeighbor.EntityData.SegmentPath = "sham-link-neighbor"
    shamLinkNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/sham-link-table/" + shamLinkNeighbor.EntityData.SegmentPath
    shamLinkNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLinkNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLinkNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLinkNeighbor.EntityData.Children = types.NewOrderedMap()
    shamLinkNeighbor.EntityData.Children.Append("sham-link-retransmission", types.YChild{"ShamLinkRetransmission", &shamLinkNeighbor.ShamLinkRetransmission})
    shamLinkNeighbor.EntityData.Leafs = types.NewOrderedMap()
    shamLinkNeighbor.EntityData.Leafs.Append("sham-link-suppress-hello", types.YLeaf{"ShamLinkSuppressHello", shamLinkNeighbor.ShamLinkSuppressHello})
    shamLinkNeighbor.EntityData.Leafs.Append("sham-link-state", types.YLeaf{"ShamLinkState", shamLinkNeighbor.ShamLinkState})

    shamLinkNeighbor.EntityData.YListKeys = []string {}

    return &(shamLinkNeighbor.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission
// Neighbor retransmission info
type Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (shamLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetEntityData() *types.CommonEntityData {
    shamLinkRetransmission.EntityData.YFilter = shamLinkRetransmission.YFilter
    shamLinkRetransmission.EntityData.YangName = "sham-link-retransmission"
    shamLinkRetransmission.EntityData.BundleName = "cisco_ios_xr"
    shamLinkRetransmission.EntityData.ParentYangName = "sham-link-neighbor"
    shamLinkRetransmission.EntityData.SegmentPath = "sham-link-retransmission"
    shamLinkRetransmission.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/sham-link-table/sham-link-neighbor/" + shamLinkRetransmission.EntityData.SegmentPath
    shamLinkRetransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLinkRetransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLinkRetransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLinkRetransmission.EntityData.Children = types.NewOrderedMap()
    shamLinkRetransmission.EntityData.Leafs = types.NewOrderedMap()
    shamLinkRetransmission.EntityData.Leafs.Append("database-descriptor-retransmissions", types.YLeaf{"DatabaseDescriptorRetransmissions", shamLinkRetransmission.DatabaseDescriptorRetransmissions})
    shamLinkRetransmission.EntityData.Leafs.Append("area-flood-index", types.YLeaf{"AreaFloodIndex", shamLinkRetransmission.AreaFloodIndex})
    shamLinkRetransmission.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", shamLinkRetransmission.AsFloodIndex})
    shamLinkRetransmission.EntityData.Leafs.Append("link-flood-index", types.YLeaf{"LinkFloodIndex", shamLinkRetransmission.LinkFloodIndex})
    shamLinkRetransmission.EntityData.Leafs.Append("neighbor-retransmissions", types.YLeaf{"NeighborRetransmissions", shamLinkRetransmission.NeighborRetransmissions})
    shamLinkRetransmission.EntityData.Leafs.Append("retransmissions", types.YLeaf{"Retransmissions", shamLinkRetransmission.Retransmissions})
    shamLinkRetransmission.EntityData.Leafs.Append("area-first-flood", types.YLeaf{"AreaFirstFlood", shamLinkRetransmission.AreaFirstFlood})
    shamLinkRetransmission.EntityData.Leafs.Append("area-first-flood-index", types.YLeaf{"AreaFirstFloodIndex", shamLinkRetransmission.AreaFirstFloodIndex})
    shamLinkRetransmission.EntityData.Leafs.Append("as-first-flood", types.YLeaf{"AsFirstFlood", shamLinkRetransmission.AsFirstFlood})
    shamLinkRetransmission.EntityData.Leafs.Append("as-first-flood-index", types.YLeaf{"AsFirstFloodIndex", shamLinkRetransmission.AsFirstFloodIndex})
    shamLinkRetransmission.EntityData.Leafs.Append("link-first-flood", types.YLeaf{"LinkFirstFlood", shamLinkRetransmission.LinkFirstFlood})
    shamLinkRetransmission.EntityData.Leafs.Append("link-first-flood-index", types.YLeaf{"LinkFirstFloodIndex", shamLinkRetransmission.LinkFirstFloodIndex})
    shamLinkRetransmission.EntityData.Leafs.Append("area-next-flood", types.YLeaf{"AreaNextFlood", shamLinkRetransmission.AreaNextFlood})
    shamLinkRetransmission.EntityData.Leafs.Append("area-next-flood-index", types.YLeaf{"AreaNextFloodIndex", shamLinkRetransmission.AreaNextFloodIndex})
    shamLinkRetransmission.EntityData.Leafs.Append("as-next-flood", types.YLeaf{"AsNextFlood", shamLinkRetransmission.AsNextFlood})
    shamLinkRetransmission.EntityData.Leafs.Append("as-next-flood-index", types.YLeaf{"AsNextFloodIndex", shamLinkRetransmission.AsNextFloodIndex})
    shamLinkRetransmission.EntityData.Leafs.Append("link-next-flood", types.YLeaf{"LinkNextFlood", shamLinkRetransmission.LinkNextFlood})
    shamLinkRetransmission.EntityData.Leafs.Append("link-next-flood-index", types.YLeaf{"LinkNextFloodIndex", shamLinkRetransmission.LinkNextFloodIndex})
    shamLinkRetransmission.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", shamLinkRetransmission.LastRetransmissionLength})
    shamLinkRetransmission.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", shamLinkRetransmission.MaximumRetransmissionLength})
    shamLinkRetransmission.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", shamLinkRetransmission.LastRetransmissionTime})
    shamLinkRetransmission.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", shamLinkRetransmission.MaximumRetransmissionTime})
    shamLinkRetransmission.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", shamLinkRetransmission.LsaRetransmissionTimer})

    shamLinkRetransmission.EntityData.YListKeys = []string {}

    return &(shamLinkRetransmission.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_AreaInformations
// OSPFv3 area information table
type Ospfv3_Processes_Process_DefaultVrf_AreaInformations struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 area information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation.
    AreaInformation []*Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation
}

func (areaInformations *Ospfv3_Processes_Process_DefaultVrf_AreaInformations) GetEntityData() *types.CommonEntityData {
    areaInformations.EntityData.YFilter = areaInformations.YFilter
    areaInformations.EntityData.YangName = "area-informations"
    areaInformations.EntityData.BundleName = "cisco_ios_xr"
    areaInformations.EntityData.ParentYangName = "default-vrf"
    areaInformations.EntityData.SegmentPath = "area-informations"
    areaInformations.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + areaInformations.EntityData.SegmentPath
    areaInformations.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaInformations.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaInformations.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaInformations.EntityData.Children = types.NewOrderedMap()
    areaInformations.EntityData.Children.Append("area-information", types.YChild{"AreaInformation", nil})
    for i := range areaInformations.AreaInformation {
        areaInformations.EntityData.Children.Append(types.GetSegmentPath(areaInformations.AreaInformation[i]), types.YChild{"AreaInformation", areaInformations.AreaInformation[i]})
    }
    areaInformations.EntityData.Leafs = types.NewOrderedMap()

    areaInformations.EntityData.YListKeys = []string {}

    return &(areaInformations.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation
// OSPFv3 area information
type Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Area ID. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // If true, Backbone area is active. The type is bool.
    IsBackboneAreaActive interface{}

    // Number of interfaces in the area. The type is interface{} with range:
    // 0..65535.
    AreaInterfaces interface{}

    // If true, stub area. The type is bool.
    IsAreaStubbed interface{}

    // If true, totally stubby area. The type is bool.
    IsAreaTotalStubbed interface{}

    // Default cost for Stub or NSSA area. The type is interface{} with range:
    // 0..65535.
    StubDefaultCost interface{}

    // If true, area is a NSSA. The type is bool.
    IsAreaNssa interface{}

    // If true, No redistribution into this NSSA area. The type is bool.
    NssaNoRedistribution interface{}

    // If true, perform 7/5 translation. The type is bool.
    IsNssaTranslated interface{}

    // If true, perform 7/5 translation always. The type is bool.
    IsNssaTranslatedAlways interface{}

    // If true, generate NSSA default route. The type is bool.
    IsNssaDefault interface{}

    // If true, RRR is enabled. The type is bool.
    IsRrrEnabled interface{}

    // Number of SPF calculations run. The type is interface{} with range:
    // 0..4294967295.
    SpFs interface{}

    // Number of opaque LSAs in the area. The type is interface{} with range:
    // 0..4294967295.
    AreaOpaqueLsas interface{}

    // Sum of opaque LSA checksums. The type is interface{} with range:
    // 0..4294967295.
    AreaOpaqueLsaChecksum interface{}

    // Number of LSA with demand circuit bit not set. The type is interface{} with
    // range: 0..4294967295.
    AreaDcBitlessLsAs interface{}

    // Number of indication LSAs. The type is interface{} with range:
    // 0..4294967295.
    IndicationLsAs interface{}

    // Number of do not age LSAs. The type is interface{} with range:
    // 0..4294967295.
    DoNotAgeLsAs interface{}

    // Number of LSAs which need to be flooded. The type is interface{} with
    // range: 0..4294967295.
    FloodListLength interface{}

    // Number of LFA enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    AreaLfaInterfaceCount interface{}

    // Number of Per Prefix LFA enabled interfaces. The type is interface{} with
    // range: 0..4294967295.
    AreaPerPrefixLfaInterfaceCount interface{}

    // Area LFA revision. The type is interface{} with range: 0..4294967295.
    AreaLfaRevision interface{}

    // List of ranges to summarize. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange.
    AreaRange []*Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange
}

func (areaInformation *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation) GetEntityData() *types.CommonEntityData {
    areaInformation.EntityData.YFilter = areaInformation.YFilter
    areaInformation.EntityData.YangName = "area-information"
    areaInformation.EntityData.BundleName = "cisco_ios_xr"
    areaInformation.EntityData.ParentYangName = "area-informations"
    areaInformation.EntityData.SegmentPath = "area-information" + types.AddKeyToken(areaInformation.AreaId, "area-id")
    areaInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/area-informations/" + areaInformation.EntityData.SegmentPath
    areaInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaInformation.EntityData.Children = types.NewOrderedMap()
    areaInformation.EntityData.Children.Append("area-range", types.YChild{"AreaRange", nil})
    for i := range areaInformation.AreaRange {
        types.SetYListKey(areaInformation.AreaRange[i], i)
        areaInformation.EntityData.Children.Append(types.GetSegmentPath(areaInformation.AreaRange[i]), types.YChild{"AreaRange", areaInformation.AreaRange[i]})
    }
    areaInformation.EntityData.Leafs = types.NewOrderedMap()
    areaInformation.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", areaInformation.AreaId})
    areaInformation.EntityData.Leafs.Append("is-backbone-area-active", types.YLeaf{"IsBackboneAreaActive", areaInformation.IsBackboneAreaActive})
    areaInformation.EntityData.Leafs.Append("area-interfaces", types.YLeaf{"AreaInterfaces", areaInformation.AreaInterfaces})
    areaInformation.EntityData.Leafs.Append("is-area-stubbed", types.YLeaf{"IsAreaStubbed", areaInformation.IsAreaStubbed})
    areaInformation.EntityData.Leafs.Append("is-area-total-stubbed", types.YLeaf{"IsAreaTotalStubbed", areaInformation.IsAreaTotalStubbed})
    areaInformation.EntityData.Leafs.Append("stub-default-cost", types.YLeaf{"StubDefaultCost", areaInformation.StubDefaultCost})
    areaInformation.EntityData.Leafs.Append("is-area-nssa", types.YLeaf{"IsAreaNssa", areaInformation.IsAreaNssa})
    areaInformation.EntityData.Leafs.Append("nssa-no-redistribution", types.YLeaf{"NssaNoRedistribution", areaInformation.NssaNoRedistribution})
    areaInformation.EntityData.Leafs.Append("is-nssa-translated", types.YLeaf{"IsNssaTranslated", areaInformation.IsNssaTranslated})
    areaInformation.EntityData.Leafs.Append("is-nssa-translated-always", types.YLeaf{"IsNssaTranslatedAlways", areaInformation.IsNssaTranslatedAlways})
    areaInformation.EntityData.Leafs.Append("is-nssa-default", types.YLeaf{"IsNssaDefault", areaInformation.IsNssaDefault})
    areaInformation.EntityData.Leafs.Append("is-rrr-enabled", types.YLeaf{"IsRrrEnabled", areaInformation.IsRrrEnabled})
    areaInformation.EntityData.Leafs.Append("sp-fs", types.YLeaf{"SpFs", areaInformation.SpFs})
    areaInformation.EntityData.Leafs.Append("area-opaque-lsas", types.YLeaf{"AreaOpaqueLsas", areaInformation.AreaOpaqueLsas})
    areaInformation.EntityData.Leafs.Append("area-opaque-lsa-checksum", types.YLeaf{"AreaOpaqueLsaChecksum", areaInformation.AreaOpaqueLsaChecksum})
    areaInformation.EntityData.Leafs.Append("area-dc-bitless-ls-as", types.YLeaf{"AreaDcBitlessLsAs", areaInformation.AreaDcBitlessLsAs})
    areaInformation.EntityData.Leafs.Append("indication-ls-as", types.YLeaf{"IndicationLsAs", areaInformation.IndicationLsAs})
    areaInformation.EntityData.Leafs.Append("do-not-age-ls-as", types.YLeaf{"DoNotAgeLsAs", areaInformation.DoNotAgeLsAs})
    areaInformation.EntityData.Leafs.Append("flood-list-length", types.YLeaf{"FloodListLength", areaInformation.FloodListLength})
    areaInformation.EntityData.Leafs.Append("area-lfa-interface-count", types.YLeaf{"AreaLfaInterfaceCount", areaInformation.AreaLfaInterfaceCount})
    areaInformation.EntityData.Leafs.Append("area-per-prefix-lfa-interface-count", types.YLeaf{"AreaPerPrefixLfaInterfaceCount", areaInformation.AreaPerPrefixLfaInterfaceCount})
    areaInformation.EntityData.Leafs.Append("area-lfa-revision", types.YLeaf{"AreaLfaRevision", areaInformation.AreaLfaRevision})

    areaInformation.EntityData.YListKeys = []string {"AreaId"}

    return &(areaInformation.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange
// List of ranges to summarize
type Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // IP prefix for summarization. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RangePrefix interface{}

    // IP prefix length for summarization. The type is interface{} with range:
    // 0..4294967295.
    RangePrefixLength interface{}

    // Net cost . The type is interface{} with range: 0..4294967295.
    NetCost interface{}

    // Area range status . The type is Ospfv3AreaRangeStatus.
    Status interface{}

    // If true, cost is configured . The type is bool.
    IsCostConfigured interface{}
}

func (areaRange *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange) GetEntityData() *types.CommonEntityData {
    areaRange.EntityData.YFilter = areaRange.YFilter
    areaRange.EntityData.YangName = "area-range"
    areaRange.EntityData.BundleName = "cisco_ios_xr"
    areaRange.EntityData.ParentYangName = "area-information"
    areaRange.EntityData.SegmentPath = "area-range" + types.AddNoKeyToken(areaRange)
    areaRange.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/area-informations/area-information/" + areaRange.EntityData.SegmentPath
    areaRange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaRange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaRange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaRange.EntityData.Children = types.NewOrderedMap()
    areaRange.EntityData.Leafs = types.NewOrderedMap()
    areaRange.EntityData.Leafs.Append("range-prefix", types.YLeaf{"RangePrefix", areaRange.RangePrefix})
    areaRange.EntityData.Leafs.Append("range-prefix-length", types.YLeaf{"RangePrefixLength", areaRange.RangePrefixLength})
    areaRange.EntityData.Leafs.Append("net-cost", types.YLeaf{"NetCost", areaRange.NetCost})
    areaRange.EntityData.Leafs.Append("status", types.YLeaf{"Status", areaRange.Status})
    areaRange.EntityData.Leafs.Append("is-cost-configured", types.YLeaf{"IsCostConfigured", areaRange.IsCostConfigured})

    areaRange.EntityData.YListKeys = []string {}

    return &(areaRange.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable
// OSPF Link State Database
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database LSA information.
    LsaTable Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable

    // Database LSA information.
    LsaInternalTable Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable
}

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable) GetEntityData() *types.CommonEntityData {
    databaseTable.EntityData.YFilter = databaseTable.YFilter
    databaseTable.EntityData.YangName = "database-table"
    databaseTable.EntityData.BundleName = "cisco_ios_xr"
    databaseTable.EntityData.ParentYangName = "default-vrf"
    databaseTable.EntityData.SegmentPath = "database-table"
    databaseTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + databaseTable.EntityData.SegmentPath
    databaseTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseTable.EntityData.Children = types.NewOrderedMap()
    databaseTable.EntityData.Children.Append("lsa-table", types.YChild{"LsaTable", &databaseTable.LsaTable})
    databaseTable.EntityData.Children.Append("lsa-internal-table", types.YChild{"LsaInternalTable", &databaseTable.LsaInternalTable})
    databaseTable.EntityData.Leafs = types.NewOrderedMap()

    databaseTable.EntityData.YListKeys = []string {}

    return &(databaseTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable
// Database LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database LSA information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa.
    Lsa []*Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa
}

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable) GetEntityData() *types.CommonEntityData {
    lsaTable.EntityData.YFilter = lsaTable.YFilter
    lsaTable.EntityData.YangName = "lsa-table"
    lsaTable.EntityData.BundleName = "cisco_ios_xr"
    lsaTable.EntityData.ParentYangName = "database-table"
    lsaTable.EntityData.SegmentPath = "lsa-table"
    lsaTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/" + lsaTable.EntityData.SegmentPath
    lsaTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaTable.EntityData.Children = types.NewOrderedMap()
    lsaTable.EntityData.Children.Append("lsa", types.YChild{"Lsa", nil})
    for i := range lsaTable.Lsa {
        types.SetYListKey(lsaTable.Lsa[i], i)
        lsaTable.EntityData.Children.Append(types.GetSegmentPath(lsaTable.Lsa[i]), types.YChild{"Lsa", lsaTable.Lsa[i]})
    }
    lsaTable.EntityData.Leafs = types.NewOrderedMap()

    lsaTable.EntityData.YListKeys = []string {}

    return &(lsaTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa
// Database LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // LSA type. The type is Ospfv3Lsa.
    LsType interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Link state ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Summary of all LSAs or LSA specific information .
    LsaInfo Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa) GetEntityData() *types.CommonEntityData {
    lsa.EntityData.YFilter = lsa.YFilter
    lsa.EntityData.YangName = "lsa"
    lsa.EntityData.BundleName = "cisco_ios_xr"
    lsa.EntityData.ParentYangName = "lsa-table"
    lsa.EntityData.SegmentPath = "lsa" + types.AddNoKeyToken(lsa)
    lsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/" + lsa.EntityData.SegmentPath
    lsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsa.EntityData.Children = types.NewOrderedMap()
    lsa.EntityData.Children.Append("lsa-info", types.YChild{"LsaInfo", &lsa.LsaInfo})
    lsa.EntityData.Leafs = types.NewOrderedMap()
    lsa.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", lsa.AreaId})
    lsa.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsa.LsType})
    lsa.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsa.AdvertisingRouter})
    lsa.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsa.LsId})
    lsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsa.InterfaceName})

    lsa.EntityData.YListKeys = []string {}

    return &(lsa.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo
// Summary of all LSAs or LSA specific information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSAInfoType. The type is Ospfv3LsaInfoTypes.
    LsaInfoType interface{}

    // Summary information of LSAs.
    LsaSummaryInfo Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo

    // Router LSA.
    RouterLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType

    // Inter Area Prefix LSA.
    InterAreaPrefixLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType

    // Inter Area Router LSA.
    InterAreaRouterLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType

    // External LSA.
    ExternalLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType

    // NSSA External LSA.
    NssalsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType

    // Link LSA.
    LinkLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType

    // Intra Area Prefix LSA.
    IntraAreaPrefixLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType

    // Grace LSA.
    GraceLsa Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa

    // Unknown Link Scope LSA.
    UnknownLinkLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType

    // Unknown-Area scope LSA.
    UnknownAreaLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType

    // Unknown-AS scope LSA.
    UnknownAslsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType

    // Unknown LSA.
    UnknownLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetEntityData() *types.CommonEntityData {
    lsaInfo.EntityData.YFilter = lsaInfo.YFilter
    lsaInfo.EntityData.YangName = "lsa-info"
    lsaInfo.EntityData.BundleName = "cisco_ios_xr"
    lsaInfo.EntityData.ParentYangName = "lsa"
    lsaInfo.EntityData.SegmentPath = "lsa-info"
    lsaInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/" + lsaInfo.EntityData.SegmentPath
    lsaInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaInfo.EntityData.Children = types.NewOrderedMap()
    lsaInfo.EntityData.Children.Append("lsa-summary-info", types.YChild{"LsaSummaryInfo", &lsaInfo.LsaSummaryInfo})
    lsaInfo.EntityData.Children.Append("router-lsa-type", types.YChild{"RouterLsaType", &lsaInfo.RouterLsaType})
    lsaInfo.EntityData.Children.Append("network-lsa-type", types.YChild{"NetworkLsaType", &lsaInfo.NetworkLsaType})
    lsaInfo.EntityData.Children.Append("inter-area-prefix-lsa-type", types.YChild{"InterAreaPrefixLsaType", &lsaInfo.InterAreaPrefixLsaType})
    lsaInfo.EntityData.Children.Append("inter-area-router-lsa-type", types.YChild{"InterAreaRouterLsaType", &lsaInfo.InterAreaRouterLsaType})
    lsaInfo.EntityData.Children.Append("external-lsa-type", types.YChild{"ExternalLsaType", &lsaInfo.ExternalLsaType})
    lsaInfo.EntityData.Children.Append("nssalsa-type", types.YChild{"NssalsaType", &lsaInfo.NssalsaType})
    lsaInfo.EntityData.Children.Append("link-lsa-type", types.YChild{"LinkLsaType", &lsaInfo.LinkLsaType})
    lsaInfo.EntityData.Children.Append("intra-area-prefix-lsa-type", types.YChild{"IntraAreaPrefixLsaType", &lsaInfo.IntraAreaPrefixLsaType})
    lsaInfo.EntityData.Children.Append("grace-lsa", types.YChild{"GraceLsa", &lsaInfo.GraceLsa})
    lsaInfo.EntityData.Children.Append("unknown-link-lsa-type", types.YChild{"UnknownLinkLsaType", &lsaInfo.UnknownLinkLsaType})
    lsaInfo.EntityData.Children.Append("unknown-area-lsa-type", types.YChild{"UnknownAreaLsaType", &lsaInfo.UnknownAreaLsaType})
    lsaInfo.EntityData.Children.Append("unknown-aslsa-type", types.YChild{"UnknownAslsaType", &lsaInfo.UnknownAslsaType})
    lsaInfo.EntityData.Children.Append("unknown-lsa-type", types.YChild{"UnknownLsaType", &lsaInfo.UnknownLsaType})
    lsaInfo.EntityData.Leafs = types.NewOrderedMap()
    lsaInfo.EntityData.Leafs.Append("lsa-info-type", types.YLeaf{"LsaInfoType", lsaInfo.LsaInfoType})

    lsaInfo.EntityData.YListKeys = []string {}

    return &(lsaInfo.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo
// Summary information of LSAs
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of links. The type is interface{} with range: 0..65535.
    Links interface{}

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Reference type . The type is interface{} with range: 0..65535.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // OSPFv3 address Prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetEntityData() *types.CommonEntityData {
    lsaSummaryInfo.EntityData.YFilter = lsaSummaryInfo.YFilter
    lsaSummaryInfo.EntityData.YangName = "lsa-summary-info"
    lsaSummaryInfo.EntityData.BundleName = "cisco_ios_xr"
    lsaSummaryInfo.EntityData.ParentYangName = "lsa-info"
    lsaSummaryInfo.EntityData.SegmentPath = "lsa-summary-info"
    lsaSummaryInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/" + lsaSummaryInfo.EntityData.SegmentPath
    lsaSummaryInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaSummaryInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaSummaryInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaSummaryInfo.EntityData.Children = types.NewOrderedMap()
    lsaSummaryInfo.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &lsaSummaryInfo.LsaHeader})
    lsaSummaryInfo.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &lsaSummaryInfo.LsaDetail})
    lsaSummaryInfo.EntityData.Leafs = types.NewOrderedMap()
    lsaSummaryInfo.EntityData.Leafs.Append("links", types.YLeaf{"Links", lsaSummaryInfo.Links})
    lsaSummaryInfo.EntityData.Leafs.Append("router-la-bits", types.YLeaf{"RouterLaBits", lsaSummaryInfo.RouterLaBits})
    lsaSummaryInfo.EntityData.Leafs.Append("reference-type", types.YLeaf{"ReferenceType", lsaSummaryInfo.ReferenceType})
    lsaSummaryInfo.EntityData.Leafs.Append("reference-lsa-id", types.YLeaf{"ReferenceLsaId", lsaSummaryInfo.ReferenceLsaId})
    lsaSummaryInfo.EntityData.Leafs.Append("lsa-router-id", types.YLeaf{"LsaRouterId", lsaSummaryInfo.LsaRouterId})
    lsaSummaryInfo.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", lsaSummaryInfo.Prefix})
    lsaSummaryInfo.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", lsaSummaryInfo.PrefixLength})
    lsaSummaryInfo.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsaSummaryInfo.InterfaceName})
    lsaSummaryInfo.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", lsaSummaryInfo.IsVirtualLink})
    lsaSummaryInfo.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", lsaSummaryInfo.VirtualLinkId})
    lsaSummaryInfo.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", lsaSummaryInfo.IsShamLink})
    lsaSummaryInfo.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", lsaSummaryInfo.ShamLinkId})

    lsaSummaryInfo.EntityData.YListKeys = []string {}

    return &(lsaSummaryInfo.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "lsa-summary-info"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/lsa-summary-info/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "lsa-summary-info"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/lsa-summary-info/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType
// Router LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail

    // Router LSA Reverse-Path Forwarding information .
    RpfPath Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath

    // List of links in this LSA. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link.
    Link []*Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetEntityData() *types.CommonEntityData {
    routerLsaType.EntityData.YFilter = routerLsaType.YFilter
    routerLsaType.EntityData.YangName = "router-lsa-type"
    routerLsaType.EntityData.BundleName = "cisco_ios_xr"
    routerLsaType.EntityData.ParentYangName = "lsa-info"
    routerLsaType.EntityData.SegmentPath = "router-lsa-type"
    routerLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/" + routerLsaType.EntityData.SegmentPath
    routerLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routerLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routerLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routerLsaType.EntityData.Children = types.NewOrderedMap()
    routerLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &routerLsaType.LsaHeader})
    routerLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &routerLsaType.LsaDetail})
    routerLsaType.EntityData.Children.Append("rpf-path", types.YChild{"RpfPath", &routerLsaType.RpfPath})
    routerLsaType.EntityData.Children.Append("link", types.YChild{"Link", nil})
    for i := range routerLsaType.Link {
        types.SetYListKey(routerLsaType.Link[i], i)
        routerLsaType.EntityData.Children.Append(types.GetSegmentPath(routerLsaType.Link[i]), types.YChild{"Link", routerLsaType.Link[i]})
    }
    routerLsaType.EntityData.Leafs = types.NewOrderedMap()
    routerLsaType.EntityData.Leafs.Append("router-la-bits", types.YLeaf{"RouterLaBits", routerLsaType.RouterLaBits})

    routerLsaType.EntityData.YListKeys = []string {}

    return &(routerLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "router-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/router-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "router-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/router-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath
// Router LSA Reverse-Path Forwarding information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RPF multicast next hop . The type is interface{} with range: 0..4294967295.
    RpfMulticastNextHop interface{}

    // RPF multicast IDB . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetEntityData() *types.CommonEntityData {
    rpfPath.EntityData.YFilter = rpfPath.YFilter
    rpfPath.EntityData.YangName = "rpf-path"
    rpfPath.EntityData.BundleName = "cisco_ios_xr"
    rpfPath.EntityData.ParentYangName = "router-lsa-type"
    rpfPath.EntityData.SegmentPath = "rpf-path"
    rpfPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/router-lsa-type/" + rpfPath.EntityData.SegmentPath
    rpfPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rpfPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rpfPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rpfPath.EntityData.Children = types.NewOrderedMap()
    rpfPath.EntityData.Leafs = types.NewOrderedMap()
    rpfPath.EntityData.Leafs.Append("rpf-multicast-next-hop", types.YLeaf{"RpfMulticastNextHop", rpfPath.RpfMulticastNextHop})
    rpfPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", rpfPath.InterfaceName})

    rpfPath.EntityData.YListKeys = []string {}

    return &(rpfPath.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link
// List of links in this LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Type of link. The type is Ospfv3Link.
    LinkType interface{}

    // LSA link metric . The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // LSA link interface ID . The type is interface{} with range: 0..4294967295.
    LinkInterfaceId interface{}

    // LSA link neighbor interface ID . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborInterfaceId interface{}

    // LSA link neigbhor router id . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborRouterId interface{}
}

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "router-lsa-type"
    link.EntityData.SegmentPath = "link" + types.AddNoKeyToken(link)
    link.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/router-lsa-type/" + link.EntityData.SegmentPath
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = types.NewOrderedMap()
    link.EntityData.Leafs = types.NewOrderedMap()
    link.EntityData.Leafs.Append("link-type", types.YLeaf{"LinkType", link.LinkType})
    link.EntityData.Leafs.Append("link-metric", types.YLeaf{"LinkMetric", link.LinkMetric})
    link.EntityData.Leafs.Append("link-interface-id", types.YLeaf{"LinkInterfaceId", link.LinkInterfaceId})
    link.EntityData.Leafs.Append("link-neighbor-interface-id", types.YLeaf{"LinkNeighborInterfaceId", link.LinkNeighborInterfaceId})
    link.EntityData.Leafs.Append("link-neighbor-router-id", types.YLeaf{"LinkNeighborRouterId", link.LinkNeighborRouterId})

    link.EntityData.YListKeys = []string {}

    return &(link.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType
// Network LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor router list. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborRouter []interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetEntityData() *types.CommonEntityData {
    networkLsaType.EntityData.YFilter = networkLsaType.YFilter
    networkLsaType.EntityData.YangName = "network-lsa-type"
    networkLsaType.EntityData.BundleName = "cisco_ios_xr"
    networkLsaType.EntityData.ParentYangName = "lsa-info"
    networkLsaType.EntityData.SegmentPath = "network-lsa-type"
    networkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/" + networkLsaType.EntityData.SegmentPath
    networkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkLsaType.EntityData.Children = types.NewOrderedMap()
    networkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &networkLsaType.LsaHeader})
    networkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &networkLsaType.LsaDetail})
    networkLsaType.EntityData.Leafs = types.NewOrderedMap()
    networkLsaType.EntityData.Leafs.Append("neighbor-router", types.YLeaf{"NeighborRouter", networkLsaType.NeighborRouter})

    networkLsaType.EntityData.YListKeys = []string {}

    return &(networkLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "network-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/network-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "network-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/network-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType
// Inter Area Prefix LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetEntityData() *types.CommonEntityData {
    interAreaPrefixLsaType.EntityData.YFilter = interAreaPrefixLsaType.YFilter
    interAreaPrefixLsaType.EntityData.YangName = "inter-area-prefix-lsa-type"
    interAreaPrefixLsaType.EntityData.BundleName = "cisco_ios_xr"
    interAreaPrefixLsaType.EntityData.ParentYangName = "lsa-info"
    interAreaPrefixLsaType.EntityData.SegmentPath = "inter-area-prefix-lsa-type"
    interAreaPrefixLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/" + interAreaPrefixLsaType.EntityData.SegmentPath
    interAreaPrefixLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interAreaPrefixLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interAreaPrefixLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interAreaPrefixLsaType.EntityData.Children = types.NewOrderedMap()
    interAreaPrefixLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &interAreaPrefixLsaType.LsaHeader})
    interAreaPrefixLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &interAreaPrefixLsaType.LsaDetail})
    interAreaPrefixLsaType.EntityData.Leafs = types.NewOrderedMap()
    interAreaPrefixLsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", interAreaPrefixLsaType.Prefix})
    interAreaPrefixLsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interAreaPrefixLsaType.PrefixLength})
    interAreaPrefixLsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", interAreaPrefixLsaType.Priority})

    interAreaPrefixLsaType.EntityData.YListKeys = []string {}

    return &(interAreaPrefixLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "inter-area-prefix-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/inter-area-prefix-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "inter-area-prefix-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/inter-area-prefix-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType
// Inter Area Router LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetEntityData() *types.CommonEntityData {
    interAreaRouterLsaType.EntityData.YFilter = interAreaRouterLsaType.YFilter
    interAreaRouterLsaType.EntityData.YangName = "inter-area-router-lsa-type"
    interAreaRouterLsaType.EntityData.BundleName = "cisco_ios_xr"
    interAreaRouterLsaType.EntityData.ParentYangName = "lsa-info"
    interAreaRouterLsaType.EntityData.SegmentPath = "inter-area-router-lsa-type"
    interAreaRouterLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/" + interAreaRouterLsaType.EntityData.SegmentPath
    interAreaRouterLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interAreaRouterLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interAreaRouterLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interAreaRouterLsaType.EntityData.Children = types.NewOrderedMap()
    interAreaRouterLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &interAreaRouterLsaType.LsaHeader})
    interAreaRouterLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &interAreaRouterLsaType.LsaDetail})
    interAreaRouterLsaType.EntityData.Leafs = types.NewOrderedMap()
    interAreaRouterLsaType.EntityData.Leafs.Append("lsa-router-id", types.YLeaf{"LsaRouterId", interAreaRouterLsaType.LsaRouterId})

    interAreaRouterLsaType.EntityData.YListKeys = []string {}

    return &(interAreaRouterLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "inter-area-router-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/inter-area-router-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "inter-area-router-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/inter-area-router-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType
// External LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetEntityData() *types.CommonEntityData {
    externalLsaType.EntityData.YFilter = externalLsaType.YFilter
    externalLsaType.EntityData.YangName = "external-lsa-type"
    externalLsaType.EntityData.BundleName = "cisco_ios_xr"
    externalLsaType.EntityData.ParentYangName = "lsa-info"
    externalLsaType.EntityData.SegmentPath = "external-lsa-type"
    externalLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/" + externalLsaType.EntityData.SegmentPath
    externalLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalLsaType.EntityData.Children = types.NewOrderedMap()
    externalLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &externalLsaType.LsaHeader})
    externalLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &externalLsaType.LsaDetail})
    externalLsaType.EntityData.Leafs = types.NewOrderedMap()
    externalLsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", externalLsaType.Prefix})
    externalLsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", externalLsaType.PrefixLength})
    externalLsaType.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", externalLsaType.MetricType})
    externalLsaType.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", externalLsaType.TosCost})
    externalLsaType.EntityData.Leafs.Append("is-forwarding-address-set", types.YLeaf{"IsForwardingAddressSet", externalLsaType.IsForwardingAddressSet})
    externalLsaType.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", externalLsaType.ForwardingAddress})
    externalLsaType.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", externalLsaType.ExternalTag})
    externalLsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", externalLsaType.Priority})

    externalLsaType.EntityData.YListKeys = []string {}

    return &(externalLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "external-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/external-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "external-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/external-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType
// NSSA External LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetEntityData() *types.CommonEntityData {
    nssalsaType.EntityData.YFilter = nssalsaType.YFilter
    nssalsaType.EntityData.YangName = "nssalsa-type"
    nssalsaType.EntityData.BundleName = "cisco_ios_xr"
    nssalsaType.EntityData.ParentYangName = "lsa-info"
    nssalsaType.EntityData.SegmentPath = "nssalsa-type"
    nssalsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/" + nssalsaType.EntityData.SegmentPath
    nssalsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nssalsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nssalsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nssalsaType.EntityData.Children = types.NewOrderedMap()
    nssalsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &nssalsaType.LsaHeader})
    nssalsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &nssalsaType.LsaDetail})
    nssalsaType.EntityData.Leafs = types.NewOrderedMap()
    nssalsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", nssalsaType.Prefix})
    nssalsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", nssalsaType.PrefixLength})
    nssalsaType.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", nssalsaType.MetricType})
    nssalsaType.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", nssalsaType.TosCost})
    nssalsaType.EntityData.Leafs.Append("is-forwarding-address-set", types.YLeaf{"IsForwardingAddressSet", nssalsaType.IsForwardingAddressSet})
    nssalsaType.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", nssalsaType.ForwardingAddress})
    nssalsaType.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", nssalsaType.ExternalTag})
    nssalsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", nssalsaType.Priority})

    nssalsaType.EntityData.YListKeys = []string {}

    return &(nssalsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "nssalsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/nssalsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "nssalsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/nssalsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType
// Link LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // LSA link local . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LsaLinkLocal interface{}

    // Router priority . The type is interface{} with range: 0..255.
    RouterPriority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix.
    Prefix []*Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetEntityData() *types.CommonEntityData {
    linkLsaType.EntityData.YFilter = linkLsaType.YFilter
    linkLsaType.EntityData.YangName = "link-lsa-type"
    linkLsaType.EntityData.BundleName = "cisco_ios_xr"
    linkLsaType.EntityData.ParentYangName = "lsa-info"
    linkLsaType.EntityData.SegmentPath = "link-lsa-type"
    linkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/" + linkLsaType.EntityData.SegmentPath
    linkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkLsaType.EntityData.Children = types.NewOrderedMap()
    linkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &linkLsaType.LsaHeader})
    linkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &linkLsaType.LsaDetail})
    linkLsaType.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range linkLsaType.Prefix {
        types.SetYListKey(linkLsaType.Prefix[i], i)
        linkLsaType.EntityData.Children.Append(types.GetSegmentPath(linkLsaType.Prefix[i]), types.YChild{"Prefix", linkLsaType.Prefix[i]})
    }
    linkLsaType.EntityData.Leafs = types.NewOrderedMap()
    linkLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkLsaType.InterfaceName})
    linkLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", linkLsaType.IsVirtualLink})
    linkLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", linkLsaType.VirtualLinkId})
    linkLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", linkLsaType.IsShamLink})
    linkLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", linkLsaType.ShamLinkId})
    linkLsaType.EntityData.Leafs.Append("lsa-link-local", types.YLeaf{"LsaLinkLocal", linkLsaType.LsaLinkLocal})
    linkLsaType.EntityData.Leafs.Append("router-priority", types.YLeaf{"RouterPriority", linkLsaType.RouterPriority})

    linkLsaType.EntityData.YListKeys = []string {}

    return &(linkLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "link-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/link-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "link-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/link-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "link-lsa-type"
    prefix.EntityData.SegmentPath = "prefix" + types.AddNoKeyToken(prefix)
    prefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/link-lsa-type/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-length", types.YLeaf{"Ospfv3PrefixLength", prefix.Ospfv3PrefixLength})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-options", types.YLeaf{"Ospfv3PrefixOptions", prefix.Ospfv3PrefixOptions})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-metric", types.YLeaf{"Ospfv3PrefixMetric", prefix.Ospfv3PrefixMetric})
    prefix.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", prefix.Priority})

    prefix.EntityData.YListKeys = []string {}

    return &(prefix.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType
// Intra Area Prefix LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference type . The type is Ospfv3Lsa1.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // Reference advertised router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ReferenceAdvertisedRouter interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix.
    Prefix []*Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetEntityData() *types.CommonEntityData {
    intraAreaPrefixLsaType.EntityData.YFilter = intraAreaPrefixLsaType.YFilter
    intraAreaPrefixLsaType.EntityData.YangName = "intra-area-prefix-lsa-type"
    intraAreaPrefixLsaType.EntityData.BundleName = "cisco_ios_xr"
    intraAreaPrefixLsaType.EntityData.ParentYangName = "lsa-info"
    intraAreaPrefixLsaType.EntityData.SegmentPath = "intra-area-prefix-lsa-type"
    intraAreaPrefixLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/" + intraAreaPrefixLsaType.EntityData.SegmentPath
    intraAreaPrefixLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    intraAreaPrefixLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    intraAreaPrefixLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    intraAreaPrefixLsaType.EntityData.Children = types.NewOrderedMap()
    intraAreaPrefixLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &intraAreaPrefixLsaType.LsaHeader})
    intraAreaPrefixLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &intraAreaPrefixLsaType.LsaDetail})
    intraAreaPrefixLsaType.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range intraAreaPrefixLsaType.Prefix {
        types.SetYListKey(intraAreaPrefixLsaType.Prefix[i], i)
        intraAreaPrefixLsaType.EntityData.Children.Append(types.GetSegmentPath(intraAreaPrefixLsaType.Prefix[i]), types.YChild{"Prefix", intraAreaPrefixLsaType.Prefix[i]})
    }
    intraAreaPrefixLsaType.EntityData.Leafs = types.NewOrderedMap()
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-type", types.YLeaf{"ReferenceType", intraAreaPrefixLsaType.ReferenceType})
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-lsa-id", types.YLeaf{"ReferenceLsaId", intraAreaPrefixLsaType.ReferenceLsaId})
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-advertised-router", types.YLeaf{"ReferenceAdvertisedRouter", intraAreaPrefixLsaType.ReferenceAdvertisedRouter})

    intraAreaPrefixLsaType.EntityData.YListKeys = []string {}

    return &(intraAreaPrefixLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    prefix.EntityData.SegmentPath = "prefix" + types.AddNoKeyToken(prefix)
    prefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-length", types.YLeaf{"Ospfv3PrefixLength", prefix.Ospfv3PrefixLength})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-options", types.YLeaf{"Ospfv3PrefixOptions", prefix.Ospfv3PrefixOptions})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-metric", types.YLeaf{"Ospfv3PrefixMetric", prefix.Ospfv3PrefixMetric})
    prefix.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", prefix.Priority})

    prefix.EntityData.YListKeys = []string {}

    return &(prefix.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa
// Grace LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // The grace periord where helper routers should wait before advertising it
    // fully adjacent(s) . The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is Ospfv3GracefulRestartReason.
    GraceReason interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetEntityData() *types.CommonEntityData {
    graceLsa.EntityData.YFilter = graceLsa.YFilter
    graceLsa.EntityData.YangName = "grace-lsa"
    graceLsa.EntityData.BundleName = "cisco_ios_xr"
    graceLsa.EntityData.ParentYangName = "lsa-info"
    graceLsa.EntityData.SegmentPath = "grace-lsa"
    graceLsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/" + graceLsa.EntityData.SegmentPath
    graceLsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    graceLsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    graceLsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    graceLsa.EntityData.Children = types.NewOrderedMap()
    graceLsa.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &graceLsa.LsaHeader})
    graceLsa.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &graceLsa.LsaDetail})
    graceLsa.EntityData.Leafs = types.NewOrderedMap()
    graceLsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", graceLsa.InterfaceName})
    graceLsa.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", graceLsa.IsVirtualLink})
    graceLsa.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", graceLsa.VirtualLinkId})
    graceLsa.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", graceLsa.IsShamLink})
    graceLsa.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", graceLsa.ShamLinkId})
    graceLsa.EntityData.Leafs.Append("grace-period", types.YLeaf{"GracePeriod", graceLsa.GracePeriod})
    graceLsa.EntityData.Leafs.Append("grace-reason", types.YLeaf{"GraceReason", graceLsa.GraceReason})

    graceLsa.EntityData.YListKeys = []string {}

    return &(graceLsa.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "grace-lsa"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/grace-lsa/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "grace-lsa"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/grace-lsa/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType
// Unknown Link Scope LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetEntityData() *types.CommonEntityData {
    unknownLinkLsaType.EntityData.YFilter = unknownLinkLsaType.YFilter
    unknownLinkLsaType.EntityData.YangName = "unknown-link-lsa-type"
    unknownLinkLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownLinkLsaType.EntityData.ParentYangName = "lsa-info"
    unknownLinkLsaType.EntityData.SegmentPath = "unknown-link-lsa-type"
    unknownLinkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/" + unknownLinkLsaType.EntityData.SegmentPath
    unknownLinkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownLinkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownLinkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownLinkLsaType.EntityData.Children = types.NewOrderedMap()
    unknownLinkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownLinkLsaType.LsaHeader})
    unknownLinkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownLinkLsaType.LsaDetail})
    unknownLinkLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownLinkLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownLinkLsaType.InterfaceName})
    unknownLinkLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownLinkLsaType.IsVirtualLink})
    unknownLinkLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownLinkLsaType.VirtualLinkId})
    unknownLinkLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownLinkLsaType.IsShamLink})
    unknownLinkLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownLinkLsaType.ShamLinkId})

    unknownLinkLsaType.EntityData.YListKeys = []string {}

    return &(unknownLinkLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-link-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/unknown-link-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-link-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/unknown-link-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType
// Unknown-Area scope LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetEntityData() *types.CommonEntityData {
    unknownAreaLsaType.EntityData.YFilter = unknownAreaLsaType.YFilter
    unknownAreaLsaType.EntityData.YangName = "unknown-area-lsa-type"
    unknownAreaLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownAreaLsaType.EntityData.ParentYangName = "lsa-info"
    unknownAreaLsaType.EntityData.SegmentPath = "unknown-area-lsa-type"
    unknownAreaLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/" + unknownAreaLsaType.EntityData.SegmentPath
    unknownAreaLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownAreaLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownAreaLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownAreaLsaType.EntityData.Children = types.NewOrderedMap()
    unknownAreaLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownAreaLsaType.LsaHeader})
    unknownAreaLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownAreaLsaType.LsaDetail})
    unknownAreaLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownAreaLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownAreaLsaType.InterfaceName})
    unknownAreaLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownAreaLsaType.IsVirtualLink})
    unknownAreaLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownAreaLsaType.VirtualLinkId})
    unknownAreaLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownAreaLsaType.IsShamLink})
    unknownAreaLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownAreaLsaType.ShamLinkId})

    unknownAreaLsaType.EntityData.YListKeys = []string {}

    return &(unknownAreaLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-area-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/unknown-area-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-area-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/unknown-area-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType
// Unknown-AS scope LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetEntityData() *types.CommonEntityData {
    unknownAslsaType.EntityData.YFilter = unknownAslsaType.YFilter
    unknownAslsaType.EntityData.YangName = "unknown-aslsa-type"
    unknownAslsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownAslsaType.EntityData.ParentYangName = "lsa-info"
    unknownAslsaType.EntityData.SegmentPath = "unknown-aslsa-type"
    unknownAslsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/" + unknownAslsaType.EntityData.SegmentPath
    unknownAslsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownAslsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownAslsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownAslsaType.EntityData.Children = types.NewOrderedMap()
    unknownAslsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownAslsaType.LsaHeader})
    unknownAslsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownAslsaType.LsaDetail})
    unknownAslsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownAslsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownAslsaType.InterfaceName})
    unknownAslsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownAslsaType.IsVirtualLink})
    unknownAslsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownAslsaType.VirtualLinkId})
    unknownAslsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownAslsaType.IsShamLink})
    unknownAslsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownAslsaType.ShamLinkId})

    unknownAslsaType.EntityData.YListKeys = []string {}

    return &(unknownAslsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-aslsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/unknown-aslsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-aslsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/unknown-aslsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType
// Unknown LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetEntityData() *types.CommonEntityData {
    unknownLsaType.EntityData.YFilter = unknownLsaType.YFilter
    unknownLsaType.EntityData.YangName = "unknown-lsa-type"
    unknownLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownLsaType.EntityData.ParentYangName = "lsa-info"
    unknownLsaType.EntityData.SegmentPath = "unknown-lsa-type"
    unknownLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/" + unknownLsaType.EntityData.SegmentPath
    unknownLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownLsaType.EntityData.Children = types.NewOrderedMap()
    unknownLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownLsaType.LsaHeader})
    unknownLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownLsaType.LsaDetail})
    unknownLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownLsaType.InterfaceName})
    unknownLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownLsaType.IsVirtualLink})
    unknownLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownLsaType.VirtualLinkId})
    unknownLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownLsaType.IsShamLink})
    unknownLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownLsaType.ShamLinkId})

    unknownLsaType.EntityData.YListKeys = []string {}

    return &(unknownLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/unknown-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-table/lsa/lsa-info/unknown-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable
// Database LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database LSA information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa.
    Lsa []*Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa
}

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable) GetEntityData() *types.CommonEntityData {
    lsaInternalTable.EntityData.YFilter = lsaInternalTable.YFilter
    lsaInternalTable.EntityData.YangName = "lsa-internal-table"
    lsaInternalTable.EntityData.BundleName = "cisco_ios_xr"
    lsaInternalTable.EntityData.ParentYangName = "database-table"
    lsaInternalTable.EntityData.SegmentPath = "lsa-internal-table"
    lsaInternalTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/" + lsaInternalTable.EntityData.SegmentPath
    lsaInternalTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaInternalTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaInternalTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaInternalTable.EntityData.Children = types.NewOrderedMap()
    lsaInternalTable.EntityData.Children.Append("lsa", types.YChild{"Lsa", nil})
    for i := range lsaInternalTable.Lsa {
        types.SetYListKey(lsaInternalTable.Lsa[i], i)
        lsaInternalTable.EntityData.Children.Append(types.GetSegmentPath(lsaInternalTable.Lsa[i]), types.YChild{"Lsa", lsaInternalTable.Lsa[i]})
    }
    lsaInternalTable.EntityData.Leafs = types.NewOrderedMap()

    lsaInternalTable.EntityData.YListKeys = []string {}

    return &(lsaInternalTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa
// Database LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // LSA type. The type is Ospfv3Lsa.
    LsType interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Link state ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Summary of all LSAs or LSA specific information .
    LsaInfo Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa) GetEntityData() *types.CommonEntityData {
    lsa.EntityData.YFilter = lsa.YFilter
    lsa.EntityData.YangName = "lsa"
    lsa.EntityData.BundleName = "cisco_ios_xr"
    lsa.EntityData.ParentYangName = "lsa-internal-table"
    lsa.EntityData.SegmentPath = "lsa" + types.AddNoKeyToken(lsa)
    lsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/" + lsa.EntityData.SegmentPath
    lsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsa.EntityData.Children = types.NewOrderedMap()
    lsa.EntityData.Children.Append("lsa-info", types.YChild{"LsaInfo", &lsa.LsaInfo})
    lsa.EntityData.Leafs = types.NewOrderedMap()
    lsa.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", lsa.AreaId})
    lsa.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsa.LsType})
    lsa.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsa.AdvertisingRouter})
    lsa.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsa.LsId})
    lsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsa.InterfaceName})

    lsa.EntityData.YListKeys = []string {}

    return &(lsa.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo
// Summary of all LSAs or LSA specific information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSAInfoType. The type is Ospfv3LsaInfoTypes.
    LsaInfoType interface{}

    // Summary information of LSAs.
    LsaSummaryInfo Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo

    // Router LSA.
    RouterLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType

    // Inter Area Prefix LSA.
    InterAreaPrefixLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType

    // Inter Area Router LSA.
    InterAreaRouterLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType

    // External LSA.
    ExternalLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType

    // NSSA External LSA.
    NssalsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType

    // Link LSA.
    LinkLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType

    // Intra Area Prefix LSA.
    IntraAreaPrefixLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType

    // Grace LSA.
    GraceLsa Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa

    // Unknown Link Scope LSA.
    UnknownLinkLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType

    // Unknown-Area scope LSA.
    UnknownAreaLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType

    // Unknown-AS scope LSA.
    UnknownAslsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType

    // Unknown LSA.
    UnknownLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetEntityData() *types.CommonEntityData {
    lsaInfo.EntityData.YFilter = lsaInfo.YFilter
    lsaInfo.EntityData.YangName = "lsa-info"
    lsaInfo.EntityData.BundleName = "cisco_ios_xr"
    lsaInfo.EntityData.ParentYangName = "lsa"
    lsaInfo.EntityData.SegmentPath = "lsa-info"
    lsaInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/" + lsaInfo.EntityData.SegmentPath
    lsaInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaInfo.EntityData.Children = types.NewOrderedMap()
    lsaInfo.EntityData.Children.Append("lsa-summary-info", types.YChild{"LsaSummaryInfo", &lsaInfo.LsaSummaryInfo})
    lsaInfo.EntityData.Children.Append("router-lsa-type", types.YChild{"RouterLsaType", &lsaInfo.RouterLsaType})
    lsaInfo.EntityData.Children.Append("network-lsa-type", types.YChild{"NetworkLsaType", &lsaInfo.NetworkLsaType})
    lsaInfo.EntityData.Children.Append("inter-area-prefix-lsa-type", types.YChild{"InterAreaPrefixLsaType", &lsaInfo.InterAreaPrefixLsaType})
    lsaInfo.EntityData.Children.Append("inter-area-router-lsa-type", types.YChild{"InterAreaRouterLsaType", &lsaInfo.InterAreaRouterLsaType})
    lsaInfo.EntityData.Children.Append("external-lsa-type", types.YChild{"ExternalLsaType", &lsaInfo.ExternalLsaType})
    lsaInfo.EntityData.Children.Append("nssalsa-type", types.YChild{"NssalsaType", &lsaInfo.NssalsaType})
    lsaInfo.EntityData.Children.Append("link-lsa-type", types.YChild{"LinkLsaType", &lsaInfo.LinkLsaType})
    lsaInfo.EntityData.Children.Append("intra-area-prefix-lsa-type", types.YChild{"IntraAreaPrefixLsaType", &lsaInfo.IntraAreaPrefixLsaType})
    lsaInfo.EntityData.Children.Append("grace-lsa", types.YChild{"GraceLsa", &lsaInfo.GraceLsa})
    lsaInfo.EntityData.Children.Append("unknown-link-lsa-type", types.YChild{"UnknownLinkLsaType", &lsaInfo.UnknownLinkLsaType})
    lsaInfo.EntityData.Children.Append("unknown-area-lsa-type", types.YChild{"UnknownAreaLsaType", &lsaInfo.UnknownAreaLsaType})
    lsaInfo.EntityData.Children.Append("unknown-aslsa-type", types.YChild{"UnknownAslsaType", &lsaInfo.UnknownAslsaType})
    lsaInfo.EntityData.Children.Append("unknown-lsa-type", types.YChild{"UnknownLsaType", &lsaInfo.UnknownLsaType})
    lsaInfo.EntityData.Leafs = types.NewOrderedMap()
    lsaInfo.EntityData.Leafs.Append("lsa-info-type", types.YLeaf{"LsaInfoType", lsaInfo.LsaInfoType})

    lsaInfo.EntityData.YListKeys = []string {}

    return &(lsaInfo.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo
// Summary information of LSAs
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of links. The type is interface{} with range: 0..65535.
    Links interface{}

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Reference type . The type is interface{} with range: 0..65535.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // OSPFv3 address Prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetEntityData() *types.CommonEntityData {
    lsaSummaryInfo.EntityData.YFilter = lsaSummaryInfo.YFilter
    lsaSummaryInfo.EntityData.YangName = "lsa-summary-info"
    lsaSummaryInfo.EntityData.BundleName = "cisco_ios_xr"
    lsaSummaryInfo.EntityData.ParentYangName = "lsa-info"
    lsaSummaryInfo.EntityData.SegmentPath = "lsa-summary-info"
    lsaSummaryInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/" + lsaSummaryInfo.EntityData.SegmentPath
    lsaSummaryInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaSummaryInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaSummaryInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaSummaryInfo.EntityData.Children = types.NewOrderedMap()
    lsaSummaryInfo.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &lsaSummaryInfo.LsaHeader})
    lsaSummaryInfo.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &lsaSummaryInfo.LsaDetail})
    lsaSummaryInfo.EntityData.Leafs = types.NewOrderedMap()
    lsaSummaryInfo.EntityData.Leafs.Append("links", types.YLeaf{"Links", lsaSummaryInfo.Links})
    lsaSummaryInfo.EntityData.Leafs.Append("router-la-bits", types.YLeaf{"RouterLaBits", lsaSummaryInfo.RouterLaBits})
    lsaSummaryInfo.EntityData.Leafs.Append("reference-type", types.YLeaf{"ReferenceType", lsaSummaryInfo.ReferenceType})
    lsaSummaryInfo.EntityData.Leafs.Append("reference-lsa-id", types.YLeaf{"ReferenceLsaId", lsaSummaryInfo.ReferenceLsaId})
    lsaSummaryInfo.EntityData.Leafs.Append("lsa-router-id", types.YLeaf{"LsaRouterId", lsaSummaryInfo.LsaRouterId})
    lsaSummaryInfo.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", lsaSummaryInfo.Prefix})
    lsaSummaryInfo.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", lsaSummaryInfo.PrefixLength})
    lsaSummaryInfo.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsaSummaryInfo.InterfaceName})
    lsaSummaryInfo.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", lsaSummaryInfo.IsVirtualLink})
    lsaSummaryInfo.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", lsaSummaryInfo.VirtualLinkId})
    lsaSummaryInfo.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", lsaSummaryInfo.IsShamLink})
    lsaSummaryInfo.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", lsaSummaryInfo.ShamLinkId})

    lsaSummaryInfo.EntityData.YListKeys = []string {}

    return &(lsaSummaryInfo.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "lsa-summary-info"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/lsa-summary-info/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "lsa-summary-info"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/lsa-summary-info/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType
// Router LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail

    // Router LSA Reverse-Path Forwarding information .
    RpfPath Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath

    // List of links in this LSA. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link.
    Link []*Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetEntityData() *types.CommonEntityData {
    routerLsaType.EntityData.YFilter = routerLsaType.YFilter
    routerLsaType.EntityData.YangName = "router-lsa-type"
    routerLsaType.EntityData.BundleName = "cisco_ios_xr"
    routerLsaType.EntityData.ParentYangName = "lsa-info"
    routerLsaType.EntityData.SegmentPath = "router-lsa-type"
    routerLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/" + routerLsaType.EntityData.SegmentPath
    routerLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routerLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routerLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routerLsaType.EntityData.Children = types.NewOrderedMap()
    routerLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &routerLsaType.LsaHeader})
    routerLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &routerLsaType.LsaDetail})
    routerLsaType.EntityData.Children.Append("rpf-path", types.YChild{"RpfPath", &routerLsaType.RpfPath})
    routerLsaType.EntityData.Children.Append("link", types.YChild{"Link", nil})
    for i := range routerLsaType.Link {
        types.SetYListKey(routerLsaType.Link[i], i)
        routerLsaType.EntityData.Children.Append(types.GetSegmentPath(routerLsaType.Link[i]), types.YChild{"Link", routerLsaType.Link[i]})
    }
    routerLsaType.EntityData.Leafs = types.NewOrderedMap()
    routerLsaType.EntityData.Leafs.Append("router-la-bits", types.YLeaf{"RouterLaBits", routerLsaType.RouterLaBits})

    routerLsaType.EntityData.YListKeys = []string {}

    return &(routerLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "router-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/router-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "router-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/router-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath
// Router LSA Reverse-Path Forwarding information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RPF multicast next hop . The type is interface{} with range: 0..4294967295.
    RpfMulticastNextHop interface{}

    // RPF multicast IDB . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetEntityData() *types.CommonEntityData {
    rpfPath.EntityData.YFilter = rpfPath.YFilter
    rpfPath.EntityData.YangName = "rpf-path"
    rpfPath.EntityData.BundleName = "cisco_ios_xr"
    rpfPath.EntityData.ParentYangName = "router-lsa-type"
    rpfPath.EntityData.SegmentPath = "rpf-path"
    rpfPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/router-lsa-type/" + rpfPath.EntityData.SegmentPath
    rpfPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rpfPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rpfPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rpfPath.EntityData.Children = types.NewOrderedMap()
    rpfPath.EntityData.Leafs = types.NewOrderedMap()
    rpfPath.EntityData.Leafs.Append("rpf-multicast-next-hop", types.YLeaf{"RpfMulticastNextHop", rpfPath.RpfMulticastNextHop})
    rpfPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", rpfPath.InterfaceName})

    rpfPath.EntityData.YListKeys = []string {}

    return &(rpfPath.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link
// List of links in this LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Type of link. The type is Ospfv3Link.
    LinkType interface{}

    // LSA link metric . The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // LSA link interface ID . The type is interface{} with range: 0..4294967295.
    LinkInterfaceId interface{}

    // LSA link neighbor interface ID . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborInterfaceId interface{}

    // LSA link neigbhor router id . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborRouterId interface{}
}

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "router-lsa-type"
    link.EntityData.SegmentPath = "link" + types.AddNoKeyToken(link)
    link.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/router-lsa-type/" + link.EntityData.SegmentPath
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = types.NewOrderedMap()
    link.EntityData.Leafs = types.NewOrderedMap()
    link.EntityData.Leafs.Append("link-type", types.YLeaf{"LinkType", link.LinkType})
    link.EntityData.Leafs.Append("link-metric", types.YLeaf{"LinkMetric", link.LinkMetric})
    link.EntityData.Leafs.Append("link-interface-id", types.YLeaf{"LinkInterfaceId", link.LinkInterfaceId})
    link.EntityData.Leafs.Append("link-neighbor-interface-id", types.YLeaf{"LinkNeighborInterfaceId", link.LinkNeighborInterfaceId})
    link.EntityData.Leafs.Append("link-neighbor-router-id", types.YLeaf{"LinkNeighborRouterId", link.LinkNeighborRouterId})

    link.EntityData.YListKeys = []string {}

    return &(link.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType
// Network LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor router list. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborRouter []interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetEntityData() *types.CommonEntityData {
    networkLsaType.EntityData.YFilter = networkLsaType.YFilter
    networkLsaType.EntityData.YangName = "network-lsa-type"
    networkLsaType.EntityData.BundleName = "cisco_ios_xr"
    networkLsaType.EntityData.ParentYangName = "lsa-info"
    networkLsaType.EntityData.SegmentPath = "network-lsa-type"
    networkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/" + networkLsaType.EntityData.SegmentPath
    networkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkLsaType.EntityData.Children = types.NewOrderedMap()
    networkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &networkLsaType.LsaHeader})
    networkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &networkLsaType.LsaDetail})
    networkLsaType.EntityData.Leafs = types.NewOrderedMap()
    networkLsaType.EntityData.Leafs.Append("neighbor-router", types.YLeaf{"NeighborRouter", networkLsaType.NeighborRouter})

    networkLsaType.EntityData.YListKeys = []string {}

    return &(networkLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "network-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/network-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "network-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/network-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType
// Inter Area Prefix LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetEntityData() *types.CommonEntityData {
    interAreaPrefixLsaType.EntityData.YFilter = interAreaPrefixLsaType.YFilter
    interAreaPrefixLsaType.EntityData.YangName = "inter-area-prefix-lsa-type"
    interAreaPrefixLsaType.EntityData.BundleName = "cisco_ios_xr"
    interAreaPrefixLsaType.EntityData.ParentYangName = "lsa-info"
    interAreaPrefixLsaType.EntityData.SegmentPath = "inter-area-prefix-lsa-type"
    interAreaPrefixLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/" + interAreaPrefixLsaType.EntityData.SegmentPath
    interAreaPrefixLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interAreaPrefixLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interAreaPrefixLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interAreaPrefixLsaType.EntityData.Children = types.NewOrderedMap()
    interAreaPrefixLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &interAreaPrefixLsaType.LsaHeader})
    interAreaPrefixLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &interAreaPrefixLsaType.LsaDetail})
    interAreaPrefixLsaType.EntityData.Leafs = types.NewOrderedMap()
    interAreaPrefixLsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", interAreaPrefixLsaType.Prefix})
    interAreaPrefixLsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interAreaPrefixLsaType.PrefixLength})
    interAreaPrefixLsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", interAreaPrefixLsaType.Priority})

    interAreaPrefixLsaType.EntityData.YListKeys = []string {}

    return &(interAreaPrefixLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "inter-area-prefix-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/inter-area-prefix-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "inter-area-prefix-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/inter-area-prefix-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType
// Inter Area Router LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetEntityData() *types.CommonEntityData {
    interAreaRouterLsaType.EntityData.YFilter = interAreaRouterLsaType.YFilter
    interAreaRouterLsaType.EntityData.YangName = "inter-area-router-lsa-type"
    interAreaRouterLsaType.EntityData.BundleName = "cisco_ios_xr"
    interAreaRouterLsaType.EntityData.ParentYangName = "lsa-info"
    interAreaRouterLsaType.EntityData.SegmentPath = "inter-area-router-lsa-type"
    interAreaRouterLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/" + interAreaRouterLsaType.EntityData.SegmentPath
    interAreaRouterLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interAreaRouterLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interAreaRouterLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interAreaRouterLsaType.EntityData.Children = types.NewOrderedMap()
    interAreaRouterLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &interAreaRouterLsaType.LsaHeader})
    interAreaRouterLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &interAreaRouterLsaType.LsaDetail})
    interAreaRouterLsaType.EntityData.Leafs = types.NewOrderedMap()
    interAreaRouterLsaType.EntityData.Leafs.Append("lsa-router-id", types.YLeaf{"LsaRouterId", interAreaRouterLsaType.LsaRouterId})

    interAreaRouterLsaType.EntityData.YListKeys = []string {}

    return &(interAreaRouterLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "inter-area-router-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/inter-area-router-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "inter-area-router-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/inter-area-router-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType
// External LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetEntityData() *types.CommonEntityData {
    externalLsaType.EntityData.YFilter = externalLsaType.YFilter
    externalLsaType.EntityData.YangName = "external-lsa-type"
    externalLsaType.EntityData.BundleName = "cisco_ios_xr"
    externalLsaType.EntityData.ParentYangName = "lsa-info"
    externalLsaType.EntityData.SegmentPath = "external-lsa-type"
    externalLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/" + externalLsaType.EntityData.SegmentPath
    externalLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalLsaType.EntityData.Children = types.NewOrderedMap()
    externalLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &externalLsaType.LsaHeader})
    externalLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &externalLsaType.LsaDetail})
    externalLsaType.EntityData.Leafs = types.NewOrderedMap()
    externalLsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", externalLsaType.Prefix})
    externalLsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", externalLsaType.PrefixLength})
    externalLsaType.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", externalLsaType.MetricType})
    externalLsaType.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", externalLsaType.TosCost})
    externalLsaType.EntityData.Leafs.Append("is-forwarding-address-set", types.YLeaf{"IsForwardingAddressSet", externalLsaType.IsForwardingAddressSet})
    externalLsaType.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", externalLsaType.ForwardingAddress})
    externalLsaType.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", externalLsaType.ExternalTag})
    externalLsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", externalLsaType.Priority})

    externalLsaType.EntityData.YListKeys = []string {}

    return &(externalLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "external-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/external-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "external-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/external-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType
// NSSA External LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetEntityData() *types.CommonEntityData {
    nssalsaType.EntityData.YFilter = nssalsaType.YFilter
    nssalsaType.EntityData.YangName = "nssalsa-type"
    nssalsaType.EntityData.BundleName = "cisco_ios_xr"
    nssalsaType.EntityData.ParentYangName = "lsa-info"
    nssalsaType.EntityData.SegmentPath = "nssalsa-type"
    nssalsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/" + nssalsaType.EntityData.SegmentPath
    nssalsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nssalsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nssalsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nssalsaType.EntityData.Children = types.NewOrderedMap()
    nssalsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &nssalsaType.LsaHeader})
    nssalsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &nssalsaType.LsaDetail})
    nssalsaType.EntityData.Leafs = types.NewOrderedMap()
    nssalsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", nssalsaType.Prefix})
    nssalsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", nssalsaType.PrefixLength})
    nssalsaType.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", nssalsaType.MetricType})
    nssalsaType.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", nssalsaType.TosCost})
    nssalsaType.EntityData.Leafs.Append("is-forwarding-address-set", types.YLeaf{"IsForwardingAddressSet", nssalsaType.IsForwardingAddressSet})
    nssalsaType.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", nssalsaType.ForwardingAddress})
    nssalsaType.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", nssalsaType.ExternalTag})
    nssalsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", nssalsaType.Priority})

    nssalsaType.EntityData.YListKeys = []string {}

    return &(nssalsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "nssalsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/nssalsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "nssalsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/nssalsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType
// Link LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // LSA link local . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LsaLinkLocal interface{}

    // Router priority . The type is interface{} with range: 0..255.
    RouterPriority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix.
    Prefix []*Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetEntityData() *types.CommonEntityData {
    linkLsaType.EntityData.YFilter = linkLsaType.YFilter
    linkLsaType.EntityData.YangName = "link-lsa-type"
    linkLsaType.EntityData.BundleName = "cisco_ios_xr"
    linkLsaType.EntityData.ParentYangName = "lsa-info"
    linkLsaType.EntityData.SegmentPath = "link-lsa-type"
    linkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/" + linkLsaType.EntityData.SegmentPath
    linkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkLsaType.EntityData.Children = types.NewOrderedMap()
    linkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &linkLsaType.LsaHeader})
    linkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &linkLsaType.LsaDetail})
    linkLsaType.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range linkLsaType.Prefix {
        types.SetYListKey(linkLsaType.Prefix[i], i)
        linkLsaType.EntityData.Children.Append(types.GetSegmentPath(linkLsaType.Prefix[i]), types.YChild{"Prefix", linkLsaType.Prefix[i]})
    }
    linkLsaType.EntityData.Leafs = types.NewOrderedMap()
    linkLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkLsaType.InterfaceName})
    linkLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", linkLsaType.IsVirtualLink})
    linkLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", linkLsaType.VirtualLinkId})
    linkLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", linkLsaType.IsShamLink})
    linkLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", linkLsaType.ShamLinkId})
    linkLsaType.EntityData.Leafs.Append("lsa-link-local", types.YLeaf{"LsaLinkLocal", linkLsaType.LsaLinkLocal})
    linkLsaType.EntityData.Leafs.Append("router-priority", types.YLeaf{"RouterPriority", linkLsaType.RouterPriority})

    linkLsaType.EntityData.YListKeys = []string {}

    return &(linkLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "link-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/link-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "link-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/link-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "link-lsa-type"
    prefix.EntityData.SegmentPath = "prefix" + types.AddNoKeyToken(prefix)
    prefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/link-lsa-type/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-length", types.YLeaf{"Ospfv3PrefixLength", prefix.Ospfv3PrefixLength})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-options", types.YLeaf{"Ospfv3PrefixOptions", prefix.Ospfv3PrefixOptions})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-metric", types.YLeaf{"Ospfv3PrefixMetric", prefix.Ospfv3PrefixMetric})
    prefix.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", prefix.Priority})

    prefix.EntityData.YListKeys = []string {}

    return &(prefix.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType
// Intra Area Prefix LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference type . The type is Ospfv3Lsa1.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // Reference advertised router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ReferenceAdvertisedRouter interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix.
    Prefix []*Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetEntityData() *types.CommonEntityData {
    intraAreaPrefixLsaType.EntityData.YFilter = intraAreaPrefixLsaType.YFilter
    intraAreaPrefixLsaType.EntityData.YangName = "intra-area-prefix-lsa-type"
    intraAreaPrefixLsaType.EntityData.BundleName = "cisco_ios_xr"
    intraAreaPrefixLsaType.EntityData.ParentYangName = "lsa-info"
    intraAreaPrefixLsaType.EntityData.SegmentPath = "intra-area-prefix-lsa-type"
    intraAreaPrefixLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/" + intraAreaPrefixLsaType.EntityData.SegmentPath
    intraAreaPrefixLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    intraAreaPrefixLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    intraAreaPrefixLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    intraAreaPrefixLsaType.EntityData.Children = types.NewOrderedMap()
    intraAreaPrefixLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &intraAreaPrefixLsaType.LsaHeader})
    intraAreaPrefixLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &intraAreaPrefixLsaType.LsaDetail})
    intraAreaPrefixLsaType.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range intraAreaPrefixLsaType.Prefix {
        types.SetYListKey(intraAreaPrefixLsaType.Prefix[i], i)
        intraAreaPrefixLsaType.EntityData.Children.Append(types.GetSegmentPath(intraAreaPrefixLsaType.Prefix[i]), types.YChild{"Prefix", intraAreaPrefixLsaType.Prefix[i]})
    }
    intraAreaPrefixLsaType.EntityData.Leafs = types.NewOrderedMap()
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-type", types.YLeaf{"ReferenceType", intraAreaPrefixLsaType.ReferenceType})
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-lsa-id", types.YLeaf{"ReferenceLsaId", intraAreaPrefixLsaType.ReferenceLsaId})
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-advertised-router", types.YLeaf{"ReferenceAdvertisedRouter", intraAreaPrefixLsaType.ReferenceAdvertisedRouter})

    intraAreaPrefixLsaType.EntityData.YListKeys = []string {}

    return &(intraAreaPrefixLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    prefix.EntityData.SegmentPath = "prefix" + types.AddNoKeyToken(prefix)
    prefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-length", types.YLeaf{"Ospfv3PrefixLength", prefix.Ospfv3PrefixLength})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-options", types.YLeaf{"Ospfv3PrefixOptions", prefix.Ospfv3PrefixOptions})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-metric", types.YLeaf{"Ospfv3PrefixMetric", prefix.Ospfv3PrefixMetric})
    prefix.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", prefix.Priority})

    prefix.EntityData.YListKeys = []string {}

    return &(prefix.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa
// Grace LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // The grace periord where helper routers should wait before advertising it
    // fully adjacent(s) . The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is Ospfv3GracefulRestartReason.
    GraceReason interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetEntityData() *types.CommonEntityData {
    graceLsa.EntityData.YFilter = graceLsa.YFilter
    graceLsa.EntityData.YangName = "grace-lsa"
    graceLsa.EntityData.BundleName = "cisco_ios_xr"
    graceLsa.EntityData.ParentYangName = "lsa-info"
    graceLsa.EntityData.SegmentPath = "grace-lsa"
    graceLsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/" + graceLsa.EntityData.SegmentPath
    graceLsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    graceLsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    graceLsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    graceLsa.EntityData.Children = types.NewOrderedMap()
    graceLsa.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &graceLsa.LsaHeader})
    graceLsa.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &graceLsa.LsaDetail})
    graceLsa.EntityData.Leafs = types.NewOrderedMap()
    graceLsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", graceLsa.InterfaceName})
    graceLsa.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", graceLsa.IsVirtualLink})
    graceLsa.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", graceLsa.VirtualLinkId})
    graceLsa.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", graceLsa.IsShamLink})
    graceLsa.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", graceLsa.ShamLinkId})
    graceLsa.EntityData.Leafs.Append("grace-period", types.YLeaf{"GracePeriod", graceLsa.GracePeriod})
    graceLsa.EntityData.Leafs.Append("grace-reason", types.YLeaf{"GraceReason", graceLsa.GraceReason})

    graceLsa.EntityData.YListKeys = []string {}

    return &(graceLsa.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "grace-lsa"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/grace-lsa/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "grace-lsa"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/grace-lsa/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType
// Unknown Link Scope LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetEntityData() *types.CommonEntityData {
    unknownLinkLsaType.EntityData.YFilter = unknownLinkLsaType.YFilter
    unknownLinkLsaType.EntityData.YangName = "unknown-link-lsa-type"
    unknownLinkLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownLinkLsaType.EntityData.ParentYangName = "lsa-info"
    unknownLinkLsaType.EntityData.SegmentPath = "unknown-link-lsa-type"
    unknownLinkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/" + unknownLinkLsaType.EntityData.SegmentPath
    unknownLinkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownLinkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownLinkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownLinkLsaType.EntityData.Children = types.NewOrderedMap()
    unknownLinkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownLinkLsaType.LsaHeader})
    unknownLinkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownLinkLsaType.LsaDetail})
    unknownLinkLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownLinkLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownLinkLsaType.InterfaceName})
    unknownLinkLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownLinkLsaType.IsVirtualLink})
    unknownLinkLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownLinkLsaType.VirtualLinkId})
    unknownLinkLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownLinkLsaType.IsShamLink})
    unknownLinkLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownLinkLsaType.ShamLinkId})

    unknownLinkLsaType.EntityData.YListKeys = []string {}

    return &(unknownLinkLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-link-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/unknown-link-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-link-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/unknown-link-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType
// Unknown-Area scope LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetEntityData() *types.CommonEntityData {
    unknownAreaLsaType.EntityData.YFilter = unknownAreaLsaType.YFilter
    unknownAreaLsaType.EntityData.YangName = "unknown-area-lsa-type"
    unknownAreaLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownAreaLsaType.EntityData.ParentYangName = "lsa-info"
    unknownAreaLsaType.EntityData.SegmentPath = "unknown-area-lsa-type"
    unknownAreaLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/" + unknownAreaLsaType.EntityData.SegmentPath
    unknownAreaLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownAreaLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownAreaLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownAreaLsaType.EntityData.Children = types.NewOrderedMap()
    unknownAreaLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownAreaLsaType.LsaHeader})
    unknownAreaLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownAreaLsaType.LsaDetail})
    unknownAreaLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownAreaLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownAreaLsaType.InterfaceName})
    unknownAreaLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownAreaLsaType.IsVirtualLink})
    unknownAreaLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownAreaLsaType.VirtualLinkId})
    unknownAreaLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownAreaLsaType.IsShamLink})
    unknownAreaLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownAreaLsaType.ShamLinkId})

    unknownAreaLsaType.EntityData.YListKeys = []string {}

    return &(unknownAreaLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-area-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/unknown-area-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-area-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/unknown-area-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType
// Unknown-AS scope LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetEntityData() *types.CommonEntityData {
    unknownAslsaType.EntityData.YFilter = unknownAslsaType.YFilter
    unknownAslsaType.EntityData.YangName = "unknown-aslsa-type"
    unknownAslsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownAslsaType.EntityData.ParentYangName = "lsa-info"
    unknownAslsaType.EntityData.SegmentPath = "unknown-aslsa-type"
    unknownAslsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/" + unknownAslsaType.EntityData.SegmentPath
    unknownAslsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownAslsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownAslsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownAslsaType.EntityData.Children = types.NewOrderedMap()
    unknownAslsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownAslsaType.LsaHeader})
    unknownAslsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownAslsaType.LsaDetail})
    unknownAslsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownAslsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownAslsaType.InterfaceName})
    unknownAslsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownAslsaType.IsVirtualLink})
    unknownAslsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownAslsaType.VirtualLinkId})
    unknownAslsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownAslsaType.IsShamLink})
    unknownAslsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownAslsaType.ShamLinkId})

    unknownAslsaType.EntityData.YListKeys = []string {}

    return &(unknownAslsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-aslsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/unknown-aslsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-aslsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/unknown-aslsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType
// Unknown LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetEntityData() *types.CommonEntityData {
    unknownLsaType.EntityData.YFilter = unknownLsaType.YFilter
    unknownLsaType.EntityData.YangName = "unknown-lsa-type"
    unknownLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownLsaType.EntityData.ParentYangName = "lsa-info"
    unknownLsaType.EntityData.SegmentPath = "unknown-lsa-type"
    unknownLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/" + unknownLsaType.EntityData.SegmentPath
    unknownLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownLsaType.EntityData.Children = types.NewOrderedMap()
    unknownLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownLsaType.LsaHeader})
    unknownLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownLsaType.LsaDetail})
    unknownLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownLsaType.InterfaceName})
    unknownLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownLsaType.IsVirtualLink})
    unknownLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownLsaType.VirtualLinkId})
    unknownLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownLsaType.IsShamLink})
    unknownLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownLsaType.ShamLinkId})

    unknownLsaType.EntityData.YListKeys = []string {}

    return &(unknownLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/unknown-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-table/lsa-internal-table/lsa/lsa-info/unknown-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable
// OSPFv3 interface information table for all areas
type Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 interface information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface.
    Interface []*Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface
}

func (interfaceProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable) GetEntityData() *types.CommonEntityData {
    interfaceProcessTable.EntityData.YFilter = interfaceProcessTable.YFilter
    interfaceProcessTable.EntityData.YangName = "interface-process-table"
    interfaceProcessTable.EntityData.BundleName = "cisco_ios_xr"
    interfaceProcessTable.EntityData.ParentYangName = "default-vrf"
    interfaceProcessTable.EntityData.SegmentPath = "interface-process-table"
    interfaceProcessTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + interfaceProcessTable.EntityData.SegmentPath
    interfaceProcessTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceProcessTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceProcessTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceProcessTable.EntityData.Children = types.NewOrderedMap()
    interfaceProcessTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaceProcessTable.Interface {
        interfaceProcessTable.EntityData.Children.Append(types.GetSegmentPath(interfaceProcessTable.Interface[i]), types.YChild{"Interface", interfaceProcessTable.Interface[i]})
    }
    interfaceProcessTable.EntityData.Leafs = types.NewOrderedMap()

    interfaceProcessTable.EntityData.YListKeys = []string {}

    return &(interfaceProcessTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface
// OSPFv3 interface information
type Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface state. The type is ImStateEnum.
    InterfaceState interface{}

    // If true, line protocol is up . The type is bool.
    IsInterfaceLineUp interface{}

    // If true, interface IP security is required . The type is bool.
    IsInterfaceIpSecurityRequired interface{}

    // If true, interface IP security is active . The type is bool.
    IsInterfaceIpSecurityActive interface{}

    // Interface IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface number . The type is interface{} with range: 0..4294967295.
    InterfaceNumber interface{}

    // Interface router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceRouterId interface{}

    // Network type. The type is Ospfv3Interface.
    NetworkType interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // If true, interface flood reduction is active . The type is bool.
    IsInterfaceFloodReduction interface{}

    // If true, configured as demand circuit . The type is bool.
    IsDemandCircuitConfigured interface{}

    // If true, interface running as demand circuit. The type is bool.
    IsInterfaceDemandCircuit interface{}

    // Number of LSAs with demand circuit bit not set for the area in which the
    // interface is running. The type is interface{} with range: 0..4294967295.
    InterfaceDcBitlessLsAs interface{}

    // Interface transmission delay (sec). The type is interface{} with range:
    // 0..65535.
    TransmissionDelay interface{}

    // Interface state. The type is Ospfv3InterfaceState.
    OspfInterfaceState interface{}

    // Interface priority. The type is interface{} with range: 0..255.
    InterfacePriority interface{}

    // If true, designated router. The type is bool.
    IsDesignatedRouter interface{}

    // Designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DesignatedRouterId interface{}

    // Designated router interface address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DesignatedRouterAddress interface{}

    // Backup designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterId interface{}

    // Backup designated router interface address. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterAddress interface{}

    // The amount of time in seconds before flush timer for old network LSA
    // expires . The type is interface{} with range: 0..4294967295. Units are
    // second.
    NetworkLsaFlushTimer interface{}

    // Filter is configured for out going LSAs . The type is bool.
    IsInterfaceLsaFiltered interface{}

    // Configured hello interval (s). The type is interface{} with range:
    // 0..4294967295.
    HelloInterval interface{}

    // Configured dead interval (s) . The type is interface{} with range:
    // 0..4294967295.
    DeadInterval interface{}

    // Configured wait interval (s) . The type is interface{} with range:
    // 0..4294967295.
    WaitInterval interface{}

    // Configured retransmit interval (s) . The type is interface{} with range:
    // 0..4294967295.
    InterfaceRetransmissionInterval interface{}

    // Time until next Hello (s) . The type is interface{} with range:
    // 0..4294967295.
    NextHelloTime interface{}

    // Interface authentication spi . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAuthenticationSpi interface{}

    // Interface authentication transmit . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAuthenticationTransmit interface{}

    // If true, interface encryption is enabled . The type is bool.
    IsInterfaceEncryptionEnabled interface{}

    // If true prefix suppression is enabled. The type is bool.
    IsPrefixSuppress interface{}

    // Interface encryption spi. The type is interface{} with range:
    // 0..4294967295.
    InterfaceEncryptionSpi interface{}

    // Interface encryption transmitted . The type is interface{} with range:
    // 0..4294967295.
    InterfaceEncryptionTransmitted interface{}

    // Interface encrypted authentication transmitted . The type is interface{}
    // with range: 0..4294967295.
    InterfaceEncryptedAuthenticationTransmitted interface{}

    // Number of adjacent neighbors. The type is interface{} with range:
    // 0..4294967295.
    AdjacentNeighbor interface{}

    // Interface reference count . The type is interface{} with range:
    // 0..4294967295.
    InterfaceReferences interface{}

    // If true, configured as LDP sync. The type is bool.
    ConfiguredLdpSync interface{}

    // If true, interface LDP sync is achieved. The type is bool.
    InterfaceLdpSync interface{}

    // Active interface details .
    ActiveInterface Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface

    // BFD information .
    InterfaceBfd Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd

    // Information for neighbors on the interface. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor.
    InterfaceNeighbor []*Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor
}

func (self *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interface-process-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/interface-process-table/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("active-interface", types.YChild{"ActiveInterface", &self.ActiveInterface})
    self.EntityData.Children.Append("interface-bfd", types.YChild{"InterfaceBfd", &self.InterfaceBfd})
    self.EntityData.Children.Append("interface-neighbor", types.YChild{"InterfaceNeighbor", nil})
    for i := range self.InterfaceNeighbor {
        types.SetYListKey(self.InterfaceNeighbor[i], i)
        self.EntityData.Children.Append(types.GetSegmentPath(self.InterfaceNeighbor[i]), types.YChild{"InterfaceNeighbor", self.InterfaceNeighbor[i]})
    }
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-state", types.YLeaf{"InterfaceState", self.InterfaceState})
    self.EntityData.Leafs.Append("is-interface-line-up", types.YLeaf{"IsInterfaceLineUp", self.IsInterfaceLineUp})
    self.EntityData.Leafs.Append("is-interface-ip-security-required", types.YLeaf{"IsInterfaceIpSecurityRequired", self.IsInterfaceIpSecurityRequired})
    self.EntityData.Leafs.Append("is-interface-ip-security-active", types.YLeaf{"IsInterfaceIpSecurityActive", self.IsInterfaceIpSecurityActive})
    self.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", self.InterfaceAddress})
    self.EntityData.Leafs.Append("interface-number", types.YLeaf{"InterfaceNumber", self.InterfaceNumber})
    self.EntityData.Leafs.Append("interface-router-id", types.YLeaf{"InterfaceRouterId", self.InterfaceRouterId})
    self.EntityData.Leafs.Append("network-type", types.YLeaf{"NetworkType", self.NetworkType})
    self.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", self.InterfaceLinkCost})
    self.EntityData.Leafs.Append("is-interface-flood-reduction", types.YLeaf{"IsInterfaceFloodReduction", self.IsInterfaceFloodReduction})
    self.EntityData.Leafs.Append("is-demand-circuit-configured", types.YLeaf{"IsDemandCircuitConfigured", self.IsDemandCircuitConfigured})
    self.EntityData.Leafs.Append("is-interface-demand-circuit", types.YLeaf{"IsInterfaceDemandCircuit", self.IsInterfaceDemandCircuit})
    self.EntityData.Leafs.Append("interface-dc-bitless-ls-as", types.YLeaf{"InterfaceDcBitlessLsAs", self.InterfaceDcBitlessLsAs})
    self.EntityData.Leafs.Append("transmission-delay", types.YLeaf{"TransmissionDelay", self.TransmissionDelay})
    self.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", self.OspfInterfaceState})
    self.EntityData.Leafs.Append("interface-priority", types.YLeaf{"InterfacePriority", self.InterfacePriority})
    self.EntityData.Leafs.Append("is-designated-router", types.YLeaf{"IsDesignatedRouter", self.IsDesignatedRouter})
    self.EntityData.Leafs.Append("designated-router-id", types.YLeaf{"DesignatedRouterId", self.DesignatedRouterId})
    self.EntityData.Leafs.Append("designated-router-address", types.YLeaf{"DesignatedRouterAddress", self.DesignatedRouterAddress})
    self.EntityData.Leafs.Append("backup-designated-router-id", types.YLeaf{"BackupDesignatedRouterId", self.BackupDesignatedRouterId})
    self.EntityData.Leafs.Append("backup-designated-router-address", types.YLeaf{"BackupDesignatedRouterAddress", self.BackupDesignatedRouterAddress})
    self.EntityData.Leafs.Append("network-lsa-flush-timer", types.YLeaf{"NetworkLsaFlushTimer", self.NetworkLsaFlushTimer})
    self.EntityData.Leafs.Append("is-interface-lsa-filtered", types.YLeaf{"IsInterfaceLsaFiltered", self.IsInterfaceLsaFiltered})
    self.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", self.HelloInterval})
    self.EntityData.Leafs.Append("dead-interval", types.YLeaf{"DeadInterval", self.DeadInterval})
    self.EntityData.Leafs.Append("wait-interval", types.YLeaf{"WaitInterval", self.WaitInterval})
    self.EntityData.Leafs.Append("interface-retransmission-interval", types.YLeaf{"InterfaceRetransmissionInterval", self.InterfaceRetransmissionInterval})
    self.EntityData.Leafs.Append("next-hello-time", types.YLeaf{"NextHelloTime", self.NextHelloTime})
    self.EntityData.Leafs.Append("interface-authentication-spi", types.YLeaf{"InterfaceAuthenticationSpi", self.InterfaceAuthenticationSpi})
    self.EntityData.Leafs.Append("interface-authentication-transmit", types.YLeaf{"InterfaceAuthenticationTransmit", self.InterfaceAuthenticationTransmit})
    self.EntityData.Leafs.Append("is-interface-encryption-enabled", types.YLeaf{"IsInterfaceEncryptionEnabled", self.IsInterfaceEncryptionEnabled})
    self.EntityData.Leafs.Append("is-prefix-suppress", types.YLeaf{"IsPrefixSuppress", self.IsPrefixSuppress})
    self.EntityData.Leafs.Append("interface-encryption-spi", types.YLeaf{"InterfaceEncryptionSpi", self.InterfaceEncryptionSpi})
    self.EntityData.Leafs.Append("interface-encryption-transmitted", types.YLeaf{"InterfaceEncryptionTransmitted", self.InterfaceEncryptionTransmitted})
    self.EntityData.Leafs.Append("interface-encrypted-authentication-transmitted", types.YLeaf{"InterfaceEncryptedAuthenticationTransmitted", self.InterfaceEncryptedAuthenticationTransmitted})
    self.EntityData.Leafs.Append("adjacent-neighbor", types.YLeaf{"AdjacentNeighbor", self.AdjacentNeighbor})
    self.EntityData.Leafs.Append("interface-references", types.YLeaf{"InterfaceReferences", self.InterfaceReferences})
    self.EntityData.Leafs.Append("configured-ldp-sync", types.YLeaf{"ConfiguredLdpSync", self.ConfiguredLdpSync})
    self.EntityData.Leafs.Append("interface-ldp-sync", types.YLeaf{"InterfaceLdpSync", self.InterfaceLdpSync})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface
// Active interface details 
type Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Wait time for DR/BDR selection (s). The type is interface{} with range:
    // 0..4294967295.
    WaitTime interface{}

    // Area scope LSAs flood index. The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaFloodIndex interface{}

    // AS scope LSAs flood index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsFloodIndex interface{}

    // Interface flood link index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkFloodIndex interface{}

    // Flood queue length. The type is interface{} with range: 0..4294967295.
    FloodQueueLength interface{}

    // Next LSA to flood (Area scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaNextFlood interface{}

    // Index of next LSA to flood (Area scope) . The type is interface{} with
    // range: 0..4294967295.
    InterfaceAreaNextFloodIndex interface{}

    // Next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFlood interface{}

    // Index of next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFloodIndex interface{}

    // Interface link next flood information . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkNextFlood interface{}

    // Interface link next information index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkNextIndex interface{}

    // Last flood scan length . The type is interface{} with range: 0..4294967295.
    FloodScanLength interface{}

    // Maximum flood length . The type is interface{} with range: 0..4294967295.
    MaximumFloodLength interface{}

    // Last flood scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastFloodTime interface{}

    // Maximum flood time (ms) . The type is interface{} with range:
    // 0..4294967295.
    MaximumFloodTime interface{}

    // Time until next flood pacing timer (ms) . The type is interface{} with
    // range: 0..4294967295.
    InterfaceFloodPacingTimer interface{}

    // Total number of neighbors . The type is interface{} with range: 0..65535.
    InterfaceNeighbors interface{}

    // Number of neighbors for which hellos are suppressed . The type is
    // interface{} with range: 0..65535.
    SuppressedHellos interface{}
}

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface) GetEntityData() *types.CommonEntityData {
    activeInterface.EntityData.YFilter = activeInterface.YFilter
    activeInterface.EntityData.YangName = "active-interface"
    activeInterface.EntityData.BundleName = "cisco_ios_xr"
    activeInterface.EntityData.ParentYangName = "interface"
    activeInterface.EntityData.SegmentPath = "active-interface"
    activeInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/interface-process-table/interface/" + activeInterface.EntityData.SegmentPath
    activeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    activeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    activeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    activeInterface.EntityData.Children = types.NewOrderedMap()
    activeInterface.EntityData.Leafs = types.NewOrderedMap()
    activeInterface.EntityData.Leafs.Append("wait-time", types.YLeaf{"WaitTime", activeInterface.WaitTime})
    activeInterface.EntityData.Leafs.Append("interface-area-flood-index", types.YLeaf{"InterfaceAreaFloodIndex", activeInterface.InterfaceAreaFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-as-flood-index", types.YLeaf{"InterfaceAsFloodIndex", activeInterface.InterfaceAsFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-link-flood-index", types.YLeaf{"InterfaceLinkFloodIndex", activeInterface.InterfaceLinkFloodIndex})
    activeInterface.EntityData.Leafs.Append("flood-queue-length", types.YLeaf{"FloodQueueLength", activeInterface.FloodQueueLength})
    activeInterface.EntityData.Leafs.Append("interface-area-next-flood", types.YLeaf{"InterfaceAreaNextFlood", activeInterface.InterfaceAreaNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-area-next-flood-index", types.YLeaf{"InterfaceAreaNextFloodIndex", activeInterface.InterfaceAreaNextFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-as-next-flood", types.YLeaf{"InterfaceAsNextFlood", activeInterface.InterfaceAsNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-as-next-flood-index", types.YLeaf{"InterfaceAsNextFloodIndex", activeInterface.InterfaceAsNextFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-link-next-flood", types.YLeaf{"InterfaceLinkNextFlood", activeInterface.InterfaceLinkNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-link-next-index", types.YLeaf{"InterfaceLinkNextIndex", activeInterface.InterfaceLinkNextIndex})
    activeInterface.EntityData.Leafs.Append("flood-scan-length", types.YLeaf{"FloodScanLength", activeInterface.FloodScanLength})
    activeInterface.EntityData.Leafs.Append("maximum-flood-length", types.YLeaf{"MaximumFloodLength", activeInterface.MaximumFloodLength})
    activeInterface.EntityData.Leafs.Append("last-flood-time", types.YLeaf{"LastFloodTime", activeInterface.LastFloodTime})
    activeInterface.EntityData.Leafs.Append("maximum-flood-time", types.YLeaf{"MaximumFloodTime", activeInterface.MaximumFloodTime})
    activeInterface.EntityData.Leafs.Append("interface-flood-pacing-timer", types.YLeaf{"InterfaceFloodPacingTimer", activeInterface.InterfaceFloodPacingTimer})
    activeInterface.EntityData.Leafs.Append("interface-neighbors", types.YLeaf{"InterfaceNeighbors", activeInterface.InterfaceNeighbors})
    activeInterface.EntityData.Leafs.Append("suppressed-hellos", types.YLeaf{"SuppressedHellos", activeInterface.SuppressedHellos})

    activeInterface.EntityData.YListKeys = []string {}

    return &(activeInterface.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd
// BFD information 
type Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD Enable Mode on the interface - Default/Strict. The type is interface{}
    // with range: 0..4294967295.
    BfdIntfEnableMode interface{}

    // BFD interval (ms) . The type is interface{} with range: 0..4294967295.
    BfdInterval interface{}

    // BFD detection multiplier . The type is interface{} with range:
    // 0..4294967295.
    BfdDetectionMultiplier interface{}
}

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd) GetEntityData() *types.CommonEntityData {
    interfaceBfd.EntityData.YFilter = interfaceBfd.YFilter
    interfaceBfd.EntityData.YangName = "interface-bfd"
    interfaceBfd.EntityData.BundleName = "cisco_ios_xr"
    interfaceBfd.EntityData.ParentYangName = "interface"
    interfaceBfd.EntityData.SegmentPath = "interface-bfd"
    interfaceBfd.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/interface-process-table/interface/" + interfaceBfd.EntityData.SegmentPath
    interfaceBfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBfd.EntityData.Children = types.NewOrderedMap()
    interfaceBfd.EntityData.Leafs = types.NewOrderedMap()
    interfaceBfd.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", interfaceBfd.BfdIntfEnableMode})
    interfaceBfd.EntityData.Leafs.Append("bfd-interval", types.YLeaf{"BfdInterval", interfaceBfd.BfdInterval})
    interfaceBfd.EntityData.Leafs.Append("bfd-detection-multiplier", types.YLeaf{"BfdDetectionMultiplier", interfaceBfd.BfdDetectionMultiplier})

    interfaceBfd.EntityData.YListKeys = []string {}

    return &(interfaceBfd.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor
// Information for neighbors on the interface
type Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceNeighborId interface{}

    // Cost of link to neighbor. The type is interface{} with range:
    // 0..4294967295.
    InterfaceNeighborCost interface{}

    // If true, designated router is found . The type is bool.
    IsNeighborDr interface{}

    // If true, backup designated router is found . The type is bool.
    IsNeighborBdr interface{}

    // If true, hello is suppressed . The type is bool.
    IsHelloSuppressed interface{}
}

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetEntityData() *types.CommonEntityData {
    interfaceNeighbor.EntityData.YFilter = interfaceNeighbor.YFilter
    interfaceNeighbor.EntityData.YangName = "interface-neighbor"
    interfaceNeighbor.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighbor.EntityData.ParentYangName = "interface"
    interfaceNeighbor.EntityData.SegmentPath = "interface-neighbor" + types.AddNoKeyToken(interfaceNeighbor)
    interfaceNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/interface-process-table/interface/" + interfaceNeighbor.EntityData.SegmentPath
    interfaceNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighbor.EntityData.Children = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs.Append("interface-neighbor-id", types.YLeaf{"InterfaceNeighborId", interfaceNeighbor.InterfaceNeighborId})
    interfaceNeighbor.EntityData.Leafs.Append("interface-neighbor-cost", types.YLeaf{"InterfaceNeighborCost", interfaceNeighbor.InterfaceNeighborCost})
    interfaceNeighbor.EntityData.Leafs.Append("is-neighbor-dr", types.YLeaf{"IsNeighborDr", interfaceNeighbor.IsNeighborDr})
    interfaceNeighbor.EntityData.Leafs.Append("is-neighbor-bdr", types.YLeaf{"IsNeighborBdr", interfaceNeighbor.IsNeighborBdr})
    interfaceNeighbor.EntityData.Leafs.Append("is-hello-suppressed", types.YLeaf{"IsHelloSuppressed", interfaceNeighbor.IsHelloSuppressed})

    interfaceNeighbor.EntityData.YListKeys = []string {}

    return &(interfaceNeighbor.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Redistributions
// Redistribution information table
type Ospfv3_Processes_Process_DefaultVrf_Redistributions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Redistribution information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution.
    Redistribution []*Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution
}

func (redistributions *Ospfv3_Processes_Process_DefaultVrf_Redistributions) GetEntityData() *types.CommonEntityData {
    redistributions.EntityData.YFilter = redistributions.YFilter
    redistributions.EntityData.YangName = "redistributions"
    redistributions.EntityData.BundleName = "cisco_ios_xr"
    redistributions.EntityData.ParentYangName = "default-vrf"
    redistributions.EntityData.SegmentPath = "redistributions"
    redistributions.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + redistributions.EntityData.SegmentPath
    redistributions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributions.EntityData.Children = types.NewOrderedMap()
    redistributions.EntityData.Children.Append("redistribution", types.YChild{"Redistribution", nil})
    for i := range redistributions.Redistribution {
        types.SetYListKey(redistributions.Redistribution[i], i)
        redistributions.EntityData.Children.Append(types.GetSegmentPath(redistributions.Redistribution[i]), types.YChild{"Redistribution", redistributions.Redistribution[i]})
    }
    redistributions.EntityData.Leafs = types.NewOrderedMap()

    redistributions.EntityData.YListKeys = []string {}

    return &(redistributions.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution
// Redistribution information
type Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Protocol name that is redistributed. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    ProtocolName interface{}

    // Process name of a protocolbeing redistributed . The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ProcessName interface{}

    // Protocol name . The type is string with length: 0..40.
    ProtocolNameXr interface{}

    // Process ID . The type is string with length: 0..40.
    ProcessId interface{}

    // red metric flag. The type is bool.
    RedMetricFlag interface{}

    // red metric. The type is interface{} with range: 0..4294967295.
    RedMetric interface{}

    // red mtype flag. The type is bool.
    RedMtypeFlag interface{}

    // red metric type. The type is interface{} with range: 0..255.
    RedMetricType interface{}

    // red tag. The type is interface{} with range: 0..4294967295.
    RedTag interface{}

    // Route policy name . The type is string.
    PolicyName interface{}
}

func (redistribution *Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution) GetEntityData() *types.CommonEntityData {
    redistribution.EntityData.YFilter = redistribution.YFilter
    redistribution.EntityData.YangName = "redistribution"
    redistribution.EntityData.BundleName = "cisco_ios_xr"
    redistribution.EntityData.ParentYangName = "redistributions"
    redistribution.EntityData.SegmentPath = "redistribution" + types.AddNoKeyToken(redistribution)
    redistribution.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/redistributions/" + redistribution.EntityData.SegmentPath
    redistribution.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistribution.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistribution.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistribution.EntityData.Children = types.NewOrderedMap()
    redistribution.EntityData.Leafs = types.NewOrderedMap()
    redistribution.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", redistribution.ProtocolName})
    redistribution.EntityData.Leafs.Append("process-name", types.YLeaf{"ProcessName", redistribution.ProcessName})
    redistribution.EntityData.Leafs.Append("protocol-name-xr", types.YLeaf{"ProtocolNameXr", redistribution.ProtocolNameXr})
    redistribution.EntityData.Leafs.Append("process-id", types.YLeaf{"ProcessId", redistribution.ProcessId})
    redistribution.EntityData.Leafs.Append("red-metric-flag", types.YLeaf{"RedMetricFlag", redistribution.RedMetricFlag})
    redistribution.EntityData.Leafs.Append("red-metric", types.YLeaf{"RedMetric", redistribution.RedMetric})
    redistribution.EntityData.Leafs.Append("red-mtype-flag", types.YLeaf{"RedMtypeFlag", redistribution.RedMtypeFlag})
    redistribution.EntityData.Leafs.Append("red-metric-type", types.YLeaf{"RedMetricType", redistribution.RedMetricType})
    redistribution.EntityData.Leafs.Append("red-tag", types.YLeaf{"RedTag", redistribution.RedTag})
    redistribution.EntityData.Leafs.Append("policy-name", types.YLeaf{"PolicyName", redistribution.PolicyName})

    redistribution.EntityData.YListKeys = []string {}

    return &(redistribution.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes
// OSPFv3 external route information table
type Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 external route information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute.
    ExternalRoute []*Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute
}

func (externalRoutes *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes) GetEntityData() *types.CommonEntityData {
    externalRoutes.EntityData.YFilter = externalRoutes.YFilter
    externalRoutes.EntityData.YangName = "external-routes"
    externalRoutes.EntityData.BundleName = "cisco_ios_xr"
    externalRoutes.EntityData.ParentYangName = "default-vrf"
    externalRoutes.EntityData.SegmentPath = "external-routes"
    externalRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + externalRoutes.EntityData.SegmentPath
    externalRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalRoutes.EntityData.Children = types.NewOrderedMap()
    externalRoutes.EntityData.Children.Append("external-route", types.YChild{"ExternalRoute", nil})
    for i := range externalRoutes.ExternalRoute {
        types.SetYListKey(externalRoutes.ExternalRoute[i], i)
        externalRoutes.EntityData.Children.Append(types.GetSegmentPath(externalRoutes.ExternalRoute[i]), types.YChild{"ExternalRoute", externalRoutes.ExternalRoute[i]})
    }
    externalRoutes.EntityData.Leafs = types.NewOrderedMap()

    externalRoutes.EntityData.YListKeys = []string {}

    return &(externalRoutes.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute
// OSPFv3 external route information
type Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Common Route topology information.
    RouteTopology Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology

    // Extended communities in the route.
    RouteExtendedCommunity Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity

    // List of paths to this route. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath.
    RoutePath []*Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath
}

func (externalRoute *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute) GetEntityData() *types.CommonEntityData {
    externalRoute.EntityData.YFilter = externalRoute.YFilter
    externalRoute.EntityData.YangName = "external-route"
    externalRoute.EntityData.BundleName = "cisco_ios_xr"
    externalRoute.EntityData.ParentYangName = "external-routes"
    externalRoute.EntityData.SegmentPath = "external-route" + types.AddNoKeyToken(externalRoute)
    externalRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/external-routes/" + externalRoute.EntityData.SegmentPath
    externalRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalRoute.EntityData.Children = types.NewOrderedMap()
    externalRoute.EntityData.Children.Append("route-topology", types.YChild{"RouteTopology", &externalRoute.RouteTopology})
    externalRoute.EntityData.Children.Append("route-extended-community", types.YChild{"RouteExtendedCommunity", &externalRoute.RouteExtendedCommunity})
    externalRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range externalRoute.RoutePath {
        types.SetYListKey(externalRoute.RoutePath[i], i)
        externalRoute.EntityData.Children.Append(types.GetSegmentPath(externalRoute.RoutePath[i]), types.YChild{"RoutePath", externalRoute.RoutePath[i]})
    }
    externalRoute.EntityData.Leafs = types.NewOrderedMap()
    externalRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", externalRoute.Prefix})
    externalRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", externalRoute.PrefixLength})

    externalRoute.EntityData.YListKeys = []string {}

    return &(externalRoute.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology
// Common Route topology information
type Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Route distance . The type is interface{} with range: 0..4294967295.
    RouteDistance interface{}

    // Route cost . The type is interface{} with range: 0..4294967295.
    RouteCost interface{}

    // Route type. The type is interface{} with range: 0..4294967295.
    RouteType interface{}
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology) GetEntityData() *types.CommonEntityData {
    routeTopology.EntityData.YFilter = routeTopology.YFilter
    routeTopology.EntityData.YangName = "route-topology"
    routeTopology.EntityData.BundleName = "cisco_ios_xr"
    routeTopology.EntityData.ParentYangName = "external-route"
    routeTopology.EntityData.SegmentPath = "route-topology"
    routeTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/external-routes/external-route/" + routeTopology.EntityData.SegmentPath
    routeTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeTopology.EntityData.Children = types.NewOrderedMap()
    routeTopology.EntityData.Leafs = types.NewOrderedMap()
    routeTopology.EntityData.Leafs.Append("route-id", types.YLeaf{"RouteId", routeTopology.RouteId})
    routeTopology.EntityData.Leafs.Append("route-distance", types.YLeaf{"RouteDistance", routeTopology.RouteDistance})
    routeTopology.EntityData.Leafs.Append("route-cost", types.YLeaf{"RouteCost", routeTopology.RouteCost})
    routeTopology.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", routeTopology.RouteType})

    routeTopology.EntityData.YListKeys = []string {}

    return &(routeTopology.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity
// Extended communities in the route
type Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Domain ID value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ExtendedCommunityDomainIdValue interface{}

    // Domain ID type. The type is interface{} with range: 0..65535.
    ExtendedCommunitylDomainIdType interface{}

    // Area id. The type is interface{} with range: 0..4294967295.
    ExtendedCommunityAreaId interface{}

    // Router id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedCommunityRouterId interface{}

    // Route type. The type is interface{} with range: 0..255.
    ExtendedCommunityRouteType interface{}

    // Route Options. The type is interface{} with range: 0..255.
    ExtendedCommunityOptions interface{}
}

func (routeExtendedCommunity *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetEntityData() *types.CommonEntityData {
    routeExtendedCommunity.EntityData.YFilter = routeExtendedCommunity.YFilter
    routeExtendedCommunity.EntityData.YangName = "route-extended-community"
    routeExtendedCommunity.EntityData.BundleName = "cisco_ios_xr"
    routeExtendedCommunity.EntityData.ParentYangName = "external-route"
    routeExtendedCommunity.EntityData.SegmentPath = "route-extended-community"
    routeExtendedCommunity.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/external-routes/external-route/" + routeExtendedCommunity.EntityData.SegmentPath
    routeExtendedCommunity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeExtendedCommunity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeExtendedCommunity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeExtendedCommunity.EntityData.Children = types.NewOrderedMap()
    routeExtendedCommunity.EntityData.Leafs = types.NewOrderedMap()
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-domain-id-value", types.YLeaf{"ExtendedCommunityDomainIdValue", routeExtendedCommunity.ExtendedCommunityDomainIdValue})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-communityl-domain-id-type", types.YLeaf{"ExtendedCommunitylDomainIdType", routeExtendedCommunity.ExtendedCommunitylDomainIdType})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-area-id", types.YLeaf{"ExtendedCommunityAreaId", routeExtendedCommunity.ExtendedCommunityAreaId})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-router-id", types.YLeaf{"ExtendedCommunityRouterId", routeExtendedCommunity.ExtendedCommunityRouterId})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-route-type", types.YLeaf{"ExtendedCommunityRouteType", routeExtendedCommunity.ExtendedCommunityRouteType})
    routeExtendedCommunity.EntityData.Leafs.Append("extended-community-options", types.YLeaf{"ExtendedCommunityOptions", routeExtendedCommunity.ExtendedCommunityOptions})

    routeExtendedCommunity.EntityData.YListKeys = []string {}

    return &(routeExtendedCommunity.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath
// List of paths to this route
type Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Route path interface name . The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Route path interface Index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndex interface{}

    // Route path next hop . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RoutePathNextHop interface{}

    // Path ID of path. The type is interface{} with range: 0..65535.
    RoutePathId interface{}

    // Backup Path Info.
    RouteBackupPath Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath

    // NeighborNextHop. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_NeighborNextHop
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "external-route"
    routePath.EntityData.SegmentPath = "route-path" + types.AddNoKeyToken(routePath)
    routePath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/external-routes/external-route/" + routePath.EntityData.SegmentPath
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("route-backup-path", types.YChild{"RouteBackupPath", &routePath.RouteBackupPath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        types.SetYListKey(routePath.NeighborNextHop[i], i)
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", routePath.InterfaceName})
    routePath.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", routePath.InterfaceIndex})
    routePath.EntityData.Leafs.Append("route-path-next-hop", types.YLeaf{"RoutePathNextHop", routePath.RoutePathNextHop})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath
// Backup Path Info
type Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetEntityData() *types.CommonEntityData {
    routeBackupPath.EntityData.YFilter = routeBackupPath.YFilter
    routeBackupPath.EntityData.YangName = "route-backup-path"
    routeBackupPath.EntityData.BundleName = "cisco_ios_xr"
    routeBackupPath.EntityData.ParentYangName = "route-path"
    routeBackupPath.EntityData.SegmentPath = "route-backup-path"
    routeBackupPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/external-routes/external-route/route-path/" + routeBackupPath.EntityData.SegmentPath
    routeBackupPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeBackupPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeBackupPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeBackupPath.EntityData.Children = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs.Append("backup-route-interface-name", types.YLeaf{"BackupRouteInterfaceName", routeBackupPath.BackupRouteInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("backup-route-next-hop-address", types.YLeaf{"BackupRouteNextHopAddress", routeBackupPath.BackupRouteNextHopAddress})
    routeBackupPath.EntityData.Leafs.Append("backup-route-source", types.YLeaf{"BackupRouteSource", routeBackupPath.BackupRouteSource})
    routeBackupPath.EntityData.Leafs.Append("backup-metric", types.YLeaf{"BackupMetric", routeBackupPath.BackupMetric})
    routeBackupPath.EntityData.Leafs.Append("primary-path", types.YLeaf{"PrimaryPath", routeBackupPath.PrimaryPath})
    routeBackupPath.EntityData.Leafs.Append("line-card-disjoint", types.YLeaf{"LineCardDisjoint", routeBackupPath.LineCardDisjoint})
    routeBackupPath.EntityData.Leafs.Append("downstream", types.YLeaf{"Downstream", routeBackupPath.Downstream})
    routeBackupPath.EntityData.Leafs.Append("node-protect", types.YLeaf{"NodeProtect", routeBackupPath.NodeProtect})
    routeBackupPath.EntityData.Leafs.Append("srlg-disjoint", types.YLeaf{"SrlgDisjoint", routeBackupPath.SrlgDisjoint})

    routeBackupPath.EntityData.YListKeys = []string {}

    return &(routeBackupPath.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop" + types.AddNoKeyToken(neighborNextHop)
    neighborNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/external-routes/external-route/route-path/" + neighborNextHop.EntityData.SegmentPath
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable
// OSPFv3 request list information for all areas
type Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 request list information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request.
    Request []*Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request
}

func (requestListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable) GetEntityData() *types.CommonEntityData {
    requestListProcessTable.EntityData.YFilter = requestListProcessTable.YFilter
    requestListProcessTable.EntityData.YangName = "request-list-process-table"
    requestListProcessTable.EntityData.BundleName = "cisco_ios_xr"
    requestListProcessTable.EntityData.ParentYangName = "default-vrf"
    requestListProcessTable.EntityData.SegmentPath = "request-list-process-table"
    requestListProcessTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + requestListProcessTable.EntityData.SegmentPath
    requestListProcessTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    requestListProcessTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    requestListProcessTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    requestListProcessTable.EntityData.Children = types.NewOrderedMap()
    requestListProcessTable.EntityData.Children.Append("request", types.YChild{"Request", nil})
    for i := range requestListProcessTable.Request {
        types.SetYListKey(requestListProcessTable.Request[i], i)
        requestListProcessTable.EntityData.Children.Append(types.GetSegmentPath(requestListProcessTable.Request[i]), types.YChild{"Request", requestListProcessTable.Request[i]})
    }
    requestListProcessTable.EntityData.Leafs = types.NewOrderedMap()

    requestListProcessTable.EntityData.YListKeys = []string {}

    return &(requestListProcessTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request
// OSPFv3 request list information
type Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RequestNeighborAddress interface{}

    // If true, virtual link is requested . The type is bool.
    IsRequestVirtualLink interface{}

    // Request virtual link ID . The type is interface{} with range:
    // 0..4294967295.
    RequestVirtualLinkId interface{}

    // If true, sham link is requested . The type is bool.
    IsRequestShamLink interface{}

    // Request sham link ID . The type is interface{} with range: 0..4294967295.
    RequestShamLinkId interface{}

    // List of request list entries. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request.
    Request []*Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request
}

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request) GetEntityData() *types.CommonEntityData {
    request.EntityData.YFilter = request.YFilter
    request.EntityData.YangName = "request"
    request.EntityData.BundleName = "cisco_ios_xr"
    request.EntityData.ParentYangName = "request-list-process-table"
    request.EntityData.SegmentPath = "request" + types.AddNoKeyToken(request)
    request.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/request-list-process-table/" + request.EntityData.SegmentPath
    request.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    request.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    request.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    request.EntityData.Children = types.NewOrderedMap()
    request.EntityData.Children.Append("request", types.YChild{"Request", nil})
    for i := range request.Request {
        types.SetYListKey(request.Request[i], i)
        request.EntityData.Children.Append(types.GetSegmentPath(request.Request[i]), types.YChild{"Request", request.Request[i]})
    }
    request.EntityData.Leafs = types.NewOrderedMap()
    request.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", request.InterfaceName})
    request.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", request.NeighborAddress})
    request.EntityData.Leafs.Append("request-neighbor-address", types.YLeaf{"RequestNeighborAddress", request.RequestNeighborAddress})
    request.EntityData.Leafs.Append("is-request-virtual-link", types.YLeaf{"IsRequestVirtualLink", request.IsRequestVirtualLink})
    request.EntityData.Leafs.Append("request-virtual-link-id", types.YLeaf{"RequestVirtualLinkId", request.RequestVirtualLinkId})
    request.EntityData.Leafs.Append("is-request-sham-link", types.YLeaf{"IsRequestShamLink", request.IsRequestShamLink})
    request.EntityData.Leafs.Append("request-sham-link-id", types.YLeaf{"RequestShamLinkId", request.RequestShamLinkId})

    request.EntityData.YListKeys = []string {}

    return &(request.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request
// List of request list entries
type Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request) GetEntityData() *types.CommonEntityData {
    request.EntityData.YFilter = request.YFilter
    request.EntityData.YangName = "request"
    request.EntityData.BundleName = "cisco_ios_xr"
    request.EntityData.ParentYangName = "request"
    request.EntityData.SegmentPath = "request" + types.AddNoKeyToken(request)
    request.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/request-list-process-table/request/" + request.EntityData.SegmentPath
    request.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    request.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    request.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    request.EntityData.Children = types.NewOrderedMap()
    request.EntityData.Leafs = types.NewOrderedMap()
    request.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", request.HeaderLsaType})
    request.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", request.HeaderLsaAge})
    request.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", request.HeaderLsaId})
    request.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", request.HeaderAdvertisingRouter})
    request.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", request.HeaderSequenceNumber})

    request.EntityData.YListKeys = []string {}

    return &(request.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_VirtualLink
// Virtual link information
type Ospfv3_Processes_Process_DefaultVrf_VirtualLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor on other end of this virtual link. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    VirtualLinkNeighborId interface{}

    // Virtual link interface number . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkInterfaceNumber interface{}

    // OSPF interface state for the virtual link. The type is
    // Ospfv3InterfaceState.
    VirtualLinkState interface{}

    // If true, virtual link IP security is required . The type is bool.
    IsVirtualLinkIpSecurityRequired interface{}

    // If true, Virtual link IP security is active . The type is bool.
    IsVirtualLinkIpSecurityActive interface{}

    // Virtual link neighbor addresss . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    VirtualLinkNeighborAddress interface{}

    // If true, the link runs as demand circuit. The type is bool.
    IsVirtualLinkDemandCircuit interface{}

    // Number of LSA's with demand circuit bit not set . The type is interface{}
    // with range: 0..4294967295.
    VirtualLinkDcBitlessLsa interface{}

    // Transit area id . The type is string.
    TransitAreaId interface{}

    // Interface on which this virtual link is formed. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Cost of the virtual link. The type is interface{} with range: 0..65535.
    VirtualLinkCost interface{}

    // Transmission delay in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    VirualLinkTransmissionDelay interface{}

    // Hello interval (s). The type is interface{} with range: 0..4294967295.
    VirtualLinkHelloInterval interface{}

    // Dead interval (s). The type is interface{} with range: 0..4294967295.
    VirtualLinkDeadInterval interface{}

    // Wait interval (s). The type is interface{} with range: 0..4294967295.
    VirtualLinkWaitInterval interface{}

    // Retransmission interval (s). The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkRetransmissionInterval interface{}

    // Time until next hello (s). The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkNextHello interface{}

    // If true, interface is passive. The type is bool.
    IsVirtualLinkPassive interface{}

    // If true, virtual link authentication is enabled . The type is bool.
    IsVirtualLinkAuthenticationEnabled interface{}

    // Virtual link authentication spi . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkAuthenticationSpi interface{}

    // Virtual link authentication transmit . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkAuthenticationTransmit interface{}

    // If true, virtual link encryption is enabled . The type is bool.
    IsVirtualLinkEncryptionEnabled interface{}

    // Virtual link encryption spi. The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkEncryptionSpi interface{}

    // Virtual link encryption transmitted . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkEncryptionTransmitted interface{}

    // Virtual link encrypted authentication transmitted . The type is interface{}
    // with range: 0..4294967295.
    VirtualLinkEncryptedAuthenticationTransmitted interface{}

    // Neighbor information .
    VirtualLinkNeighbor Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_VirtualLink) GetEntityData() *types.CommonEntityData {
    virtualLink.EntityData.YFilter = virtualLink.YFilter
    virtualLink.EntityData.YangName = "virtual-link"
    virtualLink.EntityData.BundleName = "cisco_ios_xr"
    virtualLink.EntityData.ParentYangName = "default-vrf"
    virtualLink.EntityData.SegmentPath = "virtual-link"
    virtualLink.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + virtualLink.EntityData.SegmentPath
    virtualLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLink.EntityData.Children = types.NewOrderedMap()
    virtualLink.EntityData.Children.Append("virtual-link-neighbor", types.YChild{"VirtualLinkNeighbor", &virtualLink.VirtualLinkNeighbor})
    virtualLink.EntityData.Leafs = types.NewOrderedMap()
    virtualLink.EntityData.Leafs.Append("virtual-link-neighbor-id", types.YLeaf{"VirtualLinkNeighborId", virtualLink.VirtualLinkNeighborId})
    virtualLink.EntityData.Leafs.Append("virtual-link-interface-number", types.YLeaf{"VirtualLinkInterfaceNumber", virtualLink.VirtualLinkInterfaceNumber})
    virtualLink.EntityData.Leafs.Append("virtual-link-state", types.YLeaf{"VirtualLinkState", virtualLink.VirtualLinkState})
    virtualLink.EntityData.Leafs.Append("is-virtual-link-ip-security-required", types.YLeaf{"IsVirtualLinkIpSecurityRequired", virtualLink.IsVirtualLinkIpSecurityRequired})
    virtualLink.EntityData.Leafs.Append("is-virtual-link-ip-security-active", types.YLeaf{"IsVirtualLinkIpSecurityActive", virtualLink.IsVirtualLinkIpSecurityActive})
    virtualLink.EntityData.Leafs.Append("virtual-link-neighbor-address", types.YLeaf{"VirtualLinkNeighborAddress", virtualLink.VirtualLinkNeighborAddress})
    virtualLink.EntityData.Leafs.Append("is-virtual-link-demand-circuit", types.YLeaf{"IsVirtualLinkDemandCircuit", virtualLink.IsVirtualLinkDemandCircuit})
    virtualLink.EntityData.Leafs.Append("virtual-link-dc-bitless-lsa", types.YLeaf{"VirtualLinkDcBitlessLsa", virtualLink.VirtualLinkDcBitlessLsa})
    virtualLink.EntityData.Leafs.Append("transit-area-id", types.YLeaf{"TransitAreaId", virtualLink.TransitAreaId})
    virtualLink.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", virtualLink.InterfaceName})
    virtualLink.EntityData.Leafs.Append("virtual-link-cost", types.YLeaf{"VirtualLinkCost", virtualLink.VirtualLinkCost})
    virtualLink.EntityData.Leafs.Append("virual-link-transmission-delay", types.YLeaf{"VirualLinkTransmissionDelay", virtualLink.VirualLinkTransmissionDelay})
    virtualLink.EntityData.Leafs.Append("virtual-link-hello-interval", types.YLeaf{"VirtualLinkHelloInterval", virtualLink.VirtualLinkHelloInterval})
    virtualLink.EntityData.Leafs.Append("virtual-link-dead-interval", types.YLeaf{"VirtualLinkDeadInterval", virtualLink.VirtualLinkDeadInterval})
    virtualLink.EntityData.Leafs.Append("virtual-link-wait-interval", types.YLeaf{"VirtualLinkWaitInterval", virtualLink.VirtualLinkWaitInterval})
    virtualLink.EntityData.Leafs.Append("virtual-link-retransmission-interval", types.YLeaf{"VirtualLinkRetransmissionInterval", virtualLink.VirtualLinkRetransmissionInterval})
    virtualLink.EntityData.Leafs.Append("virtual-link-next-hello", types.YLeaf{"VirtualLinkNextHello", virtualLink.VirtualLinkNextHello})
    virtualLink.EntityData.Leafs.Append("is-virtual-link-passive", types.YLeaf{"IsVirtualLinkPassive", virtualLink.IsVirtualLinkPassive})
    virtualLink.EntityData.Leafs.Append("is-virtual-link-authentication-enabled", types.YLeaf{"IsVirtualLinkAuthenticationEnabled", virtualLink.IsVirtualLinkAuthenticationEnabled})
    virtualLink.EntityData.Leafs.Append("virtual-link-authentication-spi", types.YLeaf{"VirtualLinkAuthenticationSpi", virtualLink.VirtualLinkAuthenticationSpi})
    virtualLink.EntityData.Leafs.Append("virtual-link-authentication-transmit", types.YLeaf{"VirtualLinkAuthenticationTransmit", virtualLink.VirtualLinkAuthenticationTransmit})
    virtualLink.EntityData.Leafs.Append("is-virtual-link-encryption-enabled", types.YLeaf{"IsVirtualLinkEncryptionEnabled", virtualLink.IsVirtualLinkEncryptionEnabled})
    virtualLink.EntityData.Leafs.Append("virtual-link-encryption-spi", types.YLeaf{"VirtualLinkEncryptionSpi", virtualLink.VirtualLinkEncryptionSpi})
    virtualLink.EntityData.Leafs.Append("virtual-link-encryption-transmitted", types.YLeaf{"VirtualLinkEncryptionTransmitted", virtualLink.VirtualLinkEncryptionTransmitted})
    virtualLink.EntityData.Leafs.Append("virtual-link-encrypted-authentication-transmitted", types.YLeaf{"VirtualLinkEncryptedAuthenticationTransmitted", virtualLink.VirtualLinkEncryptedAuthenticationTransmitted})

    virtualLink.EntityData.YListKeys = []string {}

    return &(virtualLink.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor
// Neighbor information 
type Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // If true, hello suppressed . The type is bool.
    IsVirtualLinkHelloSuppressed interface{}

    // OSPF interface state for the virtual link. The type is
    // Ospfv3InterfaceState.
    VirtualLinkState interface{}

    // Virtual link retransmission information .
    VirtualLinkRetransmission Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission
}

func (virtualLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor) GetEntityData() *types.CommonEntityData {
    virtualLinkNeighbor.EntityData.YFilter = virtualLinkNeighbor.YFilter
    virtualLinkNeighbor.EntityData.YangName = "virtual-link-neighbor"
    virtualLinkNeighbor.EntityData.BundleName = "cisco_ios_xr"
    virtualLinkNeighbor.EntityData.ParentYangName = "virtual-link"
    virtualLinkNeighbor.EntityData.SegmentPath = "virtual-link-neighbor"
    virtualLinkNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/virtual-link/" + virtualLinkNeighbor.EntityData.SegmentPath
    virtualLinkNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinkNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinkNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinkNeighbor.EntityData.Children = types.NewOrderedMap()
    virtualLinkNeighbor.EntityData.Children.Append("virtual-link-retransmission", types.YChild{"VirtualLinkRetransmission", &virtualLinkNeighbor.VirtualLinkRetransmission})
    virtualLinkNeighbor.EntityData.Leafs = types.NewOrderedMap()
    virtualLinkNeighbor.EntityData.Leafs.Append("is-virtual-link-hello-suppressed", types.YLeaf{"IsVirtualLinkHelloSuppressed", virtualLinkNeighbor.IsVirtualLinkHelloSuppressed})
    virtualLinkNeighbor.EntityData.Leafs.Append("virtual-link-state", types.YLeaf{"VirtualLinkState", virtualLinkNeighbor.VirtualLinkState})

    virtualLinkNeighbor.EntityData.YListKeys = []string {}

    return &(virtualLinkNeighbor.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission
// Virtual link retransmission information 
type Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (virtualLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetEntityData() *types.CommonEntityData {
    virtualLinkRetransmission.EntityData.YFilter = virtualLinkRetransmission.YFilter
    virtualLinkRetransmission.EntityData.YangName = "virtual-link-retransmission"
    virtualLinkRetransmission.EntityData.BundleName = "cisco_ios_xr"
    virtualLinkRetransmission.EntityData.ParentYangName = "virtual-link-neighbor"
    virtualLinkRetransmission.EntityData.SegmentPath = "virtual-link-retransmission"
    virtualLinkRetransmission.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/virtual-link/virtual-link-neighbor/" + virtualLinkRetransmission.EntityData.SegmentPath
    virtualLinkRetransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinkRetransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinkRetransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinkRetransmission.EntityData.Children = types.NewOrderedMap()
    virtualLinkRetransmission.EntityData.Leafs = types.NewOrderedMap()
    virtualLinkRetransmission.EntityData.Leafs.Append("database-descriptor-retransmissions", types.YLeaf{"DatabaseDescriptorRetransmissions", virtualLinkRetransmission.DatabaseDescriptorRetransmissions})
    virtualLinkRetransmission.EntityData.Leafs.Append("area-flood-index", types.YLeaf{"AreaFloodIndex", virtualLinkRetransmission.AreaFloodIndex})
    virtualLinkRetransmission.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", virtualLinkRetransmission.AsFloodIndex})
    virtualLinkRetransmission.EntityData.Leafs.Append("link-flood-index", types.YLeaf{"LinkFloodIndex", virtualLinkRetransmission.LinkFloodIndex})
    virtualLinkRetransmission.EntityData.Leafs.Append("neighbor-retransmissions", types.YLeaf{"NeighborRetransmissions", virtualLinkRetransmission.NeighborRetransmissions})
    virtualLinkRetransmission.EntityData.Leafs.Append("retransmissions", types.YLeaf{"Retransmissions", virtualLinkRetransmission.Retransmissions})
    virtualLinkRetransmission.EntityData.Leafs.Append("area-first-flood", types.YLeaf{"AreaFirstFlood", virtualLinkRetransmission.AreaFirstFlood})
    virtualLinkRetransmission.EntityData.Leafs.Append("area-first-flood-index", types.YLeaf{"AreaFirstFloodIndex", virtualLinkRetransmission.AreaFirstFloodIndex})
    virtualLinkRetransmission.EntityData.Leafs.Append("as-first-flood", types.YLeaf{"AsFirstFlood", virtualLinkRetransmission.AsFirstFlood})
    virtualLinkRetransmission.EntityData.Leafs.Append("as-first-flood-index", types.YLeaf{"AsFirstFloodIndex", virtualLinkRetransmission.AsFirstFloodIndex})
    virtualLinkRetransmission.EntityData.Leafs.Append("link-first-flood", types.YLeaf{"LinkFirstFlood", virtualLinkRetransmission.LinkFirstFlood})
    virtualLinkRetransmission.EntityData.Leafs.Append("link-first-flood-index", types.YLeaf{"LinkFirstFloodIndex", virtualLinkRetransmission.LinkFirstFloodIndex})
    virtualLinkRetransmission.EntityData.Leafs.Append("area-next-flood", types.YLeaf{"AreaNextFlood", virtualLinkRetransmission.AreaNextFlood})
    virtualLinkRetransmission.EntityData.Leafs.Append("area-next-flood-index", types.YLeaf{"AreaNextFloodIndex", virtualLinkRetransmission.AreaNextFloodIndex})
    virtualLinkRetransmission.EntityData.Leafs.Append("as-next-flood", types.YLeaf{"AsNextFlood", virtualLinkRetransmission.AsNextFlood})
    virtualLinkRetransmission.EntityData.Leafs.Append("as-next-flood-index", types.YLeaf{"AsNextFloodIndex", virtualLinkRetransmission.AsNextFloodIndex})
    virtualLinkRetransmission.EntityData.Leafs.Append("link-next-flood", types.YLeaf{"LinkNextFlood", virtualLinkRetransmission.LinkNextFlood})
    virtualLinkRetransmission.EntityData.Leafs.Append("link-next-flood-index", types.YLeaf{"LinkNextFloodIndex", virtualLinkRetransmission.LinkNextFloodIndex})
    virtualLinkRetransmission.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", virtualLinkRetransmission.LastRetransmissionLength})
    virtualLinkRetransmission.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", virtualLinkRetransmission.MaximumRetransmissionLength})
    virtualLinkRetransmission.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", virtualLinkRetransmission.LastRetransmissionTime})
    virtualLinkRetransmission.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", virtualLinkRetransmission.MaximumRetransmissionTime})
    virtualLinkRetransmission.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", virtualLinkRetransmission.LsaRetransmissionTimer})

    virtualLinkRetransmission.EntityData.YListKeys = []string {}

    return &(virtualLinkRetransmission.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable
// OSPFv3 flood list information table for all
// areas
type Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 flood list information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood.
    Flood []*Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood
}

func (floodListProcessTable *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable) GetEntityData() *types.CommonEntityData {
    floodListProcessTable.EntityData.YFilter = floodListProcessTable.YFilter
    floodListProcessTable.EntityData.YangName = "flood-list-process-table"
    floodListProcessTable.EntityData.BundleName = "cisco_ios_xr"
    floodListProcessTable.EntityData.ParentYangName = "default-vrf"
    floodListProcessTable.EntityData.SegmentPath = "flood-list-process-table"
    floodListProcessTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + floodListProcessTable.EntityData.SegmentPath
    floodListProcessTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    floodListProcessTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    floodListProcessTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    floodListProcessTable.EntityData.Children = types.NewOrderedMap()
    floodListProcessTable.EntityData.Children.Append("flood", types.YChild{"Flood", nil})
    for i := range floodListProcessTable.Flood {
        floodListProcessTable.EntityData.Children.Append(types.GetSegmentPath(floodListProcessTable.Flood[i]), types.YChild{"Flood", floodListProcessTable.Flood[i]})
    }
    floodListProcessTable.EntityData.Leafs = types.NewOrderedMap()

    floodListProcessTable.EntityData.YListKeys = []string {}

    return &(floodListProcessTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood
// OSPFv3 flood list information
type Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Time until next LS transmission (ms) . The type is interface{} with range:
    // 0..4294967295.
    LsTransmissionTimer interface{}

    // Number of LSAs currently being flooded . The type is interface{} with
    // range: 0..4294967295.
    QueueLength interface{}

    // Link floodlist. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood.
    LinkFlood []*Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood

    // Area scope floodlist. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood.
    AreaFlood []*Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood

    // AS scope floodlist. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood.
    AsFlood []*Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood
}

func (flood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood) GetEntityData() *types.CommonEntityData {
    flood.EntityData.YFilter = flood.YFilter
    flood.EntityData.YangName = "flood"
    flood.EntityData.BundleName = "cisco_ios_xr"
    flood.EntityData.ParentYangName = "flood-list-process-table"
    flood.EntityData.SegmentPath = "flood" + types.AddKeyToken(flood.InterfaceName, "interface-name")
    flood.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/flood-list-process-table/" + flood.EntityData.SegmentPath
    flood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flood.EntityData.Children = types.NewOrderedMap()
    flood.EntityData.Children.Append("link-flood", types.YChild{"LinkFlood", nil})
    for i := range flood.LinkFlood {
        types.SetYListKey(flood.LinkFlood[i], i)
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.LinkFlood[i]), types.YChild{"LinkFlood", flood.LinkFlood[i]})
    }
    flood.EntityData.Children.Append("area-flood", types.YChild{"AreaFlood", nil})
    for i := range flood.AreaFlood {
        types.SetYListKey(flood.AreaFlood[i], i)
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.AreaFlood[i]), types.YChild{"AreaFlood", flood.AreaFlood[i]})
    }
    flood.EntityData.Children.Append("as-flood", types.YChild{"AsFlood", nil})
    for i := range flood.AsFlood {
        types.SetYListKey(flood.AsFlood[i], i)
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.AsFlood[i]), types.YChild{"AsFlood", flood.AsFlood[i]})
    }
    flood.EntityData.Leafs = types.NewOrderedMap()
    flood.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", flood.InterfaceName})
    flood.EntityData.Leafs.Append("ls-transmission-timer", types.YLeaf{"LsTransmissionTimer", flood.LsTransmissionTimer})
    flood.EntityData.Leafs.Append("queue-length", types.YLeaf{"QueueLength", flood.QueueLength})

    flood.EntityData.YListKeys = []string {"InterfaceName"}

    return &(flood.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood
// Link floodlist
type Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood) GetEntityData() *types.CommonEntityData {
    linkFlood.EntityData.YFilter = linkFlood.YFilter
    linkFlood.EntityData.YangName = "link-flood"
    linkFlood.EntityData.BundleName = "cisco_ios_xr"
    linkFlood.EntityData.ParentYangName = "flood"
    linkFlood.EntityData.SegmentPath = "link-flood" + types.AddNoKeyToken(linkFlood)
    linkFlood.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/flood-list-process-table/flood/" + linkFlood.EntityData.SegmentPath
    linkFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkFlood.EntityData.Children = types.NewOrderedMap()
    linkFlood.EntityData.Leafs = types.NewOrderedMap()
    linkFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", linkFlood.HeaderLsaType})
    linkFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", linkFlood.HeaderLsaAge})
    linkFlood.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", linkFlood.HeaderLsaId})
    linkFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", linkFlood.HeaderAdvertisingRouter})
    linkFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", linkFlood.HeaderSequenceNumber})

    linkFlood.EntityData.YListKeys = []string {}

    return &(linkFlood.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood
// Area scope floodlist
type Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood) GetEntityData() *types.CommonEntityData {
    areaFlood.EntityData.YFilter = areaFlood.YFilter
    areaFlood.EntityData.YangName = "area-flood"
    areaFlood.EntityData.BundleName = "cisco_ios_xr"
    areaFlood.EntityData.ParentYangName = "flood"
    areaFlood.EntityData.SegmentPath = "area-flood" + types.AddNoKeyToken(areaFlood)
    areaFlood.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/flood-list-process-table/flood/" + areaFlood.EntityData.SegmentPath
    areaFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaFlood.EntityData.Children = types.NewOrderedMap()
    areaFlood.EntityData.Leafs = types.NewOrderedMap()
    areaFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", areaFlood.HeaderLsaType})
    areaFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", areaFlood.HeaderLsaAge})
    areaFlood.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", areaFlood.HeaderLsaId})
    areaFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", areaFlood.HeaderAdvertisingRouter})
    areaFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", areaFlood.HeaderSequenceNumber})

    areaFlood.EntityData.YListKeys = []string {}

    return &(areaFlood.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood
// AS scope floodlist
type Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood) GetEntityData() *types.CommonEntityData {
    asFlood.EntityData.YFilter = asFlood.YFilter
    asFlood.EntityData.YangName = "as-flood"
    asFlood.EntityData.BundleName = "cisco_ios_xr"
    asFlood.EntityData.ParentYangName = "flood"
    asFlood.EntityData.SegmentPath = "as-flood" + types.AddNoKeyToken(asFlood)
    asFlood.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/flood-list-process-table/flood/" + asFlood.EntityData.SegmentPath
    asFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asFlood.EntityData.Children = types.NewOrderedMap()
    asFlood.EntityData.Leafs = types.NewOrderedMap()
    asFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", asFlood.HeaderLsaType})
    asFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", asFlood.HeaderLsaAge})
    asFlood.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", asFlood.HeaderLsaId})
    asFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", asFlood.HeaderAdvertisingRouter})
    asFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", asFlood.HeaderSequenceNumber})

    asFlood.EntityData.YListKeys = []string {}

    return &(asFlood.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_RouteSummary
// Summarize OSPFv3 local RIB tables
type Ospfv3_Processes_Process_DefaultVrf_RouteSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route summary of a route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Intra route summary . The type is interface{} with range: 0..4294967295.
    IntraAreaRoute interface{}

    // Inter route summary . The type is interface{} with range: 0..4294967295.
    InterAreaRoute interface{}

    // Extern 1 route summary . The type is interface{} with range: 0..4294967295.
    ExternOneRoute interface{}

    // Extern 2 route summary . The type is interface{} with range: 0..4294967295.
    ExternTwoRoute interface{}

    // NSSA 1 route summary . The type is interface{} with range: 0..4294967295.
    NssaOneRoute interface{}

    // NSSA 2 route summary . The type is interface{} with range: 0..4294967295.
    NssaTwoRoute interface{}

    // Total route summary . The type is interface{} with range: 0..4294967295.
    TotalSentRoute interface{}

    // Route connected . The type is interface{} with range: 0..4294967295.
    RouteConnected interface{}

    // Redistribution route summary . The type is interface{} with range:
    // 0..4294967295.
    RedistributionRoute interface{}

    // Total route received summary. The type is interface{} with range:
    // 0..4294967295.
    TotalReceivedRoute interface{}
}

func (routeSummary *Ospfv3_Processes_Process_DefaultVrf_RouteSummary) GetEntityData() *types.CommonEntityData {
    routeSummary.EntityData.YFilter = routeSummary.YFilter
    routeSummary.EntityData.YangName = "route-summary"
    routeSummary.EntityData.BundleName = "cisco_ios_xr"
    routeSummary.EntityData.ParentYangName = "default-vrf"
    routeSummary.EntityData.SegmentPath = "route-summary"
    routeSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + routeSummary.EntityData.SegmentPath
    routeSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeSummary.EntityData.Children = types.NewOrderedMap()
    routeSummary.EntityData.Leafs = types.NewOrderedMap()
    routeSummary.EntityData.Leafs.Append("route-id", types.YLeaf{"RouteId", routeSummary.RouteId})
    routeSummary.EntityData.Leafs.Append("intra-area-route", types.YLeaf{"IntraAreaRoute", routeSummary.IntraAreaRoute})
    routeSummary.EntityData.Leafs.Append("inter-area-route", types.YLeaf{"InterAreaRoute", routeSummary.InterAreaRoute})
    routeSummary.EntityData.Leafs.Append("extern-one-route", types.YLeaf{"ExternOneRoute", routeSummary.ExternOneRoute})
    routeSummary.EntityData.Leafs.Append("extern-two-route", types.YLeaf{"ExternTwoRoute", routeSummary.ExternTwoRoute})
    routeSummary.EntityData.Leafs.Append("nssa-one-route", types.YLeaf{"NssaOneRoute", routeSummary.NssaOneRoute})
    routeSummary.EntityData.Leafs.Append("nssa-two-route", types.YLeaf{"NssaTwoRoute", routeSummary.NssaTwoRoute})
    routeSummary.EntityData.Leafs.Append("total-sent-route", types.YLeaf{"TotalSentRoute", routeSummary.TotalSentRoute})
    routeSummary.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", routeSummary.RouteConnected})
    routeSummary.EntityData.Leafs.Append("redistribution-route", types.YLeaf{"RedistributionRoute", routeSummary.RedistributionRoute})
    routeSummary.EntityData.Leafs.Append("total-received-route", types.YLeaf{"TotalReceivedRoute", routeSummary.TotalReceivedRoute})

    routeSummary.EntityData.YListKeys = []string {}

    return &(routeSummary.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas
// OSPFv3 area table
type Ospfv3_Processes_Process_DefaultVrf_Areas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per-area information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area.
    Area []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area
}

func (areas *Ospfv3_Processes_Process_DefaultVrf_Areas) GetEntityData() *types.CommonEntityData {
    areas.EntityData.YFilter = areas.YFilter
    areas.EntityData.YangName = "areas"
    areas.EntityData.BundleName = "cisco_ios_xr"
    areas.EntityData.ParentYangName = "default-vrf"
    areas.EntityData.SegmentPath = "areas"
    areas.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + areas.EntityData.SegmentPath
    areas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areas.EntityData.Children = types.NewOrderedMap()
    areas.EntityData.Children.Append("area", types.YChild{"Area", nil})
    for i := range areas.Area {
        areas.EntityData.Children.Append(types.GetSegmentPath(areas.Area[i]), types.YChild{"Area", areas.Area[i]})
    }
    areas.EntityData.Leafs = types.NewOrderedMap()

    areas.EntityData.YListKeys = []string {}

    return &(areas.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area
// Per-area information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Area ID. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // OSPFv3 area neighbor information table.
    NeighborDetailTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable

    // OSPFv3 interface brief information table for an area.
    InterfaceBriefTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable

    // OSPFv3 request list information in an area.
    RequestListTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable

    // OSPFv3 neighbor information table.
    NeighborTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable

    // OSPFv3 interface information table for an area.
    InterfaceTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable

    // OSPFv3 flood list information table for an area.
    FloodListTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable

    // OSPFv3 retransmission list information table in an area.
    RetransmissionListTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable

    // OSPF Link State Database.
    DatabaseTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable

    // Database summary table.
    DatabaseSummaryTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable
}

func (area *Ospfv3_Processes_Process_DefaultVrf_Areas_Area) GetEntityData() *types.CommonEntityData {
    area.EntityData.YFilter = area.YFilter
    area.EntityData.YangName = "area"
    area.EntityData.BundleName = "cisco_ios_xr"
    area.EntityData.ParentYangName = "areas"
    area.EntityData.SegmentPath = "area" + types.AddKeyToken(area.AreaId, "area-id")
    area.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/" + area.EntityData.SegmentPath
    area.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    area.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    area.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    area.EntityData.Children = types.NewOrderedMap()
    area.EntityData.Children.Append("neighbor-detail-table", types.YChild{"NeighborDetailTable", &area.NeighborDetailTable})
    area.EntityData.Children.Append("interface-brief-table", types.YChild{"InterfaceBriefTable", &area.InterfaceBriefTable})
    area.EntityData.Children.Append("request-list-table", types.YChild{"RequestListTable", &area.RequestListTable})
    area.EntityData.Children.Append("neighbor-table", types.YChild{"NeighborTable", &area.NeighborTable})
    area.EntityData.Children.Append("interface-table", types.YChild{"InterfaceTable", &area.InterfaceTable})
    area.EntityData.Children.Append("flood-list-table", types.YChild{"FloodListTable", &area.FloodListTable})
    area.EntityData.Children.Append("retransmission-list-table", types.YChild{"RetransmissionListTable", &area.RetransmissionListTable})
    area.EntityData.Children.Append("database-table", types.YChild{"DatabaseTable", &area.DatabaseTable})
    area.EntityData.Children.Append("database-summary-table", types.YChild{"DatabaseSummaryTable", &area.DatabaseSummaryTable})
    area.EntityData.Leafs = types.NewOrderedMap()
    area.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", area.AreaId})

    area.EntityData.YListKeys = []string {"AreaId"}

    return &(area.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable
// OSPFv3 area neighbor information table
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 neighbor detail information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail.
    NeighborDetail []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail
}

func (neighborDetailTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable) GetEntityData() *types.CommonEntityData {
    neighborDetailTable.EntityData.YFilter = neighborDetailTable.YFilter
    neighborDetailTable.EntityData.YangName = "neighbor-detail-table"
    neighborDetailTable.EntityData.BundleName = "cisco_ios_xr"
    neighborDetailTable.EntityData.ParentYangName = "area"
    neighborDetailTable.EntityData.SegmentPath = "neighbor-detail-table"
    neighborDetailTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/" + neighborDetailTable.EntityData.SegmentPath
    neighborDetailTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetailTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetailTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetailTable.EntityData.Children = types.NewOrderedMap()
    neighborDetailTable.EntityData.Children.Append("neighbor-detail", types.YChild{"NeighborDetail", nil})
    for i := range neighborDetailTable.NeighborDetail {
        types.SetYListKey(neighborDetailTable.NeighborDetail[i], i)
        neighborDetailTable.EntityData.Children.Append(types.GetSegmentPath(neighborDetailTable.NeighborDetail[i]), types.YChild{"NeighborDetail", neighborDetailTable.NeighborDetail[i]})
    }
    neighborDetailTable.EntityData.Leafs = types.NewOrderedMap()

    neighborDetailTable.EntityData.YListKeys = []string {}

    return &(neighborDetailTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail
// OSPFv3 neighbor detail information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Neighbor interface ID. The type is interface{} with range: 0..4294967295.
    NeighborInterfaceId interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is Ospfv3NeighborState.
    NeighborState interface{}

    // Designated router . The type is string with length: 0..9.
    NeighborDesignatedRouter interface{}

    // Time until neighbor's dead timer expires (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborUpTime interface{}

    // Neighbor virtual link id . The type is interface{} with range:
    // 0..4294967295.
    NeighborVirtualLinkId interface{}

    // If true, neighbor is on a virtual link . The type is bool.
    IsNeighborVirtualLink interface{}

    // Neighbor sham link id . The type is interface{} with range: 0..4294967295.
    NeighborShamLinkId interface{}

    // If true, neighbor is on a sham link . The type is bool.
    IsNeighborShamLink interface{}

    // Detailed OSPFv3 neighbor information .
    NeighborDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail

    // Neighbor BFD information.
    NeighborBfdInfo Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetEntityData() *types.CommonEntityData {
    neighborDetail.EntityData.YFilter = neighborDetail.YFilter
    neighborDetail.EntityData.YangName = "neighbor-detail"
    neighborDetail.EntityData.BundleName = "cisco_ios_xr"
    neighborDetail.EntityData.ParentYangName = "neighbor-detail-table"
    neighborDetail.EntityData.SegmentPath = "neighbor-detail" + types.AddNoKeyToken(neighborDetail)
    neighborDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/neighbor-detail-table/" + neighborDetail.EntityData.SegmentPath
    neighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetail.EntityData.Children = types.NewOrderedMap()
    neighborDetail.EntityData.Children.Append("neighbor-detail", types.YChild{"NeighborDetail", &neighborDetail.NeighborDetail})
    neighborDetail.EntityData.Children.Append("neighbor-bfd-info", types.YChild{"NeighborBfdInfo", &neighborDetail.NeighborBfdInfo})
    neighborDetail.EntityData.Leafs = types.NewOrderedMap()
    neighborDetail.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", neighborDetail.InterfaceName})
    neighborDetail.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighborDetail.NeighborAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-address-xr", types.YLeaf{"NeighborAddressXr", neighborDetail.NeighborAddressXr})
    neighborDetail.EntityData.Leafs.Append("neighbor-interface-id", types.YLeaf{"NeighborInterfaceId", neighborDetail.NeighborInterfaceId})
    neighborDetail.EntityData.Leafs.Append("neighbor-dr-priority", types.YLeaf{"NeighborDrPriority", neighborDetail.NeighborDrPriority})
    neighborDetail.EntityData.Leafs.Append("neighbor-state", types.YLeaf{"NeighborState", neighborDetail.NeighborState})
    neighborDetail.EntityData.Leafs.Append("neighbor-designated-router", types.YLeaf{"NeighborDesignatedRouter", neighborDetail.NeighborDesignatedRouter})
    neighborDetail.EntityData.Leafs.Append("neighbor-dead-timer", types.YLeaf{"NeighborDeadTimer", neighborDetail.NeighborDeadTimer})
    neighborDetail.EntityData.Leafs.Append("neighbor-up-time", types.YLeaf{"NeighborUpTime", neighborDetail.NeighborUpTime})
    neighborDetail.EntityData.Leafs.Append("neighbor-virtual-link-id", types.YLeaf{"NeighborVirtualLinkId", neighborDetail.NeighborVirtualLinkId})
    neighborDetail.EntityData.Leafs.Append("is-neighbor-virtual-link", types.YLeaf{"IsNeighborVirtualLink", neighborDetail.IsNeighborVirtualLink})
    neighborDetail.EntityData.Leafs.Append("neighbor-sham-link-id", types.YLeaf{"NeighborShamLinkId", neighborDetail.NeighborShamLinkId})
    neighborDetail.EntityData.Leafs.Append("is-neighbor-sham-link", types.YLeaf{"IsNeighborShamLink", neighborDetail.IsNeighborShamLink})

    neighborDetail.EntityData.YListKeys = []string {}

    return &(neighborDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail
// Detailed OSPFv3 neighbor information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of state changes . The type is interface{} with range: 0..65535.
    StateChanges interface{}

    // Cost of path to this neighbor . The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs . The type is bool.
    IsNeighborFiltered interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Ospfv3Interface.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // Remaining time when ignore timer is running . The type is interface{} with
    // range: 0..4294967295.
    NeighborIgnoreTimer interface{}

    // This is bitmask of neighbor's option field received . The type is
    // interface{} with range: 0..4294967295.
    NeighborOption interface{}

    // Number of pending events . The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // Retransmission information with this neighbor.
    NeighborRetransmission Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetEntityData() *types.CommonEntityData {
    neighborDetail.EntityData.YFilter = neighborDetail.YFilter
    neighborDetail.EntityData.YangName = "neighbor-detail"
    neighborDetail.EntityData.BundleName = "cisco_ios_xr"
    neighborDetail.EntityData.ParentYangName = "neighbor-detail"
    neighborDetail.EntityData.SegmentPath = "neighbor-detail"
    neighborDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/neighbor-detail-table/neighbor-detail/" + neighborDetail.EntityData.SegmentPath
    neighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetail.EntityData.Children = types.NewOrderedMap()
    neighborDetail.EntityData.Children.Append("neighbor-retransmission", types.YChild{"NeighborRetransmission", &neighborDetail.NeighborRetransmission})
    neighborDetail.EntityData.Leafs = types.NewOrderedMap()
    neighborDetail.EntityData.Leafs.Append("state-changes", types.YLeaf{"StateChanges", neighborDetail.StateChanges})
    neighborDetail.EntityData.Leafs.Append("neighbor-cost", types.YLeaf{"NeighborCost", neighborDetail.NeighborCost})
    neighborDetail.EntityData.Leafs.Append("is-neighbor-filtered", types.YLeaf{"IsNeighborFiltered", neighborDetail.IsNeighborFiltered})
    neighborDetail.EntityData.Leafs.Append("neighbor-designated-router-address", types.YLeaf{"NeighborDesignatedRouterAddress", neighborDetail.NeighborDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-backup-designated-router-address", types.YLeaf{"NeighborBackupDesignatedRouterAddress", neighborDetail.NeighborBackupDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("interface-type", types.YLeaf{"InterfaceType", neighborDetail.InterfaceType})
    neighborDetail.EntityData.Leafs.Append("poll-interval", types.YLeaf{"PollInterval", neighborDetail.PollInterval})
    neighborDetail.EntityData.Leafs.Append("next-poll-interval", types.YLeaf{"NextPollInterval", neighborDetail.NextPollInterval})
    neighborDetail.EntityData.Leafs.Append("neighbor-ignore-timer", types.YLeaf{"NeighborIgnoreTimer", neighborDetail.NeighborIgnoreTimer})
    neighborDetail.EntityData.Leafs.Append("neighbor-option", types.YLeaf{"NeighborOption", neighborDetail.NeighborOption})
    neighborDetail.EntityData.Leafs.Append("pending-events", types.YLeaf{"PendingEvents", neighborDetail.PendingEvents})

    neighborDetail.EntityData.YListKeys = []string {}

    return &(neighborDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission
// Retransmission information with this neighbor
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetEntityData() *types.CommonEntityData {
    neighborRetransmission.EntityData.YFilter = neighborRetransmission.YFilter
    neighborRetransmission.EntityData.YangName = "neighbor-retransmission"
    neighborRetransmission.EntityData.BundleName = "cisco_ios_xr"
    neighborRetransmission.EntityData.ParentYangName = "neighbor-detail"
    neighborRetransmission.EntityData.SegmentPath = "neighbor-retransmission"
    neighborRetransmission.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/neighbor-detail-table/neighbor-detail/neighbor-detail/" + neighborRetransmission.EntityData.SegmentPath
    neighborRetransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborRetransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborRetransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborRetransmission.EntityData.Children = types.NewOrderedMap()
    neighborRetransmission.EntityData.Leafs = types.NewOrderedMap()
    neighborRetransmission.EntityData.Leafs.Append("database-descriptor-retransmissions", types.YLeaf{"DatabaseDescriptorRetransmissions", neighborRetransmission.DatabaseDescriptorRetransmissions})
    neighborRetransmission.EntityData.Leafs.Append("area-flood-index", types.YLeaf{"AreaFloodIndex", neighborRetransmission.AreaFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", neighborRetransmission.AsFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-flood-index", types.YLeaf{"LinkFloodIndex", neighborRetransmission.LinkFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("neighbor-retransmissions", types.YLeaf{"NeighborRetransmissions", neighborRetransmission.NeighborRetransmissions})
    neighborRetransmission.EntityData.Leafs.Append("retransmissions", types.YLeaf{"Retransmissions", neighborRetransmission.Retransmissions})
    neighborRetransmission.EntityData.Leafs.Append("area-first-flood", types.YLeaf{"AreaFirstFlood", neighborRetransmission.AreaFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("area-first-flood-index", types.YLeaf{"AreaFirstFloodIndex", neighborRetransmission.AreaFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-first-flood", types.YLeaf{"AsFirstFlood", neighborRetransmission.AsFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("as-first-flood-index", types.YLeaf{"AsFirstFloodIndex", neighborRetransmission.AsFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-first-flood", types.YLeaf{"LinkFirstFlood", neighborRetransmission.LinkFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("link-first-flood-index", types.YLeaf{"LinkFirstFloodIndex", neighborRetransmission.LinkFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("area-next-flood", types.YLeaf{"AreaNextFlood", neighborRetransmission.AreaNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("area-next-flood-index", types.YLeaf{"AreaNextFloodIndex", neighborRetransmission.AreaNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-next-flood", types.YLeaf{"AsNextFlood", neighborRetransmission.AsNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("as-next-flood-index", types.YLeaf{"AsNextFloodIndex", neighborRetransmission.AsNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-next-flood", types.YLeaf{"LinkNextFlood", neighborRetransmission.LinkNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("link-next-flood-index", types.YLeaf{"LinkNextFloodIndex", neighborRetransmission.LinkNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", neighborRetransmission.LastRetransmissionLength})
    neighborRetransmission.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", neighborRetransmission.MaximumRetransmissionLength})
    neighborRetransmission.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", neighborRetransmission.LastRetransmissionTime})
    neighborRetransmission.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", neighborRetransmission.MaximumRetransmissionTime})
    neighborRetransmission.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", neighborRetransmission.LsaRetransmissionTimer})

    neighborRetransmission.EntityData.YListKeys = []string {}

    return &(neighborRetransmission.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo
// Neighbor BFD information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetEntityData() *types.CommonEntityData {
    neighborBfdInfo.EntityData.YFilter = neighborBfdInfo.YFilter
    neighborBfdInfo.EntityData.YangName = "neighbor-bfd-info"
    neighborBfdInfo.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInfo.EntityData.ParentYangName = "neighbor-detail"
    neighborBfdInfo.EntityData.SegmentPath = "neighbor-bfd-info"
    neighborBfdInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/neighbor-detail-table/neighbor-detail/" + neighborBfdInfo.EntityData.SegmentPath
    neighborBfdInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInfo.EntityData.Children = types.NewOrderedMap()
    neighborBfdInfo.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInfo.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInfo.BfdIntfEnableMode})
    neighborBfdInfo.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInfo.BfdStatusFlag})

    neighborBfdInfo.EntityData.YListKeys = []string {}

    return &(neighborBfdInfo.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable
// OSPFv3 interface brief information table for
// an area
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface brief information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief.
    InterfaceBrief []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief
}

func (interfaceBriefTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable) GetEntityData() *types.CommonEntityData {
    interfaceBriefTable.EntityData.YFilter = interfaceBriefTable.YFilter
    interfaceBriefTable.EntityData.YangName = "interface-brief-table"
    interfaceBriefTable.EntityData.BundleName = "cisco_ios_xr"
    interfaceBriefTable.EntityData.ParentYangName = "area"
    interfaceBriefTable.EntityData.SegmentPath = "interface-brief-table"
    interfaceBriefTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/" + interfaceBriefTable.EntityData.SegmentPath
    interfaceBriefTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBriefTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBriefTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBriefTable.EntityData.Children = types.NewOrderedMap()
    interfaceBriefTable.EntityData.Children.Append("interface-brief", types.YChild{"InterfaceBrief", nil})
    for i := range interfaceBriefTable.InterfaceBrief {
        interfaceBriefTable.EntityData.Children.Append(types.GetSegmentPath(interfaceBriefTable.InterfaceBrief[i]), types.YChild{"InterfaceBrief", interfaceBriefTable.InterfaceBrief[i]})
    }
    interfaceBriefTable.EntityData.Leafs = types.NewOrderedMap()

    interfaceBriefTable.EntityData.YListKeys = []string {}

    return &(interfaceBriefTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief
// Interface brief information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is Ospfv3InterfaceState.
    OspfInterfaceState interface{}

    // Total number of neighbors . The type is interface{} with range: 0..65535.
    InterfaceNeighbors interface{}

    // Total number of adjacent neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjacentNeighbors interface{}

    // Network type. The type is Ospfv3Interface.
    NetworkType interface{}
}

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetEntityData() *types.CommonEntityData {
    interfaceBrief.EntityData.YFilter = interfaceBrief.YFilter
    interfaceBrief.EntityData.YangName = "interface-brief"
    interfaceBrief.EntityData.BundleName = "cisco_ios_xr"
    interfaceBrief.EntityData.ParentYangName = "interface-brief-table"
    interfaceBrief.EntityData.SegmentPath = "interface-brief" + types.AddKeyToken(interfaceBrief.InterfaceName, "interface-name")
    interfaceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/interface-brief-table/" + interfaceBrief.EntityData.SegmentPath
    interfaceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBrief.EntityData.Children = types.NewOrderedMap()
    interfaceBrief.EntityData.Leafs = types.NewOrderedMap()
    interfaceBrief.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceBrief.InterfaceName})
    interfaceBrief.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", interfaceBrief.InterfaceAddress})
    interfaceBrief.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", interfaceBrief.InterfaceLinkCost})
    interfaceBrief.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", interfaceBrief.OspfInterfaceState})
    interfaceBrief.EntityData.Leafs.Append("interface-neighbors", types.YLeaf{"InterfaceNeighbors", interfaceBrief.InterfaceNeighbors})
    interfaceBrief.EntityData.Leafs.Append("interface-adjacent-neighbors", types.YLeaf{"InterfaceAdjacentNeighbors", interfaceBrief.InterfaceAdjacentNeighbors})
    interfaceBrief.EntityData.Leafs.Append("network-type", types.YLeaf{"NetworkType", interfaceBrief.NetworkType})

    interfaceBrief.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceBrief.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable
// OSPFv3 request list information in an area
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 request list information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request.
    Request []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request
}

func (requestListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable) GetEntityData() *types.CommonEntityData {
    requestListTable.EntityData.YFilter = requestListTable.YFilter
    requestListTable.EntityData.YangName = "request-list-table"
    requestListTable.EntityData.BundleName = "cisco_ios_xr"
    requestListTable.EntityData.ParentYangName = "area"
    requestListTable.EntityData.SegmentPath = "request-list-table"
    requestListTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/" + requestListTable.EntityData.SegmentPath
    requestListTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    requestListTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    requestListTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    requestListTable.EntityData.Children = types.NewOrderedMap()
    requestListTable.EntityData.Children.Append("request", types.YChild{"Request", nil})
    for i := range requestListTable.Request {
        types.SetYListKey(requestListTable.Request[i], i)
        requestListTable.EntityData.Children.Append(types.GetSegmentPath(requestListTable.Request[i]), types.YChild{"Request", requestListTable.Request[i]})
    }
    requestListTable.EntityData.Leafs = types.NewOrderedMap()

    requestListTable.EntityData.YListKeys = []string {}

    return &(requestListTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request
// OSPFv3 request list information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RequestNeighborAddress interface{}

    // If true, virtual link is requested . The type is bool.
    IsRequestVirtualLink interface{}

    // Request virtual link ID . The type is interface{} with range:
    // 0..4294967295.
    RequestVirtualLinkId interface{}

    // If true, sham link is requested . The type is bool.
    IsRequestShamLink interface{}

    // Request sham link ID . The type is interface{} with range: 0..4294967295.
    RequestShamLinkId interface{}

    // List of request list entries. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request.
    Request []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request
}

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request) GetEntityData() *types.CommonEntityData {
    request.EntityData.YFilter = request.YFilter
    request.EntityData.YangName = "request"
    request.EntityData.BundleName = "cisco_ios_xr"
    request.EntityData.ParentYangName = "request-list-table"
    request.EntityData.SegmentPath = "request" + types.AddNoKeyToken(request)
    request.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/request-list-table/" + request.EntityData.SegmentPath
    request.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    request.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    request.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    request.EntityData.Children = types.NewOrderedMap()
    request.EntityData.Children.Append("request", types.YChild{"Request", nil})
    for i := range request.Request {
        types.SetYListKey(request.Request[i], i)
        request.EntityData.Children.Append(types.GetSegmentPath(request.Request[i]), types.YChild{"Request", request.Request[i]})
    }
    request.EntityData.Leafs = types.NewOrderedMap()
    request.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", request.InterfaceName})
    request.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", request.NeighborAddress})
    request.EntityData.Leafs.Append("request-neighbor-address", types.YLeaf{"RequestNeighborAddress", request.RequestNeighborAddress})
    request.EntityData.Leafs.Append("is-request-virtual-link", types.YLeaf{"IsRequestVirtualLink", request.IsRequestVirtualLink})
    request.EntityData.Leafs.Append("request-virtual-link-id", types.YLeaf{"RequestVirtualLinkId", request.RequestVirtualLinkId})
    request.EntityData.Leafs.Append("is-request-sham-link", types.YLeaf{"IsRequestShamLink", request.IsRequestShamLink})
    request.EntityData.Leafs.Append("request-sham-link-id", types.YLeaf{"RequestShamLinkId", request.RequestShamLinkId})

    request.EntityData.YListKeys = []string {}

    return &(request.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request
// List of request list entries
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request) GetEntityData() *types.CommonEntityData {
    request.EntityData.YFilter = request.YFilter
    request.EntityData.YangName = "request"
    request.EntityData.BundleName = "cisco_ios_xr"
    request.EntityData.ParentYangName = "request"
    request.EntityData.SegmentPath = "request" + types.AddNoKeyToken(request)
    request.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/request-list-table/request/" + request.EntityData.SegmentPath
    request.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    request.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    request.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    request.EntityData.Children = types.NewOrderedMap()
    request.EntityData.Leafs = types.NewOrderedMap()
    request.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", request.HeaderLsaType})
    request.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", request.HeaderLsaAge})
    request.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", request.HeaderLsaId})
    request.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", request.HeaderAdvertisingRouter})
    request.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", request.HeaderSequenceNumber})

    request.EntityData.YListKeys = []string {}

    return &(request.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable
// OSPFv3 neighbor information table
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 neighbor detail information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor.
    Neighbor []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor
}

func (neighborTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable) GetEntityData() *types.CommonEntityData {
    neighborTable.EntityData.YFilter = neighborTable.YFilter
    neighborTable.EntityData.YangName = "neighbor-table"
    neighborTable.EntityData.BundleName = "cisco_ios_xr"
    neighborTable.EntityData.ParentYangName = "area"
    neighborTable.EntityData.SegmentPath = "neighbor-table"
    neighborTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/" + neighborTable.EntityData.SegmentPath
    neighborTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborTable.EntityData.Children = types.NewOrderedMap()
    neighborTable.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighborTable.Neighbor {
        types.SetYListKey(neighborTable.Neighbor[i], i)
        neighborTable.EntityData.Children.Append(types.GetSegmentPath(neighborTable.Neighbor[i]), types.YChild{"Neighbor", neighborTable.Neighbor[i]})
    }
    neighborTable.EntityData.Leafs = types.NewOrderedMap()

    neighborTable.EntityData.YListKeys = []string {}

    return &(neighborTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor
// OSPFv3 neighbor detail information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Neighbor interface ID. The type is interface{} with range: 0..4294967295.
    NeighborInterfaceId interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is Ospfv3NeighborState.
    NeighborState interface{}

    // Designated router . The type is string with length: 0..9.
    NeighborDesignatedRouter interface{}

    // Time until neighbor's dead timer expires (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborUpTime interface{}

    // Neighbor virtual link id . The type is interface{} with range:
    // 0..4294967295.
    NeighborVirtualLinkId interface{}

    // If true, neighbor is on a virtual link . The type is bool.
    IsNeighborVirtualLink interface{}

    // Neighbor sham link id . The type is interface{} with range: 0..4294967295.
    NeighborShamLinkId interface{}

    // If true, neighbor is on a sham link . The type is bool.
    IsNeighborShamLink interface{}

    // Detailed OSPFv3 neighbor information .
    NeighborDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail

    // Neighbor BFD information.
    NeighborBfdInfo Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbor-table"
    neighbor.EntityData.SegmentPath = "neighbor" + types.AddNoKeyToken(neighbor)
    neighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/neighbor-table/" + neighbor.EntityData.SegmentPath
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("neighbor-detail", types.YChild{"NeighborDetail", &neighbor.NeighborDetail})
    neighbor.EntityData.Children.Append("neighbor-bfd-info", types.YChild{"NeighborBfdInfo", &neighbor.NeighborBfdInfo})
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", neighbor.InterfaceName})
    neighbor.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighbor.NeighborAddress})
    neighbor.EntityData.Leafs.Append("neighbor-address-xr", types.YLeaf{"NeighborAddressXr", neighbor.NeighborAddressXr})
    neighbor.EntityData.Leafs.Append("neighbor-interface-id", types.YLeaf{"NeighborInterfaceId", neighbor.NeighborInterfaceId})
    neighbor.EntityData.Leafs.Append("neighbor-dr-priority", types.YLeaf{"NeighborDrPriority", neighbor.NeighborDrPriority})
    neighbor.EntityData.Leafs.Append("neighbor-state", types.YLeaf{"NeighborState", neighbor.NeighborState})
    neighbor.EntityData.Leafs.Append("neighbor-designated-router", types.YLeaf{"NeighborDesignatedRouter", neighbor.NeighborDesignatedRouter})
    neighbor.EntityData.Leafs.Append("neighbor-dead-timer", types.YLeaf{"NeighborDeadTimer", neighbor.NeighborDeadTimer})
    neighbor.EntityData.Leafs.Append("neighbor-up-time", types.YLeaf{"NeighborUpTime", neighbor.NeighborUpTime})
    neighbor.EntityData.Leafs.Append("neighbor-virtual-link-id", types.YLeaf{"NeighborVirtualLinkId", neighbor.NeighborVirtualLinkId})
    neighbor.EntityData.Leafs.Append("is-neighbor-virtual-link", types.YLeaf{"IsNeighborVirtualLink", neighbor.IsNeighborVirtualLink})
    neighbor.EntityData.Leafs.Append("neighbor-sham-link-id", types.YLeaf{"NeighborShamLinkId", neighbor.NeighborShamLinkId})
    neighbor.EntityData.Leafs.Append("is-neighbor-sham-link", types.YLeaf{"IsNeighborShamLink", neighbor.IsNeighborShamLink})

    neighbor.EntityData.YListKeys = []string {}

    return &(neighbor.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail
// Detailed OSPFv3 neighbor information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of state changes . The type is interface{} with range: 0..65535.
    StateChanges interface{}

    // Cost of path to this neighbor . The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs . The type is bool.
    IsNeighborFiltered interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Ospfv3Interface.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // Remaining time when ignore timer is running . The type is interface{} with
    // range: 0..4294967295.
    NeighborIgnoreTimer interface{}

    // This is bitmask of neighbor's option field received . The type is
    // interface{} with range: 0..4294967295.
    NeighborOption interface{}

    // Number of pending events . The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // Retransmission information with this neighbor.
    NeighborRetransmission Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetEntityData() *types.CommonEntityData {
    neighborDetail.EntityData.YFilter = neighborDetail.YFilter
    neighborDetail.EntityData.YangName = "neighbor-detail"
    neighborDetail.EntityData.BundleName = "cisco_ios_xr"
    neighborDetail.EntityData.ParentYangName = "neighbor"
    neighborDetail.EntityData.SegmentPath = "neighbor-detail"
    neighborDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/neighbor-table/neighbor/" + neighborDetail.EntityData.SegmentPath
    neighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetail.EntityData.Children = types.NewOrderedMap()
    neighborDetail.EntityData.Children.Append("neighbor-retransmission", types.YChild{"NeighborRetransmission", &neighborDetail.NeighborRetransmission})
    neighborDetail.EntityData.Leafs = types.NewOrderedMap()
    neighborDetail.EntityData.Leafs.Append("state-changes", types.YLeaf{"StateChanges", neighborDetail.StateChanges})
    neighborDetail.EntityData.Leafs.Append("neighbor-cost", types.YLeaf{"NeighborCost", neighborDetail.NeighborCost})
    neighborDetail.EntityData.Leafs.Append("is-neighbor-filtered", types.YLeaf{"IsNeighborFiltered", neighborDetail.IsNeighborFiltered})
    neighborDetail.EntityData.Leafs.Append("neighbor-designated-router-address", types.YLeaf{"NeighborDesignatedRouterAddress", neighborDetail.NeighborDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-backup-designated-router-address", types.YLeaf{"NeighborBackupDesignatedRouterAddress", neighborDetail.NeighborBackupDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("interface-type", types.YLeaf{"InterfaceType", neighborDetail.InterfaceType})
    neighborDetail.EntityData.Leafs.Append("poll-interval", types.YLeaf{"PollInterval", neighborDetail.PollInterval})
    neighborDetail.EntityData.Leafs.Append("next-poll-interval", types.YLeaf{"NextPollInterval", neighborDetail.NextPollInterval})
    neighborDetail.EntityData.Leafs.Append("neighbor-ignore-timer", types.YLeaf{"NeighborIgnoreTimer", neighborDetail.NeighborIgnoreTimer})
    neighborDetail.EntityData.Leafs.Append("neighbor-option", types.YLeaf{"NeighborOption", neighborDetail.NeighborOption})
    neighborDetail.EntityData.Leafs.Append("pending-events", types.YLeaf{"PendingEvents", neighborDetail.PendingEvents})

    neighborDetail.EntityData.YListKeys = []string {}

    return &(neighborDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission
// Retransmission information with this neighbor
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetEntityData() *types.CommonEntityData {
    neighborRetransmission.EntityData.YFilter = neighborRetransmission.YFilter
    neighborRetransmission.EntityData.YangName = "neighbor-retransmission"
    neighborRetransmission.EntityData.BundleName = "cisco_ios_xr"
    neighborRetransmission.EntityData.ParentYangName = "neighbor-detail"
    neighborRetransmission.EntityData.SegmentPath = "neighbor-retransmission"
    neighborRetransmission.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/neighbor-table/neighbor/neighbor-detail/" + neighborRetransmission.EntityData.SegmentPath
    neighborRetransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborRetransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborRetransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborRetransmission.EntityData.Children = types.NewOrderedMap()
    neighborRetransmission.EntityData.Leafs = types.NewOrderedMap()
    neighborRetransmission.EntityData.Leafs.Append("database-descriptor-retransmissions", types.YLeaf{"DatabaseDescriptorRetransmissions", neighborRetransmission.DatabaseDescriptorRetransmissions})
    neighborRetransmission.EntityData.Leafs.Append("area-flood-index", types.YLeaf{"AreaFloodIndex", neighborRetransmission.AreaFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", neighborRetransmission.AsFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-flood-index", types.YLeaf{"LinkFloodIndex", neighborRetransmission.LinkFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("neighbor-retransmissions", types.YLeaf{"NeighborRetransmissions", neighborRetransmission.NeighborRetransmissions})
    neighborRetransmission.EntityData.Leafs.Append("retransmissions", types.YLeaf{"Retransmissions", neighborRetransmission.Retransmissions})
    neighborRetransmission.EntityData.Leafs.Append("area-first-flood", types.YLeaf{"AreaFirstFlood", neighborRetransmission.AreaFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("area-first-flood-index", types.YLeaf{"AreaFirstFloodIndex", neighborRetransmission.AreaFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-first-flood", types.YLeaf{"AsFirstFlood", neighborRetransmission.AsFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("as-first-flood-index", types.YLeaf{"AsFirstFloodIndex", neighborRetransmission.AsFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-first-flood", types.YLeaf{"LinkFirstFlood", neighborRetransmission.LinkFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("link-first-flood-index", types.YLeaf{"LinkFirstFloodIndex", neighborRetransmission.LinkFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("area-next-flood", types.YLeaf{"AreaNextFlood", neighborRetransmission.AreaNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("area-next-flood-index", types.YLeaf{"AreaNextFloodIndex", neighborRetransmission.AreaNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-next-flood", types.YLeaf{"AsNextFlood", neighborRetransmission.AsNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("as-next-flood-index", types.YLeaf{"AsNextFloodIndex", neighborRetransmission.AsNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-next-flood", types.YLeaf{"LinkNextFlood", neighborRetransmission.LinkNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("link-next-flood-index", types.YLeaf{"LinkNextFloodIndex", neighborRetransmission.LinkNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", neighborRetransmission.LastRetransmissionLength})
    neighborRetransmission.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", neighborRetransmission.MaximumRetransmissionLength})
    neighborRetransmission.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", neighborRetransmission.LastRetransmissionTime})
    neighborRetransmission.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", neighborRetransmission.MaximumRetransmissionTime})
    neighborRetransmission.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", neighborRetransmission.LsaRetransmissionTimer})

    neighborRetransmission.EntityData.YListKeys = []string {}

    return &(neighborRetransmission.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo
// Neighbor BFD information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetEntityData() *types.CommonEntityData {
    neighborBfdInfo.EntityData.YFilter = neighborBfdInfo.YFilter
    neighborBfdInfo.EntityData.YangName = "neighbor-bfd-info"
    neighborBfdInfo.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInfo.EntityData.ParentYangName = "neighbor"
    neighborBfdInfo.EntityData.SegmentPath = "neighbor-bfd-info"
    neighborBfdInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/neighbor-table/neighbor/" + neighborBfdInfo.EntityData.SegmentPath
    neighborBfdInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInfo.EntityData.Children = types.NewOrderedMap()
    neighborBfdInfo.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInfo.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInfo.BfdIntfEnableMode})
    neighborBfdInfo.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInfo.BfdStatusFlag})

    neighborBfdInfo.EntityData.YListKeys = []string {}

    return &(neighborBfdInfo.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable
// OSPFv3 interface information table for an area
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 interface information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface.
    Interface []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface
}

func (interfaceTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable) GetEntityData() *types.CommonEntityData {
    interfaceTable.EntityData.YFilter = interfaceTable.YFilter
    interfaceTable.EntityData.YangName = "interface-table"
    interfaceTable.EntityData.BundleName = "cisco_ios_xr"
    interfaceTable.EntityData.ParentYangName = "area"
    interfaceTable.EntityData.SegmentPath = "interface-table"
    interfaceTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/" + interfaceTable.EntityData.SegmentPath
    interfaceTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceTable.EntityData.Children = types.NewOrderedMap()
    interfaceTable.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaceTable.Interface {
        interfaceTable.EntityData.Children.Append(types.GetSegmentPath(interfaceTable.Interface[i]), types.YChild{"Interface", interfaceTable.Interface[i]})
    }
    interfaceTable.EntityData.Leafs = types.NewOrderedMap()

    interfaceTable.EntityData.YListKeys = []string {}

    return &(interfaceTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface
// OSPFv3 interface information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface state. The type is ImStateEnum.
    InterfaceState interface{}

    // If true, line protocol is up . The type is bool.
    IsInterfaceLineUp interface{}

    // If true, interface IP security is required . The type is bool.
    IsInterfaceIpSecurityRequired interface{}

    // If true, interface IP security is active . The type is bool.
    IsInterfaceIpSecurityActive interface{}

    // Interface IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface number . The type is interface{} with range: 0..4294967295.
    InterfaceNumber interface{}

    // Interface router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceRouterId interface{}

    // Network type. The type is Ospfv3Interface.
    NetworkType interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // If true, interface flood reduction is active . The type is bool.
    IsInterfaceFloodReduction interface{}

    // If true, configured as demand circuit . The type is bool.
    IsDemandCircuitConfigured interface{}

    // If true, interface running as demand circuit. The type is bool.
    IsInterfaceDemandCircuit interface{}

    // Number of LSAs with demand circuit bit not set for the area in which the
    // interface is running. The type is interface{} with range: 0..4294967295.
    InterfaceDcBitlessLsAs interface{}

    // Interface transmission delay (sec). The type is interface{} with range:
    // 0..65535.
    TransmissionDelay interface{}

    // Interface state. The type is Ospfv3InterfaceState.
    OspfInterfaceState interface{}

    // Interface priority. The type is interface{} with range: 0..255.
    InterfacePriority interface{}

    // If true, designated router. The type is bool.
    IsDesignatedRouter interface{}

    // Designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DesignatedRouterId interface{}

    // Designated router interface address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DesignatedRouterAddress interface{}

    // Backup designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterId interface{}

    // Backup designated router interface address. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterAddress interface{}

    // The amount of time in seconds before flush timer for old network LSA
    // expires . The type is interface{} with range: 0..4294967295. Units are
    // second.
    NetworkLsaFlushTimer interface{}

    // Filter is configured for out going LSAs . The type is bool.
    IsInterfaceLsaFiltered interface{}

    // Configured hello interval (s). The type is interface{} with range:
    // 0..4294967295.
    HelloInterval interface{}

    // Configured dead interval (s) . The type is interface{} with range:
    // 0..4294967295.
    DeadInterval interface{}

    // Configured wait interval (s) . The type is interface{} with range:
    // 0..4294967295.
    WaitInterval interface{}

    // Configured retransmit interval (s) . The type is interface{} with range:
    // 0..4294967295.
    InterfaceRetransmissionInterval interface{}

    // Time until next Hello (s) . The type is interface{} with range:
    // 0..4294967295.
    NextHelloTime interface{}

    // Interface authentication spi . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAuthenticationSpi interface{}

    // Interface authentication transmit . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAuthenticationTransmit interface{}

    // If true, interface encryption is enabled . The type is bool.
    IsInterfaceEncryptionEnabled interface{}

    // If true prefix suppression is enabled. The type is bool.
    IsPrefixSuppress interface{}

    // Interface encryption spi. The type is interface{} with range:
    // 0..4294967295.
    InterfaceEncryptionSpi interface{}

    // Interface encryption transmitted . The type is interface{} with range:
    // 0..4294967295.
    InterfaceEncryptionTransmitted interface{}

    // Interface encrypted authentication transmitted . The type is interface{}
    // with range: 0..4294967295.
    InterfaceEncryptedAuthenticationTransmitted interface{}

    // Number of adjacent neighbors. The type is interface{} with range:
    // 0..4294967295.
    AdjacentNeighbor interface{}

    // Interface reference count . The type is interface{} with range:
    // 0..4294967295.
    InterfaceReferences interface{}

    // If true, configured as LDP sync. The type is bool.
    ConfiguredLdpSync interface{}

    // If true, interface LDP sync is achieved. The type is bool.
    InterfaceLdpSync interface{}

    // Active interface details .
    ActiveInterface Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface

    // BFD information .
    InterfaceBfd Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd

    // Information for neighbors on the interface. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor.
    InterfaceNeighbor []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor
}

func (self *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interface-table"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/interface-table/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("active-interface", types.YChild{"ActiveInterface", &self.ActiveInterface})
    self.EntityData.Children.Append("interface-bfd", types.YChild{"InterfaceBfd", &self.InterfaceBfd})
    self.EntityData.Children.Append("interface-neighbor", types.YChild{"InterfaceNeighbor", nil})
    for i := range self.InterfaceNeighbor {
        types.SetYListKey(self.InterfaceNeighbor[i], i)
        self.EntityData.Children.Append(types.GetSegmentPath(self.InterfaceNeighbor[i]), types.YChild{"InterfaceNeighbor", self.InterfaceNeighbor[i]})
    }
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface-state", types.YLeaf{"InterfaceState", self.InterfaceState})
    self.EntityData.Leafs.Append("is-interface-line-up", types.YLeaf{"IsInterfaceLineUp", self.IsInterfaceLineUp})
    self.EntityData.Leafs.Append("is-interface-ip-security-required", types.YLeaf{"IsInterfaceIpSecurityRequired", self.IsInterfaceIpSecurityRequired})
    self.EntityData.Leafs.Append("is-interface-ip-security-active", types.YLeaf{"IsInterfaceIpSecurityActive", self.IsInterfaceIpSecurityActive})
    self.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", self.InterfaceAddress})
    self.EntityData.Leafs.Append("interface-number", types.YLeaf{"InterfaceNumber", self.InterfaceNumber})
    self.EntityData.Leafs.Append("interface-router-id", types.YLeaf{"InterfaceRouterId", self.InterfaceRouterId})
    self.EntityData.Leafs.Append("network-type", types.YLeaf{"NetworkType", self.NetworkType})
    self.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", self.InterfaceLinkCost})
    self.EntityData.Leafs.Append("is-interface-flood-reduction", types.YLeaf{"IsInterfaceFloodReduction", self.IsInterfaceFloodReduction})
    self.EntityData.Leafs.Append("is-demand-circuit-configured", types.YLeaf{"IsDemandCircuitConfigured", self.IsDemandCircuitConfigured})
    self.EntityData.Leafs.Append("is-interface-demand-circuit", types.YLeaf{"IsInterfaceDemandCircuit", self.IsInterfaceDemandCircuit})
    self.EntityData.Leafs.Append("interface-dc-bitless-ls-as", types.YLeaf{"InterfaceDcBitlessLsAs", self.InterfaceDcBitlessLsAs})
    self.EntityData.Leafs.Append("transmission-delay", types.YLeaf{"TransmissionDelay", self.TransmissionDelay})
    self.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", self.OspfInterfaceState})
    self.EntityData.Leafs.Append("interface-priority", types.YLeaf{"InterfacePriority", self.InterfacePriority})
    self.EntityData.Leafs.Append("is-designated-router", types.YLeaf{"IsDesignatedRouter", self.IsDesignatedRouter})
    self.EntityData.Leafs.Append("designated-router-id", types.YLeaf{"DesignatedRouterId", self.DesignatedRouterId})
    self.EntityData.Leafs.Append("designated-router-address", types.YLeaf{"DesignatedRouterAddress", self.DesignatedRouterAddress})
    self.EntityData.Leafs.Append("backup-designated-router-id", types.YLeaf{"BackupDesignatedRouterId", self.BackupDesignatedRouterId})
    self.EntityData.Leafs.Append("backup-designated-router-address", types.YLeaf{"BackupDesignatedRouterAddress", self.BackupDesignatedRouterAddress})
    self.EntityData.Leafs.Append("network-lsa-flush-timer", types.YLeaf{"NetworkLsaFlushTimer", self.NetworkLsaFlushTimer})
    self.EntityData.Leafs.Append("is-interface-lsa-filtered", types.YLeaf{"IsInterfaceLsaFiltered", self.IsInterfaceLsaFiltered})
    self.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", self.HelloInterval})
    self.EntityData.Leafs.Append("dead-interval", types.YLeaf{"DeadInterval", self.DeadInterval})
    self.EntityData.Leafs.Append("wait-interval", types.YLeaf{"WaitInterval", self.WaitInterval})
    self.EntityData.Leafs.Append("interface-retransmission-interval", types.YLeaf{"InterfaceRetransmissionInterval", self.InterfaceRetransmissionInterval})
    self.EntityData.Leafs.Append("next-hello-time", types.YLeaf{"NextHelloTime", self.NextHelloTime})
    self.EntityData.Leafs.Append("interface-authentication-spi", types.YLeaf{"InterfaceAuthenticationSpi", self.InterfaceAuthenticationSpi})
    self.EntityData.Leafs.Append("interface-authentication-transmit", types.YLeaf{"InterfaceAuthenticationTransmit", self.InterfaceAuthenticationTransmit})
    self.EntityData.Leafs.Append("is-interface-encryption-enabled", types.YLeaf{"IsInterfaceEncryptionEnabled", self.IsInterfaceEncryptionEnabled})
    self.EntityData.Leafs.Append("is-prefix-suppress", types.YLeaf{"IsPrefixSuppress", self.IsPrefixSuppress})
    self.EntityData.Leafs.Append("interface-encryption-spi", types.YLeaf{"InterfaceEncryptionSpi", self.InterfaceEncryptionSpi})
    self.EntityData.Leafs.Append("interface-encryption-transmitted", types.YLeaf{"InterfaceEncryptionTransmitted", self.InterfaceEncryptionTransmitted})
    self.EntityData.Leafs.Append("interface-encrypted-authentication-transmitted", types.YLeaf{"InterfaceEncryptedAuthenticationTransmitted", self.InterfaceEncryptedAuthenticationTransmitted})
    self.EntityData.Leafs.Append("adjacent-neighbor", types.YLeaf{"AdjacentNeighbor", self.AdjacentNeighbor})
    self.EntityData.Leafs.Append("interface-references", types.YLeaf{"InterfaceReferences", self.InterfaceReferences})
    self.EntityData.Leafs.Append("configured-ldp-sync", types.YLeaf{"ConfiguredLdpSync", self.ConfiguredLdpSync})
    self.EntityData.Leafs.Append("interface-ldp-sync", types.YLeaf{"InterfaceLdpSync", self.InterfaceLdpSync})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface
// Active interface details 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Wait time for DR/BDR selection (s). The type is interface{} with range:
    // 0..4294967295.
    WaitTime interface{}

    // Area scope LSAs flood index. The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaFloodIndex interface{}

    // AS scope LSAs flood index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsFloodIndex interface{}

    // Interface flood link index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkFloodIndex interface{}

    // Flood queue length. The type is interface{} with range: 0..4294967295.
    FloodQueueLength interface{}

    // Next LSA to flood (Area scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaNextFlood interface{}

    // Index of next LSA to flood (Area scope) . The type is interface{} with
    // range: 0..4294967295.
    InterfaceAreaNextFloodIndex interface{}

    // Next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFlood interface{}

    // Index of next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFloodIndex interface{}

    // Interface link next flood information . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkNextFlood interface{}

    // Interface link next information index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkNextIndex interface{}

    // Last flood scan length . The type is interface{} with range: 0..4294967295.
    FloodScanLength interface{}

    // Maximum flood length . The type is interface{} with range: 0..4294967295.
    MaximumFloodLength interface{}

    // Last flood scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastFloodTime interface{}

    // Maximum flood time (ms) . The type is interface{} with range:
    // 0..4294967295.
    MaximumFloodTime interface{}

    // Time until next flood pacing timer (ms) . The type is interface{} with
    // range: 0..4294967295.
    InterfaceFloodPacingTimer interface{}

    // Total number of neighbors . The type is interface{} with range: 0..65535.
    InterfaceNeighbors interface{}

    // Number of neighbors for which hellos are suppressed . The type is
    // interface{} with range: 0..65535.
    SuppressedHellos interface{}
}

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetEntityData() *types.CommonEntityData {
    activeInterface.EntityData.YFilter = activeInterface.YFilter
    activeInterface.EntityData.YangName = "active-interface"
    activeInterface.EntityData.BundleName = "cisco_ios_xr"
    activeInterface.EntityData.ParentYangName = "interface"
    activeInterface.EntityData.SegmentPath = "active-interface"
    activeInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/interface-table/interface/" + activeInterface.EntityData.SegmentPath
    activeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    activeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    activeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    activeInterface.EntityData.Children = types.NewOrderedMap()
    activeInterface.EntityData.Leafs = types.NewOrderedMap()
    activeInterface.EntityData.Leafs.Append("wait-time", types.YLeaf{"WaitTime", activeInterface.WaitTime})
    activeInterface.EntityData.Leafs.Append("interface-area-flood-index", types.YLeaf{"InterfaceAreaFloodIndex", activeInterface.InterfaceAreaFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-as-flood-index", types.YLeaf{"InterfaceAsFloodIndex", activeInterface.InterfaceAsFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-link-flood-index", types.YLeaf{"InterfaceLinkFloodIndex", activeInterface.InterfaceLinkFloodIndex})
    activeInterface.EntityData.Leafs.Append("flood-queue-length", types.YLeaf{"FloodQueueLength", activeInterface.FloodQueueLength})
    activeInterface.EntityData.Leafs.Append("interface-area-next-flood", types.YLeaf{"InterfaceAreaNextFlood", activeInterface.InterfaceAreaNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-area-next-flood-index", types.YLeaf{"InterfaceAreaNextFloodIndex", activeInterface.InterfaceAreaNextFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-as-next-flood", types.YLeaf{"InterfaceAsNextFlood", activeInterface.InterfaceAsNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-as-next-flood-index", types.YLeaf{"InterfaceAsNextFloodIndex", activeInterface.InterfaceAsNextFloodIndex})
    activeInterface.EntityData.Leafs.Append("interface-link-next-flood", types.YLeaf{"InterfaceLinkNextFlood", activeInterface.InterfaceLinkNextFlood})
    activeInterface.EntityData.Leafs.Append("interface-link-next-index", types.YLeaf{"InterfaceLinkNextIndex", activeInterface.InterfaceLinkNextIndex})
    activeInterface.EntityData.Leafs.Append("flood-scan-length", types.YLeaf{"FloodScanLength", activeInterface.FloodScanLength})
    activeInterface.EntityData.Leafs.Append("maximum-flood-length", types.YLeaf{"MaximumFloodLength", activeInterface.MaximumFloodLength})
    activeInterface.EntityData.Leafs.Append("last-flood-time", types.YLeaf{"LastFloodTime", activeInterface.LastFloodTime})
    activeInterface.EntityData.Leafs.Append("maximum-flood-time", types.YLeaf{"MaximumFloodTime", activeInterface.MaximumFloodTime})
    activeInterface.EntityData.Leafs.Append("interface-flood-pacing-timer", types.YLeaf{"InterfaceFloodPacingTimer", activeInterface.InterfaceFloodPacingTimer})
    activeInterface.EntityData.Leafs.Append("interface-neighbors", types.YLeaf{"InterfaceNeighbors", activeInterface.InterfaceNeighbors})
    activeInterface.EntityData.Leafs.Append("suppressed-hellos", types.YLeaf{"SuppressedHellos", activeInterface.SuppressedHellos})

    activeInterface.EntityData.YListKeys = []string {}

    return &(activeInterface.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd
// BFD information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD Enable Mode on the interface - Default/Strict. The type is interface{}
    // with range: 0..4294967295.
    BfdIntfEnableMode interface{}

    // BFD interval (ms) . The type is interface{} with range: 0..4294967295.
    BfdInterval interface{}

    // BFD detection multiplier . The type is interface{} with range:
    // 0..4294967295.
    BfdDetectionMultiplier interface{}
}

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetEntityData() *types.CommonEntityData {
    interfaceBfd.EntityData.YFilter = interfaceBfd.YFilter
    interfaceBfd.EntityData.YangName = "interface-bfd"
    interfaceBfd.EntityData.BundleName = "cisco_ios_xr"
    interfaceBfd.EntityData.ParentYangName = "interface"
    interfaceBfd.EntityData.SegmentPath = "interface-bfd"
    interfaceBfd.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/interface-table/interface/" + interfaceBfd.EntityData.SegmentPath
    interfaceBfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBfd.EntityData.Children = types.NewOrderedMap()
    interfaceBfd.EntityData.Leafs = types.NewOrderedMap()
    interfaceBfd.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", interfaceBfd.BfdIntfEnableMode})
    interfaceBfd.EntityData.Leafs.Append("bfd-interval", types.YLeaf{"BfdInterval", interfaceBfd.BfdInterval})
    interfaceBfd.EntityData.Leafs.Append("bfd-detection-multiplier", types.YLeaf{"BfdDetectionMultiplier", interfaceBfd.BfdDetectionMultiplier})

    interfaceBfd.EntityData.YListKeys = []string {}

    return &(interfaceBfd.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor
// Information for neighbors on the interface
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceNeighborId interface{}

    // Cost of link to neighbor. The type is interface{} with range:
    // 0..4294967295.
    InterfaceNeighborCost interface{}

    // If true, designated router is found . The type is bool.
    IsNeighborDr interface{}

    // If true, backup designated router is found . The type is bool.
    IsNeighborBdr interface{}

    // If true, hello is suppressed . The type is bool.
    IsHelloSuppressed interface{}
}

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetEntityData() *types.CommonEntityData {
    interfaceNeighbor.EntityData.YFilter = interfaceNeighbor.YFilter
    interfaceNeighbor.EntityData.YangName = "interface-neighbor"
    interfaceNeighbor.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighbor.EntityData.ParentYangName = "interface"
    interfaceNeighbor.EntityData.SegmentPath = "interface-neighbor" + types.AddNoKeyToken(interfaceNeighbor)
    interfaceNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/interface-table/interface/" + interfaceNeighbor.EntityData.SegmentPath
    interfaceNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighbor.EntityData.Children = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs.Append("interface-neighbor-id", types.YLeaf{"InterfaceNeighborId", interfaceNeighbor.InterfaceNeighborId})
    interfaceNeighbor.EntityData.Leafs.Append("interface-neighbor-cost", types.YLeaf{"InterfaceNeighborCost", interfaceNeighbor.InterfaceNeighborCost})
    interfaceNeighbor.EntityData.Leafs.Append("is-neighbor-dr", types.YLeaf{"IsNeighborDr", interfaceNeighbor.IsNeighborDr})
    interfaceNeighbor.EntityData.Leafs.Append("is-neighbor-bdr", types.YLeaf{"IsNeighborBdr", interfaceNeighbor.IsNeighborBdr})
    interfaceNeighbor.EntityData.Leafs.Append("is-hello-suppressed", types.YLeaf{"IsHelloSuppressed", interfaceNeighbor.IsHelloSuppressed})

    interfaceNeighbor.EntityData.YListKeys = []string {}

    return &(interfaceNeighbor.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable
// OSPFv3 flood list information table for an
// area
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 flood list information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood.
    Flood []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood
}

func (floodListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable) GetEntityData() *types.CommonEntityData {
    floodListTable.EntityData.YFilter = floodListTable.YFilter
    floodListTable.EntityData.YangName = "flood-list-table"
    floodListTable.EntityData.BundleName = "cisco_ios_xr"
    floodListTable.EntityData.ParentYangName = "area"
    floodListTable.EntityData.SegmentPath = "flood-list-table"
    floodListTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/" + floodListTable.EntityData.SegmentPath
    floodListTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    floodListTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    floodListTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    floodListTable.EntityData.Children = types.NewOrderedMap()
    floodListTable.EntityData.Children.Append("flood", types.YChild{"Flood", nil})
    for i := range floodListTable.Flood {
        floodListTable.EntityData.Children.Append(types.GetSegmentPath(floodListTable.Flood[i]), types.YChild{"Flood", floodListTable.Flood[i]})
    }
    floodListTable.EntityData.Leafs = types.NewOrderedMap()

    floodListTable.EntityData.YListKeys = []string {}

    return &(floodListTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood
// OSPFv3 flood list information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Time until next LS transmission (ms) . The type is interface{} with range:
    // 0..4294967295.
    LsTransmissionTimer interface{}

    // Number of LSAs currently being flooded . The type is interface{} with
    // range: 0..4294967295.
    QueueLength interface{}

    // Link floodlist. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood.
    LinkFlood []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood

    // Area scope floodlist. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood.
    AreaFlood []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood

    // AS scope floodlist. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood.
    AsFlood []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood
}

func (flood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood) GetEntityData() *types.CommonEntityData {
    flood.EntityData.YFilter = flood.YFilter
    flood.EntityData.YangName = "flood"
    flood.EntityData.BundleName = "cisco_ios_xr"
    flood.EntityData.ParentYangName = "flood-list-table"
    flood.EntityData.SegmentPath = "flood" + types.AddKeyToken(flood.InterfaceName, "interface-name")
    flood.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/flood-list-table/" + flood.EntityData.SegmentPath
    flood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flood.EntityData.Children = types.NewOrderedMap()
    flood.EntityData.Children.Append("link-flood", types.YChild{"LinkFlood", nil})
    for i := range flood.LinkFlood {
        types.SetYListKey(flood.LinkFlood[i], i)
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.LinkFlood[i]), types.YChild{"LinkFlood", flood.LinkFlood[i]})
    }
    flood.EntityData.Children.Append("area-flood", types.YChild{"AreaFlood", nil})
    for i := range flood.AreaFlood {
        types.SetYListKey(flood.AreaFlood[i], i)
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.AreaFlood[i]), types.YChild{"AreaFlood", flood.AreaFlood[i]})
    }
    flood.EntityData.Children.Append("as-flood", types.YChild{"AsFlood", nil})
    for i := range flood.AsFlood {
        types.SetYListKey(flood.AsFlood[i], i)
        flood.EntityData.Children.Append(types.GetSegmentPath(flood.AsFlood[i]), types.YChild{"AsFlood", flood.AsFlood[i]})
    }
    flood.EntityData.Leafs = types.NewOrderedMap()
    flood.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", flood.InterfaceName})
    flood.EntityData.Leafs.Append("ls-transmission-timer", types.YLeaf{"LsTransmissionTimer", flood.LsTransmissionTimer})
    flood.EntityData.Leafs.Append("queue-length", types.YLeaf{"QueueLength", flood.QueueLength})

    flood.EntityData.YListKeys = []string {"InterfaceName"}

    return &(flood.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood
// Link floodlist
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetEntityData() *types.CommonEntityData {
    linkFlood.EntityData.YFilter = linkFlood.YFilter
    linkFlood.EntityData.YangName = "link-flood"
    linkFlood.EntityData.BundleName = "cisco_ios_xr"
    linkFlood.EntityData.ParentYangName = "flood"
    linkFlood.EntityData.SegmentPath = "link-flood" + types.AddNoKeyToken(linkFlood)
    linkFlood.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/flood-list-table/flood/" + linkFlood.EntityData.SegmentPath
    linkFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkFlood.EntityData.Children = types.NewOrderedMap()
    linkFlood.EntityData.Leafs = types.NewOrderedMap()
    linkFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", linkFlood.HeaderLsaType})
    linkFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", linkFlood.HeaderLsaAge})
    linkFlood.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", linkFlood.HeaderLsaId})
    linkFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", linkFlood.HeaderAdvertisingRouter})
    linkFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", linkFlood.HeaderSequenceNumber})

    linkFlood.EntityData.YListKeys = []string {}

    return &(linkFlood.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood
// Area scope floodlist
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetEntityData() *types.CommonEntityData {
    areaFlood.EntityData.YFilter = areaFlood.YFilter
    areaFlood.EntityData.YangName = "area-flood"
    areaFlood.EntityData.BundleName = "cisco_ios_xr"
    areaFlood.EntityData.ParentYangName = "flood"
    areaFlood.EntityData.SegmentPath = "area-flood" + types.AddNoKeyToken(areaFlood)
    areaFlood.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/flood-list-table/flood/" + areaFlood.EntityData.SegmentPath
    areaFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaFlood.EntityData.Children = types.NewOrderedMap()
    areaFlood.EntityData.Leafs = types.NewOrderedMap()
    areaFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", areaFlood.HeaderLsaType})
    areaFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", areaFlood.HeaderLsaAge})
    areaFlood.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", areaFlood.HeaderLsaId})
    areaFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", areaFlood.HeaderAdvertisingRouter})
    areaFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", areaFlood.HeaderSequenceNumber})

    areaFlood.EntityData.YListKeys = []string {}

    return &(areaFlood.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood
// AS scope floodlist
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood) GetEntityData() *types.CommonEntityData {
    asFlood.EntityData.YFilter = asFlood.YFilter
    asFlood.EntityData.YangName = "as-flood"
    asFlood.EntityData.BundleName = "cisco_ios_xr"
    asFlood.EntityData.ParentYangName = "flood"
    asFlood.EntityData.SegmentPath = "as-flood" + types.AddNoKeyToken(asFlood)
    asFlood.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/flood-list-table/flood/" + asFlood.EntityData.SegmentPath
    asFlood.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asFlood.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asFlood.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asFlood.EntityData.Children = types.NewOrderedMap()
    asFlood.EntityData.Leafs = types.NewOrderedMap()
    asFlood.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", asFlood.HeaderLsaType})
    asFlood.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", asFlood.HeaderLsaAge})
    asFlood.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", asFlood.HeaderLsaId})
    asFlood.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", asFlood.HeaderAdvertisingRouter})
    asFlood.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", asFlood.HeaderSequenceNumber})

    asFlood.EntityData.YListKeys = []string {}

    return &(asFlood.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable
// OSPFv3 retransmission list information table
// in an area
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 retransmission list information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission.
    Retransmission []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission
}

func (retransmissionListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable) GetEntityData() *types.CommonEntityData {
    retransmissionListTable.EntityData.YFilter = retransmissionListTable.YFilter
    retransmissionListTable.EntityData.YangName = "retransmission-list-table"
    retransmissionListTable.EntityData.BundleName = "cisco_ios_xr"
    retransmissionListTable.EntityData.ParentYangName = "area"
    retransmissionListTable.EntityData.SegmentPath = "retransmission-list-table"
    retransmissionListTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/" + retransmissionListTable.EntityData.SegmentPath
    retransmissionListTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionListTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionListTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionListTable.EntityData.Children = types.NewOrderedMap()
    retransmissionListTable.EntityData.Children.Append("retransmission", types.YChild{"Retransmission", nil})
    for i := range retransmissionListTable.Retransmission {
        types.SetYListKey(retransmissionListTable.Retransmission[i], i)
        retransmissionListTable.EntityData.Children.Append(types.GetSegmentPath(retransmissionListTable.Retransmission[i]), types.YChild{"Retransmission", retransmissionListTable.Retransmission[i]})
    }
    retransmissionListTable.EntityData.Leafs = types.NewOrderedMap()

    retransmissionListTable.EntityData.YListKeys = []string {}

    return &(retransmissionListTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission
// OSPFv3 retransmission list information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RetransmissionNeighborAddress interface{}

    // If true, virtual link is retransmitted . The type is bool.
    IsRetransmissionvirtualLink interface{}

    // Retransmission virtual link ID . The type is interface{} with range:
    // 0..4294967295.
    RetransmissionvirtualLinkId interface{}

    // If true, sham link is retransmitted . The type is bool.
    IsRetransmissionShamLink interface{}

    // Retransmission sham link ID . The type is interface{} with range:
    // 0..4294967295.
    RetransmissionShamLinkId interface{}

    // Amount of time remaining on retransmission timer (ms). The type is
    // interface{} with range: 0..4294967295.
    RetransmissionTimer interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    RetransmissionLength interface{}

    // List of virtual link scope entries . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb.
    RetransmissionvirtualLinkDb []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb

    // List of area scope entries. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb.
    RetransmissionAreaDb []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb

    // List of AS scope entries. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb.
    RetransmissionAsdb []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb
}

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission) GetEntityData() *types.CommonEntityData {
    retransmission.EntityData.YFilter = retransmission.YFilter
    retransmission.EntityData.YangName = "retransmission"
    retransmission.EntityData.BundleName = "cisco_ios_xr"
    retransmission.EntityData.ParentYangName = "retransmission-list-table"
    retransmission.EntityData.SegmentPath = "retransmission" + types.AddNoKeyToken(retransmission)
    retransmission.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/retransmission-list-table/" + retransmission.EntityData.SegmentPath
    retransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmission.EntityData.Children = types.NewOrderedMap()
    retransmission.EntityData.Children.Append("retransmissionvirtual-link-db", types.YChild{"RetransmissionvirtualLinkDb", nil})
    for i := range retransmission.RetransmissionvirtualLinkDb {
        types.SetYListKey(retransmission.RetransmissionvirtualLinkDb[i], i)
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionvirtualLinkDb[i]), types.YChild{"RetransmissionvirtualLinkDb", retransmission.RetransmissionvirtualLinkDb[i]})
    }
    retransmission.EntityData.Children.Append("retransmission-area-db", types.YChild{"RetransmissionAreaDb", nil})
    for i := range retransmission.RetransmissionAreaDb {
        types.SetYListKey(retransmission.RetransmissionAreaDb[i], i)
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionAreaDb[i]), types.YChild{"RetransmissionAreaDb", retransmission.RetransmissionAreaDb[i]})
    }
    retransmission.EntityData.Children.Append("retransmission-asdb", types.YChild{"RetransmissionAsdb", nil})
    for i := range retransmission.RetransmissionAsdb {
        types.SetYListKey(retransmission.RetransmissionAsdb[i], i)
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionAsdb[i]), types.YChild{"RetransmissionAsdb", retransmission.RetransmissionAsdb[i]})
    }
    retransmission.EntityData.Leafs = types.NewOrderedMap()
    retransmission.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", retransmission.InterfaceName})
    retransmission.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", retransmission.NeighborAddress})
    retransmission.EntityData.Leafs.Append("retransmission-neighbor-address", types.YLeaf{"RetransmissionNeighborAddress", retransmission.RetransmissionNeighborAddress})
    retransmission.EntityData.Leafs.Append("is-retransmissionvirtual-link", types.YLeaf{"IsRetransmissionvirtualLink", retransmission.IsRetransmissionvirtualLink})
    retransmission.EntityData.Leafs.Append("retransmissionvirtual-link-id", types.YLeaf{"RetransmissionvirtualLinkId", retransmission.RetransmissionvirtualLinkId})
    retransmission.EntityData.Leafs.Append("is-retransmission-sham-link", types.YLeaf{"IsRetransmissionShamLink", retransmission.IsRetransmissionShamLink})
    retransmission.EntityData.Leafs.Append("retransmission-sham-link-id", types.YLeaf{"RetransmissionShamLinkId", retransmission.RetransmissionShamLinkId})
    retransmission.EntityData.Leafs.Append("retransmission-timer", types.YLeaf{"RetransmissionTimer", retransmission.RetransmissionTimer})
    retransmission.EntityData.Leafs.Append("retransmission-length", types.YLeaf{"RetransmissionLength", retransmission.RetransmissionLength})

    retransmission.EntityData.YListKeys = []string {}

    return &(retransmission.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb
// List of virtual link scope entries 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetEntityData() *types.CommonEntityData {
    retransmissionvirtualLinkDb.EntityData.YFilter = retransmissionvirtualLinkDb.YFilter
    retransmissionvirtualLinkDb.EntityData.YangName = "retransmissionvirtual-link-db"
    retransmissionvirtualLinkDb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionvirtualLinkDb.EntityData.ParentYangName = "retransmission"
    retransmissionvirtualLinkDb.EntityData.SegmentPath = "retransmissionvirtual-link-db" + types.AddNoKeyToken(retransmissionvirtualLinkDb)
    retransmissionvirtualLinkDb.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/retransmission-list-table/retransmission/" + retransmissionvirtualLinkDb.EntityData.SegmentPath
    retransmissionvirtualLinkDb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionvirtualLinkDb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionvirtualLinkDb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionvirtualLinkDb.EntityData.Children = types.NewOrderedMap()
    retransmissionvirtualLinkDb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionvirtualLinkDb.HeaderLsaType})
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionvirtualLinkDb.HeaderLsaAge})
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", retransmissionvirtualLinkDb.HeaderLsaId})
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionvirtualLinkDb.HeaderAdvertisingRouter})
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionvirtualLinkDb.HeaderSequenceNumber})

    retransmissionvirtualLinkDb.EntityData.YListKeys = []string {}

    return &(retransmissionvirtualLinkDb.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb
// List of area scope entries
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetEntityData() *types.CommonEntityData {
    retransmissionAreaDb.EntityData.YFilter = retransmissionAreaDb.YFilter
    retransmissionAreaDb.EntityData.YangName = "retransmission-area-db"
    retransmissionAreaDb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionAreaDb.EntityData.ParentYangName = "retransmission"
    retransmissionAreaDb.EntityData.SegmentPath = "retransmission-area-db" + types.AddNoKeyToken(retransmissionAreaDb)
    retransmissionAreaDb.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/retransmission-list-table/retransmission/" + retransmissionAreaDb.EntityData.SegmentPath
    retransmissionAreaDb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionAreaDb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionAreaDb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionAreaDb.EntityData.Children = types.NewOrderedMap()
    retransmissionAreaDb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionAreaDb.HeaderLsaType})
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionAreaDb.HeaderLsaAge})
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", retransmissionAreaDb.HeaderLsaId})
    retransmissionAreaDb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionAreaDb.HeaderAdvertisingRouter})
    retransmissionAreaDb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionAreaDb.HeaderSequenceNumber})

    retransmissionAreaDb.EntityData.YListKeys = []string {}

    return &(retransmissionAreaDb.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb
// List of AS scope entries
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetEntityData() *types.CommonEntityData {
    retransmissionAsdb.EntityData.YFilter = retransmissionAsdb.YFilter
    retransmissionAsdb.EntityData.YangName = "retransmission-asdb"
    retransmissionAsdb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionAsdb.EntityData.ParentYangName = "retransmission"
    retransmissionAsdb.EntityData.SegmentPath = "retransmission-asdb" + types.AddNoKeyToken(retransmissionAsdb)
    retransmissionAsdb.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/retransmission-list-table/retransmission/" + retransmissionAsdb.EntityData.SegmentPath
    retransmissionAsdb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionAsdb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionAsdb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionAsdb.EntityData.Children = types.NewOrderedMap()
    retransmissionAsdb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionAsdb.HeaderLsaType})
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionAsdb.HeaderLsaAge})
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", retransmissionAsdb.HeaderLsaId})
    retransmissionAsdb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionAsdb.HeaderAdvertisingRouter})
    retransmissionAsdb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionAsdb.HeaderSequenceNumber})

    retransmissionAsdb.EntityData.YListKeys = []string {}

    return &(retransmissionAsdb.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable
// OSPF Link State Database
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database LSA information.
    LsaTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable

    // Database LSA information.
    LsaInternalTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable
}

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable) GetEntityData() *types.CommonEntityData {
    databaseTable.EntityData.YFilter = databaseTable.YFilter
    databaseTable.EntityData.YangName = "database-table"
    databaseTable.EntityData.BundleName = "cisco_ios_xr"
    databaseTable.EntityData.ParentYangName = "area"
    databaseTable.EntityData.SegmentPath = "database-table"
    databaseTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/" + databaseTable.EntityData.SegmentPath
    databaseTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseTable.EntityData.Children = types.NewOrderedMap()
    databaseTable.EntityData.Children.Append("lsa-table", types.YChild{"LsaTable", &databaseTable.LsaTable})
    databaseTable.EntityData.Children.Append("lsa-internal-table", types.YChild{"LsaInternalTable", &databaseTable.LsaInternalTable})
    databaseTable.EntityData.Leafs = types.NewOrderedMap()

    databaseTable.EntityData.YListKeys = []string {}

    return &(databaseTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable
// Database LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database LSA information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa.
    Lsa []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa
}

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable) GetEntityData() *types.CommonEntityData {
    lsaTable.EntityData.YFilter = lsaTable.YFilter
    lsaTable.EntityData.YangName = "lsa-table"
    lsaTable.EntityData.BundleName = "cisco_ios_xr"
    lsaTable.EntityData.ParentYangName = "database-table"
    lsaTable.EntityData.SegmentPath = "lsa-table"
    lsaTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/" + lsaTable.EntityData.SegmentPath
    lsaTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaTable.EntityData.Children = types.NewOrderedMap()
    lsaTable.EntityData.Children.Append("lsa", types.YChild{"Lsa", nil})
    for i := range lsaTable.Lsa {
        types.SetYListKey(lsaTable.Lsa[i], i)
        lsaTable.EntityData.Children.Append(types.GetSegmentPath(lsaTable.Lsa[i]), types.YChild{"Lsa", lsaTable.Lsa[i]})
    }
    lsaTable.EntityData.Leafs = types.NewOrderedMap()

    lsaTable.EntityData.YListKeys = []string {}

    return &(lsaTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa
// Database LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // LSA type. The type is Ospfv3Lsa.
    LsType interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Link state ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Summary of all LSAs or LSA specific information .
    LsaInfo Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetEntityData() *types.CommonEntityData {
    lsa.EntityData.YFilter = lsa.YFilter
    lsa.EntityData.YangName = "lsa"
    lsa.EntityData.BundleName = "cisco_ios_xr"
    lsa.EntityData.ParentYangName = "lsa-table"
    lsa.EntityData.SegmentPath = "lsa" + types.AddNoKeyToken(lsa)
    lsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/" + lsa.EntityData.SegmentPath
    lsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsa.EntityData.Children = types.NewOrderedMap()
    lsa.EntityData.Children.Append("lsa-info", types.YChild{"LsaInfo", &lsa.LsaInfo})
    lsa.EntityData.Leafs = types.NewOrderedMap()
    lsa.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", lsa.AreaId})
    lsa.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsa.LsType})
    lsa.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsa.AdvertisingRouter})
    lsa.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsa.LsId})
    lsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsa.InterfaceName})

    lsa.EntityData.YListKeys = []string {}

    return &(lsa.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo
// Summary of all LSAs or LSA specific information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSAInfoType. The type is Ospfv3LsaInfoTypes.
    LsaInfoType interface{}

    // Summary information of LSAs.
    LsaSummaryInfo Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo

    // Router LSA.
    RouterLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType

    // Inter Area Prefix LSA.
    InterAreaPrefixLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType

    // Inter Area Router LSA.
    InterAreaRouterLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType

    // External LSA.
    ExternalLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType

    // NSSA External LSA.
    NssalsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType

    // Link LSA.
    LinkLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType

    // Intra Area Prefix LSA.
    IntraAreaPrefixLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType

    // Grace LSA.
    GraceLsa Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa

    // Unknown Link Scope LSA.
    UnknownLinkLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType

    // Unknown-Area scope LSA.
    UnknownAreaLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType

    // Unknown-AS scope LSA.
    UnknownAslsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType

    // Unknown LSA.
    UnknownLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetEntityData() *types.CommonEntityData {
    lsaInfo.EntityData.YFilter = lsaInfo.YFilter
    lsaInfo.EntityData.YangName = "lsa-info"
    lsaInfo.EntityData.BundleName = "cisco_ios_xr"
    lsaInfo.EntityData.ParentYangName = "lsa"
    lsaInfo.EntityData.SegmentPath = "lsa-info"
    lsaInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/" + lsaInfo.EntityData.SegmentPath
    lsaInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaInfo.EntityData.Children = types.NewOrderedMap()
    lsaInfo.EntityData.Children.Append("lsa-summary-info", types.YChild{"LsaSummaryInfo", &lsaInfo.LsaSummaryInfo})
    lsaInfo.EntityData.Children.Append("router-lsa-type", types.YChild{"RouterLsaType", &lsaInfo.RouterLsaType})
    lsaInfo.EntityData.Children.Append("network-lsa-type", types.YChild{"NetworkLsaType", &lsaInfo.NetworkLsaType})
    lsaInfo.EntityData.Children.Append("inter-area-prefix-lsa-type", types.YChild{"InterAreaPrefixLsaType", &lsaInfo.InterAreaPrefixLsaType})
    lsaInfo.EntityData.Children.Append("inter-area-router-lsa-type", types.YChild{"InterAreaRouterLsaType", &lsaInfo.InterAreaRouterLsaType})
    lsaInfo.EntityData.Children.Append("external-lsa-type", types.YChild{"ExternalLsaType", &lsaInfo.ExternalLsaType})
    lsaInfo.EntityData.Children.Append("nssalsa-type", types.YChild{"NssalsaType", &lsaInfo.NssalsaType})
    lsaInfo.EntityData.Children.Append("link-lsa-type", types.YChild{"LinkLsaType", &lsaInfo.LinkLsaType})
    lsaInfo.EntityData.Children.Append("intra-area-prefix-lsa-type", types.YChild{"IntraAreaPrefixLsaType", &lsaInfo.IntraAreaPrefixLsaType})
    lsaInfo.EntityData.Children.Append("grace-lsa", types.YChild{"GraceLsa", &lsaInfo.GraceLsa})
    lsaInfo.EntityData.Children.Append("unknown-link-lsa-type", types.YChild{"UnknownLinkLsaType", &lsaInfo.UnknownLinkLsaType})
    lsaInfo.EntityData.Children.Append("unknown-area-lsa-type", types.YChild{"UnknownAreaLsaType", &lsaInfo.UnknownAreaLsaType})
    lsaInfo.EntityData.Children.Append("unknown-aslsa-type", types.YChild{"UnknownAslsaType", &lsaInfo.UnknownAslsaType})
    lsaInfo.EntityData.Children.Append("unknown-lsa-type", types.YChild{"UnknownLsaType", &lsaInfo.UnknownLsaType})
    lsaInfo.EntityData.Leafs = types.NewOrderedMap()
    lsaInfo.EntityData.Leafs.Append("lsa-info-type", types.YLeaf{"LsaInfoType", lsaInfo.LsaInfoType})

    lsaInfo.EntityData.YListKeys = []string {}

    return &(lsaInfo.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo
// Summary information of LSAs
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of links. The type is interface{} with range: 0..65535.
    Links interface{}

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Reference type . The type is interface{} with range: 0..65535.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // OSPFv3 address Prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetEntityData() *types.CommonEntityData {
    lsaSummaryInfo.EntityData.YFilter = lsaSummaryInfo.YFilter
    lsaSummaryInfo.EntityData.YangName = "lsa-summary-info"
    lsaSummaryInfo.EntityData.BundleName = "cisco_ios_xr"
    lsaSummaryInfo.EntityData.ParentYangName = "lsa-info"
    lsaSummaryInfo.EntityData.SegmentPath = "lsa-summary-info"
    lsaSummaryInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + lsaSummaryInfo.EntityData.SegmentPath
    lsaSummaryInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaSummaryInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaSummaryInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaSummaryInfo.EntityData.Children = types.NewOrderedMap()
    lsaSummaryInfo.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &lsaSummaryInfo.LsaHeader})
    lsaSummaryInfo.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &lsaSummaryInfo.LsaDetail})
    lsaSummaryInfo.EntityData.Leafs = types.NewOrderedMap()
    lsaSummaryInfo.EntityData.Leafs.Append("links", types.YLeaf{"Links", lsaSummaryInfo.Links})
    lsaSummaryInfo.EntityData.Leafs.Append("router-la-bits", types.YLeaf{"RouterLaBits", lsaSummaryInfo.RouterLaBits})
    lsaSummaryInfo.EntityData.Leafs.Append("reference-type", types.YLeaf{"ReferenceType", lsaSummaryInfo.ReferenceType})
    lsaSummaryInfo.EntityData.Leafs.Append("reference-lsa-id", types.YLeaf{"ReferenceLsaId", lsaSummaryInfo.ReferenceLsaId})
    lsaSummaryInfo.EntityData.Leafs.Append("lsa-router-id", types.YLeaf{"LsaRouterId", lsaSummaryInfo.LsaRouterId})
    lsaSummaryInfo.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", lsaSummaryInfo.Prefix})
    lsaSummaryInfo.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", lsaSummaryInfo.PrefixLength})
    lsaSummaryInfo.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsaSummaryInfo.InterfaceName})
    lsaSummaryInfo.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", lsaSummaryInfo.IsVirtualLink})
    lsaSummaryInfo.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", lsaSummaryInfo.VirtualLinkId})
    lsaSummaryInfo.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", lsaSummaryInfo.IsShamLink})
    lsaSummaryInfo.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", lsaSummaryInfo.ShamLinkId})

    lsaSummaryInfo.EntityData.YListKeys = []string {}

    return &(lsaSummaryInfo.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "lsa-summary-info"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/lsa-summary-info/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "lsa-summary-info"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/lsa-summary-info/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType
// Router LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail

    // Router LSA Reverse-Path Forwarding information .
    RpfPath Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath

    // List of links in this LSA. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link.
    Link []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetEntityData() *types.CommonEntityData {
    routerLsaType.EntityData.YFilter = routerLsaType.YFilter
    routerLsaType.EntityData.YangName = "router-lsa-type"
    routerLsaType.EntityData.BundleName = "cisco_ios_xr"
    routerLsaType.EntityData.ParentYangName = "lsa-info"
    routerLsaType.EntityData.SegmentPath = "router-lsa-type"
    routerLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + routerLsaType.EntityData.SegmentPath
    routerLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routerLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routerLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routerLsaType.EntityData.Children = types.NewOrderedMap()
    routerLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &routerLsaType.LsaHeader})
    routerLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &routerLsaType.LsaDetail})
    routerLsaType.EntityData.Children.Append("rpf-path", types.YChild{"RpfPath", &routerLsaType.RpfPath})
    routerLsaType.EntityData.Children.Append("link", types.YChild{"Link", nil})
    for i := range routerLsaType.Link {
        types.SetYListKey(routerLsaType.Link[i], i)
        routerLsaType.EntityData.Children.Append(types.GetSegmentPath(routerLsaType.Link[i]), types.YChild{"Link", routerLsaType.Link[i]})
    }
    routerLsaType.EntityData.Leafs = types.NewOrderedMap()
    routerLsaType.EntityData.Leafs.Append("router-la-bits", types.YLeaf{"RouterLaBits", routerLsaType.RouterLaBits})

    routerLsaType.EntityData.YListKeys = []string {}

    return &(routerLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "router-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/router-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "router-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/router-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath
// Router LSA Reverse-Path Forwarding information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RPF multicast next hop . The type is interface{} with range: 0..4294967295.
    RpfMulticastNextHop interface{}

    // RPF multicast IDB . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetEntityData() *types.CommonEntityData {
    rpfPath.EntityData.YFilter = rpfPath.YFilter
    rpfPath.EntityData.YangName = "rpf-path"
    rpfPath.EntityData.BundleName = "cisco_ios_xr"
    rpfPath.EntityData.ParentYangName = "router-lsa-type"
    rpfPath.EntityData.SegmentPath = "rpf-path"
    rpfPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/router-lsa-type/" + rpfPath.EntityData.SegmentPath
    rpfPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rpfPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rpfPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rpfPath.EntityData.Children = types.NewOrderedMap()
    rpfPath.EntityData.Leafs = types.NewOrderedMap()
    rpfPath.EntityData.Leafs.Append("rpf-multicast-next-hop", types.YLeaf{"RpfMulticastNextHop", rpfPath.RpfMulticastNextHop})
    rpfPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", rpfPath.InterfaceName})

    rpfPath.EntityData.YListKeys = []string {}

    return &(rpfPath.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link
// List of links in this LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Type of link. The type is Ospfv3Link.
    LinkType interface{}

    // LSA link metric . The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // LSA link interface ID . The type is interface{} with range: 0..4294967295.
    LinkInterfaceId interface{}

    // LSA link neighbor interface ID . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborInterfaceId interface{}

    // LSA link neigbhor router id . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborRouterId interface{}
}

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "router-lsa-type"
    link.EntityData.SegmentPath = "link" + types.AddNoKeyToken(link)
    link.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/router-lsa-type/" + link.EntityData.SegmentPath
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = types.NewOrderedMap()
    link.EntityData.Leafs = types.NewOrderedMap()
    link.EntityData.Leafs.Append("link-type", types.YLeaf{"LinkType", link.LinkType})
    link.EntityData.Leafs.Append("link-metric", types.YLeaf{"LinkMetric", link.LinkMetric})
    link.EntityData.Leafs.Append("link-interface-id", types.YLeaf{"LinkInterfaceId", link.LinkInterfaceId})
    link.EntityData.Leafs.Append("link-neighbor-interface-id", types.YLeaf{"LinkNeighborInterfaceId", link.LinkNeighborInterfaceId})
    link.EntityData.Leafs.Append("link-neighbor-router-id", types.YLeaf{"LinkNeighborRouterId", link.LinkNeighborRouterId})

    link.EntityData.YListKeys = []string {}

    return &(link.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType
// Network LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor router list. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborRouter []interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetEntityData() *types.CommonEntityData {
    networkLsaType.EntityData.YFilter = networkLsaType.YFilter
    networkLsaType.EntityData.YangName = "network-lsa-type"
    networkLsaType.EntityData.BundleName = "cisco_ios_xr"
    networkLsaType.EntityData.ParentYangName = "lsa-info"
    networkLsaType.EntityData.SegmentPath = "network-lsa-type"
    networkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + networkLsaType.EntityData.SegmentPath
    networkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkLsaType.EntityData.Children = types.NewOrderedMap()
    networkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &networkLsaType.LsaHeader})
    networkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &networkLsaType.LsaDetail})
    networkLsaType.EntityData.Leafs = types.NewOrderedMap()
    networkLsaType.EntityData.Leafs.Append("neighbor-router", types.YLeaf{"NeighborRouter", networkLsaType.NeighborRouter})

    networkLsaType.EntityData.YListKeys = []string {}

    return &(networkLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "network-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/network-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "network-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/network-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType
// Inter Area Prefix LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetEntityData() *types.CommonEntityData {
    interAreaPrefixLsaType.EntityData.YFilter = interAreaPrefixLsaType.YFilter
    interAreaPrefixLsaType.EntityData.YangName = "inter-area-prefix-lsa-type"
    interAreaPrefixLsaType.EntityData.BundleName = "cisco_ios_xr"
    interAreaPrefixLsaType.EntityData.ParentYangName = "lsa-info"
    interAreaPrefixLsaType.EntityData.SegmentPath = "inter-area-prefix-lsa-type"
    interAreaPrefixLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + interAreaPrefixLsaType.EntityData.SegmentPath
    interAreaPrefixLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interAreaPrefixLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interAreaPrefixLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interAreaPrefixLsaType.EntityData.Children = types.NewOrderedMap()
    interAreaPrefixLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &interAreaPrefixLsaType.LsaHeader})
    interAreaPrefixLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &interAreaPrefixLsaType.LsaDetail})
    interAreaPrefixLsaType.EntityData.Leafs = types.NewOrderedMap()
    interAreaPrefixLsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", interAreaPrefixLsaType.Prefix})
    interAreaPrefixLsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interAreaPrefixLsaType.PrefixLength})
    interAreaPrefixLsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", interAreaPrefixLsaType.Priority})

    interAreaPrefixLsaType.EntityData.YListKeys = []string {}

    return &(interAreaPrefixLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "inter-area-prefix-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/inter-area-prefix-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "inter-area-prefix-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/inter-area-prefix-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType
// Inter Area Router LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetEntityData() *types.CommonEntityData {
    interAreaRouterLsaType.EntityData.YFilter = interAreaRouterLsaType.YFilter
    interAreaRouterLsaType.EntityData.YangName = "inter-area-router-lsa-type"
    interAreaRouterLsaType.EntityData.BundleName = "cisco_ios_xr"
    interAreaRouterLsaType.EntityData.ParentYangName = "lsa-info"
    interAreaRouterLsaType.EntityData.SegmentPath = "inter-area-router-lsa-type"
    interAreaRouterLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + interAreaRouterLsaType.EntityData.SegmentPath
    interAreaRouterLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interAreaRouterLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interAreaRouterLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interAreaRouterLsaType.EntityData.Children = types.NewOrderedMap()
    interAreaRouterLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &interAreaRouterLsaType.LsaHeader})
    interAreaRouterLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &interAreaRouterLsaType.LsaDetail})
    interAreaRouterLsaType.EntityData.Leafs = types.NewOrderedMap()
    interAreaRouterLsaType.EntityData.Leafs.Append("lsa-router-id", types.YLeaf{"LsaRouterId", interAreaRouterLsaType.LsaRouterId})

    interAreaRouterLsaType.EntityData.YListKeys = []string {}

    return &(interAreaRouterLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "inter-area-router-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/inter-area-router-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "inter-area-router-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/inter-area-router-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType
// External LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetEntityData() *types.CommonEntityData {
    externalLsaType.EntityData.YFilter = externalLsaType.YFilter
    externalLsaType.EntityData.YangName = "external-lsa-type"
    externalLsaType.EntityData.BundleName = "cisco_ios_xr"
    externalLsaType.EntityData.ParentYangName = "lsa-info"
    externalLsaType.EntityData.SegmentPath = "external-lsa-type"
    externalLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + externalLsaType.EntityData.SegmentPath
    externalLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalLsaType.EntityData.Children = types.NewOrderedMap()
    externalLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &externalLsaType.LsaHeader})
    externalLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &externalLsaType.LsaDetail})
    externalLsaType.EntityData.Leafs = types.NewOrderedMap()
    externalLsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", externalLsaType.Prefix})
    externalLsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", externalLsaType.PrefixLength})
    externalLsaType.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", externalLsaType.MetricType})
    externalLsaType.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", externalLsaType.TosCost})
    externalLsaType.EntityData.Leafs.Append("is-forwarding-address-set", types.YLeaf{"IsForwardingAddressSet", externalLsaType.IsForwardingAddressSet})
    externalLsaType.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", externalLsaType.ForwardingAddress})
    externalLsaType.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", externalLsaType.ExternalTag})
    externalLsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", externalLsaType.Priority})

    externalLsaType.EntityData.YListKeys = []string {}

    return &(externalLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "external-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/external-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "external-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/external-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType
// NSSA External LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetEntityData() *types.CommonEntityData {
    nssalsaType.EntityData.YFilter = nssalsaType.YFilter
    nssalsaType.EntityData.YangName = "nssalsa-type"
    nssalsaType.EntityData.BundleName = "cisco_ios_xr"
    nssalsaType.EntityData.ParentYangName = "lsa-info"
    nssalsaType.EntityData.SegmentPath = "nssalsa-type"
    nssalsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + nssalsaType.EntityData.SegmentPath
    nssalsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nssalsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nssalsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nssalsaType.EntityData.Children = types.NewOrderedMap()
    nssalsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &nssalsaType.LsaHeader})
    nssalsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &nssalsaType.LsaDetail})
    nssalsaType.EntityData.Leafs = types.NewOrderedMap()
    nssalsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", nssalsaType.Prefix})
    nssalsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", nssalsaType.PrefixLength})
    nssalsaType.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", nssalsaType.MetricType})
    nssalsaType.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", nssalsaType.TosCost})
    nssalsaType.EntityData.Leafs.Append("is-forwarding-address-set", types.YLeaf{"IsForwardingAddressSet", nssalsaType.IsForwardingAddressSet})
    nssalsaType.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", nssalsaType.ForwardingAddress})
    nssalsaType.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", nssalsaType.ExternalTag})
    nssalsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", nssalsaType.Priority})

    nssalsaType.EntityData.YListKeys = []string {}

    return &(nssalsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "nssalsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/nssalsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "nssalsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/nssalsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType
// Link LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // LSA link local . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LsaLinkLocal interface{}

    // Router priority . The type is interface{} with range: 0..255.
    RouterPriority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix.
    Prefix []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetEntityData() *types.CommonEntityData {
    linkLsaType.EntityData.YFilter = linkLsaType.YFilter
    linkLsaType.EntityData.YangName = "link-lsa-type"
    linkLsaType.EntityData.BundleName = "cisco_ios_xr"
    linkLsaType.EntityData.ParentYangName = "lsa-info"
    linkLsaType.EntityData.SegmentPath = "link-lsa-type"
    linkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + linkLsaType.EntityData.SegmentPath
    linkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkLsaType.EntityData.Children = types.NewOrderedMap()
    linkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &linkLsaType.LsaHeader})
    linkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &linkLsaType.LsaDetail})
    linkLsaType.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range linkLsaType.Prefix {
        types.SetYListKey(linkLsaType.Prefix[i], i)
        linkLsaType.EntityData.Children.Append(types.GetSegmentPath(linkLsaType.Prefix[i]), types.YChild{"Prefix", linkLsaType.Prefix[i]})
    }
    linkLsaType.EntityData.Leafs = types.NewOrderedMap()
    linkLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkLsaType.InterfaceName})
    linkLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", linkLsaType.IsVirtualLink})
    linkLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", linkLsaType.VirtualLinkId})
    linkLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", linkLsaType.IsShamLink})
    linkLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", linkLsaType.ShamLinkId})
    linkLsaType.EntityData.Leafs.Append("lsa-link-local", types.YLeaf{"LsaLinkLocal", linkLsaType.LsaLinkLocal})
    linkLsaType.EntityData.Leafs.Append("router-priority", types.YLeaf{"RouterPriority", linkLsaType.RouterPriority})

    linkLsaType.EntityData.YListKeys = []string {}

    return &(linkLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "link-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/link-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "link-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/link-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "link-lsa-type"
    prefix.EntityData.SegmentPath = "prefix" + types.AddNoKeyToken(prefix)
    prefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/link-lsa-type/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-length", types.YLeaf{"Ospfv3PrefixLength", prefix.Ospfv3PrefixLength})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-options", types.YLeaf{"Ospfv3PrefixOptions", prefix.Ospfv3PrefixOptions})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-metric", types.YLeaf{"Ospfv3PrefixMetric", prefix.Ospfv3PrefixMetric})
    prefix.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", prefix.Priority})

    prefix.EntityData.YListKeys = []string {}

    return &(prefix.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType
// Intra Area Prefix LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference type . The type is Ospfv3Lsa1.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // Reference advertised router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ReferenceAdvertisedRouter interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix.
    Prefix []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetEntityData() *types.CommonEntityData {
    intraAreaPrefixLsaType.EntityData.YFilter = intraAreaPrefixLsaType.YFilter
    intraAreaPrefixLsaType.EntityData.YangName = "intra-area-prefix-lsa-type"
    intraAreaPrefixLsaType.EntityData.BundleName = "cisco_ios_xr"
    intraAreaPrefixLsaType.EntityData.ParentYangName = "lsa-info"
    intraAreaPrefixLsaType.EntityData.SegmentPath = "intra-area-prefix-lsa-type"
    intraAreaPrefixLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + intraAreaPrefixLsaType.EntityData.SegmentPath
    intraAreaPrefixLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    intraAreaPrefixLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    intraAreaPrefixLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    intraAreaPrefixLsaType.EntityData.Children = types.NewOrderedMap()
    intraAreaPrefixLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &intraAreaPrefixLsaType.LsaHeader})
    intraAreaPrefixLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &intraAreaPrefixLsaType.LsaDetail})
    intraAreaPrefixLsaType.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range intraAreaPrefixLsaType.Prefix {
        types.SetYListKey(intraAreaPrefixLsaType.Prefix[i], i)
        intraAreaPrefixLsaType.EntityData.Children.Append(types.GetSegmentPath(intraAreaPrefixLsaType.Prefix[i]), types.YChild{"Prefix", intraAreaPrefixLsaType.Prefix[i]})
    }
    intraAreaPrefixLsaType.EntityData.Leafs = types.NewOrderedMap()
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-type", types.YLeaf{"ReferenceType", intraAreaPrefixLsaType.ReferenceType})
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-lsa-id", types.YLeaf{"ReferenceLsaId", intraAreaPrefixLsaType.ReferenceLsaId})
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-advertised-router", types.YLeaf{"ReferenceAdvertisedRouter", intraAreaPrefixLsaType.ReferenceAdvertisedRouter})

    intraAreaPrefixLsaType.EntityData.YListKeys = []string {}

    return &(intraAreaPrefixLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    prefix.EntityData.SegmentPath = "prefix" + types.AddNoKeyToken(prefix)
    prefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-length", types.YLeaf{"Ospfv3PrefixLength", prefix.Ospfv3PrefixLength})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-options", types.YLeaf{"Ospfv3PrefixOptions", prefix.Ospfv3PrefixOptions})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-metric", types.YLeaf{"Ospfv3PrefixMetric", prefix.Ospfv3PrefixMetric})
    prefix.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", prefix.Priority})

    prefix.EntityData.YListKeys = []string {}

    return &(prefix.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa
// Grace LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // The grace periord where helper routers should wait before advertising it
    // fully adjacent(s) . The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is Ospfv3GracefulRestartReason.
    GraceReason interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetEntityData() *types.CommonEntityData {
    graceLsa.EntityData.YFilter = graceLsa.YFilter
    graceLsa.EntityData.YangName = "grace-lsa"
    graceLsa.EntityData.BundleName = "cisco_ios_xr"
    graceLsa.EntityData.ParentYangName = "lsa-info"
    graceLsa.EntityData.SegmentPath = "grace-lsa"
    graceLsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + graceLsa.EntityData.SegmentPath
    graceLsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    graceLsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    graceLsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    graceLsa.EntityData.Children = types.NewOrderedMap()
    graceLsa.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &graceLsa.LsaHeader})
    graceLsa.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &graceLsa.LsaDetail})
    graceLsa.EntityData.Leafs = types.NewOrderedMap()
    graceLsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", graceLsa.InterfaceName})
    graceLsa.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", graceLsa.IsVirtualLink})
    graceLsa.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", graceLsa.VirtualLinkId})
    graceLsa.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", graceLsa.IsShamLink})
    graceLsa.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", graceLsa.ShamLinkId})
    graceLsa.EntityData.Leafs.Append("grace-period", types.YLeaf{"GracePeriod", graceLsa.GracePeriod})
    graceLsa.EntityData.Leafs.Append("grace-reason", types.YLeaf{"GraceReason", graceLsa.GraceReason})

    graceLsa.EntityData.YListKeys = []string {}

    return &(graceLsa.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "grace-lsa"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/grace-lsa/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "grace-lsa"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/grace-lsa/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType
// Unknown Link Scope LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetEntityData() *types.CommonEntityData {
    unknownLinkLsaType.EntityData.YFilter = unknownLinkLsaType.YFilter
    unknownLinkLsaType.EntityData.YangName = "unknown-link-lsa-type"
    unknownLinkLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownLinkLsaType.EntityData.ParentYangName = "lsa-info"
    unknownLinkLsaType.EntityData.SegmentPath = "unknown-link-lsa-type"
    unknownLinkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + unknownLinkLsaType.EntityData.SegmentPath
    unknownLinkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownLinkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownLinkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownLinkLsaType.EntityData.Children = types.NewOrderedMap()
    unknownLinkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownLinkLsaType.LsaHeader})
    unknownLinkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownLinkLsaType.LsaDetail})
    unknownLinkLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownLinkLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownLinkLsaType.InterfaceName})
    unknownLinkLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownLinkLsaType.IsVirtualLink})
    unknownLinkLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownLinkLsaType.VirtualLinkId})
    unknownLinkLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownLinkLsaType.IsShamLink})
    unknownLinkLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownLinkLsaType.ShamLinkId})

    unknownLinkLsaType.EntityData.YListKeys = []string {}

    return &(unknownLinkLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-link-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/unknown-link-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-link-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/unknown-link-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType
// Unknown-Area scope LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetEntityData() *types.CommonEntityData {
    unknownAreaLsaType.EntityData.YFilter = unknownAreaLsaType.YFilter
    unknownAreaLsaType.EntityData.YangName = "unknown-area-lsa-type"
    unknownAreaLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownAreaLsaType.EntityData.ParentYangName = "lsa-info"
    unknownAreaLsaType.EntityData.SegmentPath = "unknown-area-lsa-type"
    unknownAreaLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + unknownAreaLsaType.EntityData.SegmentPath
    unknownAreaLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownAreaLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownAreaLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownAreaLsaType.EntityData.Children = types.NewOrderedMap()
    unknownAreaLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownAreaLsaType.LsaHeader})
    unknownAreaLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownAreaLsaType.LsaDetail})
    unknownAreaLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownAreaLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownAreaLsaType.InterfaceName})
    unknownAreaLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownAreaLsaType.IsVirtualLink})
    unknownAreaLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownAreaLsaType.VirtualLinkId})
    unknownAreaLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownAreaLsaType.IsShamLink})
    unknownAreaLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownAreaLsaType.ShamLinkId})

    unknownAreaLsaType.EntityData.YListKeys = []string {}

    return &(unknownAreaLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-area-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/unknown-area-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-area-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/unknown-area-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType
// Unknown-AS scope LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetEntityData() *types.CommonEntityData {
    unknownAslsaType.EntityData.YFilter = unknownAslsaType.YFilter
    unknownAslsaType.EntityData.YangName = "unknown-aslsa-type"
    unknownAslsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownAslsaType.EntityData.ParentYangName = "lsa-info"
    unknownAslsaType.EntityData.SegmentPath = "unknown-aslsa-type"
    unknownAslsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + unknownAslsaType.EntityData.SegmentPath
    unknownAslsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownAslsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownAslsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownAslsaType.EntityData.Children = types.NewOrderedMap()
    unknownAslsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownAslsaType.LsaHeader})
    unknownAslsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownAslsaType.LsaDetail})
    unknownAslsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownAslsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownAslsaType.InterfaceName})
    unknownAslsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownAslsaType.IsVirtualLink})
    unknownAslsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownAslsaType.VirtualLinkId})
    unknownAslsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownAslsaType.IsShamLink})
    unknownAslsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownAslsaType.ShamLinkId})

    unknownAslsaType.EntityData.YListKeys = []string {}

    return &(unknownAslsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-aslsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/unknown-aslsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-aslsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/unknown-aslsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType
// Unknown LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetEntityData() *types.CommonEntityData {
    unknownLsaType.EntityData.YFilter = unknownLsaType.YFilter
    unknownLsaType.EntityData.YangName = "unknown-lsa-type"
    unknownLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownLsaType.EntityData.ParentYangName = "lsa-info"
    unknownLsaType.EntityData.SegmentPath = "unknown-lsa-type"
    unknownLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/" + unknownLsaType.EntityData.SegmentPath
    unknownLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownLsaType.EntityData.Children = types.NewOrderedMap()
    unknownLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownLsaType.LsaHeader})
    unknownLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownLsaType.LsaDetail})
    unknownLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownLsaType.InterfaceName})
    unknownLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownLsaType.IsVirtualLink})
    unknownLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownLsaType.VirtualLinkId})
    unknownLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownLsaType.IsShamLink})
    unknownLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownLsaType.ShamLinkId})

    unknownLsaType.EntityData.YListKeys = []string {}

    return &(unknownLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/unknown-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-table/lsa/lsa-info/unknown-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable
// Database LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database LSA information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa.
    Lsa []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa
}

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable) GetEntityData() *types.CommonEntityData {
    lsaInternalTable.EntityData.YFilter = lsaInternalTable.YFilter
    lsaInternalTable.EntityData.YangName = "lsa-internal-table"
    lsaInternalTable.EntityData.BundleName = "cisco_ios_xr"
    lsaInternalTable.EntityData.ParentYangName = "database-table"
    lsaInternalTable.EntityData.SegmentPath = "lsa-internal-table"
    lsaInternalTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/" + lsaInternalTable.EntityData.SegmentPath
    lsaInternalTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaInternalTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaInternalTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaInternalTable.EntityData.Children = types.NewOrderedMap()
    lsaInternalTable.EntityData.Children.Append("lsa", types.YChild{"Lsa", nil})
    for i := range lsaInternalTable.Lsa {
        types.SetYListKey(lsaInternalTable.Lsa[i], i)
        lsaInternalTable.EntityData.Children.Append(types.GetSegmentPath(lsaInternalTable.Lsa[i]), types.YChild{"Lsa", lsaInternalTable.Lsa[i]})
    }
    lsaInternalTable.EntityData.Leafs = types.NewOrderedMap()

    lsaInternalTable.EntityData.YListKeys = []string {}

    return &(lsaInternalTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa
// Database LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // LSA type. The type is Ospfv3Lsa.
    LsType interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Link state ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Summary of all LSAs or LSA specific information .
    LsaInfo Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetEntityData() *types.CommonEntityData {
    lsa.EntityData.YFilter = lsa.YFilter
    lsa.EntityData.YangName = "lsa"
    lsa.EntityData.BundleName = "cisco_ios_xr"
    lsa.EntityData.ParentYangName = "lsa-internal-table"
    lsa.EntityData.SegmentPath = "lsa" + types.AddNoKeyToken(lsa)
    lsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/" + lsa.EntityData.SegmentPath
    lsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsa.EntityData.Children = types.NewOrderedMap()
    lsa.EntityData.Children.Append("lsa-info", types.YChild{"LsaInfo", &lsa.LsaInfo})
    lsa.EntityData.Leafs = types.NewOrderedMap()
    lsa.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", lsa.AreaId})
    lsa.EntityData.Leafs.Append("ls-type", types.YLeaf{"LsType", lsa.LsType})
    lsa.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsa.AdvertisingRouter})
    lsa.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsa.LsId})
    lsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsa.InterfaceName})

    lsa.EntityData.YListKeys = []string {}

    return &(lsa.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo
// Summary of all LSAs or LSA specific information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSAInfoType. The type is Ospfv3LsaInfoTypes.
    LsaInfoType interface{}

    // Summary information of LSAs.
    LsaSummaryInfo Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo

    // Router LSA.
    RouterLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType

    // Inter Area Prefix LSA.
    InterAreaPrefixLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType

    // Inter Area Router LSA.
    InterAreaRouterLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType

    // External LSA.
    ExternalLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType

    // NSSA External LSA.
    NssalsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType

    // Link LSA.
    LinkLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType

    // Intra Area Prefix LSA.
    IntraAreaPrefixLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType

    // Grace LSA.
    GraceLsa Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa

    // Unknown Link Scope LSA.
    UnknownLinkLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType

    // Unknown-Area scope LSA.
    UnknownAreaLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType

    // Unknown-AS scope LSA.
    UnknownAslsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType

    // Unknown LSA.
    UnknownLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetEntityData() *types.CommonEntityData {
    lsaInfo.EntityData.YFilter = lsaInfo.YFilter
    lsaInfo.EntityData.YangName = "lsa-info"
    lsaInfo.EntityData.BundleName = "cisco_ios_xr"
    lsaInfo.EntityData.ParentYangName = "lsa"
    lsaInfo.EntityData.SegmentPath = "lsa-info"
    lsaInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/" + lsaInfo.EntityData.SegmentPath
    lsaInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaInfo.EntityData.Children = types.NewOrderedMap()
    lsaInfo.EntityData.Children.Append("lsa-summary-info", types.YChild{"LsaSummaryInfo", &lsaInfo.LsaSummaryInfo})
    lsaInfo.EntityData.Children.Append("router-lsa-type", types.YChild{"RouterLsaType", &lsaInfo.RouterLsaType})
    lsaInfo.EntityData.Children.Append("network-lsa-type", types.YChild{"NetworkLsaType", &lsaInfo.NetworkLsaType})
    lsaInfo.EntityData.Children.Append("inter-area-prefix-lsa-type", types.YChild{"InterAreaPrefixLsaType", &lsaInfo.InterAreaPrefixLsaType})
    lsaInfo.EntityData.Children.Append("inter-area-router-lsa-type", types.YChild{"InterAreaRouterLsaType", &lsaInfo.InterAreaRouterLsaType})
    lsaInfo.EntityData.Children.Append("external-lsa-type", types.YChild{"ExternalLsaType", &lsaInfo.ExternalLsaType})
    lsaInfo.EntityData.Children.Append("nssalsa-type", types.YChild{"NssalsaType", &lsaInfo.NssalsaType})
    lsaInfo.EntityData.Children.Append("link-lsa-type", types.YChild{"LinkLsaType", &lsaInfo.LinkLsaType})
    lsaInfo.EntityData.Children.Append("intra-area-prefix-lsa-type", types.YChild{"IntraAreaPrefixLsaType", &lsaInfo.IntraAreaPrefixLsaType})
    lsaInfo.EntityData.Children.Append("grace-lsa", types.YChild{"GraceLsa", &lsaInfo.GraceLsa})
    lsaInfo.EntityData.Children.Append("unknown-link-lsa-type", types.YChild{"UnknownLinkLsaType", &lsaInfo.UnknownLinkLsaType})
    lsaInfo.EntityData.Children.Append("unknown-area-lsa-type", types.YChild{"UnknownAreaLsaType", &lsaInfo.UnknownAreaLsaType})
    lsaInfo.EntityData.Children.Append("unknown-aslsa-type", types.YChild{"UnknownAslsaType", &lsaInfo.UnknownAslsaType})
    lsaInfo.EntityData.Children.Append("unknown-lsa-type", types.YChild{"UnknownLsaType", &lsaInfo.UnknownLsaType})
    lsaInfo.EntityData.Leafs = types.NewOrderedMap()
    lsaInfo.EntityData.Leafs.Append("lsa-info-type", types.YLeaf{"LsaInfoType", lsaInfo.LsaInfoType})

    lsaInfo.EntityData.YListKeys = []string {}

    return &(lsaInfo.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo
// Summary information of LSAs
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of links. The type is interface{} with range: 0..65535.
    Links interface{}

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Reference type . The type is interface{} with range: 0..65535.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // OSPFv3 address Prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetEntityData() *types.CommonEntityData {
    lsaSummaryInfo.EntityData.YFilter = lsaSummaryInfo.YFilter
    lsaSummaryInfo.EntityData.YangName = "lsa-summary-info"
    lsaSummaryInfo.EntityData.BundleName = "cisco_ios_xr"
    lsaSummaryInfo.EntityData.ParentYangName = "lsa-info"
    lsaSummaryInfo.EntityData.SegmentPath = "lsa-summary-info"
    lsaSummaryInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + lsaSummaryInfo.EntityData.SegmentPath
    lsaSummaryInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaSummaryInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaSummaryInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaSummaryInfo.EntityData.Children = types.NewOrderedMap()
    lsaSummaryInfo.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &lsaSummaryInfo.LsaHeader})
    lsaSummaryInfo.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &lsaSummaryInfo.LsaDetail})
    lsaSummaryInfo.EntityData.Leafs = types.NewOrderedMap()
    lsaSummaryInfo.EntityData.Leafs.Append("links", types.YLeaf{"Links", lsaSummaryInfo.Links})
    lsaSummaryInfo.EntityData.Leafs.Append("router-la-bits", types.YLeaf{"RouterLaBits", lsaSummaryInfo.RouterLaBits})
    lsaSummaryInfo.EntityData.Leafs.Append("reference-type", types.YLeaf{"ReferenceType", lsaSummaryInfo.ReferenceType})
    lsaSummaryInfo.EntityData.Leafs.Append("reference-lsa-id", types.YLeaf{"ReferenceLsaId", lsaSummaryInfo.ReferenceLsaId})
    lsaSummaryInfo.EntityData.Leafs.Append("lsa-router-id", types.YLeaf{"LsaRouterId", lsaSummaryInfo.LsaRouterId})
    lsaSummaryInfo.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", lsaSummaryInfo.Prefix})
    lsaSummaryInfo.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", lsaSummaryInfo.PrefixLength})
    lsaSummaryInfo.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", lsaSummaryInfo.InterfaceName})
    lsaSummaryInfo.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", lsaSummaryInfo.IsVirtualLink})
    lsaSummaryInfo.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", lsaSummaryInfo.VirtualLinkId})
    lsaSummaryInfo.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", lsaSummaryInfo.IsShamLink})
    lsaSummaryInfo.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", lsaSummaryInfo.ShamLinkId})

    lsaSummaryInfo.EntityData.YListKeys = []string {}

    return &(lsaSummaryInfo.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "lsa-summary-info"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/lsa-summary-info/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "lsa-summary-info"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/lsa-summary-info/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType
// Router LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail

    // Router LSA Reverse-Path Forwarding information .
    RpfPath Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath

    // List of links in this LSA. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link.
    Link []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetEntityData() *types.CommonEntityData {
    routerLsaType.EntityData.YFilter = routerLsaType.YFilter
    routerLsaType.EntityData.YangName = "router-lsa-type"
    routerLsaType.EntityData.BundleName = "cisco_ios_xr"
    routerLsaType.EntityData.ParentYangName = "lsa-info"
    routerLsaType.EntityData.SegmentPath = "router-lsa-type"
    routerLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + routerLsaType.EntityData.SegmentPath
    routerLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routerLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routerLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routerLsaType.EntityData.Children = types.NewOrderedMap()
    routerLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &routerLsaType.LsaHeader})
    routerLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &routerLsaType.LsaDetail})
    routerLsaType.EntityData.Children.Append("rpf-path", types.YChild{"RpfPath", &routerLsaType.RpfPath})
    routerLsaType.EntityData.Children.Append("link", types.YChild{"Link", nil})
    for i := range routerLsaType.Link {
        types.SetYListKey(routerLsaType.Link[i], i)
        routerLsaType.EntityData.Children.Append(types.GetSegmentPath(routerLsaType.Link[i]), types.YChild{"Link", routerLsaType.Link[i]})
    }
    routerLsaType.EntityData.Leafs = types.NewOrderedMap()
    routerLsaType.EntityData.Leafs.Append("router-la-bits", types.YLeaf{"RouterLaBits", routerLsaType.RouterLaBits})

    routerLsaType.EntityData.YListKeys = []string {}

    return &(routerLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "router-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/router-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "router-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/router-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath
// Router LSA Reverse-Path Forwarding information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RPF multicast next hop . The type is interface{} with range: 0..4294967295.
    RpfMulticastNextHop interface{}

    // RPF multicast IDB . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetEntityData() *types.CommonEntityData {
    rpfPath.EntityData.YFilter = rpfPath.YFilter
    rpfPath.EntityData.YangName = "rpf-path"
    rpfPath.EntityData.BundleName = "cisco_ios_xr"
    rpfPath.EntityData.ParentYangName = "router-lsa-type"
    rpfPath.EntityData.SegmentPath = "rpf-path"
    rpfPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/router-lsa-type/" + rpfPath.EntityData.SegmentPath
    rpfPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rpfPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rpfPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rpfPath.EntityData.Children = types.NewOrderedMap()
    rpfPath.EntityData.Leafs = types.NewOrderedMap()
    rpfPath.EntityData.Leafs.Append("rpf-multicast-next-hop", types.YLeaf{"RpfMulticastNextHop", rpfPath.RpfMulticastNextHop})
    rpfPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", rpfPath.InterfaceName})

    rpfPath.EntityData.YListKeys = []string {}

    return &(rpfPath.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link
// List of links in this LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Type of link. The type is Ospfv3Link.
    LinkType interface{}

    // LSA link metric . The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // LSA link interface ID . The type is interface{} with range: 0..4294967295.
    LinkInterfaceId interface{}

    // LSA link neighbor interface ID . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborInterfaceId interface{}

    // LSA link neigbhor router id . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborRouterId interface{}
}

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "router-lsa-type"
    link.EntityData.SegmentPath = "link" + types.AddNoKeyToken(link)
    link.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/router-lsa-type/" + link.EntityData.SegmentPath
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = types.NewOrderedMap()
    link.EntityData.Leafs = types.NewOrderedMap()
    link.EntityData.Leafs.Append("link-type", types.YLeaf{"LinkType", link.LinkType})
    link.EntityData.Leafs.Append("link-metric", types.YLeaf{"LinkMetric", link.LinkMetric})
    link.EntityData.Leafs.Append("link-interface-id", types.YLeaf{"LinkInterfaceId", link.LinkInterfaceId})
    link.EntityData.Leafs.Append("link-neighbor-interface-id", types.YLeaf{"LinkNeighborInterfaceId", link.LinkNeighborInterfaceId})
    link.EntityData.Leafs.Append("link-neighbor-router-id", types.YLeaf{"LinkNeighborRouterId", link.LinkNeighborRouterId})

    link.EntityData.YListKeys = []string {}

    return &(link.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType
// Network LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor router list. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborRouter []interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetEntityData() *types.CommonEntityData {
    networkLsaType.EntityData.YFilter = networkLsaType.YFilter
    networkLsaType.EntityData.YangName = "network-lsa-type"
    networkLsaType.EntityData.BundleName = "cisco_ios_xr"
    networkLsaType.EntityData.ParentYangName = "lsa-info"
    networkLsaType.EntityData.SegmentPath = "network-lsa-type"
    networkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + networkLsaType.EntityData.SegmentPath
    networkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    networkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    networkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    networkLsaType.EntityData.Children = types.NewOrderedMap()
    networkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &networkLsaType.LsaHeader})
    networkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &networkLsaType.LsaDetail})
    networkLsaType.EntityData.Leafs = types.NewOrderedMap()
    networkLsaType.EntityData.Leafs.Append("neighbor-router", types.YLeaf{"NeighborRouter", networkLsaType.NeighborRouter})

    networkLsaType.EntityData.YListKeys = []string {}

    return &(networkLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "network-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/network-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "network-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/network-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType
// Inter Area Prefix LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetEntityData() *types.CommonEntityData {
    interAreaPrefixLsaType.EntityData.YFilter = interAreaPrefixLsaType.YFilter
    interAreaPrefixLsaType.EntityData.YangName = "inter-area-prefix-lsa-type"
    interAreaPrefixLsaType.EntityData.BundleName = "cisco_ios_xr"
    interAreaPrefixLsaType.EntityData.ParentYangName = "lsa-info"
    interAreaPrefixLsaType.EntityData.SegmentPath = "inter-area-prefix-lsa-type"
    interAreaPrefixLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + interAreaPrefixLsaType.EntityData.SegmentPath
    interAreaPrefixLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interAreaPrefixLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interAreaPrefixLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interAreaPrefixLsaType.EntityData.Children = types.NewOrderedMap()
    interAreaPrefixLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &interAreaPrefixLsaType.LsaHeader})
    interAreaPrefixLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &interAreaPrefixLsaType.LsaDetail})
    interAreaPrefixLsaType.EntityData.Leafs = types.NewOrderedMap()
    interAreaPrefixLsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", interAreaPrefixLsaType.Prefix})
    interAreaPrefixLsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", interAreaPrefixLsaType.PrefixLength})
    interAreaPrefixLsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", interAreaPrefixLsaType.Priority})

    interAreaPrefixLsaType.EntityData.YListKeys = []string {}

    return &(interAreaPrefixLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "inter-area-prefix-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/inter-area-prefix-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "inter-area-prefix-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/inter-area-prefix-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType
// Inter Area Router LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetEntityData() *types.CommonEntityData {
    interAreaRouterLsaType.EntityData.YFilter = interAreaRouterLsaType.YFilter
    interAreaRouterLsaType.EntityData.YangName = "inter-area-router-lsa-type"
    interAreaRouterLsaType.EntityData.BundleName = "cisco_ios_xr"
    interAreaRouterLsaType.EntityData.ParentYangName = "lsa-info"
    interAreaRouterLsaType.EntityData.SegmentPath = "inter-area-router-lsa-type"
    interAreaRouterLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + interAreaRouterLsaType.EntityData.SegmentPath
    interAreaRouterLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interAreaRouterLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interAreaRouterLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interAreaRouterLsaType.EntityData.Children = types.NewOrderedMap()
    interAreaRouterLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &interAreaRouterLsaType.LsaHeader})
    interAreaRouterLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &interAreaRouterLsaType.LsaDetail})
    interAreaRouterLsaType.EntityData.Leafs = types.NewOrderedMap()
    interAreaRouterLsaType.EntityData.Leafs.Append("lsa-router-id", types.YLeaf{"LsaRouterId", interAreaRouterLsaType.LsaRouterId})

    interAreaRouterLsaType.EntityData.YListKeys = []string {}

    return &(interAreaRouterLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "inter-area-router-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/inter-area-router-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "inter-area-router-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/inter-area-router-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType
// External LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetEntityData() *types.CommonEntityData {
    externalLsaType.EntityData.YFilter = externalLsaType.YFilter
    externalLsaType.EntityData.YangName = "external-lsa-type"
    externalLsaType.EntityData.BundleName = "cisco_ios_xr"
    externalLsaType.EntityData.ParentYangName = "lsa-info"
    externalLsaType.EntityData.SegmentPath = "external-lsa-type"
    externalLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + externalLsaType.EntityData.SegmentPath
    externalLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    externalLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    externalLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    externalLsaType.EntityData.Children = types.NewOrderedMap()
    externalLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &externalLsaType.LsaHeader})
    externalLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &externalLsaType.LsaDetail})
    externalLsaType.EntityData.Leafs = types.NewOrderedMap()
    externalLsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", externalLsaType.Prefix})
    externalLsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", externalLsaType.PrefixLength})
    externalLsaType.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", externalLsaType.MetricType})
    externalLsaType.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", externalLsaType.TosCost})
    externalLsaType.EntityData.Leafs.Append("is-forwarding-address-set", types.YLeaf{"IsForwardingAddressSet", externalLsaType.IsForwardingAddressSet})
    externalLsaType.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", externalLsaType.ForwardingAddress})
    externalLsaType.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", externalLsaType.ExternalTag})
    externalLsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", externalLsaType.Priority})

    externalLsaType.EntityData.YListKeys = []string {}

    return &(externalLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "external-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/external-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "external-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/external-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType
// NSSA External LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetEntityData() *types.CommonEntityData {
    nssalsaType.EntityData.YFilter = nssalsaType.YFilter
    nssalsaType.EntityData.YangName = "nssalsa-type"
    nssalsaType.EntityData.BundleName = "cisco_ios_xr"
    nssalsaType.EntityData.ParentYangName = "lsa-info"
    nssalsaType.EntityData.SegmentPath = "nssalsa-type"
    nssalsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + nssalsaType.EntityData.SegmentPath
    nssalsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nssalsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nssalsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nssalsaType.EntityData.Children = types.NewOrderedMap()
    nssalsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &nssalsaType.LsaHeader})
    nssalsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &nssalsaType.LsaDetail})
    nssalsaType.EntityData.Leafs = types.NewOrderedMap()
    nssalsaType.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", nssalsaType.Prefix})
    nssalsaType.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", nssalsaType.PrefixLength})
    nssalsaType.EntityData.Leafs.Append("metric-type", types.YLeaf{"MetricType", nssalsaType.MetricType})
    nssalsaType.EntityData.Leafs.Append("tos-cost", types.YLeaf{"TosCost", nssalsaType.TosCost})
    nssalsaType.EntityData.Leafs.Append("is-forwarding-address-set", types.YLeaf{"IsForwardingAddressSet", nssalsaType.IsForwardingAddressSet})
    nssalsaType.EntityData.Leafs.Append("forwarding-address", types.YLeaf{"ForwardingAddress", nssalsaType.ForwardingAddress})
    nssalsaType.EntityData.Leafs.Append("external-tag", types.YLeaf{"ExternalTag", nssalsaType.ExternalTag})
    nssalsaType.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", nssalsaType.Priority})

    nssalsaType.EntityData.YListKeys = []string {}

    return &(nssalsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "nssalsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/nssalsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "nssalsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/nssalsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType
// Link LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // LSA link local . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LsaLinkLocal interface{}

    // Router priority . The type is interface{} with range: 0..255.
    RouterPriority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix.
    Prefix []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetEntityData() *types.CommonEntityData {
    linkLsaType.EntityData.YFilter = linkLsaType.YFilter
    linkLsaType.EntityData.YangName = "link-lsa-type"
    linkLsaType.EntityData.BundleName = "cisco_ios_xr"
    linkLsaType.EntityData.ParentYangName = "lsa-info"
    linkLsaType.EntityData.SegmentPath = "link-lsa-type"
    linkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + linkLsaType.EntityData.SegmentPath
    linkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkLsaType.EntityData.Children = types.NewOrderedMap()
    linkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &linkLsaType.LsaHeader})
    linkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &linkLsaType.LsaDetail})
    linkLsaType.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range linkLsaType.Prefix {
        types.SetYListKey(linkLsaType.Prefix[i], i)
        linkLsaType.EntityData.Children.Append(types.GetSegmentPath(linkLsaType.Prefix[i]), types.YChild{"Prefix", linkLsaType.Prefix[i]})
    }
    linkLsaType.EntityData.Leafs = types.NewOrderedMap()
    linkLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkLsaType.InterfaceName})
    linkLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", linkLsaType.IsVirtualLink})
    linkLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", linkLsaType.VirtualLinkId})
    linkLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", linkLsaType.IsShamLink})
    linkLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", linkLsaType.ShamLinkId})
    linkLsaType.EntityData.Leafs.Append("lsa-link-local", types.YLeaf{"LsaLinkLocal", linkLsaType.LsaLinkLocal})
    linkLsaType.EntityData.Leafs.Append("router-priority", types.YLeaf{"RouterPriority", linkLsaType.RouterPriority})

    linkLsaType.EntityData.YListKeys = []string {}

    return &(linkLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "link-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/link-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "link-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/link-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "link-lsa-type"
    prefix.EntityData.SegmentPath = "prefix" + types.AddNoKeyToken(prefix)
    prefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/link-lsa-type/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-length", types.YLeaf{"Ospfv3PrefixLength", prefix.Ospfv3PrefixLength})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-options", types.YLeaf{"Ospfv3PrefixOptions", prefix.Ospfv3PrefixOptions})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-metric", types.YLeaf{"Ospfv3PrefixMetric", prefix.Ospfv3PrefixMetric})
    prefix.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", prefix.Priority})

    prefix.EntityData.YListKeys = []string {}

    return &(prefix.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType
// Intra Area Prefix LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Reference type . The type is Ospfv3Lsa1.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // Reference advertised router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ReferenceAdvertisedRouter interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix.
    Prefix []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetEntityData() *types.CommonEntityData {
    intraAreaPrefixLsaType.EntityData.YFilter = intraAreaPrefixLsaType.YFilter
    intraAreaPrefixLsaType.EntityData.YangName = "intra-area-prefix-lsa-type"
    intraAreaPrefixLsaType.EntityData.BundleName = "cisco_ios_xr"
    intraAreaPrefixLsaType.EntityData.ParentYangName = "lsa-info"
    intraAreaPrefixLsaType.EntityData.SegmentPath = "intra-area-prefix-lsa-type"
    intraAreaPrefixLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + intraAreaPrefixLsaType.EntityData.SegmentPath
    intraAreaPrefixLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    intraAreaPrefixLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    intraAreaPrefixLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    intraAreaPrefixLsaType.EntityData.Children = types.NewOrderedMap()
    intraAreaPrefixLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &intraAreaPrefixLsaType.LsaHeader})
    intraAreaPrefixLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &intraAreaPrefixLsaType.LsaDetail})
    intraAreaPrefixLsaType.EntityData.Children.Append("prefix", types.YChild{"Prefix", nil})
    for i := range intraAreaPrefixLsaType.Prefix {
        types.SetYListKey(intraAreaPrefixLsaType.Prefix[i], i)
        intraAreaPrefixLsaType.EntityData.Children.Append(types.GetSegmentPath(intraAreaPrefixLsaType.Prefix[i]), types.YChild{"Prefix", intraAreaPrefixLsaType.Prefix[i]})
    }
    intraAreaPrefixLsaType.EntityData.Leafs = types.NewOrderedMap()
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-type", types.YLeaf{"ReferenceType", intraAreaPrefixLsaType.ReferenceType})
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-lsa-id", types.YLeaf{"ReferenceLsaId", intraAreaPrefixLsaType.ReferenceLsaId})
    intraAreaPrefixLsaType.EntityData.Leafs.Append("reference-advertised-router", types.YLeaf{"ReferenceAdvertisedRouter", intraAreaPrefixLsaType.ReferenceAdvertisedRouter})

    intraAreaPrefixLsaType.EntityData.YListKeys = []string {}

    return &(intraAreaPrefixLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "intra-area-prefix-lsa-type"
    prefix.EntityData.SegmentPath = "prefix" + types.AddNoKeyToken(prefix)
    prefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/intra-area-prefix-lsa-type/" + prefix.EntityData.SegmentPath
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = types.NewOrderedMap()
    prefix.EntityData.Leafs = types.NewOrderedMap()
    prefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", prefix.Prefix})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-length", types.YLeaf{"Ospfv3PrefixLength", prefix.Ospfv3PrefixLength})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-options", types.YLeaf{"Ospfv3PrefixOptions", prefix.Ospfv3PrefixOptions})
    prefix.EntityData.Leafs.Append("ospfv3-prefix-metric", types.YLeaf{"Ospfv3PrefixMetric", prefix.Ospfv3PrefixMetric})
    prefix.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", prefix.Priority})

    prefix.EntityData.YListKeys = []string {}

    return &(prefix.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa
// Grace LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // The grace periord where helper routers should wait before advertising it
    // fully adjacent(s) . The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is Ospfv3GracefulRestartReason.
    GraceReason interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetEntityData() *types.CommonEntityData {
    graceLsa.EntityData.YFilter = graceLsa.YFilter
    graceLsa.EntityData.YangName = "grace-lsa"
    graceLsa.EntityData.BundleName = "cisco_ios_xr"
    graceLsa.EntityData.ParentYangName = "lsa-info"
    graceLsa.EntityData.SegmentPath = "grace-lsa"
    graceLsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + graceLsa.EntityData.SegmentPath
    graceLsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    graceLsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    graceLsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    graceLsa.EntityData.Children = types.NewOrderedMap()
    graceLsa.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &graceLsa.LsaHeader})
    graceLsa.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &graceLsa.LsaDetail})
    graceLsa.EntityData.Leafs = types.NewOrderedMap()
    graceLsa.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", graceLsa.InterfaceName})
    graceLsa.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", graceLsa.IsVirtualLink})
    graceLsa.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", graceLsa.VirtualLinkId})
    graceLsa.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", graceLsa.IsShamLink})
    graceLsa.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", graceLsa.ShamLinkId})
    graceLsa.EntityData.Leafs.Append("grace-period", types.YLeaf{"GracePeriod", graceLsa.GracePeriod})
    graceLsa.EntityData.Leafs.Append("grace-reason", types.YLeaf{"GraceReason", graceLsa.GraceReason})

    graceLsa.EntityData.YListKeys = []string {}

    return &(graceLsa.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "grace-lsa"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/grace-lsa/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "grace-lsa"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/grace-lsa/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType
// Unknown Link Scope LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetEntityData() *types.CommonEntityData {
    unknownLinkLsaType.EntityData.YFilter = unknownLinkLsaType.YFilter
    unknownLinkLsaType.EntityData.YangName = "unknown-link-lsa-type"
    unknownLinkLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownLinkLsaType.EntityData.ParentYangName = "lsa-info"
    unknownLinkLsaType.EntityData.SegmentPath = "unknown-link-lsa-type"
    unknownLinkLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + unknownLinkLsaType.EntityData.SegmentPath
    unknownLinkLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownLinkLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownLinkLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownLinkLsaType.EntityData.Children = types.NewOrderedMap()
    unknownLinkLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownLinkLsaType.LsaHeader})
    unknownLinkLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownLinkLsaType.LsaDetail})
    unknownLinkLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownLinkLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownLinkLsaType.InterfaceName})
    unknownLinkLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownLinkLsaType.IsVirtualLink})
    unknownLinkLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownLinkLsaType.VirtualLinkId})
    unknownLinkLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownLinkLsaType.IsShamLink})
    unknownLinkLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownLinkLsaType.ShamLinkId})

    unknownLinkLsaType.EntityData.YListKeys = []string {}

    return &(unknownLinkLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-link-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/unknown-link-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-link-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/unknown-link-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType
// Unknown-Area scope LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetEntityData() *types.CommonEntityData {
    unknownAreaLsaType.EntityData.YFilter = unknownAreaLsaType.YFilter
    unknownAreaLsaType.EntityData.YangName = "unknown-area-lsa-type"
    unknownAreaLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownAreaLsaType.EntityData.ParentYangName = "lsa-info"
    unknownAreaLsaType.EntityData.SegmentPath = "unknown-area-lsa-type"
    unknownAreaLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + unknownAreaLsaType.EntityData.SegmentPath
    unknownAreaLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownAreaLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownAreaLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownAreaLsaType.EntityData.Children = types.NewOrderedMap()
    unknownAreaLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownAreaLsaType.LsaHeader})
    unknownAreaLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownAreaLsaType.LsaDetail})
    unknownAreaLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownAreaLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownAreaLsaType.InterfaceName})
    unknownAreaLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownAreaLsaType.IsVirtualLink})
    unknownAreaLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownAreaLsaType.VirtualLinkId})
    unknownAreaLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownAreaLsaType.IsShamLink})
    unknownAreaLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownAreaLsaType.ShamLinkId})

    unknownAreaLsaType.EntityData.YListKeys = []string {}

    return &(unknownAreaLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-area-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/unknown-area-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-area-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/unknown-area-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType
// Unknown-AS scope LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetEntityData() *types.CommonEntityData {
    unknownAslsaType.EntityData.YFilter = unknownAslsaType.YFilter
    unknownAslsaType.EntityData.YangName = "unknown-aslsa-type"
    unknownAslsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownAslsaType.EntityData.ParentYangName = "lsa-info"
    unknownAslsaType.EntityData.SegmentPath = "unknown-aslsa-type"
    unknownAslsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + unknownAslsaType.EntityData.SegmentPath
    unknownAslsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownAslsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownAslsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownAslsaType.EntityData.Children = types.NewOrderedMap()
    unknownAslsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownAslsaType.LsaHeader})
    unknownAslsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownAslsaType.LsaDetail})
    unknownAslsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownAslsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownAslsaType.InterfaceName})
    unknownAslsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownAslsaType.IsVirtualLink})
    unknownAslsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownAslsaType.VirtualLinkId})
    unknownAslsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownAslsaType.IsShamLink})
    unknownAslsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownAslsaType.ShamLinkId})

    unknownAslsaType.EntityData.YListKeys = []string {}

    return &(unknownAslsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-aslsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/unknown-aslsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-aslsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/unknown-aslsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType
// Unknown LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetEntityData() *types.CommonEntityData {
    unknownLsaType.EntityData.YFilter = unknownLsaType.YFilter
    unknownLsaType.EntityData.YangName = "unknown-lsa-type"
    unknownLsaType.EntityData.BundleName = "cisco_ios_xr"
    unknownLsaType.EntityData.ParentYangName = "lsa-info"
    unknownLsaType.EntityData.SegmentPath = "unknown-lsa-type"
    unknownLsaType.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/" + unknownLsaType.EntityData.SegmentPath
    unknownLsaType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unknownLsaType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unknownLsaType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unknownLsaType.EntityData.Children = types.NewOrderedMap()
    unknownLsaType.EntityData.Children.Append("lsa-header", types.YChild{"LsaHeader", &unknownLsaType.LsaHeader})
    unknownLsaType.EntityData.Children.Append("lsa-detail", types.YChild{"LsaDetail", &unknownLsaType.LsaDetail})
    unknownLsaType.EntityData.Leafs = types.NewOrderedMap()
    unknownLsaType.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", unknownLsaType.InterfaceName})
    unknownLsaType.EntityData.Leafs.Append("is-virtual-link", types.YLeaf{"IsVirtualLink", unknownLsaType.IsVirtualLink})
    unknownLsaType.EntityData.Leafs.Append("virtual-link-id", types.YLeaf{"VirtualLinkId", unknownLsaType.VirtualLinkId})
    unknownLsaType.EntityData.Leafs.Append("is-sham-link", types.YLeaf{"IsShamLink", unknownLsaType.IsShamLink})
    unknownLsaType.EntityData.Leafs.Append("sham-link-id", types.YLeaf{"ShamLinkId", unknownLsaType.ShamLinkId})

    unknownLsaType.EntityData.YListKeys = []string {}

    return &(unknownLsaType.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetEntityData() *types.CommonEntityData {
    lsaHeader.EntityData.YFilter = lsaHeader.YFilter
    lsaHeader.EntityData.YangName = "lsa-header"
    lsaHeader.EntityData.BundleName = "cisco_ios_xr"
    lsaHeader.EntityData.ParentYangName = "unknown-lsa-type"
    lsaHeader.EntityData.SegmentPath = "lsa-header"
    lsaHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/unknown-lsa-type/" + lsaHeader.EntityData.SegmentPath
    lsaHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaHeader.EntityData.Children = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs = types.NewOrderedMap()
    lsaHeader.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsaHeader.LsaType})
    lsaHeader.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsaHeader.LsaAreaId})
    lsaHeader.EntityData.Leafs.Append("lsa-age", types.YLeaf{"LsaAge", lsaHeader.LsaAge})
    lsaHeader.EntityData.Leafs.Append("is-do-not-age-lsa", types.YLeaf{"IsDoNotAgeLsa", lsaHeader.IsDoNotAgeLsa})
    lsaHeader.EntityData.Leafs.Append("ls-id", types.YLeaf{"LsId", lsaHeader.LsId})
    lsaHeader.EntityData.Leafs.Append("advertising-router", types.YLeaf{"AdvertisingRouter", lsaHeader.AdvertisingRouter})
    lsaHeader.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", lsaHeader.SequenceNumber})
    lsaHeader.EntityData.Leafs.Append("checksum", types.YLeaf{"Checksum", lsaHeader.Checksum})
    lsaHeader.EntityData.Leafs.Append("is-graceful-restart-active", types.YLeaf{"IsGracefulRestartActive", lsaHeader.IsGracefulRestartActive})

    lsaHeader.EntityData.YListKeys = []string {}

    return &(lsaHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetEntityData() *types.CommonEntityData {
    lsaDetail.EntityData.YFilter = lsaDetail.YFilter
    lsaDetail.EntityData.YangName = "lsa-detail"
    lsaDetail.EntityData.BundleName = "cisco_ios_xr"
    lsaDetail.EntityData.ParentYangName = "unknown-lsa-type"
    lsaDetail.EntityData.SegmentPath = "lsa-detail"
    lsaDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-table/lsa-internal-table/lsa/lsa-info/unknown-lsa-type/" + lsaDetail.EntityData.SegmentPath
    lsaDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaDetail.EntityData.Children = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs = types.NewOrderedMap()
    lsaDetail.EntityData.Leafs.Append("second-table-index", types.YLeaf{"SecondTableIndex", lsaDetail.SecondTableIndex})
    lsaDetail.EntityData.Leafs.Append("minute-table-index", types.YLeaf{"MinuteTableIndex", lsaDetail.MinuteTableIndex})
    lsaDetail.EntityData.Leafs.Append("free-time", types.YLeaf{"FreeTime", lsaDetail.FreeTime})
    lsaDetail.EntityData.Leafs.Append("is-deleted", types.YLeaf{"IsDeleted", lsaDetail.IsDeleted})
    lsaDetail.EntityData.Leafs.Append("is-routing-bit", types.YLeaf{"IsRoutingBit", lsaDetail.IsRoutingBit})
    lsaDetail.EntityData.Leafs.Append("is-advertising-router-reachable", types.YLeaf{"IsAdvertisingRouterReachable", lsaDetail.IsAdvertisingRouterReachable})
    lsaDetail.EntityData.Leafs.Append("is-no-delete", types.YLeaf{"IsNoDelete", lsaDetail.IsNoDelete})
    lsaDetail.EntityData.Leafs.Append("is-neighbor-exchange", types.YLeaf{"IsNeighborExchange", lsaDetail.IsNeighborExchange})
    lsaDetail.EntityData.Leafs.Append("is-routing-table", types.YLeaf{"IsRoutingTable", lsaDetail.IsRoutingTable})
    lsaDetail.EntityData.Leafs.Append("is-acknowledged", types.YLeaf{"IsAcknowledged", lsaDetail.IsAcknowledged})
    lsaDetail.EntityData.Leafs.Append("is-maximum-aged", types.YLeaf{"IsMaximumAged", lsaDetail.IsMaximumAged})
    lsaDetail.EntityData.Leafs.Append("is-partial-spf", types.YLeaf{"IsPartialSpf", lsaDetail.IsPartialSpf})
    lsaDetail.EntityData.Leafs.Append("is-flood-pending", types.YLeaf{"IsFloodPending", lsaDetail.IsFloodPending})
    lsaDetail.EntityData.Leafs.Append("rate-limit", types.YLeaf{"RateLimit", lsaDetail.RateLimit})
    lsaDetail.EntityData.Leafs.Append("is-nsr-ack-pending", types.YLeaf{"IsNsrAckPending", lsaDetail.IsNsrAckPending})
    lsaDetail.EntityData.Leafs.Append("nsr-flood-required", types.YLeaf{"NsrFloodRequired", lsaDetail.NsrFloodRequired})
    lsaDetail.EntityData.Leafs.Append("lsa-flood-required-post-fail-over", types.YLeaf{"LsaFloodRequiredPostFailOver", lsaDetail.LsaFloodRequiredPostFailOver})
    lsaDetail.EntityData.Leafs.Append("lsa-length", types.YLeaf{"LsaLength", lsaDetail.LsaLength})
    lsaDetail.EntityData.Leafs.Append("lsa-sync-state", types.YLeaf{"LsaSyncState", lsaDetail.LsaSyncState})

    lsaDetail.EntityData.YListKeys = []string {}

    return &(lsaDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable
// Database summary table
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database Summary information.
    DatabaseSummary Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary
}

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable) GetEntityData() *types.CommonEntityData {
    databaseSummaryTable.EntityData.YFilter = databaseSummaryTable.YFilter
    databaseSummaryTable.EntityData.YangName = "database-summary-table"
    databaseSummaryTable.EntityData.BundleName = "cisco_ios_xr"
    databaseSummaryTable.EntityData.ParentYangName = "area"
    databaseSummaryTable.EntityData.SegmentPath = "database-summary-table"
    databaseSummaryTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/" + databaseSummaryTable.EntityData.SegmentPath
    databaseSummaryTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseSummaryTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseSummaryTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseSummaryTable.EntityData.Children = types.NewOrderedMap()
    databaseSummaryTable.EntityData.Children.Append("database-summary", types.YChild{"DatabaseSummary", &databaseSummaryTable.DatabaseSummary})
    databaseSummaryTable.EntityData.Leafs = types.NewOrderedMap()

    databaseSummaryTable.EntityData.YListKeys = []string {}

    return &(databaseSummaryTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary
// Database Summary information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DatabaseRouterId interface{}

    // If true, opaque database is capable . The type is bool.
    IsOpaqueDatabaseCapable interface{}

    // OSPFv3 database counters .
    DatabaseCounters Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters

    // OSPFv3 Area Database list . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase.
    AreaDatabase []*Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase
}

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetEntityData() *types.CommonEntityData {
    databaseSummary.EntityData.YFilter = databaseSummary.YFilter
    databaseSummary.EntityData.YangName = "database-summary"
    databaseSummary.EntityData.BundleName = "cisco_ios_xr"
    databaseSummary.EntityData.ParentYangName = "database-summary-table"
    databaseSummary.EntityData.SegmentPath = "database-summary"
    databaseSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-summary-table/" + databaseSummary.EntityData.SegmentPath
    databaseSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseSummary.EntityData.Children = types.NewOrderedMap()
    databaseSummary.EntityData.Children.Append("database-counters", types.YChild{"DatabaseCounters", &databaseSummary.DatabaseCounters})
    databaseSummary.EntityData.Children.Append("area-database", types.YChild{"AreaDatabase", nil})
    for i := range databaseSummary.AreaDatabase {
        types.SetYListKey(databaseSummary.AreaDatabase[i], i)
        databaseSummary.EntityData.Children.Append(types.GetSegmentPath(databaseSummary.AreaDatabase[i]), types.YChild{"AreaDatabase", databaseSummary.AreaDatabase[i]})
    }
    databaseSummary.EntityData.Leafs = types.NewOrderedMap()
    databaseSummary.EntityData.Leafs.Append("database-router-id", types.YLeaf{"DatabaseRouterId", databaseSummary.DatabaseRouterId})
    databaseSummary.EntityData.Leafs.Append("is-opaque-database-capable", types.YLeaf{"IsOpaqueDatabaseCapable", databaseSummary.IsOpaqueDatabaseCapable})

    databaseSummary.EntityData.YListKeys = []string {}

    return &(databaseSummary.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters
// OSPFv3 database counters 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // lsa. The type is slice of interface{} with range: 0..4294967295.
    Lsa []interface{}

    // deleted lsa. The type is slice of interface{} with range: 0..4294967295.
    DeletedLsa []interface{}

    // max age lsa. The type is slice of interface{} with range: 0..4294967295.
    MaxAgeLsa []interface{}

    // lsa checksum. The type is slice of interface{} with range: 0..4294967295.
    LsaChecksum []interface{}
}

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetEntityData() *types.CommonEntityData {
    databaseCounters.EntityData.YFilter = databaseCounters.YFilter
    databaseCounters.EntityData.YangName = "database-counters"
    databaseCounters.EntityData.BundleName = "cisco_ios_xr"
    databaseCounters.EntityData.ParentYangName = "database-summary"
    databaseCounters.EntityData.SegmentPath = "database-counters"
    databaseCounters.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-summary-table/database-summary/" + databaseCounters.EntityData.SegmentPath
    databaseCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseCounters.EntityData.Children = types.NewOrderedMap()
    databaseCounters.EntityData.Leafs = types.NewOrderedMap()
    databaseCounters.EntityData.Leafs.Append("lsa", types.YLeaf{"Lsa", databaseCounters.Lsa})
    databaseCounters.EntityData.Leafs.Append("deleted-lsa", types.YLeaf{"DeletedLsa", databaseCounters.DeletedLsa})
    databaseCounters.EntityData.Leafs.Append("max-age-lsa", types.YLeaf{"MaxAgeLsa", databaseCounters.MaxAgeLsa})
    databaseCounters.EntityData.Leafs.Append("lsa-checksum", types.YLeaf{"LsaChecksum", databaseCounters.LsaChecksum})

    databaseCounters.EntityData.YListKeys = []string {}

    return &(databaseCounters.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase
// OSPFv3 Area Database list 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // Area database summary .
    AreaDatabaseSummary Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary
}

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetEntityData() *types.CommonEntityData {
    areaDatabase.EntityData.YFilter = areaDatabase.YFilter
    areaDatabase.EntityData.YangName = "area-database"
    areaDatabase.EntityData.BundleName = "cisco_ios_xr"
    areaDatabase.EntityData.ParentYangName = "database-summary"
    areaDatabase.EntityData.SegmentPath = "area-database" + types.AddNoKeyToken(areaDatabase)
    areaDatabase.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-summary-table/database-summary/" + areaDatabase.EntityData.SegmentPath
    areaDatabase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaDatabase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaDatabase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaDatabase.EntityData.Children = types.NewOrderedMap()
    areaDatabase.EntityData.Children.Append("area-database-summary", types.YChild{"AreaDatabaseSummary", &areaDatabase.AreaDatabaseSummary})
    areaDatabase.EntityData.Leafs = types.NewOrderedMap()
    areaDatabase.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", areaDatabase.LsaAreaId})

    areaDatabase.EntityData.YListKeys = []string {}

    return &(areaDatabase.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary
// Area database summary 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // lsa. The type is slice of interface{} with range: 0..4294967295.
    Lsa []interface{}

    // deleted lsa. The type is slice of interface{} with range: 0..4294967295.
    DeletedLsa []interface{}

    // max age lsa. The type is slice of interface{} with range: 0..4294967295.
    MaxAgeLsa []interface{}

    // lsa checksum. The type is slice of interface{} with range: 0..4294967295.
    LsaChecksum []interface{}
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetEntityData() *types.CommonEntityData {
    areaDatabaseSummary.EntityData.YFilter = areaDatabaseSummary.YFilter
    areaDatabaseSummary.EntityData.YangName = "area-database-summary"
    areaDatabaseSummary.EntityData.BundleName = "cisco_ios_xr"
    areaDatabaseSummary.EntityData.ParentYangName = "area-database"
    areaDatabaseSummary.EntityData.SegmentPath = "area-database-summary"
    areaDatabaseSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/areas/area/database-summary-table/database-summary/area-database/" + areaDatabaseSummary.EntityData.SegmentPath
    areaDatabaseSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaDatabaseSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaDatabaseSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaDatabaseSummary.EntityData.Children = types.NewOrderedMap()
    areaDatabaseSummary.EntityData.Leafs = types.NewOrderedMap()
    areaDatabaseSummary.EntityData.Leafs.Append("lsa", types.YLeaf{"Lsa", areaDatabaseSummary.Lsa})
    areaDatabaseSummary.EntityData.Leafs.Append("deleted-lsa", types.YLeaf{"DeletedLsa", areaDatabaseSummary.DeletedLsa})
    areaDatabaseSummary.EntityData.Leafs.Append("max-age-lsa", types.YLeaf{"MaxAgeLsa", areaDatabaseSummary.MaxAgeLsa})
    areaDatabaseSummary.EntityData.Leafs.Append("lsa-checksum", types.YLeaf{"LsaChecksum", areaDatabaseSummary.LsaChecksum})

    areaDatabaseSummary.EntityData.YListKeys = []string {}

    return &(areaDatabaseSummary.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_InternalRoutes
// OSPFv3 internal route information table
type Ospfv3_Processes_Process_DefaultVrf_InternalRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 internal route information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute.
    InternalRoute []*Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute
}

func (internalRoutes *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes) GetEntityData() *types.CommonEntityData {
    internalRoutes.EntityData.YFilter = internalRoutes.YFilter
    internalRoutes.EntityData.YangName = "internal-routes"
    internalRoutes.EntityData.BundleName = "cisco_ios_xr"
    internalRoutes.EntityData.ParentYangName = "default-vrf"
    internalRoutes.EntityData.SegmentPath = "internal-routes"
    internalRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + internalRoutes.EntityData.SegmentPath
    internalRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    internalRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    internalRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    internalRoutes.EntityData.Children = types.NewOrderedMap()
    internalRoutes.EntityData.Children.Append("internal-route", types.YChild{"InternalRoute", nil})
    for i := range internalRoutes.InternalRoute {
        types.SetYListKey(internalRoutes.InternalRoute[i], i)
        internalRoutes.EntityData.Children.Append(types.GetSegmentPath(internalRoutes.InternalRoute[i]), types.YChild{"InternalRoute", internalRoutes.InternalRoute[i]})
    }
    internalRoutes.EntityData.Leafs = types.NewOrderedMap()

    internalRoutes.EntityData.YListKeys = []string {}

    return &(internalRoutes.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute
// OSPFv3 internal route information
type Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route area ID . The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // Common Route topology information.
    RouteTopology Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology

    // List of topology source information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource.
    RouteSource []*Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource

    // List of paths to this route. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath.
    RoutePath []*Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath
}

func (internalRoute *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute) GetEntityData() *types.CommonEntityData {
    internalRoute.EntityData.YFilter = internalRoute.YFilter
    internalRoute.EntityData.YangName = "internal-route"
    internalRoute.EntityData.BundleName = "cisco_ios_xr"
    internalRoute.EntityData.ParentYangName = "internal-routes"
    internalRoute.EntityData.SegmentPath = "internal-route" + types.AddNoKeyToken(internalRoute)
    internalRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/internal-routes/" + internalRoute.EntityData.SegmentPath
    internalRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    internalRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    internalRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    internalRoute.EntityData.Children = types.NewOrderedMap()
    internalRoute.EntityData.Children.Append("route-topology", types.YChild{"RouteTopology", &internalRoute.RouteTopology})
    internalRoute.EntityData.Children.Append("route-source", types.YChild{"RouteSource", nil})
    for i := range internalRoute.RouteSource {
        types.SetYListKey(internalRoute.RouteSource[i], i)
        internalRoute.EntityData.Children.Append(types.GetSegmentPath(internalRoute.RouteSource[i]), types.YChild{"RouteSource", internalRoute.RouteSource[i]})
    }
    internalRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range internalRoute.RoutePath {
        types.SetYListKey(internalRoute.RoutePath[i], i)
        internalRoute.EntityData.Children.Append(types.GetSegmentPath(internalRoute.RoutePath[i]), types.YChild{"RoutePath", internalRoute.RoutePath[i]})
    }
    internalRoute.EntityData.Leafs = types.NewOrderedMap()
    internalRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", internalRoute.Prefix})
    internalRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", internalRoute.PrefixLength})
    internalRoute.EntityData.Leafs.Append("route-area-id", types.YLeaf{"RouteAreaId", internalRoute.RouteAreaId})

    internalRoute.EntityData.YListKeys = []string {}

    return &(internalRoute.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology
// Common Route topology information
type Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Route distance . The type is interface{} with range: 0..4294967295.
    RouteDistance interface{}

    // Route cost . The type is interface{} with range: 0..4294967295.
    RouteCost interface{}

    // Route type. The type is interface{} with range: 0..4294967295.
    RouteType interface{}
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology) GetEntityData() *types.CommonEntityData {
    routeTopology.EntityData.YFilter = routeTopology.YFilter
    routeTopology.EntityData.YangName = "route-topology"
    routeTopology.EntityData.BundleName = "cisco_ios_xr"
    routeTopology.EntityData.ParentYangName = "internal-route"
    routeTopology.EntityData.SegmentPath = "route-topology"
    routeTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/internal-routes/internal-route/" + routeTopology.EntityData.SegmentPath
    routeTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeTopology.EntityData.Children = types.NewOrderedMap()
    routeTopology.EntityData.Leafs = types.NewOrderedMap()
    routeTopology.EntityData.Leafs.Append("route-id", types.YLeaf{"RouteId", routeTopology.RouteId})
    routeTopology.EntityData.Leafs.Append("route-distance", types.YLeaf{"RouteDistance", routeTopology.RouteDistance})
    routeTopology.EntityData.Leafs.Append("route-cost", types.YLeaf{"RouteCost", routeTopology.RouteCost})
    routeTopology.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", routeTopology.RouteType})

    routeTopology.EntityData.YListKeys = []string {}

    return &(routeTopology.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource
// List of topology source information
type Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Route source of the advertising router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSourceAdverstingRouter interface{}

    // Route source ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSourceId interface{}

    // Type of LSA advertising the prefix, see RFC5340. The type is interface{}
    // with range: 0..4294967295.
    RouteSourceLsaType interface{}
}

func (routeSource *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource) GetEntityData() *types.CommonEntityData {
    routeSource.EntityData.YFilter = routeSource.YFilter
    routeSource.EntityData.YangName = "route-source"
    routeSource.EntityData.BundleName = "cisco_ios_xr"
    routeSource.EntityData.ParentYangName = "internal-route"
    routeSource.EntityData.SegmentPath = "route-source" + types.AddNoKeyToken(routeSource)
    routeSource.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/internal-routes/internal-route/" + routeSource.EntityData.SegmentPath
    routeSource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeSource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeSource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeSource.EntityData.Children = types.NewOrderedMap()
    routeSource.EntityData.Leafs = types.NewOrderedMap()
    routeSource.EntityData.Leafs.Append("route-source-adversting-router", types.YLeaf{"RouteSourceAdverstingRouter", routeSource.RouteSourceAdverstingRouter})
    routeSource.EntityData.Leafs.Append("route-source-id", types.YLeaf{"RouteSourceId", routeSource.RouteSourceId})
    routeSource.EntityData.Leafs.Append("route-source-lsa-type", types.YLeaf{"RouteSourceLsaType", routeSource.RouteSourceLsaType})

    routeSource.EntityData.YListKeys = []string {}

    return &(routeSource.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath
// List of paths to this route
type Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Route path interface name . The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Route path interface Index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndex interface{}

    // Route path next hop . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RoutePathNextHop interface{}

    // Path ID of path. The type is interface{} with range: 0..65535.
    RoutePathId interface{}

    // Backup Path Info.
    RouteBackupPath Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath

    // NeighborNextHop. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_NeighborNextHop
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "internal-route"
    routePath.EntityData.SegmentPath = "route-path" + types.AddNoKeyToken(routePath)
    routePath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/internal-routes/internal-route/" + routePath.EntityData.SegmentPath
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("route-backup-path", types.YChild{"RouteBackupPath", &routePath.RouteBackupPath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        types.SetYListKey(routePath.NeighborNextHop[i], i)
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", routePath.InterfaceName})
    routePath.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", routePath.InterfaceIndex})
    routePath.EntityData.Leafs.Append("route-path-next-hop", types.YLeaf{"RoutePathNextHop", routePath.RoutePathNextHop})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath
// Backup Path Info
type Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetEntityData() *types.CommonEntityData {
    routeBackupPath.EntityData.YFilter = routeBackupPath.YFilter
    routeBackupPath.EntityData.YangName = "route-backup-path"
    routeBackupPath.EntityData.BundleName = "cisco_ios_xr"
    routeBackupPath.EntityData.ParentYangName = "route-path"
    routeBackupPath.EntityData.SegmentPath = "route-backup-path"
    routeBackupPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/internal-routes/internal-route/route-path/" + routeBackupPath.EntityData.SegmentPath
    routeBackupPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeBackupPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeBackupPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeBackupPath.EntityData.Children = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs.Append("backup-route-interface-name", types.YLeaf{"BackupRouteInterfaceName", routeBackupPath.BackupRouteInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("backup-route-next-hop-address", types.YLeaf{"BackupRouteNextHopAddress", routeBackupPath.BackupRouteNextHopAddress})
    routeBackupPath.EntityData.Leafs.Append("backup-route-source", types.YLeaf{"BackupRouteSource", routeBackupPath.BackupRouteSource})
    routeBackupPath.EntityData.Leafs.Append("backup-metric", types.YLeaf{"BackupMetric", routeBackupPath.BackupMetric})
    routeBackupPath.EntityData.Leafs.Append("primary-path", types.YLeaf{"PrimaryPath", routeBackupPath.PrimaryPath})
    routeBackupPath.EntityData.Leafs.Append("line-card-disjoint", types.YLeaf{"LineCardDisjoint", routeBackupPath.LineCardDisjoint})
    routeBackupPath.EntityData.Leafs.Append("downstream", types.YLeaf{"Downstream", routeBackupPath.Downstream})
    routeBackupPath.EntityData.Leafs.Append("node-protect", types.YLeaf{"NodeProtect", routeBackupPath.NodeProtect})
    routeBackupPath.EntityData.Leafs.Append("srlg-disjoint", types.YLeaf{"SrlgDisjoint", routeBackupPath.SrlgDisjoint})

    routeBackupPath.EntityData.YListKeys = []string {}

    return &(routeBackupPath.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop" + types.AddNoKeyToken(neighborNextHop)
    neighborNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/internal-routes/internal-route/route-path/" + neighborNextHop.EntityData.SegmentPath
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas
// Protocol area table 
type Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Area information . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea.
    ProtocolArea []*Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea
}

func (protocolAreas *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas) GetEntityData() *types.CommonEntityData {
    protocolAreas.EntityData.YFilter = protocolAreas.YFilter
    protocolAreas.EntityData.YangName = "protocol-areas"
    protocolAreas.EntityData.BundleName = "cisco_ios_xr"
    protocolAreas.EntityData.ParentYangName = "default-vrf"
    protocolAreas.EntityData.SegmentPath = "protocol-areas"
    protocolAreas.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + protocolAreas.EntityData.SegmentPath
    protocolAreas.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolAreas.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolAreas.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolAreas.EntityData.Children = types.NewOrderedMap()
    protocolAreas.EntityData.Children.Append("protocol-area", types.YChild{"ProtocolArea", nil})
    for i := range protocolAreas.ProtocolArea {
        protocolAreas.EntityData.Children.Append(types.GetSegmentPath(protocolAreas.ProtocolArea[i]), types.YChild{"ProtocolArea", protocolAreas.ProtocolArea[i]})
    }
    protocolAreas.EntityData.Leafs = types.NewOrderedMap()

    protocolAreas.EntityData.YListKeys = []string {}

    return &(protocolAreas.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea
// Area information 
type Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Area ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AreaId interface{}

    // Area ID string in decimal and dotted-decimal format. The type is string
    // with length: 0..16.
    ProtocolAreaId interface{}

    // Distribute List In. The type is string.
    DistributeListIn interface{}

    // Interface list. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface.
    ProtocolInterface []*Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface
}

func (protocolArea *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea) GetEntityData() *types.CommonEntityData {
    protocolArea.EntityData.YFilter = protocolArea.YFilter
    protocolArea.EntityData.YangName = "protocol-area"
    protocolArea.EntityData.BundleName = "cisco_ios_xr"
    protocolArea.EntityData.ParentYangName = "protocol-areas"
    protocolArea.EntityData.SegmentPath = "protocol-area" + types.AddKeyToken(protocolArea.AreaId, "area-id")
    protocolArea.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/protocol-areas/" + protocolArea.EntityData.SegmentPath
    protocolArea.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolArea.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolArea.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolArea.EntityData.Children = types.NewOrderedMap()
    protocolArea.EntityData.Children.Append("protocol-interface", types.YChild{"ProtocolInterface", nil})
    for i := range protocolArea.ProtocolInterface {
        types.SetYListKey(protocolArea.ProtocolInterface[i], i)
        protocolArea.EntityData.Children.Append(types.GetSegmentPath(protocolArea.ProtocolInterface[i]), types.YChild{"ProtocolInterface", protocolArea.ProtocolInterface[i]})
    }
    protocolArea.EntityData.Leafs = types.NewOrderedMap()
    protocolArea.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", protocolArea.AreaId})
    protocolArea.EntityData.Leafs.Append("protocol-area-id", types.YLeaf{"ProtocolAreaId", protocolArea.ProtocolAreaId})
    protocolArea.EntityData.Leafs.Append("distribute-list-in", types.YLeaf{"DistributeListIn", protocolArea.DistributeListIn})

    protocolArea.EntityData.YListKeys = []string {"AreaId"}

    return &(protocolArea.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface
// Interface list
type Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Protocol interface name . The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Distribute List In. The type is string.
    DistributeListIn interface{}
}

func (protocolInterface *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetEntityData() *types.CommonEntityData {
    protocolInterface.EntityData.YFilter = protocolInterface.YFilter
    protocolInterface.EntityData.YangName = "protocol-interface"
    protocolInterface.EntityData.BundleName = "cisco_ios_xr"
    protocolInterface.EntityData.ParentYangName = "protocol-area"
    protocolInterface.EntityData.SegmentPath = "protocol-interface" + types.AddNoKeyToken(protocolInterface)
    protocolInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/protocol-areas/protocol-area/" + protocolInterface.EntityData.SegmentPath
    protocolInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolInterface.EntityData.Children = types.NewOrderedMap()
    protocolInterface.EntityData.Leafs = types.NewOrderedMap()
    protocolInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", protocolInterface.InterfaceName})
    protocolInterface.EntityData.Leafs.Append("distribute-list-in", types.YLeaf{"DistributeListIn", protocolInterface.DistributeListIn})

    protocolInterface.EntityData.YListKeys = []string {}

    return &(protocolInterface.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes
// OSPFv3 connected route information table
type Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 connected route information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute.
    ConnectedRoute []*Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute
}

func (connectedRoutes *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes) GetEntityData() *types.CommonEntityData {
    connectedRoutes.EntityData.YFilter = connectedRoutes.YFilter
    connectedRoutes.EntityData.YangName = "connected-routes"
    connectedRoutes.EntityData.BundleName = "cisco_ios_xr"
    connectedRoutes.EntityData.ParentYangName = "default-vrf"
    connectedRoutes.EntityData.SegmentPath = "connected-routes"
    connectedRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + connectedRoutes.EntityData.SegmentPath
    connectedRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedRoutes.EntityData.Children = types.NewOrderedMap()
    connectedRoutes.EntityData.Children.Append("connected-route", types.YChild{"ConnectedRoute", nil})
    for i := range connectedRoutes.ConnectedRoute {
        types.SetYListKey(connectedRoutes.ConnectedRoute[i], i)
        connectedRoutes.EntityData.Children.Append(types.GetSegmentPath(connectedRoutes.ConnectedRoute[i]), types.YChild{"ConnectedRoute", connectedRoutes.ConnectedRoute[i]})
    }
    connectedRoutes.EntityData.Leafs = types.NewOrderedMap()

    connectedRoutes.EntityData.YListKeys = []string {}

    return &(connectedRoutes.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute
// OSPFv3 connected route information
type Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Common Route topology information.
    RouteTopology Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology

    // List of paths to this route. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath.
    RoutePath []*Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath
}

func (connectedRoute *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute) GetEntityData() *types.CommonEntityData {
    connectedRoute.EntityData.YFilter = connectedRoute.YFilter
    connectedRoute.EntityData.YangName = "connected-route"
    connectedRoute.EntityData.BundleName = "cisco_ios_xr"
    connectedRoute.EntityData.ParentYangName = "connected-routes"
    connectedRoute.EntityData.SegmentPath = "connected-route" + types.AddNoKeyToken(connectedRoute)
    connectedRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/connected-routes/" + connectedRoute.EntityData.SegmentPath
    connectedRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedRoute.EntityData.Children = types.NewOrderedMap()
    connectedRoute.EntityData.Children.Append("route-topology", types.YChild{"RouteTopology", &connectedRoute.RouteTopology})
    connectedRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", nil})
    for i := range connectedRoute.RoutePath {
        types.SetYListKey(connectedRoute.RoutePath[i], i)
        connectedRoute.EntityData.Children.Append(types.GetSegmentPath(connectedRoute.RoutePath[i]), types.YChild{"RoutePath", connectedRoute.RoutePath[i]})
    }
    connectedRoute.EntityData.Leafs = types.NewOrderedMap()
    connectedRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", connectedRoute.Prefix})
    connectedRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", connectedRoute.PrefixLength})

    connectedRoute.EntityData.YListKeys = []string {}

    return &(connectedRoute.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology
// Common Route topology information
type Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Route distance . The type is interface{} with range: 0..4294967295.
    RouteDistance interface{}

    // Route cost . The type is interface{} with range: 0..4294967295.
    RouteCost interface{}

    // Route type. The type is interface{} with range: 0..4294967295.
    RouteType interface{}
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetEntityData() *types.CommonEntityData {
    routeTopology.EntityData.YFilter = routeTopology.YFilter
    routeTopology.EntityData.YangName = "route-topology"
    routeTopology.EntityData.BundleName = "cisco_ios_xr"
    routeTopology.EntityData.ParentYangName = "connected-route"
    routeTopology.EntityData.SegmentPath = "route-topology"
    routeTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/connected-routes/connected-route/" + routeTopology.EntityData.SegmentPath
    routeTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeTopology.EntityData.Children = types.NewOrderedMap()
    routeTopology.EntityData.Leafs = types.NewOrderedMap()
    routeTopology.EntityData.Leafs.Append("route-id", types.YLeaf{"RouteId", routeTopology.RouteId})
    routeTopology.EntityData.Leafs.Append("route-distance", types.YLeaf{"RouteDistance", routeTopology.RouteDistance})
    routeTopology.EntityData.Leafs.Append("route-cost", types.YLeaf{"RouteCost", routeTopology.RouteCost})
    routeTopology.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", routeTopology.RouteType})

    routeTopology.EntityData.YListKeys = []string {}

    return &(routeTopology.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath
// List of paths to this route
type Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Route path interface name . The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Route path interface Index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndex interface{}

    // Route path next hop . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RoutePathNextHop interface{}

    // Path ID of path. The type is interface{} with range: 0..65535.
    RoutePathId interface{}

    // Backup Path Info.
    RouteBackupPath Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath

    // NeighborNextHop. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop.
    NeighborNextHop []*Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "connected-route"
    routePath.EntityData.SegmentPath = "route-path" + types.AddNoKeyToken(routePath)
    routePath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/connected-routes/connected-route/" + routePath.EntityData.SegmentPath
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("route-backup-path", types.YChild{"RouteBackupPath", &routePath.RouteBackupPath})
    routePath.EntityData.Children.Append("neighbor-next-hop", types.YChild{"NeighborNextHop", nil})
    for i := range routePath.NeighborNextHop {
        types.SetYListKey(routePath.NeighborNextHop[i], i)
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.NeighborNextHop[i]), types.YChild{"NeighborNextHop", routePath.NeighborNextHop[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()
    routePath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", routePath.InterfaceName})
    routePath.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", routePath.InterfaceIndex})
    routePath.EntityData.Leafs.Append("route-path-next-hop", types.YLeaf{"RoutePathNextHop", routePath.RoutePathNextHop})
    routePath.EntityData.Leafs.Append("route-path-id", types.YLeaf{"RoutePathId", routePath.RoutePathId})

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath
// Backup Path Info
type Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9._/-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetEntityData() *types.CommonEntityData {
    routeBackupPath.EntityData.YFilter = routeBackupPath.YFilter
    routeBackupPath.EntityData.YangName = "route-backup-path"
    routeBackupPath.EntityData.BundleName = "cisco_ios_xr"
    routeBackupPath.EntityData.ParentYangName = "route-path"
    routeBackupPath.EntityData.SegmentPath = "route-backup-path"
    routeBackupPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/connected-routes/connected-route/route-path/" + routeBackupPath.EntityData.SegmentPath
    routeBackupPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeBackupPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeBackupPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeBackupPath.EntityData.Children = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs = types.NewOrderedMap()
    routeBackupPath.EntityData.Leafs.Append("backup-route-interface-name", types.YLeaf{"BackupRouteInterfaceName", routeBackupPath.BackupRouteInterfaceName})
    routeBackupPath.EntityData.Leafs.Append("backup-route-next-hop-address", types.YLeaf{"BackupRouteNextHopAddress", routeBackupPath.BackupRouteNextHopAddress})
    routeBackupPath.EntityData.Leafs.Append("backup-route-source", types.YLeaf{"BackupRouteSource", routeBackupPath.BackupRouteSource})
    routeBackupPath.EntityData.Leafs.Append("backup-metric", types.YLeaf{"BackupMetric", routeBackupPath.BackupMetric})
    routeBackupPath.EntityData.Leafs.Append("primary-path", types.YLeaf{"PrimaryPath", routeBackupPath.PrimaryPath})
    routeBackupPath.EntityData.Leafs.Append("line-card-disjoint", types.YLeaf{"LineCardDisjoint", routeBackupPath.LineCardDisjoint})
    routeBackupPath.EntityData.Leafs.Append("downstream", types.YLeaf{"Downstream", routeBackupPath.Downstream})
    routeBackupPath.EntityData.Leafs.Append("node-protect", types.YLeaf{"NodeProtect", routeBackupPath.NodeProtect})
    routeBackupPath.EntityData.Leafs.Append("srlg-disjoint", types.YLeaf{"SrlgDisjoint", routeBackupPath.SrlgDisjoint})

    routeBackupPath.EntityData.YListKeys = []string {}

    return &(routeBackupPath.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop
// NeighborNextHop
type Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor NextHop Interface Index. The type is interface{} with range:
    // 0..4294967295.
    NeighborNextHopIntfIndex interface{}
}

func (neighborNextHop *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_NeighborNextHop) GetEntityData() *types.CommonEntityData {
    neighborNextHop.EntityData.YFilter = neighborNextHop.YFilter
    neighborNextHop.EntityData.YangName = "neighbor-next-hop"
    neighborNextHop.EntityData.BundleName = "cisco_ios_xr"
    neighborNextHop.EntityData.ParentYangName = "route-path"
    neighborNextHop.EntityData.SegmentPath = "neighbor-next-hop" + types.AddNoKeyToken(neighborNextHop)
    neighborNextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/connected-routes/connected-route/route-path/" + neighborNextHop.EntityData.SegmentPath
    neighborNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborNextHop.EntityData.Children = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs = types.NewOrderedMap()
    neighborNextHop.EntityData.Leafs.Append("neighbor-next-hop-intf-index", types.YLeaf{"NeighborNextHopIntfIndex", neighborNextHop.NeighborNextHopIntfIndex})

    neighborNextHop.EntityData.YListKeys = []string {}

    return &(neighborNextHop.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics
// Container for Statistics
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol table.
    ProtocolStats Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats

    // OSPFv3 RIB batch statistics.
    SpfStats Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats

    // OSPF Prefix SPF Prioritization statistics.
    RawioStats Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats

    // OSPF Prefix SPF Prioritization statistics.
    PrefixPriorityStats Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats

    // OSPFv3 RIB batch statistics.
    VrfRibBatchStats Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats
}

func (vrfStatistics *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics) GetEntityData() *types.CommonEntityData {
    vrfStatistics.EntityData.YFilter = vrfStatistics.YFilter
    vrfStatistics.EntityData.YangName = "vrf-statistics"
    vrfStatistics.EntityData.BundleName = "cisco_ios_xr"
    vrfStatistics.EntityData.ParentYangName = "default-vrf"
    vrfStatistics.EntityData.SegmentPath = "vrf-statistics"
    vrfStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + vrfStatistics.EntityData.SegmentPath
    vrfStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfStatistics.EntityData.Children = types.NewOrderedMap()
    vrfStatistics.EntityData.Children.Append("protocol-stats", types.YChild{"ProtocolStats", &vrfStatistics.ProtocolStats})
    vrfStatistics.EntityData.Children.Append("spf-stats", types.YChild{"SpfStats", &vrfStatistics.SpfStats})
    vrfStatistics.EntityData.Children.Append("rawio-stats", types.YChild{"RawioStats", &vrfStatistics.RawioStats})
    vrfStatistics.EntityData.Children.Append("prefix-priority-stats", types.YChild{"PrefixPriorityStats", &vrfStatistics.PrefixPriorityStats})
    vrfStatistics.EntityData.Children.Append("vrf-rib-batch-stats", types.YChild{"VrfRibBatchStats", &vrfStatistics.VrfRibBatchStats})
    vrfStatistics.EntityData.Leafs = types.NewOrderedMap()

    vrfStatistics.EntityData.YListKeys = []string {}

    return &(vrfStatistics.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats
// Protocol table
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol statistics for an interface. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat.
    ProtocolStat []*Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat
}

func (protocolStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats) GetEntityData() *types.CommonEntityData {
    protocolStats.EntityData.YFilter = protocolStats.YFilter
    protocolStats.EntityData.YangName = "protocol-stats"
    protocolStats.EntityData.BundleName = "cisco_ios_xr"
    protocolStats.EntityData.ParentYangName = "vrf-statistics"
    protocolStats.EntityData.SegmentPath = "protocol-stats"
    protocolStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/vrf-statistics/" + protocolStats.EntityData.SegmentPath
    protocolStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolStats.EntityData.Children = types.NewOrderedMap()
    protocolStats.EntityData.Children.Append("protocol-stat", types.YChild{"ProtocolStat", nil})
    for i := range protocolStats.ProtocolStat {
        protocolStats.EntityData.Children.Append(types.GetSegmentPath(protocolStats.ProtocolStat[i]), types.YChild{"ProtocolStat", protocolStats.ProtocolStat[i]})
    }
    protocolStats.EntityData.Leafs = types.NewOrderedMap()

    protocolStats.EntityData.YListKeys = []string {}

    return &(protocolStats.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat
// Protocol statistics for an interface
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Total inputs packets. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalInPackets interface{}

    // Hello packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloInPackets interface{}

    // Database Description Packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesInPackets interface{}

    // Database Description LSAs in. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesInLsAs interface{}

    // LSA Requests in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqInPackets interface{}

    // LS Requests in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqInLsAs interface{}

    // LS Updates Packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdInPackets interface{}

    // LS Updates ignored. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdInIgnored interface{}

    // LS Updates LSAs in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdInLsAs interface{}

    // LS Acks Packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckInPackets interface{}

    // LS Ack LSAs in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckInLsAs interface{}

    // Total Out Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalOutPackets interface{}

    // Hello Out Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloOutPackets interface{}

    // Database Description Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesOutPackets interface{}

    // Database Description LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesOutLsAs interface{}

    // LS Request Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqOutPackets interface{}

    // LS Reuqests LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqOutLsAs interface{}

    // LS Update Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdOutPackets interface{}

    // LS Update LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdOutLsAs interface{}

    // LS Ack Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckOutPackets interface{}

    // LS Ack LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckOutLsAs interface{}

    // Dropped in GS. The type is interface{} with range: 0..18446744073709551615.
    DroppedInGs interface{}

    // Checksum Errors. The type is interface{} with range:
    // 0..18446744073709551615.
    ChecksumErr interface{}
}

func (protocolStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat) GetEntityData() *types.CommonEntityData {
    protocolStat.EntityData.YFilter = protocolStat.YFilter
    protocolStat.EntityData.YangName = "protocol-stat"
    protocolStat.EntityData.BundleName = "cisco_ios_xr"
    protocolStat.EntityData.ParentYangName = "protocol-stats"
    protocolStat.EntityData.SegmentPath = "protocol-stat" + types.AddKeyToken(protocolStat.InterfaceName, "interface-name")
    protocolStat.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/vrf-statistics/protocol-stats/" + protocolStat.EntityData.SegmentPath
    protocolStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolStat.EntityData.Children = types.NewOrderedMap()
    protocolStat.EntityData.Leafs = types.NewOrderedMap()
    protocolStat.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", protocolStat.InterfaceName})
    protocolStat.EntityData.Leafs.Append("total-in-packets", types.YLeaf{"TotalInPackets", protocolStat.TotalInPackets})
    protocolStat.EntityData.Leafs.Append("hello-in-packets", types.YLeaf{"HelloInPackets", protocolStat.HelloInPackets})
    protocolStat.EntityData.Leafs.Append("dbdes-in-packets", types.YLeaf{"DbdesInPackets", protocolStat.DbdesInPackets})
    protocolStat.EntityData.Leafs.Append("dbdes-in-ls-as", types.YLeaf{"DbdesInLsAs", protocolStat.DbdesInLsAs})
    protocolStat.EntityData.Leafs.Append("ls-req-in-packets", types.YLeaf{"LsReqInPackets", protocolStat.LsReqInPackets})
    protocolStat.EntityData.Leafs.Append("ls-req-in-ls-as", types.YLeaf{"LsReqInLsAs", protocolStat.LsReqInLsAs})
    protocolStat.EntityData.Leafs.Append("ls-upd-in-packets", types.YLeaf{"LsUpdInPackets", protocolStat.LsUpdInPackets})
    protocolStat.EntityData.Leafs.Append("ls-upd-in-ignored", types.YLeaf{"LsUpdInIgnored", protocolStat.LsUpdInIgnored})
    protocolStat.EntityData.Leafs.Append("ls-upd-in-ls-as", types.YLeaf{"LsUpdInLsAs", protocolStat.LsUpdInLsAs})
    protocolStat.EntityData.Leafs.Append("ls-ack-in-packets", types.YLeaf{"LsAckInPackets", protocolStat.LsAckInPackets})
    protocolStat.EntityData.Leafs.Append("ls-ack-in-ls-as", types.YLeaf{"LsAckInLsAs", protocolStat.LsAckInLsAs})
    protocolStat.EntityData.Leafs.Append("total-out-packets", types.YLeaf{"TotalOutPackets", protocolStat.TotalOutPackets})
    protocolStat.EntityData.Leafs.Append("hello-out-packets", types.YLeaf{"HelloOutPackets", protocolStat.HelloOutPackets})
    protocolStat.EntityData.Leafs.Append("dbdes-out-packets", types.YLeaf{"DbdesOutPackets", protocolStat.DbdesOutPackets})
    protocolStat.EntityData.Leafs.Append("dbdes-out-ls-as", types.YLeaf{"DbdesOutLsAs", protocolStat.DbdesOutLsAs})
    protocolStat.EntityData.Leafs.Append("ls-req-out-packets", types.YLeaf{"LsReqOutPackets", protocolStat.LsReqOutPackets})
    protocolStat.EntityData.Leafs.Append("ls-req-out-ls-as", types.YLeaf{"LsReqOutLsAs", protocolStat.LsReqOutLsAs})
    protocolStat.EntityData.Leafs.Append("ls-upd-out-packets", types.YLeaf{"LsUpdOutPackets", protocolStat.LsUpdOutPackets})
    protocolStat.EntityData.Leafs.Append("ls-upd-out-ls-as", types.YLeaf{"LsUpdOutLsAs", protocolStat.LsUpdOutLsAs})
    protocolStat.EntityData.Leafs.Append("ls-ack-out-packets", types.YLeaf{"LsAckOutPackets", protocolStat.LsAckOutPackets})
    protocolStat.EntityData.Leafs.Append("ls-ack-out-ls-as", types.YLeaf{"LsAckOutLsAs", protocolStat.LsAckOutLsAs})
    protocolStat.EntityData.Leafs.Append("dropped-in-gs", types.YLeaf{"DroppedInGs", protocolStat.DroppedInGs})
    protocolStat.EntityData.Leafs.Append("checksum-err", types.YLeaf{"ChecksumErr", protocolStat.ChecksumErr})

    protocolStat.EntityData.YListKeys = []string {"InterfaceName"}

    return &(protocolStat.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats
// OSPFv3 RIB batch statistics
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SPF statistics header.
    SpfHeader Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader

    // List of SPF run-time statistics. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime.
    SpfRuntime []*Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime
}

func (spfStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats) GetEntityData() *types.CommonEntityData {
    spfStats.EntityData.YFilter = spfStats.YFilter
    spfStats.EntityData.YangName = "spf-stats"
    spfStats.EntityData.BundleName = "cisco_ios_xr"
    spfStats.EntityData.ParentYangName = "vrf-statistics"
    spfStats.EntityData.SegmentPath = "spf-stats"
    spfStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/vrf-statistics/" + spfStats.EntityData.SegmentPath
    spfStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfStats.EntityData.Children = types.NewOrderedMap()
    spfStats.EntityData.Children.Append("spf-header", types.YChild{"SpfHeader", &spfStats.SpfHeader})
    spfStats.EntityData.Children.Append("spf-runtime", types.YChild{"SpfRuntime", nil})
    for i := range spfStats.SpfRuntime {
        types.SetYListKey(spfStats.SpfRuntime[i], i)
        spfStats.EntityData.Children.Append(types.GetSegmentPath(spfStats.SpfRuntime[i]), types.YChild{"SpfRuntime", spfStats.SpfRuntime[i]})
    }
    spfStats.EntityData.Leafs = types.NewOrderedMap()

    spfStats.EntityData.YListKeys = []string {}

    return &(spfStats.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader
// SPF statistics header
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderRouterId interface{}

    // Number of SPF calculations. The type is interface{} with range:
    // 0..4294967295.
    HeaderSpFs interface{}

    // List of Areas with SPF statistics. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary.
    AreaSummary []*Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary
}

func (spfHeader *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader) GetEntityData() *types.CommonEntityData {
    spfHeader.EntityData.YFilter = spfHeader.YFilter
    spfHeader.EntityData.YangName = "spf-header"
    spfHeader.EntityData.BundleName = "cisco_ios_xr"
    spfHeader.EntityData.ParentYangName = "spf-stats"
    spfHeader.EntityData.SegmentPath = "spf-header"
    spfHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/vrf-statistics/spf-stats/" + spfHeader.EntityData.SegmentPath
    spfHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfHeader.EntityData.Children = types.NewOrderedMap()
    spfHeader.EntityData.Children.Append("area-summary", types.YChild{"AreaSummary", nil})
    for i := range spfHeader.AreaSummary {
        types.SetYListKey(spfHeader.AreaSummary[i], i)
        spfHeader.EntityData.Children.Append(types.GetSegmentPath(spfHeader.AreaSummary[i]), types.YChild{"AreaSummary", spfHeader.AreaSummary[i]})
    }
    spfHeader.EntityData.Leafs = types.NewOrderedMap()
    spfHeader.EntityData.Leafs.Append("header-router-id", types.YLeaf{"HeaderRouterId", spfHeader.HeaderRouterId})
    spfHeader.EntityData.Leafs.Append("header-sp-fs", types.YLeaf{"HeaderSpFs", spfHeader.HeaderSpFs})

    spfHeader.EntityData.YListKeys = []string {}

    return &(spfHeader.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary
// List of Areas with SPF statistics
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID of the area SPF statistics. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // Number of SPF calculations. The type is interface{} with range:
    // 0..4294967295.
    SpFs interface{}
}

func (areaSummary *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetEntityData() *types.CommonEntityData {
    areaSummary.EntityData.YFilter = areaSummary.YFilter
    areaSummary.EntityData.YangName = "area-summary"
    areaSummary.EntityData.BundleName = "cisco_ios_xr"
    areaSummary.EntityData.ParentYangName = "spf-header"
    areaSummary.EntityData.SegmentPath = "area-summary" + types.AddNoKeyToken(areaSummary)
    areaSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/vrf-statistics/spf-stats/spf-header/" + areaSummary.EntityData.SegmentPath
    areaSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaSummary.EntityData.Children = types.NewOrderedMap()
    areaSummary.EntityData.Leafs = types.NewOrderedMap()
    areaSummary.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", areaSummary.AreaId})
    areaSummary.EntityData.Leafs.Append("sp-fs", types.YLeaf{"SpFs", areaSummary.SpFs})

    areaSummary.EntityData.YListKeys = []string {}

    return &(areaSummary.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime
// List of SPF run-time statistics
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // SPF calculation start time. The type is interface{} with range:
    // 0..4294967295.
    StartTime interface{}

    // Number of routes added to RIB. The type is interface{} with range:
    // 0..4294967295.
    RibAddRoutes interface{}

    // Number of routes deleted from RIB. The type is interface{} with range:
    // 0..4294967295.
    RibDeleteRoutes interface{}

    // Reasons for triggering an SPF calculation Bit 1 - Router LSA update Bit 2 -
    // Network LSA update Bit 3 - Inter-Area Prefix LSA update Bit 4 - Inter-Area
    // Router LSA update Bit 5 - AS External LSA update Bit 6 - MOSPF LSA update
    // Bit 7 - Type 7 AS External LSA update Bit 8 - Link LSA update Bit 9 -
    // Prefix LSA update. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ReasonFlags interface{}

    // Number of LSA changes triggering an SPF calculation. The type is
    // interface{} with range: -32768..32767.
    LsaChanges interface{}

    // Global SPF times.
    GlobalTime Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime

    // List of LSAs triggering the SPF calculation. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa.
    Lsa []*Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa

    // List of per-area SPF statistics. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat.
    AreaStat []*Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat
}

func (spfRuntime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime) GetEntityData() *types.CommonEntityData {
    spfRuntime.EntityData.YFilter = spfRuntime.YFilter
    spfRuntime.EntityData.YangName = "spf-runtime"
    spfRuntime.EntityData.BundleName = "cisco_ios_xr"
    spfRuntime.EntityData.ParentYangName = "spf-stats"
    spfRuntime.EntityData.SegmentPath = "spf-runtime" + types.AddNoKeyToken(spfRuntime)
    spfRuntime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/vrf-statistics/spf-stats/" + spfRuntime.EntityData.SegmentPath
    spfRuntime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfRuntime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfRuntime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfRuntime.EntityData.Children = types.NewOrderedMap()
    spfRuntime.EntityData.Children.Append("global-time", types.YChild{"GlobalTime", &spfRuntime.GlobalTime})
    spfRuntime.EntityData.Children.Append("lsa", types.YChild{"Lsa", nil})
    for i := range spfRuntime.Lsa {
        types.SetYListKey(spfRuntime.Lsa[i], i)
        spfRuntime.EntityData.Children.Append(types.GetSegmentPath(spfRuntime.Lsa[i]), types.YChild{"Lsa", spfRuntime.Lsa[i]})
    }
    spfRuntime.EntityData.Children.Append("area-stat", types.YChild{"AreaStat", nil})
    for i := range spfRuntime.AreaStat {
        types.SetYListKey(spfRuntime.AreaStat[i], i)
        spfRuntime.EntityData.Children.Append(types.GetSegmentPath(spfRuntime.AreaStat[i]), types.YChild{"AreaStat", spfRuntime.AreaStat[i]})
    }
    spfRuntime.EntityData.Leafs = types.NewOrderedMap()
    spfRuntime.EntityData.Leafs.Append("start-time", types.YLeaf{"StartTime", spfRuntime.StartTime})
    spfRuntime.EntityData.Leafs.Append("rib-add-routes", types.YLeaf{"RibAddRoutes", spfRuntime.RibAddRoutes})
    spfRuntime.EntityData.Leafs.Append("rib-delete-routes", types.YLeaf{"RibDeleteRoutes", spfRuntime.RibDeleteRoutes})
    spfRuntime.EntityData.Leafs.Append("reason-flags", types.YLeaf{"ReasonFlags", spfRuntime.ReasonFlags})
    spfRuntime.EntityData.Leafs.Append("lsa-changes", types.YLeaf{"LsaChanges", spfRuntime.LsaChanges})

    spfRuntime.EntityData.YListKeys = []string {}

    return &(spfRuntime.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime
// Global SPF times
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Dijkstra time in msec. The type is interface{} with range: 0..4294967295.
    Dijkstra interface{}

    // Intra-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefixDel interface{}

    // Inter-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefixDel interface{}

    // External prefix processing time in msec. The type is interface{} with
    // range: 0..4294967295.
    ExternalPrefix interface{}

    // External prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    ExternalPrefixDel interface{}

    // RIB add processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibAdd interface{}

    // RIB deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibDel interface{}
}

func (globalTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetEntityData() *types.CommonEntityData {
    globalTime.EntityData.YFilter = globalTime.YFilter
    globalTime.EntityData.YangName = "global-time"
    globalTime.EntityData.BundleName = "cisco_ios_xr"
    globalTime.EntityData.ParentYangName = "spf-runtime"
    globalTime.EntityData.SegmentPath = "global-time"
    globalTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/vrf-statistics/spf-stats/spf-runtime/" + globalTime.EntityData.SegmentPath
    globalTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalTime.EntityData.Children = types.NewOrderedMap()
    globalTime.EntityData.Leafs = types.NewOrderedMap()
    globalTime.EntityData.Leafs.Append("dijkstra", types.YLeaf{"Dijkstra", globalTime.Dijkstra})
    globalTime.EntityData.Leafs.Append("intra-prefix", types.YLeaf{"IntraPrefix", globalTime.IntraPrefix})
    globalTime.EntityData.Leafs.Append("intra-prefix-del", types.YLeaf{"IntraPrefixDel", globalTime.IntraPrefixDel})
    globalTime.EntityData.Leafs.Append("inter-prefix", types.YLeaf{"InterPrefix", globalTime.InterPrefix})
    globalTime.EntityData.Leafs.Append("inter-prefix-del", types.YLeaf{"InterPrefixDel", globalTime.InterPrefixDel})
    globalTime.EntityData.Leafs.Append("external-prefix", types.YLeaf{"ExternalPrefix", globalTime.ExternalPrefix})
    globalTime.EntityData.Leafs.Append("external-prefix-del", types.YLeaf{"ExternalPrefixDel", globalTime.ExternalPrefixDel})
    globalTime.EntityData.Leafs.Append("rib-add", types.YLeaf{"RibAdd", globalTime.RibAdd})
    globalTime.EntityData.Leafs.Append("rib-del", types.YLeaf{"RibDel", globalTime.RibDel})

    globalTime.EntityData.YListKeys = []string {}

    return &(globalTime.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa
// List of LSAs triggering the SPF calculation
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID. The type is interface{} with range: 0..4294967295.
    LsaAreaId interface{}

    // Advertising router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaAdvertisingRouter interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // LSA type. The type is interface{} with range: 0..255.
    LsaType interface{}

    // If true, the LSA change is a flush. The type is bool.
    LsaFlush interface{}
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetEntityData() *types.CommonEntityData {
    lsa.EntityData.YFilter = lsa.YFilter
    lsa.EntityData.YangName = "lsa"
    lsa.EntityData.BundleName = "cisco_ios_xr"
    lsa.EntityData.ParentYangName = "spf-runtime"
    lsa.EntityData.SegmentPath = "lsa" + types.AddNoKeyToken(lsa)
    lsa.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/vrf-statistics/spf-stats/spf-runtime/" + lsa.EntityData.SegmentPath
    lsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsa.EntityData.Children = types.NewOrderedMap()
    lsa.EntityData.Leafs = types.NewOrderedMap()
    lsa.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", lsa.LsaAreaId})
    lsa.EntityData.Leafs.Append("lsa-advertising-router", types.YLeaf{"LsaAdvertisingRouter", lsa.LsaAdvertisingRouter})
    lsa.EntityData.Leafs.Append("lsa-id", types.YLeaf{"LsaId", lsa.LsaId})
    lsa.EntityData.Leafs.Append("lsa-type", types.YLeaf{"LsaType", lsa.LsaType})
    lsa.EntityData.Leafs.Append("lsa-flush", types.YLeaf{"LsaFlush", lsa.LsaFlush})

    lsa.EntityData.YListKeys = []string {}

    return &(lsa.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat
// List of per-area SPF statistics
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID for area of these SPF statistics. The type is interface{} with
    // range: 0..4294967295.
    SpfStatAreaId interface{}

    // Counts of LSA types triggering an SPF calculation. The type is slice of
    // interface{} with range: 0..4294967295.
    SpfStatLsaTypeCount []interface{}

    // SPF time calculations.
    SpfStatTime Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime
}

func (areaStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetEntityData() *types.CommonEntityData {
    areaStat.EntityData.YFilter = areaStat.YFilter
    areaStat.EntityData.YangName = "area-stat"
    areaStat.EntityData.BundleName = "cisco_ios_xr"
    areaStat.EntityData.ParentYangName = "spf-runtime"
    areaStat.EntityData.SegmentPath = "area-stat" + types.AddNoKeyToken(areaStat)
    areaStat.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/vrf-statistics/spf-stats/spf-runtime/" + areaStat.EntityData.SegmentPath
    areaStat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaStat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaStat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaStat.EntityData.Children = types.NewOrderedMap()
    areaStat.EntityData.Children.Append("spf-stat-time", types.YChild{"SpfStatTime", &areaStat.SpfStatTime})
    areaStat.EntityData.Leafs = types.NewOrderedMap()
    areaStat.EntityData.Leafs.Append("spf-stat-area-id", types.YLeaf{"SpfStatAreaId", areaStat.SpfStatAreaId})
    areaStat.EntityData.Leafs.Append("spf-stat-lsa-type-count", types.YLeaf{"SpfStatLsaTypeCount", areaStat.SpfStatLsaTypeCount})

    areaStat.EntityData.YListKeys = []string {}

    return &(areaStat.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime
// SPF time calculations
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Dijkstra time in msec. The type is interface{} with range: 0..4294967295.
    Dijkstra interface{}

    // Intra-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefixDel interface{}

    // Inter-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefixDel interface{}

    // External prefix processing time in msec. The type is interface{} with
    // range: 0..4294967295.
    ExternalPrefix interface{}

    // External prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    ExternalPrefixDel interface{}

    // RIB add processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibAdd interface{}

    // RIB deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibDel interface{}
}

func (spfStatTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetEntityData() *types.CommonEntityData {
    spfStatTime.EntityData.YFilter = spfStatTime.YFilter
    spfStatTime.EntityData.YangName = "spf-stat-time"
    spfStatTime.EntityData.BundleName = "cisco_ios_xr"
    spfStatTime.EntityData.ParentYangName = "area-stat"
    spfStatTime.EntityData.SegmentPath = "spf-stat-time"
    spfStatTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/vrf-statistics/spf-stats/spf-runtime/area-stat/" + spfStatTime.EntityData.SegmentPath
    spfStatTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfStatTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfStatTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfStatTime.EntityData.Children = types.NewOrderedMap()
    spfStatTime.EntityData.Leafs = types.NewOrderedMap()
    spfStatTime.EntityData.Leafs.Append("dijkstra", types.YLeaf{"Dijkstra", spfStatTime.Dijkstra})
    spfStatTime.EntityData.Leafs.Append("intra-prefix", types.YLeaf{"IntraPrefix", spfStatTime.IntraPrefix})
    spfStatTime.EntityData.Leafs.Append("intra-prefix-del", types.YLeaf{"IntraPrefixDel", spfStatTime.IntraPrefixDel})
    spfStatTime.EntityData.Leafs.Append("inter-prefix", types.YLeaf{"InterPrefix", spfStatTime.InterPrefix})
    spfStatTime.EntityData.Leafs.Append("inter-prefix-del", types.YLeaf{"InterPrefixDel", spfStatTime.InterPrefixDel})
    spfStatTime.EntityData.Leafs.Append("external-prefix", types.YLeaf{"ExternalPrefix", spfStatTime.ExternalPrefix})
    spfStatTime.EntityData.Leafs.Append("external-prefix-del", types.YLeaf{"ExternalPrefixDel", spfStatTime.ExternalPrefixDel})
    spfStatTime.EntityData.Leafs.Append("rib-add", types.YLeaf{"RibAdd", spfStatTime.RibAdd})
    spfStatTime.EntityData.Leafs.Append("rib-del", types.YLeaf{"RibDel", spfStatTime.RibDel})

    spfStatTime.EntityData.YListKeys = []string {}

    return &(spfStatTime.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats
// OSPF Prefix SPF Prioritization statistics
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Raw Connections Open. The type is interface{} with range:
    // 0..18446744073709551615.
    RawConnOpen interface{}

    // Raw Connections Close. The type is interface{} with range:
    // 0..18446744073709551615.
    RawConnClose interface{}

    // Raw Connections Error. The type is interface{} with range:
    // 0..18446744073709551615.
    RawConnError interface{}

    // Received Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    InPackets interface{}

    // Received Bytes. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    InBytes interface{}

    // Received Long Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    InLongPackets interface{}

    // In Malloc Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InMallocDrops interface{}

    // In Handle Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InHandleDrops interface{}

    // In Short Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InShortDrops interface{}

    // In Error Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InErrorDrops interface{}

    // In IPSEC Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InIpsecDrops interface{}

    // In Queue Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InQueueDrops interface{}

    // Packets Sent. The type is interface{} with range: 0..18446744073709551615.
    OutPackets interface{}

    // Sent Bytes. The type is interface{} with range: 0..18446744073709551615.
    // Units are byte.
    OutBytes interface{}

    // No FileDescriptor Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    OutNofdDrops interface{}

    // Error Drops. The type is interface{} with range: 0..18446744073709551615.
    OutErrorDrops interface{}

    // Out IPSEC Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    OutIpsecDrops interface{}

    // No Packet Buffers. The type is interface{} with range:
    // 0..18446744073709551615.
    OutNopakDrops interface{}

    // PAK API Errors. The type is interface{} with range:
    // 0..18446744073709551615.
    OutPakapiErrors interface{}

    // Raw Connection State. The type is interface{} with range: 0..4294967295.
    RawConnState interface{}
}

func (rawioStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats) GetEntityData() *types.CommonEntityData {
    rawioStats.EntityData.YFilter = rawioStats.YFilter
    rawioStats.EntityData.YangName = "rawio-stats"
    rawioStats.EntityData.BundleName = "cisco_ios_xr"
    rawioStats.EntityData.ParentYangName = "vrf-statistics"
    rawioStats.EntityData.SegmentPath = "rawio-stats"
    rawioStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/vrf-statistics/" + rawioStats.EntityData.SegmentPath
    rawioStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rawioStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rawioStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rawioStats.EntityData.Children = types.NewOrderedMap()
    rawioStats.EntityData.Leafs = types.NewOrderedMap()
    rawioStats.EntityData.Leafs.Append("raw-conn-open", types.YLeaf{"RawConnOpen", rawioStats.RawConnOpen})
    rawioStats.EntityData.Leafs.Append("raw-conn-close", types.YLeaf{"RawConnClose", rawioStats.RawConnClose})
    rawioStats.EntityData.Leafs.Append("raw-conn-error", types.YLeaf{"RawConnError", rawioStats.RawConnError})
    rawioStats.EntityData.Leafs.Append("in-packets", types.YLeaf{"InPackets", rawioStats.InPackets})
    rawioStats.EntityData.Leafs.Append("in-bytes", types.YLeaf{"InBytes", rawioStats.InBytes})
    rawioStats.EntityData.Leafs.Append("in-long-packets", types.YLeaf{"InLongPackets", rawioStats.InLongPackets})
    rawioStats.EntityData.Leafs.Append("in-malloc-drops", types.YLeaf{"InMallocDrops", rawioStats.InMallocDrops})
    rawioStats.EntityData.Leafs.Append("in-handle-drops", types.YLeaf{"InHandleDrops", rawioStats.InHandleDrops})
    rawioStats.EntityData.Leafs.Append("in-short-drops", types.YLeaf{"InShortDrops", rawioStats.InShortDrops})
    rawioStats.EntityData.Leafs.Append("in-error-drops", types.YLeaf{"InErrorDrops", rawioStats.InErrorDrops})
    rawioStats.EntityData.Leafs.Append("in-ipsec-drops", types.YLeaf{"InIpsecDrops", rawioStats.InIpsecDrops})
    rawioStats.EntityData.Leafs.Append("in-queue-drops", types.YLeaf{"InQueueDrops", rawioStats.InQueueDrops})
    rawioStats.EntityData.Leafs.Append("out-packets", types.YLeaf{"OutPackets", rawioStats.OutPackets})
    rawioStats.EntityData.Leafs.Append("out-bytes", types.YLeaf{"OutBytes", rawioStats.OutBytes})
    rawioStats.EntityData.Leafs.Append("out-nofd-drops", types.YLeaf{"OutNofdDrops", rawioStats.OutNofdDrops})
    rawioStats.EntityData.Leafs.Append("out-error-drops", types.YLeaf{"OutErrorDrops", rawioStats.OutErrorDrops})
    rawioStats.EntityData.Leafs.Append("out-ipsec-drops", types.YLeaf{"OutIpsecDrops", rawioStats.OutIpsecDrops})
    rawioStats.EntityData.Leafs.Append("out-nopak-drops", types.YLeaf{"OutNopakDrops", rawioStats.OutNopakDrops})
    rawioStats.EntityData.Leafs.Append("out-pakapi-errors", types.YLeaf{"OutPakapiErrors", rawioStats.OutPakapiErrors})
    rawioStats.EntityData.Leafs.Append("raw-conn-state", types.YLeaf{"RawConnState", rawioStats.RawConnState})

    rawioStats.EntityData.YListKeys = []string {}

    return &(rawioStats.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats
// OSPF Prefix SPF Prioritization statistics
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Critical priority classifications. The type is interface{} with range:
    // 0..4294967295.
    Critical interface{}

    // High priority classifications. The type is interface{} with range:
    // 0..4294967295.
    High interface{}

    // Medium priority classifications. The type is interface{} with range:
    // 0..4294967295.
    Medium interface{}

    // Low priority classifications. The type is interface{} with range:
    // 0..4294967295.
    Low interface{}
}

func (prefixPriorityStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats) GetEntityData() *types.CommonEntityData {
    prefixPriorityStats.EntityData.YFilter = prefixPriorityStats.YFilter
    prefixPriorityStats.EntityData.YangName = "prefix-priority-stats"
    prefixPriorityStats.EntityData.BundleName = "cisco_ios_xr"
    prefixPriorityStats.EntityData.ParentYangName = "vrf-statistics"
    prefixPriorityStats.EntityData.SegmentPath = "prefix-priority-stats"
    prefixPriorityStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/vrf-statistics/" + prefixPriorityStats.EntityData.SegmentPath
    prefixPriorityStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixPriorityStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixPriorityStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixPriorityStats.EntityData.Children = types.NewOrderedMap()
    prefixPriorityStats.EntityData.Leafs = types.NewOrderedMap()
    prefixPriorityStats.EntityData.Leafs.Append("critical", types.YLeaf{"Critical", prefixPriorityStats.Critical})
    prefixPriorityStats.EntityData.Leafs.Append("high", types.YLeaf{"High", prefixPriorityStats.High})
    prefixPriorityStats.EntityData.Leafs.Append("medium", types.YLeaf{"Medium", prefixPriorityStats.Medium})
    prefixPriorityStats.EntityData.Leafs.Append("low", types.YLeaf{"Low", prefixPriorityStats.Low})

    prefixPriorityStats.EntityData.YListKeys = []string {}

    return &(prefixPriorityStats.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats
// OSPFv3 RIB batch statistics
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // No. of RIB batches sent. The type is interface{} with range: 0..4294967295.
    BatchesSent interface{}

    // No. of Routes sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    RoutesSent interface{}

    // No of Pending Routes. The type is interface{} with range: 0..4294967295.
    RoutesPending interface{}

    // Max No. of Routes in a batch. The type is interface{} with range:
    // 0..4294967295.
    MaxRoutes interface{}

    // No. of Paths sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsSent interface{}

    // No. of paths waiting to be sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsPending interface{}

    // No. of paths added to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsAdd interface{}

    // No. of paths add errors. The type is interface{} with range: 0..4294967295.
    PathsAddErrs interface{}

    // No. of paths del sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsDel interface{}

    // No. of Paths del errors. The type is interface{} with range: 0..4294967295.
    PathsDelErrs interface{}
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats) GetEntityData() *types.CommonEntityData {
    vrfRibBatchStats.EntityData.YFilter = vrfRibBatchStats.YFilter
    vrfRibBatchStats.EntityData.YangName = "vrf-rib-batch-stats"
    vrfRibBatchStats.EntityData.BundleName = "cisco_ios_xr"
    vrfRibBatchStats.EntityData.ParentYangName = "vrf-statistics"
    vrfRibBatchStats.EntityData.SegmentPath = "vrf-rib-batch-stats"
    vrfRibBatchStats.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/vrf-statistics/" + vrfRibBatchStats.EntityData.SegmentPath
    vrfRibBatchStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRibBatchStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRibBatchStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRibBatchStats.EntityData.Children = types.NewOrderedMap()
    vrfRibBatchStats.EntityData.Leafs = types.NewOrderedMap()
    vrfRibBatchStats.EntityData.Leafs.Append("batches-sent", types.YLeaf{"BatchesSent", vrfRibBatchStats.BatchesSent})
    vrfRibBatchStats.EntityData.Leafs.Append("routes-sent", types.YLeaf{"RoutesSent", vrfRibBatchStats.RoutesSent})
    vrfRibBatchStats.EntityData.Leafs.Append("routes-pending", types.YLeaf{"RoutesPending", vrfRibBatchStats.RoutesPending})
    vrfRibBatchStats.EntityData.Leafs.Append("max-routes", types.YLeaf{"MaxRoutes", vrfRibBatchStats.MaxRoutes})
    vrfRibBatchStats.EntityData.Leafs.Append("paths-sent", types.YLeaf{"PathsSent", vrfRibBatchStats.PathsSent})
    vrfRibBatchStats.EntityData.Leafs.Append("paths-pending", types.YLeaf{"PathsPending", vrfRibBatchStats.PathsPending})
    vrfRibBatchStats.EntityData.Leafs.Append("paths-add", types.YLeaf{"PathsAdd", vrfRibBatchStats.PathsAdd})
    vrfRibBatchStats.EntityData.Leafs.Append("paths-add-errs", types.YLeaf{"PathsAddErrs", vrfRibBatchStats.PathsAddErrs})
    vrfRibBatchStats.EntityData.Leafs.Append("paths-del", types.YLeaf{"PathsDel", vrfRibBatchStats.PathsDel})
    vrfRibBatchStats.EntityData.Leafs.Append("paths-del-errs", types.YLeaf{"PathsDelErrs", vrfRibBatchStats.PathsDelErrs})

    vrfRibBatchStats.EntityData.YListKeys = []string {}

    return &(vrfRibBatchStats.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Summary
// OSPFv3 summary
type Ospfv3_Processes_Process_DefaultVrf_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 protocol summary.
    Protocol Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol

    // OSPFv3 summary.
    Ospfv3 Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3

    // OSPFv3 route summary.
    Route Ospfv3_Processes_Process_DefaultVrf_Summary_Route
}

func (summary *Ospfv3_Processes_Process_DefaultVrf_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "default-vrf"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("protocol", types.YChild{"Protocol", &summary.Protocol})
    summary.EntityData.Children.Append("ospfv3", types.YChild{"Ospfv3", &summary.Ospfv3})
    summary.EntityData.Children.Append("route", types.YChild{"Route", &summary.Route})
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol
// OSPFv3 protocol summary
type Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ProtocolRouterId interface{}

    // Administrative distance. The type is interface{} with range: 0..4294967295.
    AdministrativeDistance interface{}

    // Administrative Distance for Inter Area routes. The type is interface{} with
    // range: 0..4294967295.
    AdministrativeDistanceInterArea interface{}

    // Administrative Distance for External routes. The type is interface{} with
    // range: 0..4294967295.
    AdministrativeDistanceExternal interface{}

    // If true, Graceful restart is enabled . The type is bool.
    IsGracefulRestart interface{}

    // Distribute List In. The type is string.
    DistributeListIn interface{}
}

func (protocol *Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol) GetEntityData() *types.CommonEntityData {
    protocol.EntityData.YFilter = protocol.YFilter
    protocol.EntityData.YangName = "protocol"
    protocol.EntityData.BundleName = "cisco_ios_xr"
    protocol.EntityData.ParentYangName = "summary"
    protocol.EntityData.SegmentPath = "protocol"
    protocol.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/summary/" + protocol.EntityData.SegmentPath
    protocol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocol.EntityData.Children = types.NewOrderedMap()
    protocol.EntityData.Leafs = types.NewOrderedMap()
    protocol.EntityData.Leafs.Append("protocol-router-id", types.YLeaf{"ProtocolRouterId", protocol.ProtocolRouterId})
    protocol.EntityData.Leafs.Append("administrative-distance", types.YLeaf{"AdministrativeDistance", protocol.AdministrativeDistance})
    protocol.EntityData.Leafs.Append("administrative-distance-inter-area", types.YLeaf{"AdministrativeDistanceInterArea", protocol.AdministrativeDistanceInterArea})
    protocol.EntityData.Leafs.Append("administrative-distance-external", types.YLeaf{"AdministrativeDistanceExternal", protocol.AdministrativeDistanceExternal})
    protocol.EntityData.Leafs.Append("is-graceful-restart", types.YLeaf{"IsGracefulRestart", protocol.IsGracefulRestart})
    protocol.EntityData.Leafs.Append("distribute-list-in", types.YLeaf{"DistributeListIn", protocol.DistributeListIn})

    protocol.EntityData.YListKeys = []string {}

    return &(protocol.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3
// OSPFv3 summary
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // If true, the process is running as stanby role. The type is bool.
    IsRoleStandby interface{}

    // Role, V1/V2 Active/Standby. The type is interface{} with range:
    // 0..4294967295.
    Role interface{}

    // If true, NSR is enabled. The type is bool.
    IsNsrEnabled interface{}

    // Trigger RP Switchover on detectable process restart. The type is bool.
    IsNsrSwitchoverOnRestart interface{}

    // Stalled Router ID . The type is bool.
    IsRouterIdStalled interface{}

    // Opaque LSA capable . The type is bool.
    IsOpaqueCapable interface{}

    // If true, is an area border router. The type is bool.
    IsAreaBorderRouter interface{}

    // If true, is an AS border router. The type is bool.
    IsAsBorderRouter interface{}

    // If true, prefer type 7 LSAs over type 5. The type is bool.
    CapabilityPreferType7 interface{}

    // Redistribution metric . The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // If true, origin is by default . The type is bool.
    IsDefaultOriginated interface{}

    // If true, default always . The type is bool.
    IsDefaultAlways interface{}

    // Default metric . The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Default metric type . The type is Ospfv3DefaultMetric.
    DefaultMetricType interface{}

    // Default tag . The type is interface{} with range: 0..4294967295.
    DefaultTag interface{}

    // If true, is a default policy . The type is bool.
    IsDefaultPolicy interface{}

    // Default policy name . The type is string.
    DefaultPolicyName interface{}

    // Scheduling delay for SPF (ms). The type is interface{} with range:
    // 0..4294967295.
    SpfStartTime interface{}

    // Minimum delay time between SPF runs (ms). The type is interface{} with
    // range: 0..4294967295.
    SpfHoldTime interface{}

    // Maximum delay time between SPF runs (ms). The type is interface{} with
    // range: 0..4294967295.
    SpfMaximumTime interface{}

    // Initial LSA throttle delay (ms). The type is interface{} with range:
    // 0..4294967295.
    LsaStartTime interface{}

    // Second delay before generating next LSA (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaHoldTime interface{}

    // Maximum delay before generating an LSA (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaMaximumTime interface{}

    // Minimum time between LSA regeneration (ms). The type is interface{} with
    // range: 0..4294967295.
    MinimumLsaInterval interface{}

    // LSA refresh interval (sec). The type is interface{} with range:
    // 0..4294967295.
    LsaGroupInterval interface{}

    // LSA flood pacing timer (ms). The type is interface{} with range:
    // 0..4294967295.
    LsaFloodPacingInterval interface{}

    // LSA retransmission pacing timer (ms). The type is interface{} with range:
    // 0..4294967295.
    LsaRetransmissionPacingInterval interface{}

    // Number of AS scope LSAs. The type is interface{} with range: 0..4294967295.
    AsLsAs interface{}

    // Number of opaque LSAs. The type is interface{} with range: 0..4294967295.
    OpaqueLsas interface{}

    // Sum of opaque LSA checksum. The type is interface{} with range:
    // 0..4294967295.
    OpaqueLsaChecksum interface{}

    // Number of external and AS opaque LSAs with demand circut bit not set. The
    // type is interface{} with range: 0..4294967295.
    AsDcBitlessLsAs interface{}

    // Number of external and AS opaque LSAs with do not age set . The type is
    // interface{} with range: 0..4294967295.
    AsDoNotAgeLsAs interface{}

    // Number of areas. The type is interface{} with range: 0..65535.
    Areas interface{}

    // Number of normal areas. The type is interface{} with range: 0..65535.
    NormalAreas interface{}

    // Number of stub and total stub areas. The type is interface{} with range:
    // 0..65535.
    StubAreas interface{}

    // Number of NSSA areas. The type is interface{} with range: 0..65535.
    NssaAreas interface{}

    // Length of AS LSAs flood list. The type is interface{} with range:
    // 0..4294967295.
    AsLsaFloodListLength interface{}

    // If true, grace restart is enabled . The type is bool.
    IsGraceRestartEnabled interface{}

    // Length of time since the last NSF (s). The type is interface{} with range:
    // 0..4294967295.
    LastNsfTime interface{}

    // Grace time to resync . The type is interface{} with range: 0..4294967295.
    GraceResyncTime interface{}

    // Maximum number of interfaces. The type is interface{} with range:
    // 0..4294967295.
    MaximumInterfaces interface{}

    // Maximum number of paths. The type is interface{} with range: 0..4294967295.
    MaximumPaths interface{}

    // The number of redistributed prefixes allowed. The type is interface{} with
    // range: 0..4294967295.
    RedistributionLimit interface{}

    // When the number of redistributed prefixes reaches this threshold, a warning
    // message is issued . The type is interface{} with range: 0..4294967295.
    RedistributionThreshold interface{}

    // If true, auto cost is enabled. The type is bool.
    IsAutoCost interface{}

    // Reference Bandwdith. The type is interface{} with range: 0..4294967295.
    ReferenceBandwidth interface{}

    // Context name. The type is string with length: 0..32.
    ContextName interface{}

    // If true, snmp trap is enabled. The type is bool.
    SnmpTrapEnabled interface{}

    // Graceful shutdown state. The type is Ospfv3GracefulShutdownState.
    GracefulShutdownState interface{}

    // Domain ID information.
    DomainId Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId

    // Stub Router Information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter.
    StubRouter []*Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter

    // IPFRR-Tiebreakers list. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers.
    IpfrrTiebreakers []*Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers
}

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3) GetEntityData() *types.CommonEntityData {
    ospfv3.EntityData.YFilter = ospfv3.YFilter
    ospfv3.EntityData.YangName = "ospfv3"
    ospfv3.EntityData.BundleName = "cisco_ios_xr"
    ospfv3.EntityData.ParentYangName = "summary"
    ospfv3.EntityData.SegmentPath = "ospfv3"
    ospfv3.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/summary/" + ospfv3.EntityData.SegmentPath
    ospfv3.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ospfv3.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ospfv3.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ospfv3.EntityData.Children = types.NewOrderedMap()
    ospfv3.EntityData.Children.Append("domain-id", types.YChild{"DomainId", &ospfv3.DomainId})
    ospfv3.EntityData.Children.Append("stub-router", types.YChild{"StubRouter", nil})
    for i := range ospfv3.StubRouter {
        types.SetYListKey(ospfv3.StubRouter[i], i)
        ospfv3.EntityData.Children.Append(types.GetSegmentPath(ospfv3.StubRouter[i]), types.YChild{"StubRouter", ospfv3.StubRouter[i]})
    }
    ospfv3.EntityData.Children.Append("ipfrr-tiebreakers", types.YChild{"IpfrrTiebreakers", nil})
    for i := range ospfv3.IpfrrTiebreakers {
        types.SetYListKey(ospfv3.IpfrrTiebreakers[i], i)
        ospfv3.EntityData.Children.Append(types.GetSegmentPath(ospfv3.IpfrrTiebreakers[i]), types.YChild{"IpfrrTiebreakers", ospfv3.IpfrrTiebreakers[i]})
    }
    ospfv3.EntityData.Leafs = types.NewOrderedMap()
    ospfv3.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", ospfv3.RouterId})
    ospfv3.EntityData.Leafs.Append("is-role-standby", types.YLeaf{"IsRoleStandby", ospfv3.IsRoleStandby})
    ospfv3.EntityData.Leafs.Append("role", types.YLeaf{"Role", ospfv3.Role})
    ospfv3.EntityData.Leafs.Append("is-nsr-enabled", types.YLeaf{"IsNsrEnabled", ospfv3.IsNsrEnabled})
    ospfv3.EntityData.Leafs.Append("is-nsr-switchover-on-restart", types.YLeaf{"IsNsrSwitchoverOnRestart", ospfv3.IsNsrSwitchoverOnRestart})
    ospfv3.EntityData.Leafs.Append("is-router-id-stalled", types.YLeaf{"IsRouterIdStalled", ospfv3.IsRouterIdStalled})
    ospfv3.EntityData.Leafs.Append("is-opaque-capable", types.YLeaf{"IsOpaqueCapable", ospfv3.IsOpaqueCapable})
    ospfv3.EntityData.Leafs.Append("is-area-border-router", types.YLeaf{"IsAreaBorderRouter", ospfv3.IsAreaBorderRouter})
    ospfv3.EntityData.Leafs.Append("is-as-border-router", types.YLeaf{"IsAsBorderRouter", ospfv3.IsAsBorderRouter})
    ospfv3.EntityData.Leafs.Append("capability-prefer-type7", types.YLeaf{"CapabilityPreferType7", ospfv3.CapabilityPreferType7})
    ospfv3.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ospfv3.Metric})
    ospfv3.EntityData.Leafs.Append("is-default-originated", types.YLeaf{"IsDefaultOriginated", ospfv3.IsDefaultOriginated})
    ospfv3.EntityData.Leafs.Append("is-default-always", types.YLeaf{"IsDefaultAlways", ospfv3.IsDefaultAlways})
    ospfv3.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", ospfv3.DefaultMetric})
    ospfv3.EntityData.Leafs.Append("default-metric-type", types.YLeaf{"DefaultMetricType", ospfv3.DefaultMetricType})
    ospfv3.EntityData.Leafs.Append("default-tag", types.YLeaf{"DefaultTag", ospfv3.DefaultTag})
    ospfv3.EntityData.Leafs.Append("is-default-policy", types.YLeaf{"IsDefaultPolicy", ospfv3.IsDefaultPolicy})
    ospfv3.EntityData.Leafs.Append("default-policy-name", types.YLeaf{"DefaultPolicyName", ospfv3.DefaultPolicyName})
    ospfv3.EntityData.Leafs.Append("spf-start-time", types.YLeaf{"SpfStartTime", ospfv3.SpfStartTime})
    ospfv3.EntityData.Leafs.Append("spf-hold-time", types.YLeaf{"SpfHoldTime", ospfv3.SpfHoldTime})
    ospfv3.EntityData.Leafs.Append("spf-maximum-time", types.YLeaf{"SpfMaximumTime", ospfv3.SpfMaximumTime})
    ospfv3.EntityData.Leafs.Append("lsa-start-time", types.YLeaf{"LsaStartTime", ospfv3.LsaStartTime})
    ospfv3.EntityData.Leafs.Append("lsa-hold-time", types.YLeaf{"LsaHoldTime", ospfv3.LsaHoldTime})
    ospfv3.EntityData.Leafs.Append("lsa-maximum-time", types.YLeaf{"LsaMaximumTime", ospfv3.LsaMaximumTime})
    ospfv3.EntityData.Leafs.Append("minimum-lsa-interval", types.YLeaf{"MinimumLsaInterval", ospfv3.MinimumLsaInterval})
    ospfv3.EntityData.Leafs.Append("lsa-group-interval", types.YLeaf{"LsaGroupInterval", ospfv3.LsaGroupInterval})
    ospfv3.EntityData.Leafs.Append("lsa-flood-pacing-interval", types.YLeaf{"LsaFloodPacingInterval", ospfv3.LsaFloodPacingInterval})
    ospfv3.EntityData.Leafs.Append("lsa-retransmission-pacing-interval", types.YLeaf{"LsaRetransmissionPacingInterval", ospfv3.LsaRetransmissionPacingInterval})
    ospfv3.EntityData.Leafs.Append("as-ls-as", types.YLeaf{"AsLsAs", ospfv3.AsLsAs})
    ospfv3.EntityData.Leafs.Append("opaque-lsas", types.YLeaf{"OpaqueLsas", ospfv3.OpaqueLsas})
    ospfv3.EntityData.Leafs.Append("opaque-lsa-checksum", types.YLeaf{"OpaqueLsaChecksum", ospfv3.OpaqueLsaChecksum})
    ospfv3.EntityData.Leafs.Append("as-dc-bitless-ls-as", types.YLeaf{"AsDcBitlessLsAs", ospfv3.AsDcBitlessLsAs})
    ospfv3.EntityData.Leafs.Append("as-do-not-age-ls-as", types.YLeaf{"AsDoNotAgeLsAs", ospfv3.AsDoNotAgeLsAs})
    ospfv3.EntityData.Leafs.Append("areas", types.YLeaf{"Areas", ospfv3.Areas})
    ospfv3.EntityData.Leafs.Append("normal-areas", types.YLeaf{"NormalAreas", ospfv3.NormalAreas})
    ospfv3.EntityData.Leafs.Append("stub-areas", types.YLeaf{"StubAreas", ospfv3.StubAreas})
    ospfv3.EntityData.Leafs.Append("nssa-areas", types.YLeaf{"NssaAreas", ospfv3.NssaAreas})
    ospfv3.EntityData.Leafs.Append("as-lsa-flood-list-length", types.YLeaf{"AsLsaFloodListLength", ospfv3.AsLsaFloodListLength})
    ospfv3.EntityData.Leafs.Append("is-grace-restart-enabled", types.YLeaf{"IsGraceRestartEnabled", ospfv3.IsGraceRestartEnabled})
    ospfv3.EntityData.Leafs.Append("last-nsf-time", types.YLeaf{"LastNsfTime", ospfv3.LastNsfTime})
    ospfv3.EntityData.Leafs.Append("grace-resync-time", types.YLeaf{"GraceResyncTime", ospfv3.GraceResyncTime})
    ospfv3.EntityData.Leafs.Append("maximum-interfaces", types.YLeaf{"MaximumInterfaces", ospfv3.MaximumInterfaces})
    ospfv3.EntityData.Leafs.Append("maximum-paths", types.YLeaf{"MaximumPaths", ospfv3.MaximumPaths})
    ospfv3.EntityData.Leafs.Append("redistribution-limit", types.YLeaf{"RedistributionLimit", ospfv3.RedistributionLimit})
    ospfv3.EntityData.Leafs.Append("redistribution-threshold", types.YLeaf{"RedistributionThreshold", ospfv3.RedistributionThreshold})
    ospfv3.EntityData.Leafs.Append("is-auto-cost", types.YLeaf{"IsAutoCost", ospfv3.IsAutoCost})
    ospfv3.EntityData.Leafs.Append("reference-bandwidth", types.YLeaf{"ReferenceBandwidth", ospfv3.ReferenceBandwidth})
    ospfv3.EntityData.Leafs.Append("context-name", types.YLeaf{"ContextName", ospfv3.ContextName})
    ospfv3.EntityData.Leafs.Append("snmp-trap-enabled", types.YLeaf{"SnmpTrapEnabled", ospfv3.SnmpTrapEnabled})
    ospfv3.EntityData.Leafs.Append("graceful-shutdown-state", types.YLeaf{"GracefulShutdownState", ospfv3.GracefulShutdownState})

    ospfv3.EntityData.YListKeys = []string {}

    return &(ospfv3.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId
// Domain ID information
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Primary Domain ID.
    PrimaryDomainId Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId

    // List of secondary domain IDs. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId.
    SecondaryDomainId []*Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId
}

func (domainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId) GetEntityData() *types.CommonEntityData {
    domainId.EntityData.YFilter = domainId.YFilter
    domainId.EntityData.YangName = "domain-id"
    domainId.EntityData.BundleName = "cisco_ios_xr"
    domainId.EntityData.ParentYangName = "ospfv3"
    domainId.EntityData.SegmentPath = "domain-id"
    domainId.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/summary/ospfv3/" + domainId.EntityData.SegmentPath
    domainId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    domainId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    domainId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    domainId.EntityData.Children = types.NewOrderedMap()
    domainId.EntityData.Children.Append("primary-domain-id", types.YChild{"PrimaryDomainId", &domainId.PrimaryDomainId})
    domainId.EntityData.Children.Append("secondary-domain-id", types.YChild{"SecondaryDomainId", nil})
    for i := range domainId.SecondaryDomainId {
        types.SetYListKey(domainId.SecondaryDomainId[i], i)
        domainId.EntityData.Children.Append(types.GetSegmentPath(domainId.SecondaryDomainId[i]), types.YChild{"SecondaryDomainId", domainId.SecondaryDomainId[i]})
    }
    domainId.EntityData.Leafs = types.NewOrderedMap()

    domainId.EntityData.YListKeys = []string {}

    return &(domainId.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId
// Primary Domain ID
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Domain ID Type. The type is interface{} with range: 0..65535.
    DomainIdType interface{}

    // Domain ID value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    DomainIdValue interface{}
}

func (primaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetEntityData() *types.CommonEntityData {
    primaryDomainId.EntityData.YFilter = primaryDomainId.YFilter
    primaryDomainId.EntityData.YangName = "primary-domain-id"
    primaryDomainId.EntityData.BundleName = "cisco_ios_xr"
    primaryDomainId.EntityData.ParentYangName = "domain-id"
    primaryDomainId.EntityData.SegmentPath = "primary-domain-id"
    primaryDomainId.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/summary/ospfv3/domain-id/" + primaryDomainId.EntityData.SegmentPath
    primaryDomainId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    primaryDomainId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    primaryDomainId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    primaryDomainId.EntityData.Children = types.NewOrderedMap()
    primaryDomainId.EntityData.Leafs = types.NewOrderedMap()
    primaryDomainId.EntityData.Leafs.Append("domain-id-type", types.YLeaf{"DomainIdType", primaryDomainId.DomainIdType})
    primaryDomainId.EntityData.Leafs.Append("domain-id-value", types.YLeaf{"DomainIdValue", primaryDomainId.DomainIdValue})

    primaryDomainId.EntityData.YListKeys = []string {}

    return &(primaryDomainId.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId
// List of secondary domain IDs
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Domain ID Type. The type is interface{} with range: 0..65535.
    DomainIdType interface{}

    // Domain ID value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    DomainIdValue interface{}
}

func (secondaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetEntityData() *types.CommonEntityData {
    secondaryDomainId.EntityData.YFilter = secondaryDomainId.YFilter
    secondaryDomainId.EntityData.YangName = "secondary-domain-id"
    secondaryDomainId.EntityData.BundleName = "cisco_ios_xr"
    secondaryDomainId.EntityData.ParentYangName = "domain-id"
    secondaryDomainId.EntityData.SegmentPath = "secondary-domain-id" + types.AddNoKeyToken(secondaryDomainId)
    secondaryDomainId.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/summary/ospfv3/domain-id/" + secondaryDomainId.EntityData.SegmentPath
    secondaryDomainId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    secondaryDomainId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    secondaryDomainId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    secondaryDomainId.EntityData.Children = types.NewOrderedMap()
    secondaryDomainId.EntityData.Leafs = types.NewOrderedMap()
    secondaryDomainId.EntityData.Leafs.Append("domain-id-type", types.YLeaf{"DomainIdType", secondaryDomainId.DomainIdType})
    secondaryDomainId.EntityData.Leafs.Append("domain-id-value", types.YLeaf{"DomainIdValue", secondaryDomainId.DomainIdValue})

    secondaryDomainId.EntityData.YListKeys = []string {}

    return &(secondaryDomainId.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter
// Stub Router Information
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Stub router mode. The type is StubRouterMode.
    Mode interface{}

    // If true, stub router mode is active. The type is bool.
    Active interface{}

    // Remaining time (in seconds) in stub router mode. The type is interface{}
    // with range: 0..4294967295. Units are second.
    RemainingTime interface{}

    // Reason for entering stub router mode. The type is StubRouterTrigger.
    SetReason interface{}

    // Reason for clearing stub router condition. The type is
    // StubRouterExitReason.
    UnsetReason interface{}

    // If true, advertise maximum metric for stub links. The type is bool.
    IncludeStubLinks interface{}

    // Metric for summary LSAs in max-metric mode. The type is interface{} with
    // range: 0..4294967295.
    SummaryLsaMetric interface{}

    // Metric for external LSAs in max-metric mode. The type is interface{} with
    // range: 0..4294967295.
    ExternalLsaMetric interface{}

    // Reason for being in ABR off mode. The type is StubRouterAbrOffReason.
    AbrOffReason interface{}

    // Timestamp (relative to 1970/1/1 00:00) when stub router condition was
    // cleared.
    UnsetTime Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime

    // Timestamp (relative to 1970/1/1 00:00) when stub router mode was activated.
    StartTime Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime

    // Timestamp (relative to 1970/1/1 00:00) when ABR duties were resumed.
    AbrResumeTime Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime

    // Triggers for entering stub router mode. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger.
    Trigger []*Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger
}

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter) GetEntityData() *types.CommonEntityData {
    stubRouter.EntityData.YFilter = stubRouter.YFilter
    stubRouter.EntityData.YangName = "stub-router"
    stubRouter.EntityData.BundleName = "cisco_ios_xr"
    stubRouter.EntityData.ParentYangName = "ospfv3"
    stubRouter.EntityData.SegmentPath = "stub-router" + types.AddNoKeyToken(stubRouter)
    stubRouter.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/summary/ospfv3/" + stubRouter.EntityData.SegmentPath
    stubRouter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stubRouter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stubRouter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stubRouter.EntityData.Children = types.NewOrderedMap()
    stubRouter.EntityData.Children.Append("unset-time", types.YChild{"UnsetTime", &stubRouter.UnsetTime})
    stubRouter.EntityData.Children.Append("start-time", types.YChild{"StartTime", &stubRouter.StartTime})
    stubRouter.EntityData.Children.Append("abr-resume-time", types.YChild{"AbrResumeTime", &stubRouter.AbrResumeTime})
    stubRouter.EntityData.Children.Append("trigger", types.YChild{"Trigger", nil})
    for i := range stubRouter.Trigger {
        types.SetYListKey(stubRouter.Trigger[i], i)
        stubRouter.EntityData.Children.Append(types.GetSegmentPath(stubRouter.Trigger[i]), types.YChild{"Trigger", stubRouter.Trigger[i]})
    }
    stubRouter.EntityData.Leafs = types.NewOrderedMap()
    stubRouter.EntityData.Leafs.Append("mode", types.YLeaf{"Mode", stubRouter.Mode})
    stubRouter.EntityData.Leafs.Append("active", types.YLeaf{"Active", stubRouter.Active})
    stubRouter.EntityData.Leafs.Append("remaining-time", types.YLeaf{"RemainingTime", stubRouter.RemainingTime})
    stubRouter.EntityData.Leafs.Append("set-reason", types.YLeaf{"SetReason", stubRouter.SetReason})
    stubRouter.EntityData.Leafs.Append("unset-reason", types.YLeaf{"UnsetReason", stubRouter.UnsetReason})
    stubRouter.EntityData.Leafs.Append("include-stub-links", types.YLeaf{"IncludeStubLinks", stubRouter.IncludeStubLinks})
    stubRouter.EntityData.Leafs.Append("summary-lsa-metric", types.YLeaf{"SummaryLsaMetric", stubRouter.SummaryLsaMetric})
    stubRouter.EntityData.Leafs.Append("external-lsa-metric", types.YLeaf{"ExternalLsaMetric", stubRouter.ExternalLsaMetric})
    stubRouter.EntityData.Leafs.Append("abr-off-reason", types.YLeaf{"AbrOffReason", stubRouter.AbrOffReason})

    stubRouter.EntityData.YListKeys = []string {}

    return &(stubRouter.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime
// Timestamp (relative to 1970/1/1 00:00) when stub
// router condition was cleared
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime) GetEntityData() *types.CommonEntityData {
    unsetTime.EntityData.YFilter = unsetTime.YFilter
    unsetTime.EntityData.YangName = "unset-time"
    unsetTime.EntityData.BundleName = "cisco_ios_xr"
    unsetTime.EntityData.ParentYangName = "stub-router"
    unsetTime.EntityData.SegmentPath = "unset-time"
    unsetTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/summary/ospfv3/stub-router/" + unsetTime.EntityData.SegmentPath
    unsetTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unsetTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unsetTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unsetTime.EntityData.Children = types.NewOrderedMap()
    unsetTime.EntityData.Leafs = types.NewOrderedMap()
    unsetTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", unsetTime.Second})
    unsetTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", unsetTime.Nanosecond})

    unsetTime.EntityData.YListKeys = []string {}

    return &(unsetTime.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime
// Timestamp (relative to 1970/1/1 00:00) when stub
// router mode was activated
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime) GetEntityData() *types.CommonEntityData {
    startTime.EntityData.YFilter = startTime.YFilter
    startTime.EntityData.YangName = "start-time"
    startTime.EntityData.BundleName = "cisco_ios_xr"
    startTime.EntityData.ParentYangName = "stub-router"
    startTime.EntityData.SegmentPath = "start-time"
    startTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/summary/ospfv3/stub-router/" + startTime.EntityData.SegmentPath
    startTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    startTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    startTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    startTime.EntityData.Children = types.NewOrderedMap()
    startTime.EntityData.Leafs = types.NewOrderedMap()
    startTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", startTime.Second})
    startTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", startTime.Nanosecond})

    startTime.EntityData.YListKeys = []string {}

    return &(startTime.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime
// Timestamp (relative to 1970/1/1 00:00) when ABR
// duties were resumed
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (abrResumeTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetEntityData() *types.CommonEntityData {
    abrResumeTime.EntityData.YFilter = abrResumeTime.YFilter
    abrResumeTime.EntityData.YangName = "abr-resume-time"
    abrResumeTime.EntityData.BundleName = "cisco_ios_xr"
    abrResumeTime.EntityData.ParentYangName = "stub-router"
    abrResumeTime.EntityData.SegmentPath = "abr-resume-time"
    abrResumeTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/summary/ospfv3/stub-router/" + abrResumeTime.EntityData.SegmentPath
    abrResumeTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    abrResumeTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    abrResumeTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    abrResumeTime.EntityData.Children = types.NewOrderedMap()
    abrResumeTime.EntityData.Leafs = types.NewOrderedMap()
    abrResumeTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", abrResumeTime.Second})
    abrResumeTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", abrResumeTime.Nanosecond})

    abrResumeTime.EntityData.YListKeys = []string {}

    return &(abrResumeTime.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger
// Triggers for entering stub router mode
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Stub Router Trigger type. The type is StubRouterTrigger.
    Trigger interface{}

    // If true, stub router is terminated when BGP converges. The type is bool.
    WaitForBgp interface{}

    // Reason for clearing stub router condition. The type is
    // StubRouterExitReason.
    UnsetReason interface{}

    // Time (in seconds) to stay in stub router mode. The type is interface{} with
    // range: 0..4294967295. Units are second.
    Time interface{}

    // Timestamp (relative to 1970/1/1 00:00) when stub router condition was
    // cleared.
    UnsetTime Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime

    // Timestamp (relative to 1970/1/1 00:00) when stub router mode was activated.
    StartTime Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime
}

func (trigger *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger) GetEntityData() *types.CommonEntityData {
    trigger.EntityData.YFilter = trigger.YFilter
    trigger.EntityData.YangName = "trigger"
    trigger.EntityData.BundleName = "cisco_ios_xr"
    trigger.EntityData.ParentYangName = "stub-router"
    trigger.EntityData.SegmentPath = "trigger" + types.AddNoKeyToken(trigger)
    trigger.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/summary/ospfv3/stub-router/" + trigger.EntityData.SegmentPath
    trigger.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trigger.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trigger.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trigger.EntityData.Children = types.NewOrderedMap()
    trigger.EntityData.Children.Append("unset-time", types.YChild{"UnsetTime", &trigger.UnsetTime})
    trigger.EntityData.Children.Append("start-time", types.YChild{"StartTime", &trigger.StartTime})
    trigger.EntityData.Leafs = types.NewOrderedMap()
    trigger.EntityData.Leafs.Append("trigger", types.YLeaf{"Trigger", trigger.Trigger})
    trigger.EntityData.Leafs.Append("wait-for-bgp", types.YLeaf{"WaitForBgp", trigger.WaitForBgp})
    trigger.EntityData.Leafs.Append("unset-reason", types.YLeaf{"UnsetReason", trigger.UnsetReason})
    trigger.EntityData.Leafs.Append("time", types.YLeaf{"Time", trigger.Time})

    trigger.EntityData.YListKeys = []string {}

    return &(trigger.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime
// Timestamp (relative to 1970/1/1 00:00) when stub
// router condition was cleared
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetEntityData() *types.CommonEntityData {
    unsetTime.EntityData.YFilter = unsetTime.YFilter
    unsetTime.EntityData.YangName = "unset-time"
    unsetTime.EntityData.BundleName = "cisco_ios_xr"
    unsetTime.EntityData.ParentYangName = "trigger"
    unsetTime.EntityData.SegmentPath = "unset-time"
    unsetTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/summary/ospfv3/stub-router/trigger/" + unsetTime.EntityData.SegmentPath
    unsetTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unsetTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unsetTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unsetTime.EntityData.Children = types.NewOrderedMap()
    unsetTime.EntityData.Leafs = types.NewOrderedMap()
    unsetTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", unsetTime.Second})
    unsetTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", unsetTime.Nanosecond})

    unsetTime.EntityData.YListKeys = []string {}

    return &(unsetTime.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime
// Timestamp (relative to 1970/1/1 00:00) when stub
// router mode was activated
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetEntityData() *types.CommonEntityData {
    startTime.EntityData.YFilter = startTime.YFilter
    startTime.EntityData.YangName = "start-time"
    startTime.EntityData.BundleName = "cisco_ios_xr"
    startTime.EntityData.ParentYangName = "trigger"
    startTime.EntityData.SegmentPath = "start-time"
    startTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/summary/ospfv3/stub-router/trigger/" + startTime.EntityData.SegmentPath
    startTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    startTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    startTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    startTime.EntityData.Children = types.NewOrderedMap()
    startTime.EntityData.Leafs = types.NewOrderedMap()
    startTime.EntityData.Leafs.Append("second", types.YLeaf{"Second", startTime.Second})
    startTime.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", startTime.Nanosecond})

    startTime.EntityData.YListKeys = []string {}

    return &(startTime.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers
// IPFRR-Tiebreakers list
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Tiebreaker Type. The type is IpfrrTbrkr.
    TiebreakerType interface{}

    // Tiebreaker Index. The type is interface{} with range: 0..4294967295.
    TiebreakerIndex interface{}
}

func (ipfrrTiebreakers *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers) GetEntityData() *types.CommonEntityData {
    ipfrrTiebreakers.EntityData.YFilter = ipfrrTiebreakers.YFilter
    ipfrrTiebreakers.EntityData.YangName = "ipfrr-tiebreakers"
    ipfrrTiebreakers.EntityData.BundleName = "cisco_ios_xr"
    ipfrrTiebreakers.EntityData.ParentYangName = "ospfv3"
    ipfrrTiebreakers.EntityData.SegmentPath = "ipfrr-tiebreakers" + types.AddNoKeyToken(ipfrrTiebreakers)
    ipfrrTiebreakers.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/summary/ospfv3/" + ipfrrTiebreakers.EntityData.SegmentPath
    ipfrrTiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipfrrTiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipfrrTiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipfrrTiebreakers.EntityData.Children = types.NewOrderedMap()
    ipfrrTiebreakers.EntityData.Leafs = types.NewOrderedMap()
    ipfrrTiebreakers.EntityData.Leafs.Append("tiebreaker-type", types.YLeaf{"TiebreakerType", ipfrrTiebreakers.TiebreakerType})
    ipfrrTiebreakers.EntityData.Leafs.Append("tiebreaker-index", types.YLeaf{"TiebreakerIndex", ipfrrTiebreakers.TiebreakerIndex})

    ipfrrTiebreakers.EntityData.YListKeys = []string {}

    return &(ipfrrTiebreakers.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_Summary_Route
// OSPFv3 route summary
type Ospfv3_Processes_Process_DefaultVrf_Summary_Route struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route summary of a route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Intra route summary . The type is interface{} with range: 0..4294967295.
    IntraAreaRoute interface{}

    // Inter route summary . The type is interface{} with range: 0..4294967295.
    InterAreaRoute interface{}

    // Extern 1 route summary . The type is interface{} with range: 0..4294967295.
    ExternOneRoute interface{}

    // Extern 2 route summary . The type is interface{} with range: 0..4294967295.
    ExternTwoRoute interface{}

    // NSSA 1 route summary . The type is interface{} with range: 0..4294967295.
    NssaOneRoute interface{}

    // NSSA 2 route summary . The type is interface{} with range: 0..4294967295.
    NssaTwoRoute interface{}

    // Total route summary . The type is interface{} with range: 0..4294967295.
    TotalSentRoute interface{}

    // Route connected . The type is interface{} with range: 0..4294967295.
    RouteConnected interface{}

    // Redistribution route summary . The type is interface{} with range:
    // 0..4294967295.
    RedistributionRoute interface{}

    // Total route received summary. The type is interface{} with range:
    // 0..4294967295.
    TotalReceivedRoute interface{}
}

func (route *Ospfv3_Processes_Process_DefaultVrf_Summary_Route) GetEntityData() *types.CommonEntityData {
    route.EntityData.YFilter = route.YFilter
    route.EntityData.YangName = "route"
    route.EntityData.BundleName = "cisco_ios_xr"
    route.EntityData.ParentYangName = "summary"
    route.EntityData.SegmentPath = "route"
    route.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/summary/" + route.EntityData.SegmentPath
    route.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    route.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    route.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    route.EntityData.Children = types.NewOrderedMap()
    route.EntityData.Leafs = types.NewOrderedMap()
    route.EntityData.Leafs.Append("route-id", types.YLeaf{"RouteId", route.RouteId})
    route.EntityData.Leafs.Append("intra-area-route", types.YLeaf{"IntraAreaRoute", route.IntraAreaRoute})
    route.EntityData.Leafs.Append("inter-area-route", types.YLeaf{"InterAreaRoute", route.InterAreaRoute})
    route.EntityData.Leafs.Append("extern-one-route", types.YLeaf{"ExternOneRoute", route.ExternOneRoute})
    route.EntityData.Leafs.Append("extern-two-route", types.YLeaf{"ExternTwoRoute", route.ExternTwoRoute})
    route.EntityData.Leafs.Append("nssa-one-route", types.YLeaf{"NssaOneRoute", route.NssaOneRoute})
    route.EntityData.Leafs.Append("nssa-two-route", types.YLeaf{"NssaTwoRoute", route.NssaTwoRoute})
    route.EntityData.Leafs.Append("total-sent-route", types.YLeaf{"TotalSentRoute", route.TotalSentRoute})
    route.EntityData.Leafs.Append("route-connected", types.YLeaf{"RouteConnected", route.RouteConnected})
    route.EntityData.Leafs.Append("redistribution-route", types.YLeaf{"RedistributionRoute", route.RedistributionRoute})
    route.EntityData.Leafs.Append("total-received-route", types.YLeaf{"TotalReceivedRoute", route.TotalReceivedRoute})

    route.EntityData.YListKeys = []string {}

    return &(route.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable
// OSPFv3 retransmission list information table for
// all areas
type Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 retransmission list information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission.
    Retransmission []*Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission
}

func (retransmissionListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable) GetEntityData() *types.CommonEntityData {
    retransmissionListProcessTable.EntityData.YFilter = retransmissionListProcessTable.YFilter
    retransmissionListProcessTable.EntityData.YangName = "retransmission-list-process-table"
    retransmissionListProcessTable.EntityData.BundleName = "cisco_ios_xr"
    retransmissionListProcessTable.EntityData.ParentYangName = "default-vrf"
    retransmissionListProcessTable.EntityData.SegmentPath = "retransmission-list-process-table"
    retransmissionListProcessTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + retransmissionListProcessTable.EntityData.SegmentPath
    retransmissionListProcessTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionListProcessTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionListProcessTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionListProcessTable.EntityData.Children = types.NewOrderedMap()
    retransmissionListProcessTable.EntityData.Children.Append("retransmission", types.YChild{"Retransmission", nil})
    for i := range retransmissionListProcessTable.Retransmission {
        types.SetYListKey(retransmissionListProcessTable.Retransmission[i], i)
        retransmissionListProcessTable.EntityData.Children.Append(types.GetSegmentPath(retransmissionListProcessTable.Retransmission[i]), types.YChild{"Retransmission", retransmissionListProcessTable.Retransmission[i]})
    }
    retransmissionListProcessTable.EntityData.Leafs = types.NewOrderedMap()

    retransmissionListProcessTable.EntityData.YListKeys = []string {}

    return &(retransmissionListProcessTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission
// OSPFv3 retransmission list information
type Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RetransmissionNeighborAddress interface{}

    // If true, virtual link is retransmitted . The type is bool.
    IsRetransmissionvirtualLink interface{}

    // Retransmission virtual link ID . The type is interface{} with range:
    // 0..4294967295.
    RetransmissionvirtualLinkId interface{}

    // If true, sham link is retransmitted . The type is bool.
    IsRetransmissionShamLink interface{}

    // Retransmission sham link ID . The type is interface{} with range:
    // 0..4294967295.
    RetransmissionShamLinkId interface{}

    // Amount of time remaining on retransmission timer (ms). The type is
    // interface{} with range: 0..4294967295.
    RetransmissionTimer interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    RetransmissionLength interface{}

    // List of virtual link scope entries . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb.
    RetransmissionvirtualLinkDb []*Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb

    // List of area scope entries. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb.
    RetransmissionAreaDb []*Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb

    // List of AS scope entries. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb.
    RetransmissionAsdb []*Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb
}

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission) GetEntityData() *types.CommonEntityData {
    retransmission.EntityData.YFilter = retransmission.YFilter
    retransmission.EntityData.YangName = "retransmission"
    retransmission.EntityData.BundleName = "cisco_ios_xr"
    retransmission.EntityData.ParentYangName = "retransmission-list-process-table"
    retransmission.EntityData.SegmentPath = "retransmission" + types.AddNoKeyToken(retransmission)
    retransmission.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/retransmission-list-process-table/" + retransmission.EntityData.SegmentPath
    retransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmission.EntityData.Children = types.NewOrderedMap()
    retransmission.EntityData.Children.Append("retransmissionvirtual-link-db", types.YChild{"RetransmissionvirtualLinkDb", nil})
    for i := range retransmission.RetransmissionvirtualLinkDb {
        types.SetYListKey(retransmission.RetransmissionvirtualLinkDb[i], i)
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionvirtualLinkDb[i]), types.YChild{"RetransmissionvirtualLinkDb", retransmission.RetransmissionvirtualLinkDb[i]})
    }
    retransmission.EntityData.Children.Append("retransmission-area-db", types.YChild{"RetransmissionAreaDb", nil})
    for i := range retransmission.RetransmissionAreaDb {
        types.SetYListKey(retransmission.RetransmissionAreaDb[i], i)
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionAreaDb[i]), types.YChild{"RetransmissionAreaDb", retransmission.RetransmissionAreaDb[i]})
    }
    retransmission.EntityData.Children.Append("retransmission-asdb", types.YChild{"RetransmissionAsdb", nil})
    for i := range retransmission.RetransmissionAsdb {
        types.SetYListKey(retransmission.RetransmissionAsdb[i], i)
        retransmission.EntityData.Children.Append(types.GetSegmentPath(retransmission.RetransmissionAsdb[i]), types.YChild{"RetransmissionAsdb", retransmission.RetransmissionAsdb[i]})
    }
    retransmission.EntityData.Leafs = types.NewOrderedMap()
    retransmission.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", retransmission.InterfaceName})
    retransmission.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", retransmission.NeighborAddress})
    retransmission.EntityData.Leafs.Append("retransmission-neighbor-address", types.YLeaf{"RetransmissionNeighborAddress", retransmission.RetransmissionNeighborAddress})
    retransmission.EntityData.Leafs.Append("is-retransmissionvirtual-link", types.YLeaf{"IsRetransmissionvirtualLink", retransmission.IsRetransmissionvirtualLink})
    retransmission.EntityData.Leafs.Append("retransmissionvirtual-link-id", types.YLeaf{"RetransmissionvirtualLinkId", retransmission.RetransmissionvirtualLinkId})
    retransmission.EntityData.Leafs.Append("is-retransmission-sham-link", types.YLeaf{"IsRetransmissionShamLink", retransmission.IsRetransmissionShamLink})
    retransmission.EntityData.Leafs.Append("retransmission-sham-link-id", types.YLeaf{"RetransmissionShamLinkId", retransmission.RetransmissionShamLinkId})
    retransmission.EntityData.Leafs.Append("retransmission-timer", types.YLeaf{"RetransmissionTimer", retransmission.RetransmissionTimer})
    retransmission.EntityData.Leafs.Append("retransmission-length", types.YLeaf{"RetransmissionLength", retransmission.RetransmissionLength})

    retransmission.EntityData.YListKeys = []string {}

    return &(retransmission.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb
// List of virtual link scope entries 
type Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetEntityData() *types.CommonEntityData {
    retransmissionvirtualLinkDb.EntityData.YFilter = retransmissionvirtualLinkDb.YFilter
    retransmissionvirtualLinkDb.EntityData.YangName = "retransmissionvirtual-link-db"
    retransmissionvirtualLinkDb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionvirtualLinkDb.EntityData.ParentYangName = "retransmission"
    retransmissionvirtualLinkDb.EntityData.SegmentPath = "retransmissionvirtual-link-db" + types.AddNoKeyToken(retransmissionvirtualLinkDb)
    retransmissionvirtualLinkDb.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/retransmission-list-process-table/retransmission/" + retransmissionvirtualLinkDb.EntityData.SegmentPath
    retransmissionvirtualLinkDb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionvirtualLinkDb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionvirtualLinkDb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionvirtualLinkDb.EntityData.Children = types.NewOrderedMap()
    retransmissionvirtualLinkDb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionvirtualLinkDb.HeaderLsaType})
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionvirtualLinkDb.HeaderLsaAge})
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", retransmissionvirtualLinkDb.HeaderLsaId})
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionvirtualLinkDb.HeaderAdvertisingRouter})
    retransmissionvirtualLinkDb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionvirtualLinkDb.HeaderSequenceNumber})

    retransmissionvirtualLinkDb.EntityData.YListKeys = []string {}

    return &(retransmissionvirtualLinkDb.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb
// List of area scope entries
type Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetEntityData() *types.CommonEntityData {
    retransmissionAreaDb.EntityData.YFilter = retransmissionAreaDb.YFilter
    retransmissionAreaDb.EntityData.YangName = "retransmission-area-db"
    retransmissionAreaDb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionAreaDb.EntityData.ParentYangName = "retransmission"
    retransmissionAreaDb.EntityData.SegmentPath = "retransmission-area-db" + types.AddNoKeyToken(retransmissionAreaDb)
    retransmissionAreaDb.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/retransmission-list-process-table/retransmission/" + retransmissionAreaDb.EntityData.SegmentPath
    retransmissionAreaDb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionAreaDb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionAreaDb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionAreaDb.EntityData.Children = types.NewOrderedMap()
    retransmissionAreaDb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionAreaDb.HeaderLsaType})
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionAreaDb.HeaderLsaAge})
    retransmissionAreaDb.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", retransmissionAreaDb.HeaderLsaId})
    retransmissionAreaDb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionAreaDb.HeaderAdvertisingRouter})
    retransmissionAreaDb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionAreaDb.HeaderSequenceNumber})

    retransmissionAreaDb.EntityData.YListKeys = []string {}

    return &(retransmissionAreaDb.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb
// List of AS scope entries
type Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetEntityData() *types.CommonEntityData {
    retransmissionAsdb.EntityData.YFilter = retransmissionAsdb.YFilter
    retransmissionAsdb.EntityData.YangName = "retransmission-asdb"
    retransmissionAsdb.EntityData.BundleName = "cisco_ios_xr"
    retransmissionAsdb.EntityData.ParentYangName = "retransmission"
    retransmissionAsdb.EntityData.SegmentPath = "retransmission-asdb" + types.AddNoKeyToken(retransmissionAsdb)
    retransmissionAsdb.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/retransmission-list-process-table/retransmission/" + retransmissionAsdb.EntityData.SegmentPath
    retransmissionAsdb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retransmissionAsdb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retransmissionAsdb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retransmissionAsdb.EntityData.Children = types.NewOrderedMap()
    retransmissionAsdb.EntityData.Leafs = types.NewOrderedMap()
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-type", types.YLeaf{"HeaderLsaType", retransmissionAsdb.HeaderLsaType})
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-age", types.YLeaf{"HeaderLsaAge", retransmissionAsdb.HeaderLsaAge})
    retransmissionAsdb.EntityData.Leafs.Append("header-lsa-id", types.YLeaf{"HeaderLsaId", retransmissionAsdb.HeaderLsaId})
    retransmissionAsdb.EntityData.Leafs.Append("header-advertising-router", types.YLeaf{"HeaderAdvertisingRouter", retransmissionAsdb.HeaderAdvertisingRouter})
    retransmissionAsdb.EntityData.Leafs.Append("header-sequence-number", types.YLeaf{"HeaderSequenceNumber", retransmissionAsdb.HeaderSequenceNumber})

    retransmissionAsdb.EntityData.YListKeys = []string {}

    return &(retransmissionAsdb.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_BadChecksums
// Bad Checksum Packets information table
type Ospfv3_Processes_Process_DefaultVrf_BadChecksums struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bad Checksum Packet information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum.
    BadChecksum []*Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum
}

func (badChecksums *Ospfv3_Processes_Process_DefaultVrf_BadChecksums) GetEntityData() *types.CommonEntityData {
    badChecksums.EntityData.YFilter = badChecksums.YFilter
    badChecksums.EntityData.YangName = "bad-checksums"
    badChecksums.EntityData.BundleName = "cisco_ios_xr"
    badChecksums.EntityData.ParentYangName = "default-vrf"
    badChecksums.EntityData.SegmentPath = "bad-checksums"
    badChecksums.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + badChecksums.EntityData.SegmentPath
    badChecksums.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    badChecksums.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    badChecksums.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    badChecksums.EntityData.Children = types.NewOrderedMap()
    badChecksums.EntityData.Children.Append("bad-checksum", types.YChild{"BadChecksum", nil})
    for i := range badChecksums.BadChecksum {
        badChecksums.EntityData.Children.Append(types.GetSegmentPath(badChecksums.BadChecksum[i]), types.YChild{"BadChecksum", badChecksums.BadChecksum[i]})
    }
    badChecksums.EntityData.Leafs = types.NewOrderedMap()

    badChecksums.EntityData.YListKeys = []string {}

    return &(badChecksums.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum
// Bad Checksum Packet information
type Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Bad Checksum Packets number. The type is
    // interface{} with range: 0..9.
    PacketNumber interface{}

    // Received Checksum. The type is interface{} with range: 0..65535.
    ReceivedChecksum interface{}

    // Computed Checksum. The type is interface{} with range: 0..65535.
    ComputedChecksum interface{}

    // Received Hexadecimal Data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ReceivedData interface{}

    // Packet Timestamp (relative to 1970/1/1 00:00).
    Timestamp Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp
}

func (badChecksum *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum) GetEntityData() *types.CommonEntityData {
    badChecksum.EntityData.YFilter = badChecksum.YFilter
    badChecksum.EntityData.YangName = "bad-checksum"
    badChecksum.EntityData.BundleName = "cisco_ios_xr"
    badChecksum.EntityData.ParentYangName = "bad-checksums"
    badChecksum.EntityData.SegmentPath = "bad-checksum" + types.AddKeyToken(badChecksum.PacketNumber, "packet-number")
    badChecksum.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/bad-checksums/" + badChecksum.EntityData.SegmentPath
    badChecksum.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    badChecksum.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    badChecksum.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    badChecksum.EntityData.Children = types.NewOrderedMap()
    badChecksum.EntityData.Children.Append("timestamp", types.YChild{"Timestamp", &badChecksum.Timestamp})
    badChecksum.EntityData.Leafs = types.NewOrderedMap()
    badChecksum.EntityData.Leafs.Append("packet-number", types.YLeaf{"PacketNumber", badChecksum.PacketNumber})
    badChecksum.EntityData.Leafs.Append("received-checksum", types.YLeaf{"ReceivedChecksum", badChecksum.ReceivedChecksum})
    badChecksum.EntityData.Leafs.Append("computed-checksum", types.YLeaf{"ComputedChecksum", badChecksum.ComputedChecksum})
    badChecksum.EntityData.Leafs.Append("received-data", types.YLeaf{"ReceivedData", badChecksum.ReceivedData})

    badChecksum.EntityData.YListKeys = []string {"PacketNumber"}

    return &(badChecksum.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp
// Packet Timestamp (relative to 1970/1/1 00:00)
type Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (timestamp *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp) GetEntityData() *types.CommonEntityData {
    timestamp.EntityData.YFilter = timestamp.YFilter
    timestamp.EntityData.YangName = "timestamp"
    timestamp.EntityData.BundleName = "cisco_ios_xr"
    timestamp.EntityData.ParentYangName = "bad-checksum"
    timestamp.EntityData.SegmentPath = "timestamp"
    timestamp.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/bad-checksums/bad-checksum/" + timestamp.EntityData.SegmentPath
    timestamp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timestamp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timestamp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timestamp.EntityData.Children = types.NewOrderedMap()
    timestamp.EntityData.Leafs = types.NewOrderedMap()
    timestamp.EntityData.Leafs.Append("second", types.YLeaf{"Second", timestamp.Second})
    timestamp.EntityData.Leafs.Append("nanosecond", types.YLeaf{"Nanosecond", timestamp.Nanosecond})

    timestamp.EntityData.YListKeys = []string {}

    return &(timestamp.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable
// Database summary table
type Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database Summary information.
    DatabaseSummary Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary
}

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable) GetEntityData() *types.CommonEntityData {
    databaseSummaryTable.EntityData.YFilter = databaseSummaryTable.YFilter
    databaseSummaryTable.EntityData.YangName = "database-summary-table"
    databaseSummaryTable.EntityData.BundleName = "cisco_ios_xr"
    databaseSummaryTable.EntityData.ParentYangName = "default-vrf"
    databaseSummaryTable.EntityData.SegmentPath = "database-summary-table"
    databaseSummaryTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + databaseSummaryTable.EntityData.SegmentPath
    databaseSummaryTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseSummaryTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseSummaryTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseSummaryTable.EntityData.Children = types.NewOrderedMap()
    databaseSummaryTable.EntityData.Children.Append("database-summary", types.YChild{"DatabaseSummary", &databaseSummaryTable.DatabaseSummary})
    databaseSummaryTable.EntityData.Leafs = types.NewOrderedMap()

    databaseSummaryTable.EntityData.YListKeys = []string {}

    return &(databaseSummaryTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary
// Database Summary information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Database router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DatabaseRouterId interface{}

    // If true, opaque database is capable . The type is bool.
    IsOpaqueDatabaseCapable interface{}

    // OSPFv3 database counters .
    DatabaseCounters Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters

    // OSPFv3 Area Database list . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase.
    AreaDatabase []*Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase
}

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary) GetEntityData() *types.CommonEntityData {
    databaseSummary.EntityData.YFilter = databaseSummary.YFilter
    databaseSummary.EntityData.YangName = "database-summary"
    databaseSummary.EntityData.BundleName = "cisco_ios_xr"
    databaseSummary.EntityData.ParentYangName = "database-summary-table"
    databaseSummary.EntityData.SegmentPath = "database-summary"
    databaseSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-summary-table/" + databaseSummary.EntityData.SegmentPath
    databaseSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseSummary.EntityData.Children = types.NewOrderedMap()
    databaseSummary.EntityData.Children.Append("database-counters", types.YChild{"DatabaseCounters", &databaseSummary.DatabaseCounters})
    databaseSummary.EntityData.Children.Append("area-database", types.YChild{"AreaDatabase", nil})
    for i := range databaseSummary.AreaDatabase {
        types.SetYListKey(databaseSummary.AreaDatabase[i], i)
        databaseSummary.EntityData.Children.Append(types.GetSegmentPath(databaseSummary.AreaDatabase[i]), types.YChild{"AreaDatabase", databaseSummary.AreaDatabase[i]})
    }
    databaseSummary.EntityData.Leafs = types.NewOrderedMap()
    databaseSummary.EntityData.Leafs.Append("database-router-id", types.YLeaf{"DatabaseRouterId", databaseSummary.DatabaseRouterId})
    databaseSummary.EntityData.Leafs.Append("is-opaque-database-capable", types.YLeaf{"IsOpaqueDatabaseCapable", databaseSummary.IsOpaqueDatabaseCapable})

    databaseSummary.EntityData.YListKeys = []string {}

    return &(databaseSummary.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters
// OSPFv3 database counters 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // lsa. The type is slice of interface{} with range: 0..4294967295.
    Lsa []interface{}

    // deleted lsa. The type is slice of interface{} with range: 0..4294967295.
    DeletedLsa []interface{}

    // max age lsa. The type is slice of interface{} with range: 0..4294967295.
    MaxAgeLsa []interface{}

    // lsa checksum. The type is slice of interface{} with range: 0..4294967295.
    LsaChecksum []interface{}
}

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetEntityData() *types.CommonEntityData {
    databaseCounters.EntityData.YFilter = databaseCounters.YFilter
    databaseCounters.EntityData.YangName = "database-counters"
    databaseCounters.EntityData.BundleName = "cisco_ios_xr"
    databaseCounters.EntityData.ParentYangName = "database-summary"
    databaseCounters.EntityData.SegmentPath = "database-counters"
    databaseCounters.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-summary-table/database-summary/" + databaseCounters.EntityData.SegmentPath
    databaseCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseCounters.EntityData.Children = types.NewOrderedMap()
    databaseCounters.EntityData.Leafs = types.NewOrderedMap()
    databaseCounters.EntityData.Leafs.Append("lsa", types.YLeaf{"Lsa", databaseCounters.Lsa})
    databaseCounters.EntityData.Leafs.Append("deleted-lsa", types.YLeaf{"DeletedLsa", databaseCounters.DeletedLsa})
    databaseCounters.EntityData.Leafs.Append("max-age-lsa", types.YLeaf{"MaxAgeLsa", databaseCounters.MaxAgeLsa})
    databaseCounters.EntityData.Leafs.Append("lsa-checksum", types.YLeaf{"LsaChecksum", databaseCounters.LsaChecksum})

    databaseCounters.EntityData.YListKeys = []string {}

    return &(databaseCounters.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase
// OSPFv3 Area Database list 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // Area database summary .
    AreaDatabaseSummary Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary
}

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetEntityData() *types.CommonEntityData {
    areaDatabase.EntityData.YFilter = areaDatabase.YFilter
    areaDatabase.EntityData.YangName = "area-database"
    areaDatabase.EntityData.BundleName = "cisco_ios_xr"
    areaDatabase.EntityData.ParentYangName = "database-summary"
    areaDatabase.EntityData.SegmentPath = "area-database" + types.AddNoKeyToken(areaDatabase)
    areaDatabase.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-summary-table/database-summary/" + areaDatabase.EntityData.SegmentPath
    areaDatabase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaDatabase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaDatabase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaDatabase.EntityData.Children = types.NewOrderedMap()
    areaDatabase.EntityData.Children.Append("area-database-summary", types.YChild{"AreaDatabaseSummary", &areaDatabase.AreaDatabaseSummary})
    areaDatabase.EntityData.Leafs = types.NewOrderedMap()
    areaDatabase.EntityData.Leafs.Append("lsa-area-id", types.YLeaf{"LsaAreaId", areaDatabase.LsaAreaId})

    areaDatabase.EntityData.YListKeys = []string {}

    return &(areaDatabase.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary
// Area database summary 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // lsa. The type is slice of interface{} with range: 0..4294967295.
    Lsa []interface{}

    // deleted lsa. The type is slice of interface{} with range: 0..4294967295.
    DeletedLsa []interface{}

    // max age lsa. The type is slice of interface{} with range: 0..4294967295.
    MaxAgeLsa []interface{}

    // lsa checksum. The type is slice of interface{} with range: 0..4294967295.
    LsaChecksum []interface{}
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetEntityData() *types.CommonEntityData {
    areaDatabaseSummary.EntityData.YFilter = areaDatabaseSummary.YFilter
    areaDatabaseSummary.EntityData.YangName = "area-database-summary"
    areaDatabaseSummary.EntityData.BundleName = "cisco_ios_xr"
    areaDatabaseSummary.EntityData.ParentYangName = "area-database"
    areaDatabaseSummary.EntityData.SegmentPath = "area-database-summary"
    areaDatabaseSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/database-summary-table/database-summary/area-database/" + areaDatabaseSummary.EntityData.SegmentPath
    areaDatabaseSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaDatabaseSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaDatabaseSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaDatabaseSummary.EntityData.Children = types.NewOrderedMap()
    areaDatabaseSummary.EntityData.Leafs = types.NewOrderedMap()
    areaDatabaseSummary.EntityData.Leafs.Append("lsa", types.YLeaf{"Lsa", areaDatabaseSummary.Lsa})
    areaDatabaseSummary.EntityData.Leafs.Append("deleted-lsa", types.YLeaf{"DeletedLsa", areaDatabaseSummary.DeletedLsa})
    areaDatabaseSummary.EntityData.Leafs.Append("max-age-lsa", types.YLeaf{"MaxAgeLsa", areaDatabaseSummary.MaxAgeLsa})
    areaDatabaseSummary.EntityData.Leafs.Append("lsa-checksum", types.YLeaf{"LsaChecksum", areaDatabaseSummary.LsaChecksum})

    areaDatabaseSummary.EntityData.YListKeys = []string {}

    return &(areaDatabaseSummary.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable
// OSPFv3 neighbor information table for all areas
type Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 neighbor detail information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor.
    Neighbor []*Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor
}

func (neighborProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable) GetEntityData() *types.CommonEntityData {
    neighborProcessTable.EntityData.YFilter = neighborProcessTable.YFilter
    neighborProcessTable.EntityData.YangName = "neighbor-process-table"
    neighborProcessTable.EntityData.BundleName = "cisco_ios_xr"
    neighborProcessTable.EntityData.ParentYangName = "default-vrf"
    neighborProcessTable.EntityData.SegmentPath = "neighbor-process-table"
    neighborProcessTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + neighborProcessTable.EntityData.SegmentPath
    neighborProcessTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborProcessTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborProcessTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborProcessTable.EntityData.Children = types.NewOrderedMap()
    neighborProcessTable.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighborProcessTable.Neighbor {
        types.SetYListKey(neighborProcessTable.Neighbor[i], i)
        neighborProcessTable.EntityData.Children.Append(types.GetSegmentPath(neighborProcessTable.Neighbor[i]), types.YChild{"Neighbor", neighborProcessTable.Neighbor[i]})
    }
    neighborProcessTable.EntityData.Leafs = types.NewOrderedMap()

    neighborProcessTable.EntityData.YListKeys = []string {}

    return &(neighborProcessTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor
// OSPFv3 neighbor detail information
type Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Neighbor interface ID. The type is interface{} with range: 0..4294967295.
    NeighborInterfaceId interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is Ospfv3NeighborState.
    NeighborState interface{}

    // Designated router . The type is string with length: 0..9.
    NeighborDesignatedRouter interface{}

    // Time until neighbor's dead timer expires (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborUpTime interface{}

    // Neighbor virtual link id . The type is interface{} with range:
    // 0..4294967295.
    NeighborVirtualLinkId interface{}

    // If true, neighbor is on a virtual link . The type is bool.
    IsNeighborVirtualLink interface{}

    // Neighbor sham link id . The type is interface{} with range: 0..4294967295.
    NeighborShamLinkId interface{}

    // If true, neighbor is on a sham link . The type is bool.
    IsNeighborShamLink interface{}

    // Detailed OSPFv3 neighbor information .
    NeighborDetail Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail

    // Neighbor BFD information.
    NeighborBfdInfo Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbor-process-table"
    neighbor.EntityData.SegmentPath = "neighbor" + types.AddNoKeyToken(neighbor)
    neighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/neighbor-process-table/" + neighbor.EntityData.SegmentPath
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("neighbor-detail", types.YChild{"NeighborDetail", &neighbor.NeighborDetail})
    neighbor.EntityData.Children.Append("neighbor-bfd-info", types.YChild{"NeighborBfdInfo", &neighbor.NeighborBfdInfo})
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", neighbor.InterfaceName})
    neighbor.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighbor.NeighborAddress})
    neighbor.EntityData.Leafs.Append("neighbor-address-xr", types.YLeaf{"NeighborAddressXr", neighbor.NeighborAddressXr})
    neighbor.EntityData.Leafs.Append("neighbor-interface-id", types.YLeaf{"NeighborInterfaceId", neighbor.NeighborInterfaceId})
    neighbor.EntityData.Leafs.Append("neighbor-dr-priority", types.YLeaf{"NeighborDrPriority", neighbor.NeighborDrPriority})
    neighbor.EntityData.Leafs.Append("neighbor-state", types.YLeaf{"NeighborState", neighbor.NeighborState})
    neighbor.EntityData.Leafs.Append("neighbor-designated-router", types.YLeaf{"NeighborDesignatedRouter", neighbor.NeighborDesignatedRouter})
    neighbor.EntityData.Leafs.Append("neighbor-dead-timer", types.YLeaf{"NeighborDeadTimer", neighbor.NeighborDeadTimer})
    neighbor.EntityData.Leafs.Append("neighbor-up-time", types.YLeaf{"NeighborUpTime", neighbor.NeighborUpTime})
    neighbor.EntityData.Leafs.Append("neighbor-virtual-link-id", types.YLeaf{"NeighborVirtualLinkId", neighbor.NeighborVirtualLinkId})
    neighbor.EntityData.Leafs.Append("is-neighbor-virtual-link", types.YLeaf{"IsNeighborVirtualLink", neighbor.IsNeighborVirtualLink})
    neighbor.EntityData.Leafs.Append("neighbor-sham-link-id", types.YLeaf{"NeighborShamLinkId", neighbor.NeighborShamLinkId})
    neighbor.EntityData.Leafs.Append("is-neighbor-sham-link", types.YLeaf{"IsNeighborShamLink", neighbor.IsNeighborShamLink})

    neighbor.EntityData.YListKeys = []string {}

    return &(neighbor.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail
// Detailed OSPFv3 neighbor information 
type Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of state changes . The type is interface{} with range: 0..65535.
    StateChanges interface{}

    // Cost of path to this neighbor . The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs . The type is bool.
    IsNeighborFiltered interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Ospfv3Interface.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // Remaining time when ignore timer is running . The type is interface{} with
    // range: 0..4294967295.
    NeighborIgnoreTimer interface{}

    // This is bitmask of neighbor's option field received . The type is
    // interface{} with range: 0..4294967295.
    NeighborOption interface{}

    // Number of pending events . The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // Retransmission information with this neighbor.
    NeighborRetransmission Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail) GetEntityData() *types.CommonEntityData {
    neighborDetail.EntityData.YFilter = neighborDetail.YFilter
    neighborDetail.EntityData.YangName = "neighbor-detail"
    neighborDetail.EntityData.BundleName = "cisco_ios_xr"
    neighborDetail.EntityData.ParentYangName = "neighbor"
    neighborDetail.EntityData.SegmentPath = "neighbor-detail"
    neighborDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/neighbor-process-table/neighbor/" + neighborDetail.EntityData.SegmentPath
    neighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetail.EntityData.Children = types.NewOrderedMap()
    neighborDetail.EntityData.Children.Append("neighbor-retransmission", types.YChild{"NeighborRetransmission", &neighborDetail.NeighborRetransmission})
    neighborDetail.EntityData.Leafs = types.NewOrderedMap()
    neighborDetail.EntityData.Leafs.Append("state-changes", types.YLeaf{"StateChanges", neighborDetail.StateChanges})
    neighborDetail.EntityData.Leafs.Append("neighbor-cost", types.YLeaf{"NeighborCost", neighborDetail.NeighborCost})
    neighborDetail.EntityData.Leafs.Append("is-neighbor-filtered", types.YLeaf{"IsNeighborFiltered", neighborDetail.IsNeighborFiltered})
    neighborDetail.EntityData.Leafs.Append("neighbor-designated-router-address", types.YLeaf{"NeighborDesignatedRouterAddress", neighborDetail.NeighborDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-backup-designated-router-address", types.YLeaf{"NeighborBackupDesignatedRouterAddress", neighborDetail.NeighborBackupDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("interface-type", types.YLeaf{"InterfaceType", neighborDetail.InterfaceType})
    neighborDetail.EntityData.Leafs.Append("poll-interval", types.YLeaf{"PollInterval", neighborDetail.PollInterval})
    neighborDetail.EntityData.Leafs.Append("next-poll-interval", types.YLeaf{"NextPollInterval", neighborDetail.NextPollInterval})
    neighborDetail.EntityData.Leafs.Append("neighbor-ignore-timer", types.YLeaf{"NeighborIgnoreTimer", neighborDetail.NeighborIgnoreTimer})
    neighborDetail.EntityData.Leafs.Append("neighbor-option", types.YLeaf{"NeighborOption", neighborDetail.NeighborOption})
    neighborDetail.EntityData.Leafs.Append("pending-events", types.YLeaf{"PendingEvents", neighborDetail.PendingEvents})

    neighborDetail.EntityData.YListKeys = []string {}

    return &(neighborDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission
// Retransmission information with this neighbor
type Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetEntityData() *types.CommonEntityData {
    neighborRetransmission.EntityData.YFilter = neighborRetransmission.YFilter
    neighborRetransmission.EntityData.YangName = "neighbor-retransmission"
    neighborRetransmission.EntityData.BundleName = "cisco_ios_xr"
    neighborRetransmission.EntityData.ParentYangName = "neighbor-detail"
    neighborRetransmission.EntityData.SegmentPath = "neighbor-retransmission"
    neighborRetransmission.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/neighbor-process-table/neighbor/neighbor-detail/" + neighborRetransmission.EntityData.SegmentPath
    neighborRetransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborRetransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborRetransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborRetransmission.EntityData.Children = types.NewOrderedMap()
    neighborRetransmission.EntityData.Leafs = types.NewOrderedMap()
    neighborRetransmission.EntityData.Leafs.Append("database-descriptor-retransmissions", types.YLeaf{"DatabaseDescriptorRetransmissions", neighborRetransmission.DatabaseDescriptorRetransmissions})
    neighborRetransmission.EntityData.Leafs.Append("area-flood-index", types.YLeaf{"AreaFloodIndex", neighborRetransmission.AreaFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", neighborRetransmission.AsFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-flood-index", types.YLeaf{"LinkFloodIndex", neighborRetransmission.LinkFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("neighbor-retransmissions", types.YLeaf{"NeighborRetransmissions", neighborRetransmission.NeighborRetransmissions})
    neighborRetransmission.EntityData.Leafs.Append("retransmissions", types.YLeaf{"Retransmissions", neighborRetransmission.Retransmissions})
    neighborRetransmission.EntityData.Leafs.Append("area-first-flood", types.YLeaf{"AreaFirstFlood", neighborRetransmission.AreaFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("area-first-flood-index", types.YLeaf{"AreaFirstFloodIndex", neighborRetransmission.AreaFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-first-flood", types.YLeaf{"AsFirstFlood", neighborRetransmission.AsFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("as-first-flood-index", types.YLeaf{"AsFirstFloodIndex", neighborRetransmission.AsFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-first-flood", types.YLeaf{"LinkFirstFlood", neighborRetransmission.LinkFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("link-first-flood-index", types.YLeaf{"LinkFirstFloodIndex", neighborRetransmission.LinkFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("area-next-flood", types.YLeaf{"AreaNextFlood", neighborRetransmission.AreaNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("area-next-flood-index", types.YLeaf{"AreaNextFloodIndex", neighborRetransmission.AreaNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-next-flood", types.YLeaf{"AsNextFlood", neighborRetransmission.AsNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("as-next-flood-index", types.YLeaf{"AsNextFloodIndex", neighborRetransmission.AsNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-next-flood", types.YLeaf{"LinkNextFlood", neighborRetransmission.LinkNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("link-next-flood-index", types.YLeaf{"LinkNextFloodIndex", neighborRetransmission.LinkNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", neighborRetransmission.LastRetransmissionLength})
    neighborRetransmission.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", neighborRetransmission.MaximumRetransmissionLength})
    neighborRetransmission.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", neighborRetransmission.LastRetransmissionTime})
    neighborRetransmission.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", neighborRetransmission.MaximumRetransmissionTime})
    neighborRetransmission.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", neighborRetransmission.LsaRetransmissionTimer})

    neighborRetransmission.EntityData.YListKeys = []string {}

    return &(neighborRetransmission.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo
// Neighbor BFD information
type Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetEntityData() *types.CommonEntityData {
    neighborBfdInfo.EntityData.YFilter = neighborBfdInfo.YFilter
    neighborBfdInfo.EntityData.YangName = "neighbor-bfd-info"
    neighborBfdInfo.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInfo.EntityData.ParentYangName = "neighbor"
    neighborBfdInfo.EntityData.SegmentPath = "neighbor-bfd-info"
    neighborBfdInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/neighbor-process-table/neighbor/" + neighborBfdInfo.EntityData.SegmentPath
    neighborBfdInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInfo.EntityData.Children = types.NewOrderedMap()
    neighborBfdInfo.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInfo.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInfo.BfdIntfEnableMode})
    neighborBfdInfo.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInfo.BfdStatusFlag})

    neighborBfdInfo.EntityData.YListKeys = []string {}

    return &(neighborBfdInfo.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_FastReroutes
// OSPFv3 fast reroute topology information table
type Ospfv3_Processes_Process_DefaultVrf_FastReroutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 fast reroute topology information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute.
    FastReroute []*Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute
}

func (fastReroutes *Ospfv3_Processes_Process_DefaultVrf_FastReroutes) GetEntityData() *types.CommonEntityData {
    fastReroutes.EntityData.YFilter = fastReroutes.YFilter
    fastReroutes.EntityData.YangName = "fast-reroutes"
    fastReroutes.EntityData.BundleName = "cisco_ios_xr"
    fastReroutes.EntityData.ParentYangName = "default-vrf"
    fastReroutes.EntityData.SegmentPath = "fast-reroutes"
    fastReroutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + fastReroutes.EntityData.SegmentPath
    fastReroutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroutes.EntityData.Children = types.NewOrderedMap()
    fastReroutes.EntityData.Children.Append("fast-reroute", types.YChild{"FastReroute", nil})
    for i := range fastReroutes.FastReroute {
        types.SetYListKey(fastReroutes.FastReroute[i], i)
        fastReroutes.EntityData.Children.Append(types.GetSegmentPath(fastReroutes.FastReroute[i]), types.YChild{"FastReroute", fastReroutes.FastReroute[i]})
    }
    fastReroutes.EntityData.Leafs = types.NewOrderedMap()

    fastReroutes.EntityData.YListKeys = []string {}

    return &(fastReroutes.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute
// OSPFv3 fast reroute topology information
type Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // AreaID. The type is interface{} with range: 0..4294967295.
    AreaId interface{}

    // Area ID string in decimal or dotted decimal format. The type is string with
    // length: 0..16.
    IpfrrTopoAreaId interface{}

    // OSPF Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpfrrRouterId interface{}

    // IPFRR Topology Revision. The type is interface{} with range: 0..4294967295.
    IpfrrAreaRevision interface{}

    // IPFRR Topology entries. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo.
    IpfrrTopo []*Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "fast-reroutes"
    fastReroute.EntityData.SegmentPath = "fast-reroute" + types.AddNoKeyToken(fastReroute)
    fastReroute.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/fast-reroutes/" + fastReroute.EntityData.SegmentPath
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = types.NewOrderedMap()
    fastReroute.EntityData.Children.Append("ipfrr-topo", types.YChild{"IpfrrTopo", nil})
    for i := range fastReroute.IpfrrTopo {
        types.SetYListKey(fastReroute.IpfrrTopo[i], i)
        fastReroute.EntityData.Children.Append(types.GetSegmentPath(fastReroute.IpfrrTopo[i]), types.YChild{"IpfrrTopo", fastReroute.IpfrrTopo[i]})
    }
    fastReroute.EntityData.Leafs = types.NewOrderedMap()
    fastReroute.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", fastReroute.RouterId})
    fastReroute.EntityData.Leafs.Append("area-id", types.YLeaf{"AreaId", fastReroute.AreaId})
    fastReroute.EntityData.Leafs.Append("ipfrr-topo-area-id", types.YLeaf{"IpfrrTopoAreaId", fastReroute.IpfrrTopoAreaId})
    fastReroute.EntityData.Leafs.Append("ipfrr-router-id", types.YLeaf{"IpfrrRouterId", fastReroute.IpfrrRouterId})
    fastReroute.EntityData.Leafs.Append("ipfrr-area-revision", types.YLeaf{"IpfrrAreaRevision", fastReroute.IpfrrAreaRevision})

    fastReroute.EntityData.YListKeys = []string {}

    return &(fastReroute.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo
// IPFRR Topology entries
type Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // IPFRR Topology Node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NodeId interface{}

    // IPFRR Topology LSA ID. The type is interface{} with range: 0..4294967295.
    Lsaid interface{}

    // IPFRR Topology Distance. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // IPFRR Topoogy Type-4 entry. The type is bool.
    Type4 interface{}

    // IPFRR Topology Revision. The type is interface{} with range: 0..4294967295.
    Revision interface{}

    // IPFRR Topology Neighbor Sourced. The type is bool.
    NeighborSourced interface{}

    // IPFRR Topology DR entry. The type is bool.
    Dr interface{}
}

func (ipfrrTopo *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo) GetEntityData() *types.CommonEntityData {
    ipfrrTopo.EntityData.YFilter = ipfrrTopo.YFilter
    ipfrrTopo.EntityData.YangName = "ipfrr-topo"
    ipfrrTopo.EntityData.BundleName = "cisco_ios_xr"
    ipfrrTopo.EntityData.ParentYangName = "fast-reroute"
    ipfrrTopo.EntityData.SegmentPath = "ipfrr-topo" + types.AddNoKeyToken(ipfrrTopo)
    ipfrrTopo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/fast-reroutes/fast-reroute/" + ipfrrTopo.EntityData.SegmentPath
    ipfrrTopo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipfrrTopo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipfrrTopo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipfrrTopo.EntityData.Children = types.NewOrderedMap()
    ipfrrTopo.EntityData.Leafs = types.NewOrderedMap()
    ipfrrTopo.EntityData.Leafs.Append("node-id", types.YLeaf{"NodeId", ipfrrTopo.NodeId})
    ipfrrTopo.EntityData.Leafs.Append("lsaid", types.YLeaf{"Lsaid", ipfrrTopo.Lsaid})
    ipfrrTopo.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", ipfrrTopo.Distance})
    ipfrrTopo.EntityData.Leafs.Append("type4", types.YLeaf{"Type4", ipfrrTopo.Type4})
    ipfrrTopo.EntityData.Leafs.Append("revision", types.YLeaf{"Revision", ipfrrTopo.Revision})
    ipfrrTopo.EntityData.Leafs.Append("neighbor-sourced", types.YLeaf{"NeighborSourced", ipfrrTopo.NeighborSourced})
    ipfrrTopo.EntityData.Leafs.Append("dr", types.YLeaf{"Dr", ipfrrTopo.Dr})

    ipfrrTopo.EntityData.YListKeys = []string {}

    return &(ipfrrTopo.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable
// OSPFv3 interface brief information table for all
// areas
type Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface brief information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief.
    InterfaceBrief []*Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief
}

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable) GetEntityData() *types.CommonEntityData {
    interfaceBriefProcessTable.EntityData.YFilter = interfaceBriefProcessTable.YFilter
    interfaceBriefProcessTable.EntityData.YangName = "interface-brief-process-table"
    interfaceBriefProcessTable.EntityData.BundleName = "cisco_ios_xr"
    interfaceBriefProcessTable.EntityData.ParentYangName = "default-vrf"
    interfaceBriefProcessTable.EntityData.SegmentPath = "interface-brief-process-table"
    interfaceBriefProcessTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + interfaceBriefProcessTable.EntityData.SegmentPath
    interfaceBriefProcessTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBriefProcessTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBriefProcessTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBriefProcessTable.EntityData.Children = types.NewOrderedMap()
    interfaceBriefProcessTable.EntityData.Children.Append("interface-brief", types.YChild{"InterfaceBrief", nil})
    for i := range interfaceBriefProcessTable.InterfaceBrief {
        interfaceBriefProcessTable.EntityData.Children.Append(types.GetSegmentPath(interfaceBriefProcessTable.InterfaceBrief[i]), types.YChild{"InterfaceBrief", interfaceBriefProcessTable.InterfaceBrief[i]})
    }
    interfaceBriefProcessTable.EntityData.Leafs = types.NewOrderedMap()

    interfaceBriefProcessTable.EntityData.YListKeys = []string {}

    return &(interfaceBriefProcessTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief
// Interface brief information
type Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is Ospfv3InterfaceState.
    OspfInterfaceState interface{}

    // Total number of neighbors . The type is interface{} with range: 0..65535.
    InterfaceNeighbors interface{}

    // Total number of adjacent neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjacentNeighbors interface{}

    // Network type. The type is Ospfv3Interface.
    NetworkType interface{}
}

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief) GetEntityData() *types.CommonEntityData {
    interfaceBrief.EntityData.YFilter = interfaceBrief.YFilter
    interfaceBrief.EntityData.YangName = "interface-brief"
    interfaceBrief.EntityData.BundleName = "cisco_ios_xr"
    interfaceBrief.EntityData.ParentYangName = "interface-brief-process-table"
    interfaceBrief.EntityData.SegmentPath = "interface-brief" + types.AddKeyToken(interfaceBrief.InterfaceName, "interface-name")
    interfaceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/interface-brief-process-table/" + interfaceBrief.EntityData.SegmentPath
    interfaceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBrief.EntityData.Children = types.NewOrderedMap()
    interfaceBrief.EntityData.Leafs = types.NewOrderedMap()
    interfaceBrief.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceBrief.InterfaceName})
    interfaceBrief.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", interfaceBrief.InterfaceAddress})
    interfaceBrief.EntityData.Leafs.Append("interface-link-cost", types.YLeaf{"InterfaceLinkCost", interfaceBrief.InterfaceLinkCost})
    interfaceBrief.EntityData.Leafs.Append("ospf-interface-state", types.YLeaf{"OspfInterfaceState", interfaceBrief.OspfInterfaceState})
    interfaceBrief.EntityData.Leafs.Append("interface-neighbors", types.YLeaf{"InterfaceNeighbors", interfaceBrief.InterfaceNeighbors})
    interfaceBrief.EntityData.Leafs.Append("interface-adjacent-neighbors", types.YLeaf{"InterfaceAdjacentNeighbors", interfaceBrief.InterfaceAdjacentNeighbors})
    interfaceBrief.EntityData.Leafs.Append("network-type", types.YLeaf{"NetworkType", interfaceBrief.NetworkType})

    interfaceBrief.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceBrief.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable
// OSPFv3 neighbor information table for all areas
type Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPFv3 neighbor detail information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail.
    NeighborDetail []*Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail
}

func (neighborDetailProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable) GetEntityData() *types.CommonEntityData {
    neighborDetailProcessTable.EntityData.YFilter = neighborDetailProcessTable.YFilter
    neighborDetailProcessTable.EntityData.YangName = "neighbor-detail-process-table"
    neighborDetailProcessTable.EntityData.BundleName = "cisco_ios_xr"
    neighborDetailProcessTable.EntityData.ParentYangName = "default-vrf"
    neighborDetailProcessTable.EntityData.SegmentPath = "neighbor-detail-process-table"
    neighborDetailProcessTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/" + neighborDetailProcessTable.EntityData.SegmentPath
    neighborDetailProcessTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetailProcessTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetailProcessTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetailProcessTable.EntityData.Children = types.NewOrderedMap()
    neighborDetailProcessTable.EntityData.Children.Append("neighbor-detail", types.YChild{"NeighborDetail", nil})
    for i := range neighborDetailProcessTable.NeighborDetail {
        types.SetYListKey(neighborDetailProcessTable.NeighborDetail[i], i)
        neighborDetailProcessTable.EntityData.Children.Append(types.GetSegmentPath(neighborDetailProcessTable.NeighborDetail[i]), types.YChild{"NeighborDetail", neighborDetailProcessTable.NeighborDetail[i]})
    }
    neighborDetailProcessTable.EntityData.Leafs = types.NewOrderedMap()

    neighborDetailProcessTable.EntityData.YListKeys = []string {}

    return &(neighborDetailProcessTable.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail
// OSPFv3 neighbor detail information
type Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Neighbor interface ID. The type is interface{} with range: 0..4294967295.
    NeighborInterfaceId interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is Ospfv3NeighborState.
    NeighborState interface{}

    // Designated router . The type is string with length: 0..9.
    NeighborDesignatedRouter interface{}

    // Time until neighbor's dead timer expires (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborUpTime interface{}

    // Neighbor virtual link id . The type is interface{} with range:
    // 0..4294967295.
    NeighborVirtualLinkId interface{}

    // If true, neighbor is on a virtual link . The type is bool.
    IsNeighborVirtualLink interface{}

    // Neighbor sham link id . The type is interface{} with range: 0..4294967295.
    NeighborShamLinkId interface{}

    // If true, neighbor is on a sham link . The type is bool.
    IsNeighborShamLink interface{}

    // Detailed OSPFv3 neighbor information .
    NeighborDetail Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail

    // Neighbor BFD information.
    NeighborBfdInfo Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail) GetEntityData() *types.CommonEntityData {
    neighborDetail.EntityData.YFilter = neighborDetail.YFilter
    neighborDetail.EntityData.YangName = "neighbor-detail"
    neighborDetail.EntityData.BundleName = "cisco_ios_xr"
    neighborDetail.EntityData.ParentYangName = "neighbor-detail-process-table"
    neighborDetail.EntityData.SegmentPath = "neighbor-detail" + types.AddNoKeyToken(neighborDetail)
    neighborDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/neighbor-detail-process-table/" + neighborDetail.EntityData.SegmentPath
    neighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetail.EntityData.Children = types.NewOrderedMap()
    neighborDetail.EntityData.Children.Append("neighbor-detail", types.YChild{"NeighborDetail", &neighborDetail.NeighborDetail})
    neighborDetail.EntityData.Children.Append("neighbor-bfd-info", types.YChild{"NeighborBfdInfo", &neighborDetail.NeighborBfdInfo})
    neighborDetail.EntityData.Leafs = types.NewOrderedMap()
    neighborDetail.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", neighborDetail.InterfaceName})
    neighborDetail.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighborDetail.NeighborAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-address-xr", types.YLeaf{"NeighborAddressXr", neighborDetail.NeighborAddressXr})
    neighborDetail.EntityData.Leafs.Append("neighbor-interface-id", types.YLeaf{"NeighborInterfaceId", neighborDetail.NeighborInterfaceId})
    neighborDetail.EntityData.Leafs.Append("neighbor-dr-priority", types.YLeaf{"NeighborDrPriority", neighborDetail.NeighborDrPriority})
    neighborDetail.EntityData.Leafs.Append("neighbor-state", types.YLeaf{"NeighborState", neighborDetail.NeighborState})
    neighborDetail.EntityData.Leafs.Append("neighbor-designated-router", types.YLeaf{"NeighborDesignatedRouter", neighborDetail.NeighborDesignatedRouter})
    neighborDetail.EntityData.Leafs.Append("neighbor-dead-timer", types.YLeaf{"NeighborDeadTimer", neighborDetail.NeighborDeadTimer})
    neighborDetail.EntityData.Leafs.Append("neighbor-up-time", types.YLeaf{"NeighborUpTime", neighborDetail.NeighborUpTime})
    neighborDetail.EntityData.Leafs.Append("neighbor-virtual-link-id", types.YLeaf{"NeighborVirtualLinkId", neighborDetail.NeighborVirtualLinkId})
    neighborDetail.EntityData.Leafs.Append("is-neighbor-virtual-link", types.YLeaf{"IsNeighborVirtualLink", neighborDetail.IsNeighborVirtualLink})
    neighborDetail.EntityData.Leafs.Append("neighbor-sham-link-id", types.YLeaf{"NeighborShamLinkId", neighborDetail.NeighborShamLinkId})
    neighborDetail.EntityData.Leafs.Append("is-neighbor-sham-link", types.YLeaf{"IsNeighborShamLink", neighborDetail.IsNeighborShamLink})

    neighborDetail.EntityData.YListKeys = []string {}

    return &(neighborDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail
// Detailed OSPFv3 neighbor information 
type Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of state changes . The type is interface{} with range: 0..65535.
    StateChanges interface{}

    // Cost of path to this neighbor . The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs . The type is bool.
    IsNeighborFiltered interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Ospfv3Interface.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // Remaining time when ignore timer is running . The type is interface{} with
    // range: 0..4294967295.
    NeighborIgnoreTimer interface{}

    // This is bitmask of neighbor's option field received . The type is
    // interface{} with range: 0..4294967295.
    NeighborOption interface{}

    // Number of pending events . The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // Retransmission information with this neighbor.
    NeighborRetransmission Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetEntityData() *types.CommonEntityData {
    neighborDetail.EntityData.YFilter = neighborDetail.YFilter
    neighborDetail.EntityData.YangName = "neighbor-detail"
    neighborDetail.EntityData.BundleName = "cisco_ios_xr"
    neighborDetail.EntityData.ParentYangName = "neighbor-detail"
    neighborDetail.EntityData.SegmentPath = "neighbor-detail"
    neighborDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/neighbor-detail-process-table/neighbor-detail/" + neighborDetail.EntityData.SegmentPath
    neighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborDetail.EntityData.Children = types.NewOrderedMap()
    neighborDetail.EntityData.Children.Append("neighbor-retransmission", types.YChild{"NeighborRetransmission", &neighborDetail.NeighborRetransmission})
    neighborDetail.EntityData.Leafs = types.NewOrderedMap()
    neighborDetail.EntityData.Leafs.Append("state-changes", types.YLeaf{"StateChanges", neighborDetail.StateChanges})
    neighborDetail.EntityData.Leafs.Append("neighbor-cost", types.YLeaf{"NeighborCost", neighborDetail.NeighborCost})
    neighborDetail.EntityData.Leafs.Append("is-neighbor-filtered", types.YLeaf{"IsNeighborFiltered", neighborDetail.IsNeighborFiltered})
    neighborDetail.EntityData.Leafs.Append("neighbor-designated-router-address", types.YLeaf{"NeighborDesignatedRouterAddress", neighborDetail.NeighborDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("neighbor-backup-designated-router-address", types.YLeaf{"NeighborBackupDesignatedRouterAddress", neighborDetail.NeighborBackupDesignatedRouterAddress})
    neighborDetail.EntityData.Leafs.Append("interface-type", types.YLeaf{"InterfaceType", neighborDetail.InterfaceType})
    neighborDetail.EntityData.Leafs.Append("poll-interval", types.YLeaf{"PollInterval", neighborDetail.PollInterval})
    neighborDetail.EntityData.Leafs.Append("next-poll-interval", types.YLeaf{"NextPollInterval", neighborDetail.NextPollInterval})
    neighborDetail.EntityData.Leafs.Append("neighbor-ignore-timer", types.YLeaf{"NeighborIgnoreTimer", neighborDetail.NeighborIgnoreTimer})
    neighborDetail.EntityData.Leafs.Append("neighbor-option", types.YLeaf{"NeighborOption", neighborDetail.NeighborOption})
    neighborDetail.EntityData.Leafs.Append("pending-events", types.YLeaf{"PendingEvents", neighborDetail.PendingEvents})

    neighborDetail.EntityData.YListKeys = []string {}

    return &(neighborDetail.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission
// Retransmission information with this neighbor
type Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetEntityData() *types.CommonEntityData {
    neighborRetransmission.EntityData.YFilter = neighborRetransmission.YFilter
    neighborRetransmission.EntityData.YangName = "neighbor-retransmission"
    neighborRetransmission.EntityData.BundleName = "cisco_ios_xr"
    neighborRetransmission.EntityData.ParentYangName = "neighbor-detail"
    neighborRetransmission.EntityData.SegmentPath = "neighbor-retransmission"
    neighborRetransmission.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/neighbor-detail-process-table/neighbor-detail/neighbor-detail/" + neighborRetransmission.EntityData.SegmentPath
    neighborRetransmission.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborRetransmission.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborRetransmission.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborRetransmission.EntityData.Children = types.NewOrderedMap()
    neighborRetransmission.EntityData.Leafs = types.NewOrderedMap()
    neighborRetransmission.EntityData.Leafs.Append("database-descriptor-retransmissions", types.YLeaf{"DatabaseDescriptorRetransmissions", neighborRetransmission.DatabaseDescriptorRetransmissions})
    neighborRetransmission.EntityData.Leafs.Append("area-flood-index", types.YLeaf{"AreaFloodIndex", neighborRetransmission.AreaFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-flood-index", types.YLeaf{"AsFloodIndex", neighborRetransmission.AsFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-flood-index", types.YLeaf{"LinkFloodIndex", neighborRetransmission.LinkFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("neighbor-retransmissions", types.YLeaf{"NeighborRetransmissions", neighborRetransmission.NeighborRetransmissions})
    neighborRetransmission.EntityData.Leafs.Append("retransmissions", types.YLeaf{"Retransmissions", neighborRetransmission.Retransmissions})
    neighborRetransmission.EntityData.Leafs.Append("area-first-flood", types.YLeaf{"AreaFirstFlood", neighborRetransmission.AreaFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("area-first-flood-index", types.YLeaf{"AreaFirstFloodIndex", neighborRetransmission.AreaFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-first-flood", types.YLeaf{"AsFirstFlood", neighborRetransmission.AsFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("as-first-flood-index", types.YLeaf{"AsFirstFloodIndex", neighborRetransmission.AsFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-first-flood", types.YLeaf{"LinkFirstFlood", neighborRetransmission.LinkFirstFlood})
    neighborRetransmission.EntityData.Leafs.Append("link-first-flood-index", types.YLeaf{"LinkFirstFloodIndex", neighborRetransmission.LinkFirstFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("area-next-flood", types.YLeaf{"AreaNextFlood", neighborRetransmission.AreaNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("area-next-flood-index", types.YLeaf{"AreaNextFloodIndex", neighborRetransmission.AreaNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("as-next-flood", types.YLeaf{"AsNextFlood", neighborRetransmission.AsNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("as-next-flood-index", types.YLeaf{"AsNextFloodIndex", neighborRetransmission.AsNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("link-next-flood", types.YLeaf{"LinkNextFlood", neighborRetransmission.LinkNextFlood})
    neighborRetransmission.EntityData.Leafs.Append("link-next-flood-index", types.YLeaf{"LinkNextFloodIndex", neighborRetransmission.LinkNextFloodIndex})
    neighborRetransmission.EntityData.Leafs.Append("last-retransmission-length", types.YLeaf{"LastRetransmissionLength", neighborRetransmission.LastRetransmissionLength})
    neighborRetransmission.EntityData.Leafs.Append("maximum-retransmission-length", types.YLeaf{"MaximumRetransmissionLength", neighborRetransmission.MaximumRetransmissionLength})
    neighborRetransmission.EntityData.Leafs.Append("last-retransmission-time", types.YLeaf{"LastRetransmissionTime", neighborRetransmission.LastRetransmissionTime})
    neighborRetransmission.EntityData.Leafs.Append("maximum-retransmission-time", types.YLeaf{"MaximumRetransmissionTime", neighborRetransmission.MaximumRetransmissionTime})
    neighborRetransmission.EntityData.Leafs.Append("lsa-retransmission-timer", types.YLeaf{"LsaRetransmissionTimer", neighborRetransmission.LsaRetransmissionTimer})

    neighborRetransmission.EntityData.YListKeys = []string {}

    return &(neighborRetransmission.EntityData)
}

// Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo
// Neighbor BFD information
type Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetEntityData() *types.CommonEntityData {
    neighborBfdInfo.EntityData.YFilter = neighborBfdInfo.YFilter
    neighborBfdInfo.EntityData.YangName = "neighbor-bfd-info"
    neighborBfdInfo.EntityData.BundleName = "cisco_ios_xr"
    neighborBfdInfo.EntityData.ParentYangName = "neighbor-detail"
    neighborBfdInfo.EntityData.SegmentPath = "neighbor-bfd-info"
    neighborBfdInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3/processes/process/default-vrf/neighbor-detail-process-table/neighbor-detail/" + neighborBfdInfo.EntityData.SegmentPath
    neighborBfdInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBfdInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBfdInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBfdInfo.EntityData.Children = types.NewOrderedMap()
    neighborBfdInfo.EntityData.Leafs = types.NewOrderedMap()
    neighborBfdInfo.EntityData.Leafs.Append("bfd-intf-enable-mode", types.YLeaf{"BfdIntfEnableMode", neighborBfdInfo.BfdIntfEnableMode})
    neighborBfdInfo.EntityData.Leafs.Append("bfd-status-flag", types.YLeaf{"BfdStatusFlag", neighborBfdInfo.BfdStatusFlag})

    neighborBfdInfo.EntityData.YListKeys = []string {}

    return &(neighborBfdInfo.EntityData)
}

