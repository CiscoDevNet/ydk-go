// This module contains a collection of YANG definitions
// for Cisco IOS-XR action package configuration.
// 
// Copyright (c) 2016-2017 by Cisco Systems, Inc.
// All rights reserved.
package ipv4_bgp_act

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ipv4_bgp_act"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-all-graceful}", reflect.TypeOf(ClearBgpAllGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-all-graceful", reflect.TypeOf(ClearBgpAllGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-all}", reflect.TypeOf(ClearBgpAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-all", reflect.TypeOf(ClearBgpAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-ip-addr-graceful}", reflect.TypeOf(ClearBgpIpAddrGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-graceful", reflect.TypeOf(ClearBgpIpAddrGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-ip-addr-long-lived-stale}", reflect.TypeOf(ClearBgpIpAddrLongLivedStale{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-long-lived-stale", reflect.TypeOf(ClearBgpIpAddrLongLivedStale{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-ip-addr}", reflect.TypeOf(ClearBgpIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr", reflect.TypeOf(ClearBgpIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-all-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpAfiSafiAllSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in-prefix-filter", reflect.TypeOf(ClearBgpAfiSafiAllSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-all-soft-in}", reflect.TypeOf(ClearBgpAfiSafiAllSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in", reflect.TypeOf(ClearBgpAfiSafiAllSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-all-soft-out}", reflect.TypeOf(ClearBgpAfiSafiAllSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-out", reflect.TypeOf(ClearBgpAfiSafiAllSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-all-soft}", reflect.TypeOf(ClearBgpAfiSafiAllSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft", reflect.TypeOf(ClearBgpAfiSafiAllSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-ip-addr-long-lived-stale}", reflect.TypeOf(ClearBgpAfiSafiIpAddrLongLivedStale{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-long-lived-stale", reflect.TypeOf(ClearBgpAfiSafiIpAddrLongLivedStale{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpAfiSafiIpAddrSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter", reflect.TypeOf(ClearBgpAfiSafiIpAddrSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-ip-addr-soft-in}", reflect.TypeOf(ClearBgpAfiSafiIpAddrSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in", reflect.TypeOf(ClearBgpAfiSafiIpAddrSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-ip-addr-soft-out}", reflect.TypeOf(ClearBgpAfiSafiIpAddrSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-out", reflect.TypeOf(ClearBgpAfiSafiIpAddrSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-ip-addr-soft}", reflect.TypeOf(ClearBgpAfiSafiIpAddrSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft", reflect.TypeOf(ClearBgpAfiSafiIpAddrSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-as-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpAfiSafiAsSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in-prefix-filter", reflect.TypeOf(ClearBgpAfiSafiAsSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-as-soft-in}", reflect.TypeOf(ClearBgpAfiSafiAsSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in", reflect.TypeOf(ClearBgpAfiSafiAsSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-as-soft-out}", reflect.TypeOf(ClearBgpAfiSafiAsSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-out", reflect.TypeOf(ClearBgpAfiSafiAsSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-as-soft}", reflect.TypeOf(ClearBgpAfiSafiAsSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft", reflect.TypeOf(ClearBgpAfiSafiAsSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-dampening-ip-prefix}", reflect.TypeOf(ClearBgpAfiSafiDampeningIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ip-prefix", reflect.TypeOf(ClearBgpAfiSafiDampeningIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-dampening}", reflect.TypeOf(ClearBgpAfiSafiDampening{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening", reflect.TypeOf(ClearBgpAfiSafiDampening{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-external-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpAfiSafiExternalSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in-prefix-filter", reflect.TypeOf(ClearBgpAfiSafiExternalSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-external-soft-in}", reflect.TypeOf(ClearBgpAfiSafiExternalSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in", reflect.TypeOf(ClearBgpAfiSafiExternalSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-external-soft-out}", reflect.TypeOf(ClearBgpAfiSafiExternalSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-out", reflect.TypeOf(ClearBgpAfiSafiExternalSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-external-soft}", reflect.TypeOf(ClearBgpAfiSafiExternalSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft", reflect.TypeOf(ClearBgpAfiSafiExternalSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask}", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-flap-statistics-ip-addr}", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-flap-statistics-ip-prefix}", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-prefix", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-flap-statistics-regexp}", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsRegexp{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-regexp", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsRegexp{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-flap-statistics-route-policy}", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsRoutePolicy{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-route-policy", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsRoutePolicy{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-flap-statistics}", reflect.TypeOf(ClearBgpAfiSafiFlapStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics", reflect.TypeOf(ClearBgpAfiSafiFlapStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-nexthop-performance-statistics}", reflect.TypeOf(ClearBgpAfiSafiNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-performance-statistics", reflect.TypeOf(ClearBgpAfiSafiNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-nexthop-registration-ip-addr}", reflect.TypeOf(ClearBgpAfiSafiNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-registration-ip-addr", reflect.TypeOf(ClearBgpAfiSafiNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-self-originated}", reflect.TypeOf(ClearBgpAfiSafiSelfOriginated{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-self-originated", reflect.TypeOf(ClearBgpAfiSafiSelfOriginated{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-shutdown}", reflect.TypeOf(ClearBgpAfiSafiShutdown{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-shutdown", reflect.TypeOf(ClearBgpAfiSafiShutdown{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-address-family-update-parent}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family-update-parent", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-address-family}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-neighbor-ip-addr}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-update-group-sub-group}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-update-group-update-parent}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-update-parent", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-update-group}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-as-graceful}", reflect.TypeOf(ClearBgpAsGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as-graceful", reflect.TypeOf(ClearBgpAsGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-as}", reflect.TypeOf(ClearBgpAs{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as", reflect.TypeOf(ClearBgpAs{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpBestpathIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpBestpathIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-ip-addr}", reflect.TypeOf(ClearBgpBestpathIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr", reflect.TypeOf(ClearBgpBestpathIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-ip-prefix}", reflect.TypeOf(ClearBgpBestpathIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-prefix", reflect.TypeOf(ClearBgpBestpathIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpBestpathAfiSafiIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ip-addr}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr", reflect.TypeOf(ClearBgpBestpathAfiSafiIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ip-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr}", reflect.TypeOf(ClearBgpBestpathAfiSafiBridgeDomainIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr", reflect.TypeOf(ClearBgpBestpathAfiSafiBridgeDomainIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiBridgeDomainIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiBridgeDomainIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-ip-addr}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-ip-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ipv4-addr}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ipv4-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-ipv4-addr}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-vrf-ipv4-addr}", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-network}", reflect.TypeOf(ClearBgpBestpathAfiSafiNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-network", reflect.TypeOf(ClearBgpBestpathAfiSafiNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-network}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-network", reflect.TypeOf(ClearBgpBestpathAfiSafiRdNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-vrf-network}", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-network", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rt-constraint-network}", reflect.TypeOf(ClearBgpBestpathAfiSafiRtConstraintNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rt-constraint-network", reflect.TypeOf(ClearBgpBestpathAfiSafiRtConstraintNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ipv4-tunnel-network}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv4TunnelNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-tunnel-network", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv4TunnelNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ipv6-addr}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ipv6-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd}", reflect.TypeOf(ClearBgpBestpathAfiSafiRd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd", reflect.TypeOf(ClearBgpBestpathAfiSafiRd{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-vrf}", reflect.TypeOf(ClearBgpBestpathAfiSafiVrf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf", reflect.TypeOf(ClearBgpBestpathAfiSafiVrf{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi}", reflect.TypeOf(ClearBgpBestpathAfiSafi{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi", reflect.TypeOf(ClearBgpBestpathAfiSafi{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-sr-policy-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiSrPolicyPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-sr-policy-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiSrPolicyPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-ipv4-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiMp2mpIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiMp2mpIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-ipv6-addr}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-ipv6-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-vrf-ipv6-addr}", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpBestpathVrfIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpBestpathVrfIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-ip-addr}", reflect.TypeOf(ClearBgpBestpathVrfIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr", reflect.TypeOf(ClearBgpBestpathVrfIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-ip-prefix}", reflect.TypeOf(ClearBgpBestpathVrfIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-prefix", reflect.TypeOf(ClearBgpBestpathVrfIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-ipv4-addr}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-network}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-network", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-rd-network}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiRdNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd-network", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiRdNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-vrf-network}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf-network", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-ipv6-addr}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-rd}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiRd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiRd{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-vrf}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiVrf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiVrf{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafi{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi", reflect.TypeOf(ClearBgpBestpathVrfAfiSafi{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-external-graceful}", reflect.TypeOf(ClearBgpExternalGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-external-graceful", reflect.TypeOf(ClearBgpExternalGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-external}", reflect.TypeOf(ClearBgpExternal{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-external", reflect.TypeOf(ClearBgpExternal{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-all-graceful}", reflect.TypeOf(ClearBgpInstanceAllGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all-graceful", reflect.TypeOf(ClearBgpInstanceAllGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-all}", reflect.TypeOf(ClearBgpInstanceAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all", reflect.TypeOf(ClearBgpInstanceAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-ip-addr-graceful}", reflect.TypeOf(ClearBgpInstanceIpAddrGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-graceful", reflect.TypeOf(ClearBgpInstanceIpAddrGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-ip-addr-long-lived-stale}", reflect.TypeOf(ClearBgpInstanceIpAddrLongLivedStale{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-long-lived-stale", reflect.TypeOf(ClearBgpInstanceIpAddrLongLivedStale{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-ip-addr}", reflect.TypeOf(ClearBgpInstanceIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr", reflect.TypeOf(ClearBgpInstanceIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-all-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpInstanceAfiSafiAllSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in-prefix-filter", reflect.TypeOf(ClearBgpInstanceAfiSafiAllSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-all-soft-in}", reflect.TypeOf(ClearBgpInstanceAfiSafiAllSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in", reflect.TypeOf(ClearBgpInstanceAfiSafiAllSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-all-soft-out}", reflect.TypeOf(ClearBgpInstanceAfiSafiAllSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-out", reflect.TypeOf(ClearBgpInstanceAfiSafiAllSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-all-soft}", reflect.TypeOf(ClearBgpInstanceAfiSafiAllSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft", reflect.TypeOf(ClearBgpInstanceAfiSafiAllSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-ip-addr-long-lived-stale}", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrLongLivedStale{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-long-lived-stale", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrLongLivedStale{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-ip-addr-soft-in}", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-ip-addr-soft-out}", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-out", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-ip-addr-soft}", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-as-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpInstanceAfiSafiAsSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in-prefix-filter", reflect.TypeOf(ClearBgpInstanceAfiSafiAsSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-as-soft-in}", reflect.TypeOf(ClearBgpInstanceAfiSafiAsSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in", reflect.TypeOf(ClearBgpInstanceAfiSafiAsSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-as-soft-out}", reflect.TypeOf(ClearBgpInstanceAfiSafiAsSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-out", reflect.TypeOf(ClearBgpInstanceAfiSafiAsSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-as-soft}", reflect.TypeOf(ClearBgpInstanceAfiSafiAsSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft", reflect.TypeOf(ClearBgpInstanceAfiSafiAsSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-dampening-ip-prefix}", reflect.TypeOf(ClearBgpInstanceAfiSafiDampeningIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ip-prefix", reflect.TypeOf(ClearBgpInstanceAfiSafiDampeningIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-dampening}", reflect.TypeOf(ClearBgpInstanceAfiSafiDampening{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening", reflect.TypeOf(ClearBgpInstanceAfiSafiDampening{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-external-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in-prefix-filter", reflect.TypeOf(ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-external-soft-in}", reflect.TypeOf(ClearBgpInstanceAfiSafiExternalSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in", reflect.TypeOf(ClearBgpInstanceAfiSafiExternalSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-external-soft-out}", reflect.TypeOf(ClearBgpInstanceAfiSafiExternalSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-out", reflect.TypeOf(ClearBgpInstanceAfiSafiExternalSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-external-soft}", reflect.TypeOf(ClearBgpInstanceAfiSafiExternalSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft", reflect.TypeOf(ClearBgpInstanceAfiSafiExternalSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-flap-statistics-ip-addr}", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-flap-statistics-ip-prefix}", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-prefix", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-flap-statistics-regexp}", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsRegexp{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-regexp", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsRegexp{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-flap-statistics-route-policy}", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-route-policy", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-flap-statistics}", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-nexthop-performance-statistics}", reflect.TypeOf(ClearBgpInstanceAfiSafiNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-performance-statistics", reflect.TypeOf(ClearBgpInstanceAfiSafiNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-nexthop-registration-ip-addr}", reflect.TypeOf(ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-registration-ip-addr", reflect.TypeOf(ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-self-originated}", reflect.TypeOf(ClearBgpInstanceAfiSafiSelfOriginated{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-self-originated", reflect.TypeOf(ClearBgpInstanceAfiSafiSelfOriginated{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-shutdown}", reflect.TypeOf(ClearBgpInstanceAfiSafiShutdown{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-shutdown", reflect.TypeOf(ClearBgpInstanceAfiSafiShutdown{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-address-family-update-parent}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family-update-parent", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-address-family}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-update-group-sub-group}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-update-group-update-parent}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-update-parent", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-update-group}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-as-graceful}", reflect.TypeOf(ClearBgpInstanceAsGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as-graceful", reflect.TypeOf(ClearBgpInstanceAsGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-as}", reflect.TypeOf(ClearBgpInstanceAs{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as", reflect.TypeOf(ClearBgpInstanceAs{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceBestpathIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceBestpathIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-ip-addr}", reflect.TypeOf(ClearBgpInstanceBestpathIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr", reflect.TypeOf(ClearBgpInstanceBestpathIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-ip-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-prefix", reflect.TypeOf(ClearBgpInstanceBestpathIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ip-addr}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ip-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-ip-addr}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ipv4-addr}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-network}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-network", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-network}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-network", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-vrf-network}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-network", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rt-constraint-network}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rt-constraint-network", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ipv6-addr}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRd{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-vrf}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrf{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafi{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafi{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceBestpathVrfIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceBestpathVrfIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-ip-addr}", reflect.TypeOf(ClearBgpInstanceBestpathVrfIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr", reflect.TypeOf(ClearBgpInstanceBestpathVrfIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-ip-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathVrfIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-prefix", reflect.TypeOf(ClearBgpInstanceBestpathVrfIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-network}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-network", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-rd-network}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiRdNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd-network", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiRdNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-rd}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiRd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiRd{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-vrf}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiVrf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiVrf{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafi{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafi{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-external-graceful}", reflect.TypeOf(ClearBgpInstanceExternalGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external-graceful", reflect.TypeOf(ClearBgpInstanceExternalGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-external}", reflect.TypeOf(ClearBgpInstanceExternal{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external", reflect.TypeOf(ClearBgpInstanceExternal{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-dampening-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceAfiSafiDampeningIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceAfiSafiDampeningIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-dampening-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceAfiSafiDampeningIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceAfiSafiDampeningIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-nexthop-performance-statistics}", reflect.TypeOf(ClearBgpInstanceNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-performance-statistics", reflect.TypeOf(ClearBgpInstanceNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-nexthop-registration-ip-addr}", reflect.TypeOf(ClearBgpInstanceNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-registration-ip-addr", reflect.TypeOf(ClearBgpInstanceNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-peer-drops-all}", reflect.TypeOf(ClearBgpInstancePeerDropsAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-all", reflect.TypeOf(ClearBgpInstancePeerDropsAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-peer-drops-ip-addr}", reflect.TypeOf(ClearBgpInstancePeerDropsIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-ip-addr", reflect.TypeOf(ClearBgpInstancePeerDropsIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-performance-statistics}", reflect.TypeOf(ClearBgpInstancePerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-performance-statistics", reflect.TypeOf(ClearBgpInstancePerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-rpki-server-all-serial-query}", reflect.TypeOf(ClearBgpInstanceRpkiServerAllSerialQuery{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all-serial-query", reflect.TypeOf(ClearBgpInstanceRpkiServerAllSerialQuery{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-rpki-server-all}", reflect.TypeOf(ClearBgpInstanceRpkiServerAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all", reflect.TypeOf(ClearBgpInstanceRpkiServerAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-rpki-server-rpki-server}", reflect.TypeOf(ClearBgpInstanceRpkiServerRpkiServer{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-rpki-server", reflect.TypeOf(ClearBgpInstanceRpkiServerRpkiServer{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-rpki-validation-ipv4}", reflect.TypeOf(ClearBgpInstanceRpkiValidationIpv4{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv4", reflect.TypeOf(ClearBgpInstanceRpkiValidationIpv4{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-rpki-validation-ipv6}", reflect.TypeOf(ClearBgpInstanceRpkiValidationIpv6{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv6", reflect.TypeOf(ClearBgpInstanceRpkiValidationIpv6{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-rpki-validation}", reflect.TypeOf(ClearBgpInstanceRpkiValidation{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation", reflect.TypeOf(ClearBgpInstanceRpkiValidation{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-shutdown}", reflect.TypeOf(ClearBgpInstanceShutdown{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-shutdown", reflect.TypeOf(ClearBgpInstanceShutdown{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-address-family-update-parent}", reflect.TypeOf(ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family-update-parent", reflect.TypeOf(ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-address-family}", reflect.TypeOf(ClearBgpInstanceUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family", reflect.TypeOf(ClearBgpInstanceUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent}", reflect.TypeOf(ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent", reflect.TypeOf(ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-neighbor-ip-addr-refresh}", reflect.TypeOf(ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh", reflect.TypeOf(ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent}", reflect.TypeOf(ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent", reflect.TypeOf(ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-neighbor-ip-addr}", reflect.TypeOf(ClearBgpInstanceUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr", reflect.TypeOf(ClearBgpInstanceUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-process}", reflect.TypeOf(ClearBgpInstanceUpdateOutqProcess{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-process", reflect.TypeOf(ClearBgpInstanceUpdateOutqProcess{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-update-group-sub-group-update-parent}", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-update-parent", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-update-group-sub-group}", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent}", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group}", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-update-group-update-parent}", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-update-parent", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-update-group}", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceVersionIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceVersionIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-ip-addr}", reflect.TypeOf(ClearBgpInstanceVersionIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr", reflect.TypeOf(ClearBgpInstanceVersionIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-ip-prefix}", reflect.TypeOf(ClearBgpInstanceVersionIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-prefix", reflect.TypeOf(ClearBgpInstanceVersionIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ip-addr}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ip-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-ip-addr}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-ip-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ipv4-addr}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-ipv4-addr}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-vrf-ipv4-addr}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-network}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-network", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-network}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-network", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-vrf-network}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-network", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rt-constraint-network}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRtConstraintNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rt-constraint-network", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRtConstraintNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ipv4-tunnel-network}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-tunnel-network", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ipv6-addr}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRd{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-vrf}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrf{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafi{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi", reflect.TypeOf(ClearBgpInstanceVersionAfiSafi{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-sr-policy-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiSrPolicyPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-sr-policy-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiSrPolicyPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-ipv6-addr}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-vrf-ipv6-addr}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceVersionVrfIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceVersionVrfIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-ip-addr}", reflect.TypeOf(ClearBgpInstanceVersionVrfIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr", reflect.TypeOf(ClearBgpInstanceVersionVrfIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-ip-prefix}", reflect.TypeOf(ClearBgpInstanceVersionVrfIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-prefix", reflect.TypeOf(ClearBgpInstanceVersionVrfIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-ipv4-addr}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-network}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-network", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-rd-network}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiRdNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd-network", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiRdNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-vrf-network}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf-network", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-ipv6-addr}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-rd}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiRd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiRd{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-vrf}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiVrf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiVrf{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafi{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafi{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-all-graceful}", reflect.TypeOf(ClearBgpInstanceVrfAllGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all-graceful", reflect.TypeOf(ClearBgpInstanceVrfAllGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-all}", reflect.TypeOf(ClearBgpInstanceVrfAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all", reflect.TypeOf(ClearBgpInstanceVrfAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-ip-addr-graceful}", reflect.TypeOf(ClearBgpInstanceVrfIpAddrGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-graceful", reflect.TypeOf(ClearBgpInstanceVrfIpAddrGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-ip-addr-long-lived-stale}", reflect.TypeOf(ClearBgpInstanceVrfIpAddrLongLivedStale{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-long-lived-stale", reflect.TypeOf(ClearBgpInstanceVrfIpAddrLongLivedStale{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-ip-addr}", reflect.TypeOf(ClearBgpInstanceVrfIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr", reflect.TypeOf(ClearBgpInstanceVrfIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-as-graceful}", reflect.TypeOf(ClearBgpInstanceVrfAsGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as-graceful", reflect.TypeOf(ClearBgpInstanceVrfAsGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-as}", reflect.TypeOf(ClearBgpInstanceVrfAs{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as", reflect.TypeOf(ClearBgpInstanceVrfAs{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-external-graceful}", reflect.TypeOf(ClearBgpInstanceVrfExternalGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external-graceful", reflect.TypeOf(ClearBgpInstanceVrfExternalGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-external}", reflect.TypeOf(ClearBgpInstanceVrfExternal{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external", reflect.TypeOf(ClearBgpInstanceVrfExternal{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-all-soft-in}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAllSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAllSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-all-soft-out}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAllSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-out", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAllSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-all-soft}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAllSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAllSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-ip-addr-soft}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-as-soft-in}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAsSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAsSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-as-soft-out}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAsSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-out", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAsSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-as-soft}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAsSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAsSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-dampening}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiDampening{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiDampening{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-external-soft-in}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiExternalSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiExternalSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-external-soft-out}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiExternalSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-out", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiExternalSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-external-soft}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiExternalSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiExternalSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-flap-statistics}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-self-originated}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiSelfOriginated{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-self-originated", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiSelfOriginated{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-shutdown}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiShutdown{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-shutdown", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiShutdown{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-address-family}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-update-group}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-nexthop-performance-statistics}", reflect.TypeOf(ClearBgpInstanceVrfNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-performance-statistics", reflect.TypeOf(ClearBgpInstanceVrfNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-nexthop-registration-ip-addr}", reflect.TypeOf(ClearBgpInstanceVrfNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-registration-ip-addr", reflect.TypeOf(ClearBgpInstanceVrfNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-peer-drops-all}", reflect.TypeOf(ClearBgpInstanceVrfPeerDropsAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-all", reflect.TypeOf(ClearBgpInstanceVrfPeerDropsAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-peer-drops-ip-addr}", reflect.TypeOf(ClearBgpInstanceVrfPeerDropsIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-ip-addr", reflect.TypeOf(ClearBgpInstanceVrfPeerDropsIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-performance-statistics}", reflect.TypeOf(ClearBgpInstanceVrfPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-performance-statistics", reflect.TypeOf(ClearBgpInstanceVrfPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-shutdown}", reflect.TypeOf(ClearBgpInstanceVrfShutdown{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-shutdown", reflect.TypeOf(ClearBgpInstanceVrfShutdown{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-address-family-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family-update-parent", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-address-family}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-neighbor-ip-addr}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-update-group-sub-group}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-update-group-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-update-parent", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-update-group}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-dampening-ipv4-prefix}", reflect.TypeOf(ClearBgpAfiSafiDampeningIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv4-prefix", reflect.TypeOf(ClearBgpAfiSafiDampeningIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-flap-statistics-ipv4-prefix}", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv4-prefix", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-dampening-ipv6-prefix}", reflect.TypeOf(ClearBgpAfiSafiDampeningIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv6-prefix", reflect.TypeOf(ClearBgpAfiSafiDampeningIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-flap-statistics-ipv6-prefix}", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv6-prefix", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-nexthop-performance-statistics}", reflect.TypeOf(ClearBgpNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-nexthop-performance-statistics", reflect.TypeOf(ClearBgpNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-nexthop-registration-ip-addr}", reflect.TypeOf(ClearBgpNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-nexthop-registration-ip-addr", reflect.TypeOf(ClearBgpNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-peer-drops-all}", reflect.TypeOf(ClearBgpPeerDropsAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-peer-drops-all", reflect.TypeOf(ClearBgpPeerDropsAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-peer-drops-ip-addr}", reflect.TypeOf(ClearBgpPeerDropsIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-peer-drops-ip-addr", reflect.TypeOf(ClearBgpPeerDropsIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-performance-statistics}", reflect.TypeOf(ClearBgpPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-performance-statistics", reflect.TypeOf(ClearBgpPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-rpki-server-all-serial-query}", reflect.TypeOf(ClearBgpRpkiServerAllSerialQuery{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-all-serial-query", reflect.TypeOf(ClearBgpRpkiServerAllSerialQuery{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-rpki-server-all}", reflect.TypeOf(ClearBgpRpkiServerAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-all", reflect.TypeOf(ClearBgpRpkiServerAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-rpki-server-rpki-server}", reflect.TypeOf(ClearBgpRpkiServerRpkiServer{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-rpki-server", reflect.TypeOf(ClearBgpRpkiServerRpkiServer{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-rpki-validation-ipv4}", reflect.TypeOf(ClearBgpRpkiValidationIpv4{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation-ipv4", reflect.TypeOf(ClearBgpRpkiValidationIpv4{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-rpki-validation-ipv6}", reflect.TypeOf(ClearBgpRpkiValidationIpv6{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation-ipv6", reflect.TypeOf(ClearBgpRpkiValidationIpv6{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-rpki-validation}", reflect.TypeOf(ClearBgpRpkiValidation{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation", reflect.TypeOf(ClearBgpRpkiValidation{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-shutdown}", reflect.TypeOf(ClearBgpShutdown{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-shutdown", reflect.TypeOf(ClearBgpShutdown{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-address-family-update-parent}", reflect.TypeOf(ClearBgpUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-address-family-update-parent", reflect.TypeOf(ClearBgpUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-address-family}", reflect.TypeOf(ClearBgpUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-address-family", reflect.TypeOf(ClearBgpUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent}", reflect.TypeOf(ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent", reflect.TypeOf(ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-neighbor-ip-addr-refresh}", reflect.TypeOf(ClearBgpUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh", reflect.TypeOf(ClearBgpUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-neighbor-ip-addr-update-parent}", reflect.TypeOf(ClearBgpUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-update-parent", reflect.TypeOf(ClearBgpUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-neighbor-ip-addr}", reflect.TypeOf(ClearBgpUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr", reflect.TypeOf(ClearBgpUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-process}", reflect.TypeOf(ClearBgpUpdateOutqProcess{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-process", reflect.TypeOf(ClearBgpUpdateOutqProcess{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-update-group-sub-group-update-parent}", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-update-parent", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-update-group-sub-group}", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent}", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-update-group-sub-group-refresh-sub-group}", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-update-group-update-parent}", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-update-parent", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-update-group}", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpVersionIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpVersionIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-ip-addr}", reflect.TypeOf(ClearBgpVersionIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr", reflect.TypeOf(ClearBgpVersionIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-ip-prefix}", reflect.TypeOf(ClearBgpVersionIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-prefix", reflect.TypeOf(ClearBgpVersionIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpVersionAfiSafiIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpVersionAfiSafiIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ip-addr}", reflect.TypeOf(ClearBgpVersionAfiSafiIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr", reflect.TypeOf(ClearBgpVersionAfiSafiIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ip-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-bridge-domain-ip-addr}", reflect.TypeOf(ClearBgpVersionAfiSafiBridgeDomainIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr", reflect.TypeOf(ClearBgpVersionAfiSafiBridgeDomainIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-bridge-domain-ip-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiBridgeDomainIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiBridgeDomainIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-ip-addr}", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-ip-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpVersionAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpVersionAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ipv4-addr}", reflect.TypeOf(ClearBgpVersionAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr", reflect.TypeOf(ClearBgpVersionAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ipv4-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-ipv4-addr}", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-vrf-ipv4-addr}", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-network}", reflect.TypeOf(ClearBgpVersionAfiSafiNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-network", reflect.TypeOf(ClearBgpVersionAfiSafiNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-network}", reflect.TypeOf(ClearBgpVersionAfiSafiRdNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-network", reflect.TypeOf(ClearBgpVersionAfiSafiRdNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-vrf-network}", reflect.TypeOf(ClearBgpVersionAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-network", reflect.TypeOf(ClearBgpVersionAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rt-constraint-network}", reflect.TypeOf(ClearBgpVersionAfiSafiRtConstraintNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rt-constraint-network", reflect.TypeOf(ClearBgpVersionAfiSafiRtConstraintNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ipv4-tunnel-network}", reflect.TypeOf(ClearBgpVersionAfiSafiIpv4TunnelNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-tunnel-network", reflect.TypeOf(ClearBgpVersionAfiSafiIpv4TunnelNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ipv6-addr}", reflect.TypeOf(ClearBgpVersionAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr", reflect.TypeOf(ClearBgpVersionAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ipv6-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd}", reflect.TypeOf(ClearBgpVersionAfiSafiRd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd", reflect.TypeOf(ClearBgpVersionAfiSafiRd{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-vrf}", reflect.TypeOf(ClearBgpVersionAfiSafiVrf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf", reflect.TypeOf(ClearBgpVersionAfiSafiVrf{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi}", reflect.TypeOf(ClearBgpVersionAfiSafi{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi", reflect.TypeOf(ClearBgpVersionAfiSafi{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-sr-policy-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiSrPolicyPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-sr-policy-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiSrPolicyPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-ipv4-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-mp2mp-ipv4-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiMp2mpIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-mp2mp-ipv4-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiMp2mpIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-vrf-ipv4-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-ipv6-addr}", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-ipv6-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-vrf-ipv6-addr}", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-vrf-ipv6-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpVersionVrfIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpVersionVrfIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-ip-addr}", reflect.TypeOf(ClearBgpVersionVrfIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr", reflect.TypeOf(ClearBgpVersionVrfIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-ip-prefix}", reflect.TypeOf(ClearBgpVersionVrfIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-prefix", reflect.TypeOf(ClearBgpVersionVrfIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-ipv4-prefix}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-prefix", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-ipv4-addr}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-network}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-network", reflect.TypeOf(ClearBgpVersionVrfAfiSafiNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-rd-network}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiRdNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd-network", reflect.TypeOf(ClearBgpVersionVrfAfiSafiRdNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-vrf-network}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf-network", reflect.TypeOf(ClearBgpVersionVrfAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-ipv6-addr}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-ipv6-prefix}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-prefix", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-rd}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiRd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd", reflect.TypeOf(ClearBgpVersionVrfAfiSafiRd{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-vrf}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiVrf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf", reflect.TypeOf(ClearBgpVersionVrfAfiSafiVrf{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi}", reflect.TypeOf(ClearBgpVersionVrfAfiSafi{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi", reflect.TypeOf(ClearBgpVersionVrfAfiSafi{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-all-graceful}", reflect.TypeOf(ClearBgpVrfAllGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all-graceful", reflect.TypeOf(ClearBgpVrfAllGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-all}", reflect.TypeOf(ClearBgpVrfAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all", reflect.TypeOf(ClearBgpVrfAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-ip-addr-graceful}", reflect.TypeOf(ClearBgpVrfIpAddrGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-graceful", reflect.TypeOf(ClearBgpVrfIpAddrGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-ip-addr-long-lived-stale}", reflect.TypeOf(ClearBgpVrfIpAddrLongLivedStale{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-long-lived-stale", reflect.TypeOf(ClearBgpVrfIpAddrLongLivedStale{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-ip-addr}", reflect.TypeOf(ClearBgpVrfIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr", reflect.TypeOf(ClearBgpVrfIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-as-graceful}", reflect.TypeOf(ClearBgpVrfAsGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as-graceful", reflect.TypeOf(ClearBgpVrfAsGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-as}", reflect.TypeOf(ClearBgpVrfAs{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as", reflect.TypeOf(ClearBgpVrfAs{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-external-graceful}", reflect.TypeOf(ClearBgpVrfExternalGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external-graceful", reflect.TypeOf(ClearBgpVrfExternalGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-external}", reflect.TypeOf(ClearBgpVrfExternal{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external", reflect.TypeOf(ClearBgpVrfExternal{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpVrfAfiSafiAllSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter", reflect.TypeOf(ClearBgpVrfAfiSafiAllSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-all-soft-in}", reflect.TypeOf(ClearBgpVrfAfiSafiAllSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in", reflect.TypeOf(ClearBgpVrfAfiSafiAllSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-all-soft-out}", reflect.TypeOf(ClearBgpVrfAfiSafiAllSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-out", reflect.TypeOf(ClearBgpVrfAfiSafiAllSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-all-soft}", reflect.TypeOf(ClearBgpVrfAfiSafiAllSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft", reflect.TypeOf(ClearBgpVrfAfiSafiAllSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale}", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrLongLivedStale{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrLongLivedStale{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-ip-addr-soft-in}", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-ip-addr-soft-out}", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-out", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-ip-addr-soft}", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpVrfAfiSafiAsSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter", reflect.TypeOf(ClearBgpVrfAfiSafiAsSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-as-soft-in}", reflect.TypeOf(ClearBgpVrfAfiSafiAsSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in", reflect.TypeOf(ClearBgpVrfAfiSafiAsSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-as-soft-out}", reflect.TypeOf(ClearBgpVrfAfiSafiAsSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-out", reflect.TypeOf(ClearBgpVrfAfiSafiAsSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-as-soft}", reflect.TypeOf(ClearBgpVrfAfiSafiAsSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft", reflect.TypeOf(ClearBgpVrfAfiSafiAsSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-dampening-ipv4-prefix}", reflect.TypeOf(ClearBgpVrfAfiSafiDampeningIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv4-prefix", reflect.TypeOf(ClearBgpVrfAfiSafiDampeningIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-dampening}", reflect.TypeOf(ClearBgpVrfAfiSafiDampening{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening", reflect.TypeOf(ClearBgpVrfAfiSafiDampening{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpVrfAfiSafiExternalSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter", reflect.TypeOf(ClearBgpVrfAfiSafiExternalSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-external-soft-in}", reflect.TypeOf(ClearBgpVrfAfiSafiExternalSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in", reflect.TypeOf(ClearBgpVrfAfiSafiExternalSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-external-soft-out}", reflect.TypeOf(ClearBgpVrfAfiSafiExternalSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-out", reflect.TypeOf(ClearBgpVrfAfiSafiExternalSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-external-soft}", reflect.TypeOf(ClearBgpVrfAfiSafiExternalSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft", reflect.TypeOf(ClearBgpVrfAfiSafiExternalSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask}", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-flap-statistics-ip-addr}", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix}", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-flap-statistics-regexp}", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsRegexp{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-regexp", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsRegexp{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-flap-statistics-route-policy}", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-route-policy", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-flap-statistics}", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-nexthop-performance-statistics}", reflect.TypeOf(ClearBgpVrfAfiSafiNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-performance-statistics", reflect.TypeOf(ClearBgpVrfAfiSafiNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr}", reflect.TypeOf(ClearBgpVrfAfiSafiNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr", reflect.TypeOf(ClearBgpVrfAfiSafiNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-self-originated}", reflect.TypeOf(ClearBgpVrfAfiSafiSelfOriginated{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-self-originated", reflect.TypeOf(ClearBgpVrfAfiSafiSelfOriginated{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-shutdown}", reflect.TypeOf(ClearBgpVrfAfiSafiShutdown{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-shutdown", reflect.TypeOf(ClearBgpVrfAfiSafiShutdown{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-address-family}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-update-group}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-dampening-ipv6-prefix}", reflect.TypeOf(ClearBgpVrfAfiSafiDampeningIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv6-prefix", reflect.TypeOf(ClearBgpVrfAfiSafiDampeningIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix}", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-nexthop-performance-statistics}", reflect.TypeOf(ClearBgpVrfNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-performance-statistics", reflect.TypeOf(ClearBgpVrfNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-nexthop-registration-ip-addr}", reflect.TypeOf(ClearBgpVrfNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-registration-ip-addr", reflect.TypeOf(ClearBgpVrfNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-peer-drops-all}", reflect.TypeOf(ClearBgpVrfPeerDropsAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-all", reflect.TypeOf(ClearBgpVrfPeerDropsAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-peer-drops-ip-addr}", reflect.TypeOf(ClearBgpVrfPeerDropsIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-ip-addr", reflect.TypeOf(ClearBgpVrfPeerDropsIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-performance-statistics}", reflect.TypeOf(ClearBgpVrfPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-performance-statistics", reflect.TypeOf(ClearBgpVrfPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-shutdown}", reflect.TypeOf(ClearBgpVrfShutdown{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-shutdown", reflect.TypeOf(ClearBgpVrfShutdown{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-address-family-update-parent}", reflect.TypeOf(ClearBgpVrfUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family-update-parent", reflect.TypeOf(ClearBgpVrfUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-address-family}", reflect.TypeOf(ClearBgpVrfUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family", reflect.TypeOf(ClearBgpVrfUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent}", reflect.TypeOf(ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent", reflect.TypeOf(ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh}", reflect.TypeOf(ClearBgpVrfUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh", reflect.TypeOf(ClearBgpVrfUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent}", reflect.TypeOf(ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent", reflect.TypeOf(ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-neighbor-ip-addr}", reflect.TypeOf(ClearBgpVrfUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr", reflect.TypeOf(ClearBgpVrfUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-update-group-sub-group-update-parent}", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-update-parent", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-update-group-sub-group}", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent}", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group}", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-update-group-update-parent}", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-update-parent", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-update-group}", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroup{}))
}

// InstanceName
type InstanceName string

const (
    InstanceName_all InstanceName = "all"
)

// Vpnv6Safi
type Vpnv6Safi string

const (
    Vpnv6Safi_flowspec Vpnv6Safi = "flowspec"

    Vpnv6Safi_multicast Vpnv6Safi = "multicast"

    Vpnv6Safi_unicast Vpnv6Safi = "unicast"
)

// Afi
type Afi string

const (
    // Both ipv4 and ipv6 address families
    Afi_all Afi = "all"

    Afi_ipv4 Afi = "ipv4"

    Afi_ipv6 Afi = "ipv6"

    Afi_l2vpn Afi = "l2vpn"

    Afi_link_state Afi = "link-state"

    Afi_vpnv4 Afi = "vpnv4"

    Afi_vpnv6 Afi = "vpnv6"
)

// VrfName
type VrfName string

const (
    VrfName_all VrfName = "all"
)

// Ipv4Safi
type Ipv4Safi string

const (
    // Both unicast and multicast address family modifiers
    Ipv4Safi_all Ipv4Safi = "all"

    Ipv4Safi_flowspec Ipv4Safi = "flowspec"

    Ipv4Safi_labeled_unicast Ipv4Safi = "labeled-unicast"

    Ipv4Safi_mdt Ipv4Safi = "mdt"

    Ipv4Safi_multicast Ipv4Safi = "multicast"

    Ipv4Safi_mvpn Ipv4Safi = "mvpn"

    Ipv4Safi_rt_filter Ipv4Safi = "rt-filter"

    Ipv4Safi_sr_policy Ipv4Safi = "sr-policy"

    Ipv4Safi_tunnel Ipv4Safi = "tunnel"

    Ipv4Safi_unicast Ipv4Safi = "unicast"
)

// AfiSafiType
type AfiSafiType string

const (
    // Both unicast and multicast address family modifiers
    // of ipv4 and ipv6 address family
    AfiSafiType_all_all AfiSafiType = "all-all"

    AfiSafiType_all_evpn AfiSafiType = "all-evpn"

    AfiSafiType_all_flowspec AfiSafiType = "all-flowspec"

    AfiSafiType_all_labeled_unicast AfiSafiType = "all-labeled-unicast"

    AfiSafiType_all_mdt AfiSafiType = "all-mdt"

    AfiSafiType_all_mspw AfiSafiType = "all-mspw"

    AfiSafiType_all_multicast AfiSafiType = "all-multicast"

    AfiSafiType_all_mvpn AfiSafiType = "all-mvpn"

    AfiSafiType_all_rt_filter AfiSafiType = "all-rt-filter"

    AfiSafiType_all_sr_policy AfiSafiType = "all-sr-policy"

    AfiSafiType_all_tunnel AfiSafiType = "all-tunnel"

    AfiSafiType_all_unicast AfiSafiType = "all-unicast"

    AfiSafiType_all_vpls AfiSafiType = "all-vpls"

    AfiSafiType_all_vpws AfiSafiType = "all-vpws"

    // Both unicast and multicast address family modifiers
    AfiSafiType_ipv4_all AfiSafiType = "ipv4-all"

    AfiSafiType_ipv4_flowspec AfiSafiType = "ipv4-flowspec"

    AfiSafiType_ipv4_labeled_unicast AfiSafiType = "ipv4-labeled-unicast"

    AfiSafiType_ipv4_mdt AfiSafiType = "ipv4-mdt"

    AfiSafiType_ipv4_multicast AfiSafiType = "ipv4-multicast"

    AfiSafiType_ipv4_mvpn AfiSafiType = "ipv4-mvpn"

    AfiSafiType_ipv4_rt_filter AfiSafiType = "ipv4-rt-filter"

    AfiSafiType_ipv4_sr_policy AfiSafiType = "ipv4-sr-policy"

    AfiSafiType_ipv4_tunnel AfiSafiType = "ipv4-tunnel"

    AfiSafiType_ipv4_unicast AfiSafiType = "ipv4-unicast"

    // Both unicast and multicast address family modifiers
    AfiSafiType_ipv6_all AfiSafiType = "ipv6-all"

    AfiSafiType_ipv6_flowspec AfiSafiType = "ipv6-flowspec"

    AfiSafiType_ipv6_labeled_unicast AfiSafiType = "ipv6-labeled-unicast"

    AfiSafiType_ipv6_multicast AfiSafiType = "ipv6-multicast"

    AfiSafiType_ipv6_mvpn AfiSafiType = "ipv6-mvpn"

    AfiSafiType_ipv6_sr_policy AfiSafiType = "ipv6-sr-policy"

    AfiSafiType_ipv6_unicast AfiSafiType = "ipv6-unicast"

    AfiSafiType_l2vpn_evpn AfiSafiType = "l2vpn-evpn"

    AfiSafiType_l2vpn_mspw AfiSafiType = "l2vpn-mspw"

    AfiSafiType_l2vpn_vpls AfiSafiType = "l2vpn-vpls"

    AfiSafiType_l2vpn_vpws AfiSafiType = "l2vpn-vpws"

    AfiSafiType_link_state AfiSafiType = "link-state"

    AfiSafiType_vpnv4_flowspec AfiSafiType = "vpnv4-flowspec"

    AfiSafiType_vpnv4_multicast AfiSafiType = "vpnv4-multicast"

    AfiSafiType_vpnv4_unicast AfiSafiType = "vpnv4-unicast"

    AfiSafiType_vpnv6_flowspec AfiSafiType = "vpnv6-flowspec"

    AfiSafiType_vpnv6_multicast AfiSafiType = "vpnv6-multicast"

    AfiSafiType_vpnv6_unicast AfiSafiType = "vpnv6-unicast"
)

// Vpnv4Safi
type Vpnv4Safi string

const (
    Vpnv4Safi_flowspec Vpnv4Safi = "flowspec"

    Vpnv4Safi_multicast Vpnv4Safi = "multicast"

    Vpnv4Safi_unicast Vpnv4Safi = "unicast"
)

// Ipv6Safi
type Ipv6Safi string

const (
    // Both unicast and multicast address family modifiers
    Ipv6Safi_all Ipv6Safi = "all"

    Ipv6Safi_flowspec Ipv6Safi = "flowspec"

    Ipv6Safi_labeled_unicast Ipv6Safi = "labeled-unicast"

    Ipv6Safi_multicast Ipv6Safi = "multicast"

    Ipv6Safi_mvpn Ipv6Safi = "mvpn"

    Ipv6Safi_sr_policy Ipv6Safi = "sr-policy"

    Ipv6Safi_unicast Ipv6Safi = "unicast"
)

// Ipv4Safi_
type Ipv4Safi_ string

const (
    // Both unicast and multicast address family modifiers
    Ipv4Safi__all Ipv4Safi_ = "all"

    Ipv4Safi__flowspec Ipv4Safi_ = "flowspec"

    Ipv4Safi__labeled_unicast Ipv4Safi_ = "labeled-unicast"

    Ipv4Safi__mdt Ipv4Safi_ = "mdt"

    Ipv4Safi__multicast Ipv4Safi_ = "multicast"

    Ipv4Safi__mvpn Ipv4Safi_ = "mvpn"

    Ipv4Safi__rt_filter Ipv4Safi_ = "rt-filter"

    Ipv4Safi__sr_policy Ipv4Safi_ = "sr-policy"

    Ipv4Safi__tunnel Ipv4Safi_ = "tunnel"

    Ipv4Safi__unicast Ipv4Safi_ = "unicast"
)

// Ipv6Safi_
type Ipv6Safi_ string

const (
    // Both unicast and multicast address family modifiers
    Ipv6Safi__all Ipv6Safi_ = "all"

    Ipv6Safi__flowspec Ipv6Safi_ = "flowspec"

    Ipv6Safi__labeled_unicast Ipv6Safi_ = "labeled-unicast"

    Ipv6Safi__multicast Ipv6Safi_ = "multicast"

    Ipv6Safi__mvpn Ipv6Safi_ = "mvpn"

    Ipv6Safi__sr_policy Ipv6Safi_ = "sr-policy"

    Ipv6Safi__unicast Ipv6Safi_ = "unicast"
)

// L2vpnSafi
type L2vpnSafi string

const (
    L2vpnSafi_evpn L2vpnSafi = "evpn"

    L2vpnSafi_mspw L2vpnSafi = "mspw"

    L2vpnSafi_vpls L2vpnSafi = "vpls"

    L2vpnSafi_vpws L2vpnSafi = "vpws"
)

// LinkStateSafi
type LinkStateSafi string

const (
    LinkStateSafi_link_state LinkStateSafi = "link-state"
)

// Vpnv4Safi_
type Vpnv4Safi_ string

const (
    Vpnv4Safi__flowspec Vpnv4Safi_ = "flowspec"

    Vpnv4Safi__multicast Vpnv4Safi_ = "multicast"

    Vpnv4Safi__unicast Vpnv4Safi_ = "unicast"
)

// Vpnv6Safi_
type Vpnv6Safi_ string

const (
    Vpnv6Safi__flowspec Vpnv6Safi_ = "flowspec"

    Vpnv6Safi__multicast Vpnv6Safi_ = "multicast"

    Vpnv6Safi__unicast Vpnv6Safi_ = "unicast"
)

// L2vpnSafi_
type L2vpnSafi_ string

const (
    L2vpnSafi__evpn L2vpnSafi_ = "evpn"

    L2vpnSafi__mspw L2vpnSafi_ = "mspw"

    L2vpnSafi__vpls L2vpnSafi_ = "vpls"

    L2vpnSafi__vpws L2vpnSafi_ = "vpws"
)

// LinkStateSafi_
type LinkStateSafi_ string

const (
    LinkStateSafi__link_state LinkStateSafi_ = "link-state"
)

// ClearBgpAllGraceful
// Clear all peers and all routes from the BGP table.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpAllGraceful struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (clearBgpAllGraceful *ClearBgpAllGraceful) GetEntityData() *types.CommonEntityData {
    clearBgpAllGraceful.EntityData.YFilter = clearBgpAllGraceful.YFilter
    clearBgpAllGraceful.EntityData.YangName = "clear-bgp-all-graceful"
    clearBgpAllGraceful.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAllGraceful.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAllGraceful.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-all-graceful"
    clearBgpAllGraceful.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAllGraceful.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAllGraceful.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAllGraceful.EntityData.Children = types.NewOrderedMap()
    clearBgpAllGraceful.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAllGraceful.EntityData.YListKeys = []string {}

    return &(clearBgpAllGraceful.EntityData)
}

// ClearBgpAll
// Clear all peers and all routes from the BGP table.
// 
type ClearBgpAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (clearBgpAll *ClearBgpAll) GetEntityData() *types.CommonEntityData {
    clearBgpAll.EntityData.YFilter = clearBgpAll.YFilter
    clearBgpAll.EntityData.YangName = "clear-bgp-all"
    clearBgpAll.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAll.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAll.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-all"
    clearBgpAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAll.EntityData.Children = types.NewOrderedMap()
    clearBgpAll.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAll.EntityData.YListKeys = []string {}

    return &(clearBgpAll.EntityData)
}

// ClearBgpIpAddrGraceful
// BGP neighbor address to clear.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpIpAddrGraceful struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpIpAddrGraceful_Input
}

func (clearBgpIpAddrGraceful *ClearBgpIpAddrGraceful) GetEntityData() *types.CommonEntityData {
    clearBgpIpAddrGraceful.EntityData.YFilter = clearBgpIpAddrGraceful.YFilter
    clearBgpIpAddrGraceful.EntityData.YangName = "clear-bgp-ip-addr-graceful"
    clearBgpIpAddrGraceful.EntityData.BundleName = "cisco_ios_xr"
    clearBgpIpAddrGraceful.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpIpAddrGraceful.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-graceful"
    clearBgpIpAddrGraceful.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpIpAddrGraceful.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpIpAddrGraceful.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpIpAddrGraceful.EntityData.Children = types.NewOrderedMap()
    clearBgpIpAddrGraceful.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpIpAddrGraceful.Input})
    clearBgpIpAddrGraceful.EntityData.Leafs = types.NewOrderedMap()

    clearBgpIpAddrGraceful.EntityData.YListKeys = []string {}

    return &(clearBgpIpAddrGraceful.EntityData)
}

// ClearBgpIpAddrGraceful_Input
type ClearBgpIpAddrGraceful_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpIpAddrGraceful_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-ip-addr-graceful"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpIpAddrLongLivedStale
// BGP neighbor address to clear.
// Clear long-lived-stale routes.
// 
type ClearBgpIpAddrLongLivedStale struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpIpAddrLongLivedStale_Input
}

func (clearBgpIpAddrLongLivedStale *ClearBgpIpAddrLongLivedStale) GetEntityData() *types.CommonEntityData {
    clearBgpIpAddrLongLivedStale.EntityData.YFilter = clearBgpIpAddrLongLivedStale.YFilter
    clearBgpIpAddrLongLivedStale.EntityData.YangName = "clear-bgp-ip-addr-long-lived-stale"
    clearBgpIpAddrLongLivedStale.EntityData.BundleName = "cisco_ios_xr"
    clearBgpIpAddrLongLivedStale.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpIpAddrLongLivedStale.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-long-lived-stale"
    clearBgpIpAddrLongLivedStale.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpIpAddrLongLivedStale.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpIpAddrLongLivedStale.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpIpAddrLongLivedStale.EntityData.Children = types.NewOrderedMap()
    clearBgpIpAddrLongLivedStale.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpIpAddrLongLivedStale.Input})
    clearBgpIpAddrLongLivedStale.EntityData.Leafs = types.NewOrderedMap()

    clearBgpIpAddrLongLivedStale.EntityData.YListKeys = []string {}

    return &(clearBgpIpAddrLongLivedStale.EntityData)
}

// ClearBgpIpAddrLongLivedStale_Input
type ClearBgpIpAddrLongLivedStale_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpIpAddrLongLivedStale_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-ip-addr-long-lived-stale"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpIpAddr
// BGP neighbor address to clear.
// 
type ClearBgpIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpIpAddr_Input
}

func (clearBgpIpAddr *ClearBgpIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpIpAddr.EntityData.YFilter = clearBgpIpAddr.YFilter
    clearBgpIpAddr.EntityData.YangName = "clear-bgp-ip-addr"
    clearBgpIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr"
    clearBgpIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpIpAddr.Input})
    clearBgpIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpIpAddr.EntityData)
}

// ClearBgpIpAddr_Input
type ClearBgpIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiAllSoftInPrefixFilter
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpAfiSafiAllSoftInPrefixFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiAllSoftInPrefixFilter_Input
}

func (clearBgpAfiSafiAllSoftInPrefixFilter *ClearBgpAfiSafiAllSoftInPrefixFilter) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiAllSoftInPrefixFilter.EntityData.YFilter = clearBgpAfiSafiAllSoftInPrefixFilter.YFilter
    clearBgpAfiSafiAllSoftInPrefixFilter.EntityData.YangName = "clear-bgp-afi-safi-all-soft-in-prefix-filter"
    clearBgpAfiSafiAllSoftInPrefixFilter.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiAllSoftInPrefixFilter.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiAllSoftInPrefixFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in-prefix-filter"
    clearBgpAfiSafiAllSoftInPrefixFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiAllSoftInPrefixFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiAllSoftInPrefixFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiAllSoftInPrefixFilter.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiAllSoftInPrefixFilter.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiAllSoftInPrefixFilter.Input})
    clearBgpAfiSafiAllSoftInPrefixFilter.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiAllSoftInPrefixFilter.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiAllSoftInPrefixFilter.EntityData)
}

// ClearBgpAfiSafiAllSoftInPrefixFilter_Input
type ClearBgpAfiSafiAllSoftInPrefixFilter_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiAllSoftInPrefixFilter_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-all-soft-in-prefix-filter"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiAllSoftIn
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpAfiSafiAllSoftIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiAllSoftIn_Input
}

func (clearBgpAfiSafiAllSoftIn *ClearBgpAfiSafiAllSoftIn) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiAllSoftIn.EntityData.YFilter = clearBgpAfiSafiAllSoftIn.YFilter
    clearBgpAfiSafiAllSoftIn.EntityData.YangName = "clear-bgp-afi-safi-all-soft-in"
    clearBgpAfiSafiAllSoftIn.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiAllSoftIn.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiAllSoftIn.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in"
    clearBgpAfiSafiAllSoftIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiAllSoftIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiAllSoftIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiAllSoftIn.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiAllSoftIn.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiAllSoftIn.Input})
    clearBgpAfiSafiAllSoftIn.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiAllSoftIn.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiAllSoftIn.EntityData)
}

// ClearBgpAfiSafiAllSoftIn_Input
type ClearBgpAfiSafiAllSoftIn_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiAllSoftIn_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-all-soft-in"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiAllSoftOut
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpAfiSafiAllSoftOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiAllSoftOut_Input
}

func (clearBgpAfiSafiAllSoftOut *ClearBgpAfiSafiAllSoftOut) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiAllSoftOut.EntityData.YFilter = clearBgpAfiSafiAllSoftOut.YFilter
    clearBgpAfiSafiAllSoftOut.EntityData.YangName = "clear-bgp-afi-safi-all-soft-out"
    clearBgpAfiSafiAllSoftOut.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiAllSoftOut.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiAllSoftOut.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-out"
    clearBgpAfiSafiAllSoftOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiAllSoftOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiAllSoftOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiAllSoftOut.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiAllSoftOut.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiAllSoftOut.Input})
    clearBgpAfiSafiAllSoftOut.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiAllSoftOut.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiAllSoftOut.EntityData)
}

// ClearBgpAfiSafiAllSoftOut_Input
type ClearBgpAfiSafiAllSoftOut_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiAllSoftOut_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-all-soft-out"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiAllSoft
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// 
type ClearBgpAfiSafiAllSoft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiAllSoft_Input
}

func (clearBgpAfiSafiAllSoft *ClearBgpAfiSafiAllSoft) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiAllSoft.EntityData.YFilter = clearBgpAfiSafiAllSoft.YFilter
    clearBgpAfiSafiAllSoft.EntityData.YangName = "clear-bgp-afi-safi-all-soft"
    clearBgpAfiSafiAllSoft.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiAllSoft.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiAllSoft.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft"
    clearBgpAfiSafiAllSoft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiAllSoft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiAllSoft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiAllSoft.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiAllSoft.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiAllSoft.Input})
    clearBgpAfiSafiAllSoft.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiAllSoft.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiAllSoft.EntityData)
}

// ClearBgpAfiSafiAllSoft_Input
type ClearBgpAfiSafiAllSoft_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiAllSoft_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-all-soft"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiIpAddrLongLivedStale
// Clear long-lived-stale routes.
// 
type ClearBgpAfiSafiIpAddrLongLivedStale struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiIpAddrLongLivedStale_Input
}

func (clearBgpAfiSafiIpAddrLongLivedStale *ClearBgpAfiSafiIpAddrLongLivedStale) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiIpAddrLongLivedStale.EntityData.YFilter = clearBgpAfiSafiIpAddrLongLivedStale.YFilter
    clearBgpAfiSafiIpAddrLongLivedStale.EntityData.YangName = "clear-bgp-afi-safi-ip-addr-long-lived-stale"
    clearBgpAfiSafiIpAddrLongLivedStale.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiIpAddrLongLivedStale.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiIpAddrLongLivedStale.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-long-lived-stale"
    clearBgpAfiSafiIpAddrLongLivedStale.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiIpAddrLongLivedStale.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiIpAddrLongLivedStale.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiIpAddrLongLivedStale.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiIpAddrLongLivedStale.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiIpAddrLongLivedStale.Input})
    clearBgpAfiSafiIpAddrLongLivedStale.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiIpAddrLongLivedStale.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiIpAddrLongLivedStale.EntityData)
}

// ClearBgpAfiSafiIpAddrLongLivedStale_Input
type ClearBgpAfiSafiIpAddrLongLivedStale_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiIpAddrLongLivedStale_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-ip-addr-long-lived-stale"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiIpAddrSoftInPrefixFilter
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpAfiSafiIpAddrSoftInPrefixFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input
}

func (clearBgpAfiSafiIpAddrSoftInPrefixFilter *ClearBgpAfiSafiIpAddrSoftInPrefixFilter) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiIpAddrSoftInPrefixFilter.EntityData.YFilter = clearBgpAfiSafiIpAddrSoftInPrefixFilter.YFilter
    clearBgpAfiSafiIpAddrSoftInPrefixFilter.EntityData.YangName = "clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter"
    clearBgpAfiSafiIpAddrSoftInPrefixFilter.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiIpAddrSoftInPrefixFilter.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiIpAddrSoftInPrefixFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter"
    clearBgpAfiSafiIpAddrSoftInPrefixFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiIpAddrSoftInPrefixFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiIpAddrSoftInPrefixFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiIpAddrSoftInPrefixFilter.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiIpAddrSoftInPrefixFilter.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiIpAddrSoftInPrefixFilter.Input})
    clearBgpAfiSafiIpAddrSoftInPrefixFilter.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiIpAddrSoftInPrefixFilter.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiIpAddrSoftInPrefixFilter.EntityData)
}

// ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input
type ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiIpAddrSoftIn
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpAfiSafiIpAddrSoftIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiIpAddrSoftIn_Input
}

func (clearBgpAfiSafiIpAddrSoftIn *ClearBgpAfiSafiIpAddrSoftIn) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiIpAddrSoftIn.EntityData.YFilter = clearBgpAfiSafiIpAddrSoftIn.YFilter
    clearBgpAfiSafiIpAddrSoftIn.EntityData.YangName = "clear-bgp-afi-safi-ip-addr-soft-in"
    clearBgpAfiSafiIpAddrSoftIn.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiIpAddrSoftIn.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiIpAddrSoftIn.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in"
    clearBgpAfiSafiIpAddrSoftIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiIpAddrSoftIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiIpAddrSoftIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiIpAddrSoftIn.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiIpAddrSoftIn.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiIpAddrSoftIn.Input})
    clearBgpAfiSafiIpAddrSoftIn.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiIpAddrSoftIn.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiIpAddrSoftIn.EntityData)
}

// ClearBgpAfiSafiIpAddrSoftIn_Input
type ClearBgpAfiSafiIpAddrSoftIn_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiIpAddrSoftIn_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-ip-addr-soft-in"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiIpAddrSoftOut
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpAfiSafiIpAddrSoftOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiIpAddrSoftOut_Input
}

func (clearBgpAfiSafiIpAddrSoftOut *ClearBgpAfiSafiIpAddrSoftOut) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiIpAddrSoftOut.EntityData.YFilter = clearBgpAfiSafiIpAddrSoftOut.YFilter
    clearBgpAfiSafiIpAddrSoftOut.EntityData.YangName = "clear-bgp-afi-safi-ip-addr-soft-out"
    clearBgpAfiSafiIpAddrSoftOut.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiIpAddrSoftOut.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiIpAddrSoftOut.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-out"
    clearBgpAfiSafiIpAddrSoftOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiIpAddrSoftOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiIpAddrSoftOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiIpAddrSoftOut.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiIpAddrSoftOut.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiIpAddrSoftOut.Input})
    clearBgpAfiSafiIpAddrSoftOut.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiIpAddrSoftOut.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiIpAddrSoftOut.EntityData)
}

// ClearBgpAfiSafiIpAddrSoftOut_Input
type ClearBgpAfiSafiIpAddrSoftOut_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiIpAddrSoftOut_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-ip-addr-soft-out"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiIpAddrSoft
// Soft reconfig.
// 
type ClearBgpAfiSafiIpAddrSoft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiIpAddrSoft_Input
}

func (clearBgpAfiSafiIpAddrSoft *ClearBgpAfiSafiIpAddrSoft) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiIpAddrSoft.EntityData.YFilter = clearBgpAfiSafiIpAddrSoft.YFilter
    clearBgpAfiSafiIpAddrSoft.EntityData.YangName = "clear-bgp-afi-safi-ip-addr-soft"
    clearBgpAfiSafiIpAddrSoft.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiIpAddrSoft.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiIpAddrSoft.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft"
    clearBgpAfiSafiIpAddrSoft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiIpAddrSoft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiIpAddrSoft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiIpAddrSoft.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiIpAddrSoft.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiIpAddrSoft.Input})
    clearBgpAfiSafiIpAddrSoft.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiIpAddrSoft.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiIpAddrSoft.EntityData)
}

// ClearBgpAfiSafiIpAddrSoft_Input
type ClearBgpAfiSafiIpAddrSoft_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiIpAddrSoft_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-ip-addr-soft"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiAsSoftInPrefixFilter
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpAfiSafiAsSoftInPrefixFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiAsSoftInPrefixFilter_Input
}

func (clearBgpAfiSafiAsSoftInPrefixFilter *ClearBgpAfiSafiAsSoftInPrefixFilter) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiAsSoftInPrefixFilter.EntityData.YFilter = clearBgpAfiSafiAsSoftInPrefixFilter.YFilter
    clearBgpAfiSafiAsSoftInPrefixFilter.EntityData.YangName = "clear-bgp-afi-safi-as-soft-in-prefix-filter"
    clearBgpAfiSafiAsSoftInPrefixFilter.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiAsSoftInPrefixFilter.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiAsSoftInPrefixFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in-prefix-filter"
    clearBgpAfiSafiAsSoftInPrefixFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiAsSoftInPrefixFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiAsSoftInPrefixFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiAsSoftInPrefixFilter.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiAsSoftInPrefixFilter.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiAsSoftInPrefixFilter.Input})
    clearBgpAfiSafiAsSoftInPrefixFilter.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiAsSoftInPrefixFilter.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiAsSoftInPrefixFilter.EntityData)
}

// ClearBgpAfiSafiAsSoftInPrefixFilter_Input
type ClearBgpAfiSafiAsSoftInPrefixFilter_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpAfiSafiAsSoftInPrefixFilter_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-as-soft-in-prefix-filter"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiAsSoftIn
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpAfiSafiAsSoftIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiAsSoftIn_Input
}

func (clearBgpAfiSafiAsSoftIn *ClearBgpAfiSafiAsSoftIn) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiAsSoftIn.EntityData.YFilter = clearBgpAfiSafiAsSoftIn.YFilter
    clearBgpAfiSafiAsSoftIn.EntityData.YangName = "clear-bgp-afi-safi-as-soft-in"
    clearBgpAfiSafiAsSoftIn.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiAsSoftIn.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiAsSoftIn.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in"
    clearBgpAfiSafiAsSoftIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiAsSoftIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiAsSoftIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiAsSoftIn.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiAsSoftIn.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiAsSoftIn.Input})
    clearBgpAfiSafiAsSoftIn.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiAsSoftIn.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiAsSoftIn.EntityData)
}

// ClearBgpAfiSafiAsSoftIn_Input
type ClearBgpAfiSafiAsSoftIn_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpAfiSafiAsSoftIn_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-as-soft-in"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiAsSoftOut
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpAfiSafiAsSoftOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiAsSoftOut_Input
}

func (clearBgpAfiSafiAsSoftOut *ClearBgpAfiSafiAsSoftOut) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiAsSoftOut.EntityData.YFilter = clearBgpAfiSafiAsSoftOut.YFilter
    clearBgpAfiSafiAsSoftOut.EntityData.YangName = "clear-bgp-afi-safi-as-soft-out"
    clearBgpAfiSafiAsSoftOut.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiAsSoftOut.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiAsSoftOut.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-out"
    clearBgpAfiSafiAsSoftOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiAsSoftOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiAsSoftOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiAsSoftOut.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiAsSoftOut.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiAsSoftOut.Input})
    clearBgpAfiSafiAsSoftOut.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiAsSoftOut.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiAsSoftOut.EntityData)
}

// ClearBgpAfiSafiAsSoftOut_Input
type ClearBgpAfiSafiAsSoftOut_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpAfiSafiAsSoftOut_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-as-soft-out"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiAsSoft
// Clear peers in a specific AS.
// Soft reconfig.
// 
type ClearBgpAfiSafiAsSoft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiAsSoft_Input
}

func (clearBgpAfiSafiAsSoft *ClearBgpAfiSafiAsSoft) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiAsSoft.EntityData.YFilter = clearBgpAfiSafiAsSoft.YFilter
    clearBgpAfiSafiAsSoft.EntityData.YangName = "clear-bgp-afi-safi-as-soft"
    clearBgpAfiSafiAsSoft.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiAsSoft.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiAsSoft.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft"
    clearBgpAfiSafiAsSoft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiAsSoft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiAsSoft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiAsSoft.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiAsSoft.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiAsSoft.Input})
    clearBgpAfiSafiAsSoft.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiAsSoft.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiAsSoft.EntityData)
}

// ClearBgpAfiSafiAsSoft_Input
type ClearBgpAfiSafiAsSoft_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpAfiSafiAsSoft_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-as-soft"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiDampeningIpPrefix
// Clear route flap dampening information.
// 
type ClearBgpAfiSafiDampeningIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiDampeningIpPrefix_Input
}

func (clearBgpAfiSafiDampeningIpPrefix *ClearBgpAfiSafiDampeningIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiDampeningIpPrefix.EntityData.YFilter = clearBgpAfiSafiDampeningIpPrefix.YFilter
    clearBgpAfiSafiDampeningIpPrefix.EntityData.YangName = "clear-bgp-afi-safi-dampening-ip-prefix"
    clearBgpAfiSafiDampeningIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiDampeningIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiDampeningIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ip-prefix"
    clearBgpAfiSafiDampeningIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiDampeningIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiDampeningIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiDampeningIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiDampeningIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiDampeningIpPrefix.Input})
    clearBgpAfiSafiDampeningIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiDampeningIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiDampeningIpPrefix.EntityData)
}

// ClearBgpAfiSafiDampeningIpPrefix_Input
type ClearBgpAfiSafiDampeningIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network and mask or masklength to clear dampening information. The type is
    // one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpAfiSafiDampeningIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-dampening-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiDampening
// Clear route flap dampening information.
// 
type ClearBgpAfiSafiDampening struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiDampening_Input
}

func (clearBgpAfiSafiDampening *ClearBgpAfiSafiDampening) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiDampening.EntityData.YFilter = clearBgpAfiSafiDampening.YFilter
    clearBgpAfiSafiDampening.EntityData.YangName = "clear-bgp-afi-safi-dampening"
    clearBgpAfiSafiDampening.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiDampening.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiDampening.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening"
    clearBgpAfiSafiDampening.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiDampening.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiDampening.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiDampening.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiDampening.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiDampening.Input})
    clearBgpAfiSafiDampening.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiDampening.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiDampening.EntityData)
}

// ClearBgpAfiSafiDampening_Input
type ClearBgpAfiSafiDampening_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiDampening_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-dampening"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiExternalSoftInPrefixFilter
// Clear all external peers.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpAfiSafiExternalSoftInPrefixFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiExternalSoftInPrefixFilter_Input
}

func (clearBgpAfiSafiExternalSoftInPrefixFilter *ClearBgpAfiSafiExternalSoftInPrefixFilter) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiExternalSoftInPrefixFilter.EntityData.YFilter = clearBgpAfiSafiExternalSoftInPrefixFilter.YFilter
    clearBgpAfiSafiExternalSoftInPrefixFilter.EntityData.YangName = "clear-bgp-afi-safi-external-soft-in-prefix-filter"
    clearBgpAfiSafiExternalSoftInPrefixFilter.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiExternalSoftInPrefixFilter.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiExternalSoftInPrefixFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in-prefix-filter"
    clearBgpAfiSafiExternalSoftInPrefixFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiExternalSoftInPrefixFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiExternalSoftInPrefixFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiExternalSoftInPrefixFilter.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiExternalSoftInPrefixFilter.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiExternalSoftInPrefixFilter.Input})
    clearBgpAfiSafiExternalSoftInPrefixFilter.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiExternalSoftInPrefixFilter.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiExternalSoftInPrefixFilter.EntityData)
}

// ClearBgpAfiSafiExternalSoftInPrefixFilter_Input
type ClearBgpAfiSafiExternalSoftInPrefixFilter_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiExternalSoftInPrefixFilter_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-external-soft-in-prefix-filter"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiExternalSoftIn
// Clear all external peers.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpAfiSafiExternalSoftIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiExternalSoftIn_Input
}

func (clearBgpAfiSafiExternalSoftIn *ClearBgpAfiSafiExternalSoftIn) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiExternalSoftIn.EntityData.YFilter = clearBgpAfiSafiExternalSoftIn.YFilter
    clearBgpAfiSafiExternalSoftIn.EntityData.YangName = "clear-bgp-afi-safi-external-soft-in"
    clearBgpAfiSafiExternalSoftIn.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiExternalSoftIn.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiExternalSoftIn.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in"
    clearBgpAfiSafiExternalSoftIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiExternalSoftIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiExternalSoftIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiExternalSoftIn.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiExternalSoftIn.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiExternalSoftIn.Input})
    clearBgpAfiSafiExternalSoftIn.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiExternalSoftIn.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiExternalSoftIn.EntityData)
}

// ClearBgpAfiSafiExternalSoftIn_Input
type ClearBgpAfiSafiExternalSoftIn_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiExternalSoftIn_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-external-soft-in"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiExternalSoftOut
// Clear all external peers.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpAfiSafiExternalSoftOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiExternalSoftOut_Input
}

func (clearBgpAfiSafiExternalSoftOut *ClearBgpAfiSafiExternalSoftOut) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiExternalSoftOut.EntityData.YFilter = clearBgpAfiSafiExternalSoftOut.YFilter
    clearBgpAfiSafiExternalSoftOut.EntityData.YangName = "clear-bgp-afi-safi-external-soft-out"
    clearBgpAfiSafiExternalSoftOut.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiExternalSoftOut.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiExternalSoftOut.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-out"
    clearBgpAfiSafiExternalSoftOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiExternalSoftOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiExternalSoftOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiExternalSoftOut.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiExternalSoftOut.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiExternalSoftOut.Input})
    clearBgpAfiSafiExternalSoftOut.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiExternalSoftOut.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiExternalSoftOut.EntityData)
}

// ClearBgpAfiSafiExternalSoftOut_Input
type ClearBgpAfiSafiExternalSoftOut_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiExternalSoftOut_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-external-soft-out"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiExternalSoft
// Clear all external peers.
// Soft reconfig.
// 
type ClearBgpAfiSafiExternalSoft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiExternalSoft_Input
}

func (clearBgpAfiSafiExternalSoft *ClearBgpAfiSafiExternalSoft) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiExternalSoft.EntityData.YFilter = clearBgpAfiSafiExternalSoft.YFilter
    clearBgpAfiSafiExternalSoft.EntityData.YangName = "clear-bgp-afi-safi-external-soft"
    clearBgpAfiSafiExternalSoft.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiExternalSoft.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiExternalSoft.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft"
    clearBgpAfiSafiExternalSoft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiExternalSoft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiExternalSoft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiExternalSoft.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiExternalSoft.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiExternalSoft.Input})
    clearBgpAfiSafiExternalSoft.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiExternalSoft.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiExternalSoft.EntityData)
}

// ClearBgpAfiSafiExternalSoft_Input
type ClearBgpAfiSafiExternalSoft_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiExternalSoft_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-external-soft"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask
// Clear flap statistics.
// 
type ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input
}

func (clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.YFilter = clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.YFilter
    clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.YangName = "clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask"
    clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask"
    clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.Input})
    clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData)
}

// ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input
type ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Network and mask or masklength to clear flap statistics. The type is string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiFlapStatisticsIpAddr
// Clear flap statistics.
// 
type ClearBgpAfiSafiFlapStatisticsIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiFlapStatisticsIpAddr_Input
}

func (clearBgpAfiSafiFlapStatisticsIpAddr *ClearBgpAfiSafiFlapStatisticsIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiFlapStatisticsIpAddr.EntityData.YFilter = clearBgpAfiSafiFlapStatisticsIpAddr.YFilter
    clearBgpAfiSafiFlapStatisticsIpAddr.EntityData.YangName = "clear-bgp-afi-safi-flap-statistics-ip-addr"
    clearBgpAfiSafiFlapStatisticsIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiFlapStatisticsIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiFlapStatisticsIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr"
    clearBgpAfiSafiFlapStatisticsIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiFlapStatisticsIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiFlapStatisticsIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiFlapStatisticsIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiFlapStatisticsIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiFlapStatisticsIpAddr.Input})
    clearBgpAfiSafiFlapStatisticsIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiFlapStatisticsIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiFlapStatisticsIpAddr.EntityData)
}

// ClearBgpAfiSafiFlapStatisticsIpAddr_Input
type ClearBgpAfiSafiFlapStatisticsIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiFlapStatisticsIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-flap-statistics-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiFlapStatisticsIpPrefix
// Clear flap statistics.
// 
type ClearBgpAfiSafiFlapStatisticsIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiFlapStatisticsIpPrefix_Input
}

func (clearBgpAfiSafiFlapStatisticsIpPrefix *ClearBgpAfiSafiFlapStatisticsIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiFlapStatisticsIpPrefix.EntityData.YFilter = clearBgpAfiSafiFlapStatisticsIpPrefix.YFilter
    clearBgpAfiSafiFlapStatisticsIpPrefix.EntityData.YangName = "clear-bgp-afi-safi-flap-statistics-ip-prefix"
    clearBgpAfiSafiFlapStatisticsIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiFlapStatisticsIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiFlapStatisticsIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-prefix"
    clearBgpAfiSafiFlapStatisticsIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiFlapStatisticsIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiFlapStatisticsIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiFlapStatisticsIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiFlapStatisticsIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiFlapStatisticsIpPrefix.Input})
    clearBgpAfiSafiFlapStatisticsIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiFlapStatisticsIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiFlapStatisticsIpPrefix.EntityData)
}

// ClearBgpAfiSafiFlapStatisticsIpPrefix_Input
type ClearBgpAfiSafiFlapStatisticsIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network and mask or masklength to clear flap statistics. The type is one of
    // the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpAfiSafiFlapStatisticsIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-flap-statistics-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiFlapStatisticsRegexp
// Clear flap statistics.
// Clear flap statistics for routes matching the regular expression.
// 
type ClearBgpAfiSafiFlapStatisticsRegexp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiFlapStatisticsRegexp_Input
}

func (clearBgpAfiSafiFlapStatisticsRegexp *ClearBgpAfiSafiFlapStatisticsRegexp) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiFlapStatisticsRegexp.EntityData.YFilter = clearBgpAfiSafiFlapStatisticsRegexp.YFilter
    clearBgpAfiSafiFlapStatisticsRegexp.EntityData.YangName = "clear-bgp-afi-safi-flap-statistics-regexp"
    clearBgpAfiSafiFlapStatisticsRegexp.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiFlapStatisticsRegexp.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiFlapStatisticsRegexp.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-regexp"
    clearBgpAfiSafiFlapStatisticsRegexp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiFlapStatisticsRegexp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiFlapStatisticsRegexp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiFlapStatisticsRegexp.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiFlapStatisticsRegexp.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiFlapStatisticsRegexp.Input})
    clearBgpAfiSafiFlapStatisticsRegexp.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiFlapStatisticsRegexp.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiFlapStatisticsRegexp.EntityData)
}

// ClearBgpAfiSafiFlapStatisticsRegexp_Input
type ClearBgpAfiSafiFlapStatisticsRegexp_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // A regular expression to match the BGP AS paths.  Use 'ctrl-v ?' to enter
    // '?'. The type is string. This attribute is mandatory.
    RegexpPattern interface{}
}

func (input *ClearBgpAfiSafiFlapStatisticsRegexp_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-flap-statistics-regexp"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("regexp-pattern", types.YLeaf{"RegexpPattern", input.RegexpPattern})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiFlapStatisticsRoutePolicy
// Clear flap statistics.
// Clear flap statistics for routes matching the route policy.
// 
type ClearBgpAfiSafiFlapStatisticsRoutePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input
}

func (clearBgpAfiSafiFlapStatisticsRoutePolicy *ClearBgpAfiSafiFlapStatisticsRoutePolicy) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiFlapStatisticsRoutePolicy.EntityData.YFilter = clearBgpAfiSafiFlapStatisticsRoutePolicy.YFilter
    clearBgpAfiSafiFlapStatisticsRoutePolicy.EntityData.YangName = "clear-bgp-afi-safi-flap-statistics-route-policy"
    clearBgpAfiSafiFlapStatisticsRoutePolicy.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiFlapStatisticsRoutePolicy.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiFlapStatisticsRoutePolicy.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-route-policy"
    clearBgpAfiSafiFlapStatisticsRoutePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiFlapStatisticsRoutePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiFlapStatisticsRoutePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiFlapStatisticsRoutePolicy.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiFlapStatisticsRoutePolicy.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiFlapStatisticsRoutePolicy.Input})
    clearBgpAfiSafiFlapStatisticsRoutePolicy.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiFlapStatisticsRoutePolicy.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiFlapStatisticsRoutePolicy.EntityData)
}

// ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input
type ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route Policy name. The type is string. This attribute is mandatory.
    RoutePolicyName interface{}
}

func (input *ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-flap-statistics-route-policy"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", input.RoutePolicyName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiFlapStatistics
// Clear flap statistics.
// 
type ClearBgpAfiSafiFlapStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiFlapStatistics_Input
}

func (clearBgpAfiSafiFlapStatistics *ClearBgpAfiSafiFlapStatistics) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiFlapStatistics.EntityData.YFilter = clearBgpAfiSafiFlapStatistics.YFilter
    clearBgpAfiSafiFlapStatistics.EntityData.YangName = "clear-bgp-afi-safi-flap-statistics"
    clearBgpAfiSafiFlapStatistics.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiFlapStatistics.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiFlapStatistics.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics"
    clearBgpAfiSafiFlapStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiFlapStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiFlapStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiFlapStatistics.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiFlapStatistics.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiFlapStatistics.Input})
    clearBgpAfiSafiFlapStatistics.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiFlapStatistics.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiFlapStatistics.EntityData)
}

// ClearBgpAfiSafiFlapStatistics_Input
type ClearBgpAfiSafiFlapStatistics_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiFlapStatistics_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-flap-statistics"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiNexthopPerformanceStatistics
// Clear nexthop.
// Performance statistics information related to processing.
// 
type ClearBgpAfiSafiNexthopPerformanceStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiNexthopPerformanceStatistics_Input
}

func (clearBgpAfiSafiNexthopPerformanceStatistics *ClearBgpAfiSafiNexthopPerformanceStatistics) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiNexthopPerformanceStatistics.EntityData.YFilter = clearBgpAfiSafiNexthopPerformanceStatistics.YFilter
    clearBgpAfiSafiNexthopPerformanceStatistics.EntityData.YangName = "clear-bgp-afi-safi-nexthop-performance-statistics"
    clearBgpAfiSafiNexthopPerformanceStatistics.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiNexthopPerformanceStatistics.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiNexthopPerformanceStatistics.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-performance-statistics"
    clearBgpAfiSafiNexthopPerformanceStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiNexthopPerformanceStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiNexthopPerformanceStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiNexthopPerformanceStatistics.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiNexthopPerformanceStatistics.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiNexthopPerformanceStatistics.Input})
    clearBgpAfiSafiNexthopPerformanceStatistics.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiNexthopPerformanceStatistics.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiNexthopPerformanceStatistics.EntityData)
}

// ClearBgpAfiSafiNexthopPerformanceStatistics_Input
type ClearBgpAfiSafiNexthopPerformanceStatistics_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiNexthopPerformanceStatistics_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-nexthop-performance-statistics"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiNexthopRegistrationIpAddr
// Clear nexthop.
// Registration with RIB and reregister.
// 
type ClearBgpAfiSafiNexthopRegistrationIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiNexthopRegistrationIpAddr_Input
}

func (clearBgpAfiSafiNexthopRegistrationIpAddr *ClearBgpAfiSafiNexthopRegistrationIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiNexthopRegistrationIpAddr.EntityData.YFilter = clearBgpAfiSafiNexthopRegistrationIpAddr.YFilter
    clearBgpAfiSafiNexthopRegistrationIpAddr.EntityData.YangName = "clear-bgp-afi-safi-nexthop-registration-ip-addr"
    clearBgpAfiSafiNexthopRegistrationIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiNexthopRegistrationIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiNexthopRegistrationIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-registration-ip-addr"
    clearBgpAfiSafiNexthopRegistrationIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiNexthopRegistrationIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiNexthopRegistrationIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiNexthopRegistrationIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiNexthopRegistrationIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiNexthopRegistrationIpAddr.Input})
    clearBgpAfiSafiNexthopRegistrationIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiNexthopRegistrationIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiNexthopRegistrationIpAddr.EntityData)
}

// ClearBgpAfiSafiNexthopRegistrationIpAddr_Input
type ClearBgpAfiSafiNexthopRegistrationIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Nexthop address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiNexthopRegistrationIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-nexthop-registration-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiSelfOriginated
// Clear redistributed, network and aggregate routes originated here.
// 
type ClearBgpAfiSafiSelfOriginated struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiSelfOriginated_Input
}

func (clearBgpAfiSafiSelfOriginated *ClearBgpAfiSafiSelfOriginated) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiSelfOriginated.EntityData.YFilter = clearBgpAfiSafiSelfOriginated.YFilter
    clearBgpAfiSafiSelfOriginated.EntityData.YangName = "clear-bgp-afi-safi-self-originated"
    clearBgpAfiSafiSelfOriginated.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiSelfOriginated.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiSelfOriginated.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-self-originated"
    clearBgpAfiSafiSelfOriginated.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiSelfOriginated.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiSelfOriginated.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiSelfOriginated.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiSelfOriginated.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiSelfOriginated.Input})
    clearBgpAfiSafiSelfOriginated.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiSelfOriginated.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiSelfOriginated.EntityData)
}

// ClearBgpAfiSafiSelfOriginated_Input
type ClearBgpAfiSafiSelfOriginated_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiSelfOriginated_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-self-originated"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiShutdown
// Clear all peers which were shut down due to low memory.
// 
type ClearBgpAfiSafiShutdown struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiShutdown_Input
}

func (clearBgpAfiSafiShutdown *ClearBgpAfiSafiShutdown) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiShutdown.EntityData.YFilter = clearBgpAfiSafiShutdown.YFilter
    clearBgpAfiSafiShutdown.EntityData.YangName = "clear-bgp-afi-safi-shutdown"
    clearBgpAfiSafiShutdown.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiShutdown.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiShutdown.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-shutdown"
    clearBgpAfiSafiShutdown.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiShutdown.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiShutdown.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiShutdown.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiShutdown.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiShutdown.Input})
    clearBgpAfiSafiShutdown.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiShutdown.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiShutdown.EntityData)
}

// ClearBgpAfiSafiShutdown_Input
type ClearBgpAfiSafiShutdown_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiShutdown_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-shutdown"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// Update parents' OutQ counters too.
// 
type ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input
}

func (clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.YFilter = clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.YFilter
    clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.YangName = "clear-bgp-afi-safi-update-outq-address-family-update-parent"
    clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family-update-parent"
    clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.Input})
    clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData)
}

// ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input
type ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-update-outq-address-family-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiUpdateOutqAddressFamily
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// 
type ClearBgpAfiSafiUpdateOutqAddressFamily struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqAddressFamily_Input
}

func (clearBgpAfiSafiUpdateOutqAddressFamily *ClearBgpAfiSafiUpdateOutqAddressFamily) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiUpdateOutqAddressFamily.EntityData.YFilter = clearBgpAfiSafiUpdateOutqAddressFamily.YFilter
    clearBgpAfiSafiUpdateOutqAddressFamily.EntityData.YangName = "clear-bgp-afi-safi-update-outq-address-family"
    clearBgpAfiSafiUpdateOutqAddressFamily.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiUpdateOutqAddressFamily.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiUpdateOutqAddressFamily.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family"
    clearBgpAfiSafiUpdateOutqAddressFamily.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiUpdateOutqAddressFamily.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiUpdateOutqAddressFamily.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiUpdateOutqAddressFamily.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiUpdateOutqAddressFamily.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiUpdateOutqAddressFamily.Input})
    clearBgpAfiSafiUpdateOutqAddressFamily.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiUpdateOutqAddressFamily.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiUpdateOutqAddressFamily.EntityData)
}

// ClearBgpAfiSafiUpdateOutqAddressFamily_Input
type ClearBgpAfiSafiUpdateOutqAddressFamily_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqAddressFamily_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-update-outq-address-family"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// Update parents' OutQ counters too.
// 
type ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YFilter = clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YangName = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input})
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData)
}

// ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
type ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// 
type ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.YFilter = clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.YFilter
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.YangName = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh"
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh"
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.Input})
    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData)
}

// ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input
type ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Update parents' OutQ counters too.
// 
type ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.YFilter = clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.YFilter
    clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.YangName = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent"
    clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent"
    clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input})
    clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData)
}

// ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input
type ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiUpdateOutqNeighborIpAddr
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// 
type ClearBgpAfiSafiUpdateOutqNeighborIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddr *ClearBgpAfiSafiUpdateOutqNeighborIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiUpdateOutqNeighborIpAddr.EntityData.YFilter = clearBgpAfiSafiUpdateOutqNeighborIpAddr.YFilter
    clearBgpAfiSafiUpdateOutqNeighborIpAddr.EntityData.YangName = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr"
    clearBgpAfiSafiUpdateOutqNeighborIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiUpdateOutqNeighborIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiUpdateOutqNeighborIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr"
    clearBgpAfiSafiUpdateOutqNeighborIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiUpdateOutqNeighborIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiUpdateOutqNeighborIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiUpdateOutqNeighborIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiUpdateOutqNeighborIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiUpdateOutqNeighborIpAddr.Input})
    clearBgpAfiSafiUpdateOutqNeighborIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiUpdateOutqNeighborIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiUpdateOutqNeighborIpAddr.EntityData)
}

// ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input
type ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-update-outq-neighbor-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YFilter = clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YangName = "clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent"
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent"
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input})
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData)
}

// ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input
type ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("sub-group", types.YLeaf{"SubGroup", input.SubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.YFilter = clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.YFilter
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.YangName = "clear-bgp-afi-safi-update-outq-update-group-sub-group"
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group"
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.Input})
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData)
}

// ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input
type ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-update-outq-update-group-sub-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("sub-group", types.YLeaf{"SubGroup", input.SubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YFilter = clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YangName = "clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input})
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData)
}

// ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
type ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("refresh-sub-group", types.YLeaf{"RefreshSubGroup", input.RefreshSubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YFilter = clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YangName = "clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input})
    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData)
}

// ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
type ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("refresh-sub-group", types.YLeaf{"RefreshSubGroup", input.RefreshSubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Update parents' OutQ counters too.
// 
type ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.YFilter = clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.YFilter
    clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.YangName = "clear-bgp-afi-safi-update-outq-update-group-update-parent"
    clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-update-parent"
    clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.Input})
    clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData)
}

// ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input
type ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-update-outq-update-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiUpdateOutqUpdateGroup
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// 
type ClearBgpAfiSafiUpdateOutqUpdateGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqUpdateGroup_Input
}

func (clearBgpAfiSafiUpdateOutqUpdateGroup *ClearBgpAfiSafiUpdateOutqUpdateGroup) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiUpdateOutqUpdateGroup.EntityData.YFilter = clearBgpAfiSafiUpdateOutqUpdateGroup.YFilter
    clearBgpAfiSafiUpdateOutqUpdateGroup.EntityData.YangName = "clear-bgp-afi-safi-update-outq-update-group"
    clearBgpAfiSafiUpdateOutqUpdateGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiUpdateOutqUpdateGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiUpdateOutqUpdateGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group"
    clearBgpAfiSafiUpdateOutqUpdateGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiUpdateOutqUpdateGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiUpdateOutqUpdateGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiUpdateOutqUpdateGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiUpdateOutqUpdateGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiUpdateOutqUpdateGroup.Input})
    clearBgpAfiSafiUpdateOutqUpdateGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiUpdateOutqUpdateGroup.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiUpdateOutqUpdateGroup.EntityData)
}

// ClearBgpAfiSafiUpdateOutqUpdateGroup_Input
type ClearBgpAfiSafiUpdateOutqUpdateGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-update-outq-update-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAsGraceful
// Clear peers in a specific AS.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpAsGraceful struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAsGraceful_Input
}

func (clearBgpAsGraceful *ClearBgpAsGraceful) GetEntityData() *types.CommonEntityData {
    clearBgpAsGraceful.EntityData.YFilter = clearBgpAsGraceful.YFilter
    clearBgpAsGraceful.EntityData.YangName = "clear-bgp-as-graceful"
    clearBgpAsGraceful.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAsGraceful.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAsGraceful.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as-graceful"
    clearBgpAsGraceful.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAsGraceful.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAsGraceful.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAsGraceful.EntityData.Children = types.NewOrderedMap()
    clearBgpAsGraceful.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAsGraceful.Input})
    clearBgpAsGraceful.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAsGraceful.EntityData.YListKeys = []string {}

    return &(clearBgpAsGraceful.EntityData)
}

// ClearBgpAsGraceful_Input
type ClearBgpAsGraceful_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpAsGraceful_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-as-graceful"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAs
// Clear peers in a specific AS.
// 
type ClearBgpAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAs_Input
}

func (clearBgpAs *ClearBgpAs) GetEntityData() *types.CommonEntityData {
    clearBgpAs.EntityData.YFilter = clearBgpAs.YFilter
    clearBgpAs.EntityData.YangName = "clear-bgp-as"
    clearBgpAs.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAs.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAs.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as"
    clearBgpAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAs.EntityData.Children = types.NewOrderedMap()
    clearBgpAs.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAs.Input})
    clearBgpAs.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAs.EntityData.YListKeys = []string {}

    return &(clearBgpAs.EntityData)
}

// ClearBgpAs_Input
type ClearBgpAs_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpAs_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-as"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathIpAddrIpNetmask
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathIpAddrIpNetmask_Input
}

func (clearBgpBestpathIpAddrIpNetmask *ClearBgpBestpathIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathIpAddrIpNetmask.EntityData.YFilter = clearBgpBestpathIpAddrIpNetmask.YFilter
    clearBgpBestpathIpAddrIpNetmask.EntityData.YangName = "clear-bgp-bestpath-ip-addr-ip-netmask"
    clearBgpBestpathIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr-ip-netmask"
    clearBgpBestpathIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathIpAddrIpNetmask.Input})
    clearBgpBestpathIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathIpAddrIpNetmask.EntityData)
}

// ClearBgpBestpathIpAddrIpNetmask_Input
type ClearBgpBestpathIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpBestpathIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathIpAddr
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathIpAddr_Input
}

func (clearBgpBestpathIpAddr *ClearBgpBestpathIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathIpAddr.EntityData.YFilter = clearBgpBestpathIpAddr.YFilter
    clearBgpBestpathIpAddr.EntityData.YangName = "clear-bgp-bestpath-ip-addr"
    clearBgpBestpathIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr"
    clearBgpBestpathIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathIpAddr.Input})
    clearBgpBestpathIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathIpAddr.EntityData)
}

// ClearBgpBestpathIpAddr_Input
type ClearBgpBestpathIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpBestpathIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathIpPrefix
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathIpPrefix_Input
}

func (clearBgpBestpathIpPrefix *ClearBgpBestpathIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathIpPrefix.EntityData.YFilter = clearBgpBestpathIpPrefix.YFilter
    clearBgpBestpathIpPrefix.EntityData.YangName = "clear-bgp-bestpath-ip-prefix"
    clearBgpBestpathIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-prefix"
    clearBgpBestpathIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathIpPrefix.Input})
    clearBgpBestpathIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathIpPrefix.EntityData)
}

// ClearBgpBestpathIpPrefix_Input
type ClearBgpBestpathIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpBestpathIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiIpAddrIpNetmask
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input
}

func (clearBgpBestpathAfiSafiIpAddrIpNetmask *ClearBgpBestpathAfiSafiIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiIpAddrIpNetmask.EntityData.YFilter = clearBgpBestpathAfiSafiIpAddrIpNetmask.YFilter
    clearBgpBestpathAfiSafiIpAddrIpNetmask.EntityData.YangName = "clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask"
    clearBgpBestpathAfiSafiIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask"
    clearBgpBestpathAfiSafiIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiIpAddrIpNetmask.Input})
    clearBgpBestpathAfiSafiIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiIpAddrIpNetmask.EntityData)
}

// ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input
type ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiIpAddr
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpAddr_Input
}

func (clearBgpBestpathAfiSafiIpAddr *ClearBgpBestpathAfiSafiIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiIpAddr.EntityData.YFilter = clearBgpBestpathAfiSafiIpAddr.YFilter
    clearBgpBestpathAfiSafiIpAddr.EntityData.YangName = "clear-bgp-bestpath-afi-safi-ip-addr"
    clearBgpBestpathAfiSafiIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr"
    clearBgpBestpathAfiSafiIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiIpAddr.Input})
    clearBgpBestpathAfiSafiIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiIpAddr.EntityData)
}

// ClearBgpBestpathAfiSafiIpAddr_Input
type ClearBgpBestpathAfiSafiIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpBestpathAfiSafiIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiIpPrefix
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpPrefix_Input
}

func (clearBgpBestpathAfiSafiIpPrefix *ClearBgpBestpathAfiSafiIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiIpPrefix.EntityData.YFilter = clearBgpBestpathAfiSafiIpPrefix.YFilter
    clearBgpBestpathAfiSafiIpPrefix.EntityData.YangName = "clear-bgp-bestpath-afi-safi-ip-prefix"
    clearBgpBestpathAfiSafiIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-prefix"
    clearBgpBestpathAfiSafiIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiIpPrefix.Input})
    clearBgpBestpathAfiSafiIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiIpPrefix.EntityData)
}

// ClearBgpBestpathAfiSafiIpPrefix_Input
type ClearBgpBestpathAfiSafiIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpBestpathAfiSafiIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask
// re-run BGP bestpath selection.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input
}

func (clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.YFilter = clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.YFilter
    clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.YangName = "clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"
    clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"
    clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input})
    clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData)
}

// ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input
type ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("bridge-domain-name", types.YLeaf{"BridgeDomainName", input.BridgeDomainName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiBridgeDomainIpAddr
// re-run BGP bestpath selection.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpBestpathAfiSafiBridgeDomainIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input
}

func (clearBgpBestpathAfiSafiBridgeDomainIpAddr *ClearBgpBestpathAfiSafiBridgeDomainIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiBridgeDomainIpAddr.EntityData.YFilter = clearBgpBestpathAfiSafiBridgeDomainIpAddr.YFilter
    clearBgpBestpathAfiSafiBridgeDomainIpAddr.EntityData.YangName = "clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr"
    clearBgpBestpathAfiSafiBridgeDomainIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiBridgeDomainIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiBridgeDomainIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr"
    clearBgpBestpathAfiSafiBridgeDomainIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiBridgeDomainIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiBridgeDomainIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiBridgeDomainIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiBridgeDomainIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiBridgeDomainIpAddr.Input})
    clearBgpBestpathAfiSafiBridgeDomainIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiBridgeDomainIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiBridgeDomainIpAddr.EntityData)
}

// ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input
type ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("bridge-domain-name", types.YLeaf{"BridgeDomainName", input.BridgeDomainName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiBridgeDomainIpPrefix
// re-run BGP bestpath selection.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpBestpathAfiSafiBridgeDomainIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input
}

func (clearBgpBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiBridgeDomainIpPrefix.EntityData.YFilter = clearBgpBestpathAfiSafiBridgeDomainIpPrefix.YFilter
    clearBgpBestpathAfiSafiBridgeDomainIpPrefix.EntityData.YangName = "clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix"
    clearBgpBestpathAfiSafiBridgeDomainIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiBridgeDomainIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiBridgeDomainIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix"
    clearBgpBestpathAfiSafiBridgeDomainIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiBridgeDomainIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiBridgeDomainIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiBridgeDomainIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiBridgeDomainIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiBridgeDomainIpPrefix.Input})
    clearBgpBestpathAfiSafiBridgeDomainIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiBridgeDomainIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiBridgeDomainIpPrefix.EntityData)
}

// ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input
type ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("bridge-domain-name", types.YLeaf{"BridgeDomainName", input.BridgeDomainName})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiRdIpAddrIpNetmask
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input
}

func (clearBgpBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiRdIpAddrIpNetmask.EntityData.YFilter = clearBgpBestpathAfiSafiRdIpAddrIpNetmask.YFilter
    clearBgpBestpathAfiSafiRdIpAddrIpNetmask.EntityData.YangName = "clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask"
    clearBgpBestpathAfiSafiRdIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiRdIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiRdIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask"
    clearBgpBestpathAfiSafiRdIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiRdIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiRdIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiRdIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiRdIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiRdIpAddrIpNetmask.Input})
    clearBgpBestpathAfiSafiRdIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiRdIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiRdIpAddrIpNetmask.EntityData)
}

// ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input
type ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiRdIpAddr
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdIpAddr_Input
}

func (clearBgpBestpathAfiSafiRdIpAddr *ClearBgpBestpathAfiSafiRdIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiRdIpAddr.EntityData.YFilter = clearBgpBestpathAfiSafiRdIpAddr.YFilter
    clearBgpBestpathAfiSafiRdIpAddr.EntityData.YangName = "clear-bgp-bestpath-afi-safi-rd-ip-addr"
    clearBgpBestpathAfiSafiRdIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiRdIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiRdIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr"
    clearBgpBestpathAfiSafiRdIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiRdIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiRdIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiRdIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiRdIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiRdIpAddr.Input})
    clearBgpBestpathAfiSafiRdIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiRdIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiRdIpAddr.EntityData)
}

// ClearBgpBestpathAfiSafiRdIpAddr_Input
type ClearBgpBestpathAfiSafiRdIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpBestpathAfiSafiRdIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-rd-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiRdIpPrefix
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdIpPrefix_Input
}

func (clearBgpBestpathAfiSafiRdIpPrefix *ClearBgpBestpathAfiSafiRdIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiRdIpPrefix.EntityData.YFilter = clearBgpBestpathAfiSafiRdIpPrefix.YFilter
    clearBgpBestpathAfiSafiRdIpPrefix.EntityData.YangName = "clear-bgp-bestpath-afi-safi-rd-ip-prefix"
    clearBgpBestpathAfiSafiRdIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiRdIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiRdIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-prefix"
    clearBgpBestpathAfiSafiRdIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiRdIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiRdIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiRdIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiRdIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiRdIpPrefix.Input})
    clearBgpBestpathAfiSafiRdIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiRdIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiRdIpPrefix.EntityData)
}

// ClearBgpBestpathAfiSafiRdIpPrefix_Input
type ClearBgpBestpathAfiSafiRdIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpBestpathAfiSafiRdIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-rd-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input
}

func (clearBgpBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.YFilter = clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.YFilter
    clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.YangName = "clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask"
    clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask"
    clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.Input})
    clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.EntityData)
}

// ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input
type ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiIpv4Addr
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpv4Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpv4Addr_Input
}

func (clearBgpBestpathAfiSafiIpv4Addr *ClearBgpBestpathAfiSafiIpv4Addr) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiIpv4Addr.EntityData.YFilter = clearBgpBestpathAfiSafiIpv4Addr.YFilter
    clearBgpBestpathAfiSafiIpv4Addr.EntityData.YangName = "clear-bgp-bestpath-afi-safi-ipv4-addr"
    clearBgpBestpathAfiSafiIpv4Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiIpv4Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiIpv4Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr"
    clearBgpBestpathAfiSafiIpv4Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiIpv4Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiIpv4Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiIpv4Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiIpv4Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiIpv4Addr.Input})
    clearBgpBestpathAfiSafiIpv4Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiIpv4Addr.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiIpv4Addr.EntityData)
}

// ClearBgpBestpathAfiSafiIpv4Addr_Input
type ClearBgpBestpathAfiSafiIpv4Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpBestpathAfiSafiIpv4Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-ipv4-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiIpv4Prefix
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpv4Prefix_Input
}

func (clearBgpBestpathAfiSafiIpv4Prefix *ClearBgpBestpathAfiSafiIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiIpv4Prefix.EntityData.YFilter = clearBgpBestpathAfiSafiIpv4Prefix.YFilter
    clearBgpBestpathAfiSafiIpv4Prefix.EntityData.YangName = "clear-bgp-bestpath-afi-safi-ipv4-prefix"
    clearBgpBestpathAfiSafiIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-prefix"
    clearBgpBestpathAfiSafiIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiIpv4Prefix.Input})
    clearBgpBestpathAfiSafiIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiIpv4Prefix.EntityData)
}

// ClearBgpBestpathAfiSafiIpv4Prefix_Input
type ClearBgpBestpathAfiSafiIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network and masklength. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpBestpathAfiSafiIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiRdIpv4Addr
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdIpv4Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdIpv4Addr_Input
}

func (clearBgpBestpathAfiSafiRdIpv4Addr *ClearBgpBestpathAfiSafiRdIpv4Addr) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiRdIpv4Addr.EntityData.YFilter = clearBgpBestpathAfiSafiRdIpv4Addr.YFilter
    clearBgpBestpathAfiSafiRdIpv4Addr.EntityData.YangName = "clear-bgp-bestpath-afi-safi-rd-ipv4-addr"
    clearBgpBestpathAfiSafiRdIpv4Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiRdIpv4Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiRdIpv4Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr"
    clearBgpBestpathAfiSafiRdIpv4Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiRdIpv4Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiRdIpv4Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiRdIpv4Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiRdIpv4Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiRdIpv4Addr.Input})
    clearBgpBestpathAfiSafiRdIpv4Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiRdIpv4Addr.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiRdIpv4Addr.EntityData)
}

// ClearBgpBestpathAfiSafiRdIpv4Addr_Input
type ClearBgpBestpathAfiSafiRdIpv4Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv4 MDT network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpBestpathAfiSafiRdIpv4Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-rd-ipv4-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiVrfIpv4Addr
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathAfiSafiVrfIpv4Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiVrfIpv4Addr_Input
}

func (clearBgpBestpathAfiSafiVrfIpv4Addr *ClearBgpBestpathAfiSafiVrfIpv4Addr) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiVrfIpv4Addr.EntityData.YFilter = clearBgpBestpathAfiSafiVrfIpv4Addr.YFilter
    clearBgpBestpathAfiSafiVrfIpv4Addr.EntityData.YangName = "clear-bgp-bestpath-afi-safi-vrf-ipv4-addr"
    clearBgpBestpathAfiSafiVrfIpv4Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiVrfIpv4Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiVrfIpv4Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr"
    clearBgpBestpathAfiSafiVrfIpv4Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiVrfIpv4Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiVrfIpv4Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiVrfIpv4Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiVrfIpv4Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiVrfIpv4Addr.Input})
    clearBgpBestpathAfiSafiVrfIpv4Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiVrfIpv4Addr.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiVrfIpv4Addr.EntityData)
}

// ClearBgpBestpathAfiSafiVrfIpv4Addr_Input
type ClearBgpBestpathAfiSafiVrfIpv4Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv4 MDT network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-vrf-ipv4-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiNetwork
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiNetwork_Input
}

func (clearBgpBestpathAfiSafiNetwork *ClearBgpBestpathAfiSafiNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiNetwork.EntityData.YFilter = clearBgpBestpathAfiSafiNetwork.YFilter
    clearBgpBestpathAfiSafiNetwork.EntityData.YangName = "clear-bgp-bestpath-afi-safi-network"
    clearBgpBestpathAfiSafiNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-network"
    clearBgpBestpathAfiSafiNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiNetwork.Input})
    clearBgpBestpathAfiSafiNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiNetwork.EntityData)
}

// ClearBgpBestpathAfiSafiNetwork_Input
type ClearBgpBestpathAfiSafiNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpBestpathAfiSafiNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiRdNetwork
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdNetwork_Input
}

func (clearBgpBestpathAfiSafiRdNetwork *ClearBgpBestpathAfiSafiRdNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiRdNetwork.EntityData.YFilter = clearBgpBestpathAfiSafiRdNetwork.YFilter
    clearBgpBestpathAfiSafiRdNetwork.EntityData.YangName = "clear-bgp-bestpath-afi-safi-rd-network"
    clearBgpBestpathAfiSafiRdNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiRdNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiRdNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-network"
    clearBgpBestpathAfiSafiRdNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiRdNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiRdNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiRdNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiRdNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiRdNetwork.Input})
    clearBgpBestpathAfiSafiRdNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiRdNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiRdNetwork.EntityData)
}

// ClearBgpBestpathAfiSafiRdNetwork_Input
type ClearBgpBestpathAfiSafiRdNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpBestpathAfiSafiRdNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-rd-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiVrfNetwork
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathAfiSafiVrfNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiVrfNetwork_Input
}

func (clearBgpBestpathAfiSafiVrfNetwork *ClearBgpBestpathAfiSafiVrfNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiVrfNetwork.EntityData.YFilter = clearBgpBestpathAfiSafiVrfNetwork.YFilter
    clearBgpBestpathAfiSafiVrfNetwork.EntityData.YangName = "clear-bgp-bestpath-afi-safi-vrf-network"
    clearBgpBestpathAfiSafiVrfNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiVrfNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiVrfNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-network"
    clearBgpBestpathAfiSafiVrfNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiVrfNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiVrfNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiVrfNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiVrfNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiVrfNetwork.Input})
    clearBgpBestpathAfiSafiVrfNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiVrfNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiVrfNetwork.EntityData)
}

// ClearBgpBestpathAfiSafiVrfNetwork_Input
type ClearBgpBestpathAfiSafiVrfNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpBestpathAfiSafiVrfNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-vrf-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiRtConstraintNetwork
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiRtConstraintNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRtConstraintNetwork_Input
}

func (clearBgpBestpathAfiSafiRtConstraintNetwork *ClearBgpBestpathAfiSafiRtConstraintNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiRtConstraintNetwork.EntityData.YFilter = clearBgpBestpathAfiSafiRtConstraintNetwork.YFilter
    clearBgpBestpathAfiSafiRtConstraintNetwork.EntityData.YangName = "clear-bgp-bestpath-afi-safi-rt-constraint-network"
    clearBgpBestpathAfiSafiRtConstraintNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiRtConstraintNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiRtConstraintNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rt-constraint-network"
    clearBgpBestpathAfiSafiRtConstraintNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiRtConstraintNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiRtConstraintNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiRtConstraintNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiRtConstraintNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiRtConstraintNetwork.Input})
    clearBgpBestpathAfiSafiRtConstraintNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiRtConstraintNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiRtConstraintNetwork.EntityData)
}

// ClearBgpBestpathAfiSafiRtConstraintNetwork_Input
type ClearBgpBestpathAfiSafiRtConstraintNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // RT-Constraint network. The type is string. This attribute is mandatory.
    RtConstraintNetwork interface{}
}

func (input *ClearBgpBestpathAfiSafiRtConstraintNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-rt-constraint-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rt-constraint-network", types.YLeaf{"RtConstraintNetwork", input.RtConstraintNetwork})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiIpv4TunnelNetwork
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpv4TunnelNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input
}

func (clearBgpBestpathAfiSafiIpv4TunnelNetwork *ClearBgpBestpathAfiSafiIpv4TunnelNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiIpv4TunnelNetwork.EntityData.YFilter = clearBgpBestpathAfiSafiIpv4TunnelNetwork.YFilter
    clearBgpBestpathAfiSafiIpv4TunnelNetwork.EntityData.YangName = "clear-bgp-bestpath-afi-safi-ipv4-tunnel-network"
    clearBgpBestpathAfiSafiIpv4TunnelNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiIpv4TunnelNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiIpv4TunnelNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-tunnel-network"
    clearBgpBestpathAfiSafiIpv4TunnelNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiIpv4TunnelNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiIpv4TunnelNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiIpv4TunnelNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiIpv4TunnelNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiIpv4TunnelNetwork.Input})
    clearBgpBestpathAfiSafiIpv4TunnelNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiIpv4TunnelNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiIpv4TunnelNetwork.EntityData)
}

// ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input
type ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Tunnel network <Tunnel-ID>:<IPv4 Address>. The type is string. This
    // attribute is mandatory.
    Ipv4TunnelNetwork interface{}
}

func (input *ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-ipv4-tunnel-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-tunnel-network", types.YLeaf{"Ipv4TunnelNetwork", input.Ipv4TunnelNetwork})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input
}

func (clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.YFilter = clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.YFilter
    clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.YangName = "clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask"
    clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask"
    clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.Input})
    clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData)
}

// ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input
type ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})
    input.EntityData.Leafs.Append("ipv6-netmask", types.YLeaf{"Ipv6Netmask", input.Ipv6Netmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiIpv6Addr
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpv6Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpv6Addr_Input
}

func (clearBgpBestpathAfiSafiIpv6Addr *ClearBgpBestpathAfiSafiIpv6Addr) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiIpv6Addr.EntityData.YFilter = clearBgpBestpathAfiSafiIpv6Addr.YFilter
    clearBgpBestpathAfiSafiIpv6Addr.EntityData.YangName = "clear-bgp-bestpath-afi-safi-ipv6-addr"
    clearBgpBestpathAfiSafiIpv6Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiIpv6Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiIpv6Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr"
    clearBgpBestpathAfiSafiIpv6Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiIpv6Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiIpv6Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiIpv6Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiIpv6Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiIpv6Addr.Input})
    clearBgpBestpathAfiSafiIpv6Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiIpv6Addr.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiIpv6Addr.EntityData)
}

// ClearBgpBestpathAfiSafiIpv6Addr_Input
type ClearBgpBestpathAfiSafiIpv6Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpBestpathAfiSafiIpv6Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-ipv6-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiIpv6Prefix
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpv6Prefix_Input
}

func (clearBgpBestpathAfiSafiIpv6Prefix *ClearBgpBestpathAfiSafiIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiIpv6Prefix.EntityData.YFilter = clearBgpBestpathAfiSafiIpv6Prefix.YFilter
    clearBgpBestpathAfiSafiIpv6Prefix.EntityData.YangName = "clear-bgp-bestpath-afi-safi-ipv6-prefix"
    clearBgpBestpathAfiSafiIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-prefix"
    clearBgpBestpathAfiSafiIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiIpv6Prefix.Input})
    clearBgpBestpathAfiSafiIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiIpv6Prefix.EntityData)
}

// ClearBgpBestpathAfiSafiIpv6Prefix_Input
type ClearBgpBestpathAfiSafiIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpBestpathAfiSafiIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiRd
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRd_Input
}

func (clearBgpBestpathAfiSafiRd *ClearBgpBestpathAfiSafiRd) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiRd.EntityData.YFilter = clearBgpBestpathAfiSafiRd.YFilter
    clearBgpBestpathAfiSafiRd.EntityData.YangName = "clear-bgp-bestpath-afi-safi-rd"
    clearBgpBestpathAfiSafiRd.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiRd.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiRd.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd"
    clearBgpBestpathAfiSafiRd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiRd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiRd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiRd.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiRd.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiRd.Input})
    clearBgpBestpathAfiSafiRd.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiRd.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiRd.EntityData)
}

// ClearBgpBestpathAfiSafiRd_Input
type ClearBgpBestpathAfiSafiRd_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}
}

func (input *ClearBgpBestpathAfiSafiRd_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-rd"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiVrf
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathAfiSafiVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiVrf_Input
}

func (clearBgpBestpathAfiSafiVrf *ClearBgpBestpathAfiSafiVrf) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiVrf.EntityData.YFilter = clearBgpBestpathAfiSafiVrf.YFilter
    clearBgpBestpathAfiSafiVrf.EntityData.YangName = "clear-bgp-bestpath-afi-safi-vrf"
    clearBgpBestpathAfiSafiVrf.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiVrf.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiVrf.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf"
    clearBgpBestpathAfiSafiVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiVrf.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiVrf.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiVrf.Input})
    clearBgpBestpathAfiSafiVrf.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiVrf.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiVrf.EntityData)
}

// ClearBgpBestpathAfiSafiVrf_Input
type ClearBgpBestpathAfiSafiVrf_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}
}

func (input *ClearBgpBestpathAfiSafiVrf_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-vrf"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafi
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafi_Input
}

func (clearBgpBestpathAfiSafi *ClearBgpBestpathAfiSafi) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafi.EntityData.YFilter = clearBgpBestpathAfiSafi.YFilter
    clearBgpBestpathAfiSafi.EntityData.YangName = "clear-bgp-bestpath-afi-safi"
    clearBgpBestpathAfiSafi.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafi.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafi.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi"
    clearBgpBestpathAfiSafi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafi.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafi.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafi.Input})
    clearBgpBestpathAfiSafi.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafi.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafi.EntityData)
}

// ClearBgpBestpathAfiSafi_Input
type ClearBgpBestpathAfiSafi_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpBestpathAfiSafi_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiSrPolicyPrefix
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiSrPolicyPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiSrPolicyPrefix_Input
}

func (clearBgpBestpathAfiSafiSrPolicyPrefix *ClearBgpBestpathAfiSafiSrPolicyPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiSrPolicyPrefix.EntityData.YFilter = clearBgpBestpathAfiSafiSrPolicyPrefix.YFilter
    clearBgpBestpathAfiSafiSrPolicyPrefix.EntityData.YangName = "clear-bgp-bestpath-afi-safi-sr-policy-prefix"
    clearBgpBestpathAfiSafiSrPolicyPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiSrPolicyPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiSrPolicyPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-sr-policy-prefix"
    clearBgpBestpathAfiSafiSrPolicyPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiSrPolicyPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiSrPolicyPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiSrPolicyPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiSrPolicyPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiSrPolicyPrefix.Input})
    clearBgpBestpathAfiSafiSrPolicyPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiSrPolicyPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiSrPolicyPrefix.EntityData)
}

// ClearBgpBestpathAfiSafiSrPolicyPrefix_Input
type ClearBgpBestpathAfiSafiSrPolicyPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // SR Policy prefix. The type is string. This attribute is mandatory.
    SrPolicyPrefix interface{}
}

func (input *ClearBgpBestpathAfiSafiSrPolicyPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-sr-policy-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("sr-policy-prefix", types.YLeaf{"SrPolicyPrefix", input.SrPolicyPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix
// re-run BGP bestpath selection.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input
}

func (clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.YFilter = clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.YFilter
    clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.YangName = "clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix"
    clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix"
    clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.Input})
    clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData)
}

// ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input
type ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // L2VPN EVPN Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("bridge-domain-name", types.YLeaf{"BridgeDomainName", input.BridgeDomainName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiRdIpv4Prefix
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdIpv4Prefix_Input
}

func (clearBgpBestpathAfiSafiRdIpv4Prefix *ClearBgpBestpathAfiSafiRdIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiRdIpv4Prefix.EntityData.YFilter = clearBgpBestpathAfiSafiRdIpv4Prefix.YFilter
    clearBgpBestpathAfiSafiRdIpv4Prefix.EntityData.YangName = "clear-bgp-bestpath-afi-safi-rd-ipv4-prefix"
    clearBgpBestpathAfiSafiRdIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiRdIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiRdIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-prefix"
    clearBgpBestpathAfiSafiRdIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiRdIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiRdIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiRdIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiRdIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiRdIpv4Prefix.Input})
    clearBgpBestpathAfiSafiRdIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiRdIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiRdIpv4Prefix.EntityData)
}

// ClearBgpBestpathAfiSafiRdIpv4Prefix_Input
type ClearBgpBestpathAfiSafiRdIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // L2VPN EVPN Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpBestpathAfiSafiRdIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-rd-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiMp2mpIpv4Prefix
// re-run BGP bestpath selection.
// Display routes for a specified Xconnect group:MP2MP.
// 
type ClearBgpBestpathAfiSafiMp2mpIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiMp2mpIpv4Prefix_Input
}

func (clearBgpBestpathAfiSafiMp2mpIpv4Prefix *ClearBgpBestpathAfiSafiMp2mpIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiMp2mpIpv4Prefix.EntityData.YFilter = clearBgpBestpathAfiSafiMp2mpIpv4Prefix.YFilter
    clearBgpBestpathAfiSafiMp2mpIpv4Prefix.EntityData.YangName = "clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix"
    clearBgpBestpathAfiSafiMp2mpIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiMp2mpIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiMp2mpIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix"
    clearBgpBestpathAfiSafiMp2mpIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiMp2mpIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiMp2mpIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiMp2mpIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiMp2mpIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiMp2mpIpv4Prefix.Input})
    clearBgpBestpathAfiSafiMp2mpIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiMp2mpIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiMp2mpIpv4Prefix.EntityData)
}

// ClearBgpBestpathAfiSafiMp2mpIpv4Prefix_Input
type ClearBgpBestpathAfiSafiMp2mpIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Xconnect Group:mp2mp. The type is string. This attribute is mandatory.
    Mp2mp interface{}

    // L2VPN VPWS Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpBestpathAfiSafiMp2mpIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("mp2mp", types.YLeaf{"Mp2mp", input.Mp2mp})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiVrfIpv4Prefix
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathAfiSafiVrfIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input
}

func (clearBgpBestpathAfiSafiVrfIpv4Prefix *ClearBgpBestpathAfiSafiVrfIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiVrfIpv4Prefix.EntityData.YFilter = clearBgpBestpathAfiSafiVrfIpv4Prefix.YFilter
    clearBgpBestpathAfiSafiVrfIpv4Prefix.EntityData.YangName = "clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix"
    clearBgpBestpathAfiSafiVrfIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiVrfIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiVrfIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix"
    clearBgpBestpathAfiSafiVrfIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiVrfIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiVrfIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiVrfIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiVrfIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiVrfIpv4Prefix.Input})
    clearBgpBestpathAfiSafiVrfIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiVrfIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiVrfIpv4Prefix.EntityData)
}

// ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input
type ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // VPN Fspec Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input
}

func (clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.YFilter = clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.YFilter
    clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.YangName = "clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"
    clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"
    clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.Input})
    clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData)
}

// ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input
type ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input
}

func (clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.YFilter = clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.YFilter
    clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.YangName = "clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"
    clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"
    clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input})
    clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData)
}

// ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input
type ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input
}

func (clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.YFilter = clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.YFilter
    clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.YangName = "clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"
    clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"
    clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input})
    clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData)
}

// ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input
type ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})
    input.EntityData.Leafs.Append("ipv6-netmask", types.YLeaf{"Ipv6Netmask", input.Ipv6Netmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiRdIpv6Addr
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdIpv6Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdIpv6Addr_Input
}

func (clearBgpBestpathAfiSafiRdIpv6Addr *ClearBgpBestpathAfiSafiRdIpv6Addr) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiRdIpv6Addr.EntityData.YFilter = clearBgpBestpathAfiSafiRdIpv6Addr.YFilter
    clearBgpBestpathAfiSafiRdIpv6Addr.EntityData.YangName = "clear-bgp-bestpath-afi-safi-rd-ipv6-addr"
    clearBgpBestpathAfiSafiRdIpv6Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiRdIpv6Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiRdIpv6Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr"
    clearBgpBestpathAfiSafiRdIpv6Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiRdIpv6Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiRdIpv6Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiRdIpv6Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiRdIpv6Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiRdIpv6Addr.Input})
    clearBgpBestpathAfiSafiRdIpv6Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiRdIpv6Addr.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiRdIpv6Addr.EntityData)
}

// ClearBgpBestpathAfiSafiRdIpv6Addr_Input
type ClearBgpBestpathAfiSafiRdIpv6Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpBestpathAfiSafiRdIpv6Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-rd-ipv6-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiRdIpv6Prefix
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdIpv6Prefix_Input
}

func (clearBgpBestpathAfiSafiRdIpv6Prefix *ClearBgpBestpathAfiSafiRdIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiRdIpv6Prefix.EntityData.YFilter = clearBgpBestpathAfiSafiRdIpv6Prefix.YFilter
    clearBgpBestpathAfiSafiRdIpv6Prefix.EntityData.YangName = "clear-bgp-bestpath-afi-safi-rd-ipv6-prefix"
    clearBgpBestpathAfiSafiRdIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiRdIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiRdIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-prefix"
    clearBgpBestpathAfiSafiRdIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiRdIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiRdIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiRdIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiRdIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiRdIpv6Prefix.Input})
    clearBgpBestpathAfiSafiRdIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiRdIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiRdIpv6Prefix.EntityData)
}

// ClearBgpBestpathAfiSafiRdIpv6Prefix_Input
type ClearBgpBestpathAfiSafiRdIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpBestpathAfiSafiRdIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-rd-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input
}

func (clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.YFilter = clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.YFilter
    clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.YangName = "clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"
    clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"
    clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input})
    clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData)
}

// ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input
type ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})
    input.EntityData.Leafs.Append("ipv6-netmask", types.YLeaf{"Ipv6Netmask", input.Ipv6Netmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiVrfIpv6Addr
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathAfiSafiVrfIpv6Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiVrfIpv6Addr_Input
}

func (clearBgpBestpathAfiSafiVrfIpv6Addr *ClearBgpBestpathAfiSafiVrfIpv6Addr) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiVrfIpv6Addr.EntityData.YFilter = clearBgpBestpathAfiSafiVrfIpv6Addr.YFilter
    clearBgpBestpathAfiSafiVrfIpv6Addr.EntityData.YangName = "clear-bgp-bestpath-afi-safi-vrf-ipv6-addr"
    clearBgpBestpathAfiSafiVrfIpv6Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiVrfIpv6Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiVrfIpv6Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr"
    clearBgpBestpathAfiSafiVrfIpv6Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiVrfIpv6Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiVrfIpv6Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiVrfIpv6Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiVrfIpv6Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiVrfIpv6Addr.Input})
    clearBgpBestpathAfiSafiVrfIpv6Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiVrfIpv6Addr.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiVrfIpv6Addr.EntityData)
}

// ClearBgpBestpathAfiSafiVrfIpv6Addr_Input
type ClearBgpBestpathAfiSafiVrfIpv6Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-vrf-ipv6-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathAfiSafiVrfIpv6Prefix
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathAfiSafiVrfIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input
}

func (clearBgpBestpathAfiSafiVrfIpv6Prefix *ClearBgpBestpathAfiSafiVrfIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathAfiSafiVrfIpv6Prefix.EntityData.YFilter = clearBgpBestpathAfiSafiVrfIpv6Prefix.YFilter
    clearBgpBestpathAfiSafiVrfIpv6Prefix.EntityData.YangName = "clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix"
    clearBgpBestpathAfiSafiVrfIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathAfiSafiVrfIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathAfiSafiVrfIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix"
    clearBgpBestpathAfiSafiVrfIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathAfiSafiVrfIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathAfiSafiVrfIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathAfiSafiVrfIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathAfiSafiVrfIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathAfiSafiVrfIpv6Prefix.Input})
    clearBgpBestpathAfiSafiVrfIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathAfiSafiVrfIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathAfiSafiVrfIpv6Prefix.EntityData)
}

// ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input
type ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathVrfIpAddrIpNetmask
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfIpAddrIpNetmask_Input
}

func (clearBgpBestpathVrfIpAddrIpNetmask *ClearBgpBestpathVrfIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathVrfIpAddrIpNetmask.EntityData.YFilter = clearBgpBestpathVrfIpAddrIpNetmask.YFilter
    clearBgpBestpathVrfIpAddrIpNetmask.EntityData.YangName = "clear-bgp-bestpath-vrf-ip-addr-ip-netmask"
    clearBgpBestpathVrfIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathVrfIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathVrfIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr-ip-netmask"
    clearBgpBestpathVrfIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathVrfIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathVrfIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathVrfIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathVrfIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathVrfIpAddrIpNetmask.Input})
    clearBgpBestpathVrfIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathVrfIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathVrfIpAddrIpNetmask.EntityData)
}

// ClearBgpBestpathVrfIpAddrIpNetmask_Input
type ClearBgpBestpathVrfIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpBestpathVrfIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-vrf-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathVrfIpAddr
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfIpAddr_Input
}

func (clearBgpBestpathVrfIpAddr *ClearBgpBestpathVrfIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathVrfIpAddr.EntityData.YFilter = clearBgpBestpathVrfIpAddr.YFilter
    clearBgpBestpathVrfIpAddr.EntityData.YangName = "clear-bgp-bestpath-vrf-ip-addr"
    clearBgpBestpathVrfIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathVrfIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathVrfIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr"
    clearBgpBestpathVrfIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathVrfIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathVrfIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathVrfIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathVrfIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathVrfIpAddr.Input})
    clearBgpBestpathVrfIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathVrfIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathVrfIpAddr.EntityData)
}

// ClearBgpBestpathVrfIpAddr_Input
type ClearBgpBestpathVrfIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpBestpathVrfIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-vrf-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathVrfIpPrefix
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfIpPrefix_Input
}

func (clearBgpBestpathVrfIpPrefix *ClearBgpBestpathVrfIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathVrfIpPrefix.EntityData.YFilter = clearBgpBestpathVrfIpPrefix.YFilter
    clearBgpBestpathVrfIpPrefix.EntityData.YangName = "clear-bgp-bestpath-vrf-ip-prefix"
    clearBgpBestpathVrfIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathVrfIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathVrfIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-prefix"
    clearBgpBestpathVrfIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathVrfIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathVrfIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathVrfIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathVrfIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathVrfIpPrefix.Input})
    clearBgpBestpathVrfIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathVrfIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathVrfIpPrefix.EntityData)
}

// ClearBgpBestpathVrfIpPrefix_Input
type ClearBgpBestpathVrfIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpBestpathVrfIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-vrf-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathVrfAfiSafiIpv4Prefix
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfAfiSafiIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input
}

func (clearBgpBestpathVrfAfiSafiIpv4Prefix *ClearBgpBestpathVrfAfiSafiIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathVrfAfiSafiIpv4Prefix.EntityData.YFilter = clearBgpBestpathVrfAfiSafiIpv4Prefix.YFilter
    clearBgpBestpathVrfAfiSafiIpv4Prefix.EntityData.YangName = "clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix"
    clearBgpBestpathVrfAfiSafiIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathVrfAfiSafiIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathVrfAfiSafiIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix"
    clearBgpBestpathVrfAfiSafiIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathVrfAfiSafiIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathVrfAfiSafiIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathVrfAfiSafiIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathVrfAfiSafiIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathVrfAfiSafiIpv4Prefix.Input})
    clearBgpBestpathVrfAfiSafiIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathVrfAfiSafiIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathVrfAfiSafiIpv4Prefix.EntityData)
}

// ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input
type ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Fspec IPv4 Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input
}

func (clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.YFilter = clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.YFilter
    clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.YangName = "clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"
    clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"
    clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input})
    clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData)
}

// ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input
type ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathVrfAfiSafiIpv4Addr
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfAfiSafiIpv4Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiIpv4Addr_Input
}

func (clearBgpBestpathVrfAfiSafiIpv4Addr *ClearBgpBestpathVrfAfiSafiIpv4Addr) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathVrfAfiSafiIpv4Addr.EntityData.YFilter = clearBgpBestpathVrfAfiSafiIpv4Addr.YFilter
    clearBgpBestpathVrfAfiSafiIpv4Addr.EntityData.YangName = "clear-bgp-bestpath-vrf-afi-safi-ipv4-addr"
    clearBgpBestpathVrfAfiSafiIpv4Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathVrfAfiSafiIpv4Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathVrfAfiSafiIpv4Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr"
    clearBgpBestpathVrfAfiSafiIpv4Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathVrfAfiSafiIpv4Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathVrfAfiSafiIpv4Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathVrfAfiSafiIpv4Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathVrfAfiSafiIpv4Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathVrfAfiSafiIpv4Addr.Input})
    clearBgpBestpathVrfAfiSafiIpv4Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathVrfAfiSafiIpv4Addr.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathVrfAfiSafiIpv4Addr.EntityData)
}

// ClearBgpBestpathVrfAfiSafiIpv4Addr_Input
type ClearBgpBestpathVrfAfiSafiIpv4Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-vrf-afi-safi-ipv4-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathVrfAfiSafiNetwork
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfAfiSafiNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiNetwork_Input
}

func (clearBgpBestpathVrfAfiSafiNetwork *ClearBgpBestpathVrfAfiSafiNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathVrfAfiSafiNetwork.EntityData.YFilter = clearBgpBestpathVrfAfiSafiNetwork.YFilter
    clearBgpBestpathVrfAfiSafiNetwork.EntityData.YangName = "clear-bgp-bestpath-vrf-afi-safi-network"
    clearBgpBestpathVrfAfiSafiNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathVrfAfiSafiNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathVrfAfiSafiNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-network"
    clearBgpBestpathVrfAfiSafiNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathVrfAfiSafiNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathVrfAfiSafiNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathVrfAfiSafiNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathVrfAfiSafiNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathVrfAfiSafiNetwork.Input})
    clearBgpBestpathVrfAfiSafiNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathVrfAfiSafiNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathVrfAfiSafiNetwork.EntityData)
}

// ClearBgpBestpathVrfAfiSafiNetwork_Input
type ClearBgpBestpathVrfAfiSafiNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-vrf-afi-safi-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathVrfAfiSafiRdNetwork
// re-run BGP bestpath selection.
// Specify a VRF.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathVrfAfiSafiRdNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiRdNetwork_Input
}

func (clearBgpBestpathVrfAfiSafiRdNetwork *ClearBgpBestpathVrfAfiSafiRdNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathVrfAfiSafiRdNetwork.EntityData.YFilter = clearBgpBestpathVrfAfiSafiRdNetwork.YFilter
    clearBgpBestpathVrfAfiSafiRdNetwork.EntityData.YangName = "clear-bgp-bestpath-vrf-afi-safi-rd-network"
    clearBgpBestpathVrfAfiSafiRdNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathVrfAfiSafiRdNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathVrfAfiSafiRdNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd-network"
    clearBgpBestpathVrfAfiSafiRdNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathVrfAfiSafiRdNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathVrfAfiSafiRdNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathVrfAfiSafiRdNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathVrfAfiSafiRdNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathVrfAfiSafiRdNetwork.Input})
    clearBgpBestpathVrfAfiSafiRdNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathVrfAfiSafiRdNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathVrfAfiSafiRdNetwork.EntityData)
}

// ClearBgpBestpathVrfAfiSafiRdNetwork_Input
type ClearBgpBestpathVrfAfiSafiRdNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiRdNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-vrf-afi-safi-rd-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathVrfAfiSafiVrfNetwork
// re-run BGP bestpath selection.
// Specify a VRF.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathVrfAfiSafiVrfNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiVrfNetwork_Input
}

func (clearBgpBestpathVrfAfiSafiVrfNetwork *ClearBgpBestpathVrfAfiSafiVrfNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathVrfAfiSafiVrfNetwork.EntityData.YFilter = clearBgpBestpathVrfAfiSafiVrfNetwork.YFilter
    clearBgpBestpathVrfAfiSafiVrfNetwork.EntityData.YangName = "clear-bgp-bestpath-vrf-afi-safi-vrf-network"
    clearBgpBestpathVrfAfiSafiVrfNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathVrfAfiSafiVrfNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathVrfAfiSafiVrfNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf-network"
    clearBgpBestpathVrfAfiSafiVrfNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathVrfAfiSafiVrfNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathVrfAfiSafiVrfNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathVrfAfiSafiVrfNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathVrfAfiSafiVrfNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathVrfAfiSafiVrfNetwork.Input})
    clearBgpBestpathVrfAfiSafiVrfNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathVrfAfiSafiVrfNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathVrfAfiSafiVrfNetwork.EntityData)
}

// ClearBgpBestpathVrfAfiSafiVrfNetwork_Input
type ClearBgpBestpathVrfAfiSafiVrfNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiVrfNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-vrf-afi-safi-vrf-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input
}

func (clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.YFilter = clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.YFilter
    clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.YangName = "clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"
    clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"
    clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input})
    clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData)
}

// ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input
type ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})
    input.EntityData.Leafs.Append("ipv6-netmask", types.YLeaf{"Ipv6Netmask", input.Ipv6Netmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathVrfAfiSafiIpv6Addr
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfAfiSafiIpv6Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiIpv6Addr_Input
}

func (clearBgpBestpathVrfAfiSafiIpv6Addr *ClearBgpBestpathVrfAfiSafiIpv6Addr) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathVrfAfiSafiIpv6Addr.EntityData.YFilter = clearBgpBestpathVrfAfiSafiIpv6Addr.YFilter
    clearBgpBestpathVrfAfiSafiIpv6Addr.EntityData.YangName = "clear-bgp-bestpath-vrf-afi-safi-ipv6-addr"
    clearBgpBestpathVrfAfiSafiIpv6Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathVrfAfiSafiIpv6Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathVrfAfiSafiIpv6Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr"
    clearBgpBestpathVrfAfiSafiIpv6Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathVrfAfiSafiIpv6Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathVrfAfiSafiIpv6Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathVrfAfiSafiIpv6Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathVrfAfiSafiIpv6Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathVrfAfiSafiIpv6Addr.Input})
    clearBgpBestpathVrfAfiSafiIpv6Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathVrfAfiSafiIpv6Addr.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathVrfAfiSafiIpv6Addr.EntityData)
}

// ClearBgpBestpathVrfAfiSafiIpv6Addr_Input
type ClearBgpBestpathVrfAfiSafiIpv6Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-vrf-afi-safi-ipv6-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathVrfAfiSafiIpv6Prefix
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfAfiSafiIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input
}

func (clearBgpBestpathVrfAfiSafiIpv6Prefix *ClearBgpBestpathVrfAfiSafiIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathVrfAfiSafiIpv6Prefix.EntityData.YFilter = clearBgpBestpathVrfAfiSafiIpv6Prefix.YFilter
    clearBgpBestpathVrfAfiSafiIpv6Prefix.EntityData.YangName = "clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix"
    clearBgpBestpathVrfAfiSafiIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathVrfAfiSafiIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathVrfAfiSafiIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix"
    clearBgpBestpathVrfAfiSafiIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathVrfAfiSafiIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathVrfAfiSafiIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathVrfAfiSafiIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathVrfAfiSafiIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathVrfAfiSafiIpv6Prefix.Input})
    clearBgpBestpathVrfAfiSafiIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathVrfAfiSafiIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathVrfAfiSafiIpv6Prefix.EntityData)
}

// ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input
type ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathVrfAfiSafiRd
// re-run BGP bestpath selection.
// Specify a VRF.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathVrfAfiSafiRd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiRd_Input
}

func (clearBgpBestpathVrfAfiSafiRd *ClearBgpBestpathVrfAfiSafiRd) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathVrfAfiSafiRd.EntityData.YFilter = clearBgpBestpathVrfAfiSafiRd.YFilter
    clearBgpBestpathVrfAfiSafiRd.EntityData.YangName = "clear-bgp-bestpath-vrf-afi-safi-rd"
    clearBgpBestpathVrfAfiSafiRd.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathVrfAfiSafiRd.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathVrfAfiSafiRd.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd"
    clearBgpBestpathVrfAfiSafiRd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathVrfAfiSafiRd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathVrfAfiSafiRd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathVrfAfiSafiRd.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathVrfAfiSafiRd.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathVrfAfiSafiRd.Input})
    clearBgpBestpathVrfAfiSafiRd.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathVrfAfiSafiRd.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathVrfAfiSafiRd.EntityData)
}

// ClearBgpBestpathVrfAfiSafiRd_Input
type ClearBgpBestpathVrfAfiSafiRd_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiRd_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-vrf-afi-safi-rd"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathVrfAfiSafiVrf
// re-run BGP bestpath selection.
// Specify a VRF.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathVrfAfiSafiVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiVrf_Input
}

func (clearBgpBestpathVrfAfiSafiVrf *ClearBgpBestpathVrfAfiSafiVrf) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathVrfAfiSafiVrf.EntityData.YFilter = clearBgpBestpathVrfAfiSafiVrf.YFilter
    clearBgpBestpathVrfAfiSafiVrf.EntityData.YangName = "clear-bgp-bestpath-vrf-afi-safi-vrf"
    clearBgpBestpathVrfAfiSafiVrf.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathVrfAfiSafiVrf.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathVrfAfiSafiVrf.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf"
    clearBgpBestpathVrfAfiSafiVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathVrfAfiSafiVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathVrfAfiSafiVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathVrfAfiSafiVrf.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathVrfAfiSafiVrf.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathVrfAfiSafiVrf.Input})
    clearBgpBestpathVrfAfiSafiVrf.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathVrfAfiSafiVrf.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathVrfAfiSafiVrf.EntityData)
}

// ClearBgpBestpathVrfAfiSafiVrf_Input
type ClearBgpBestpathVrfAfiSafiVrf_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiVrf_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-vrf-afi-safi-vrf"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpBestpathVrfAfiSafi
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfAfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafi_Input
}

func (clearBgpBestpathVrfAfiSafi *ClearBgpBestpathVrfAfiSafi) GetEntityData() *types.CommonEntityData {
    clearBgpBestpathVrfAfiSafi.EntityData.YFilter = clearBgpBestpathVrfAfiSafi.YFilter
    clearBgpBestpathVrfAfiSafi.EntityData.YangName = "clear-bgp-bestpath-vrf-afi-safi"
    clearBgpBestpathVrfAfiSafi.EntityData.BundleName = "cisco_ios_xr"
    clearBgpBestpathVrfAfiSafi.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpBestpathVrfAfiSafi.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi"
    clearBgpBestpathVrfAfiSafi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpBestpathVrfAfiSafi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpBestpathVrfAfiSafi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpBestpathVrfAfiSafi.EntityData.Children = types.NewOrderedMap()
    clearBgpBestpathVrfAfiSafi.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpBestpathVrfAfiSafi.Input})
    clearBgpBestpathVrfAfiSafi.EntityData.Leafs = types.NewOrderedMap()

    clearBgpBestpathVrfAfiSafi.EntityData.YListKeys = []string {}

    return &(clearBgpBestpathVrfAfiSafi.EntityData)
}

// ClearBgpBestpathVrfAfiSafi_Input
type ClearBgpBestpathVrfAfiSafi_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpBestpathVrfAfiSafi_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-bestpath-vrf-afi-safi"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpExternalGraceful
// Clear all external peers.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpExternalGraceful struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (clearBgpExternalGraceful *ClearBgpExternalGraceful) GetEntityData() *types.CommonEntityData {
    clearBgpExternalGraceful.EntityData.YFilter = clearBgpExternalGraceful.YFilter
    clearBgpExternalGraceful.EntityData.YangName = "clear-bgp-external-graceful"
    clearBgpExternalGraceful.EntityData.BundleName = "cisco_ios_xr"
    clearBgpExternalGraceful.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpExternalGraceful.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-external-graceful"
    clearBgpExternalGraceful.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpExternalGraceful.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpExternalGraceful.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpExternalGraceful.EntityData.Children = types.NewOrderedMap()
    clearBgpExternalGraceful.EntityData.Leafs = types.NewOrderedMap()

    clearBgpExternalGraceful.EntityData.YListKeys = []string {}

    return &(clearBgpExternalGraceful.EntityData)
}

// ClearBgpExternal
// Clear all external peers.
// 
type ClearBgpExternal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (clearBgpExternal *ClearBgpExternal) GetEntityData() *types.CommonEntityData {
    clearBgpExternal.EntityData.YFilter = clearBgpExternal.YFilter
    clearBgpExternal.EntityData.YangName = "clear-bgp-external"
    clearBgpExternal.EntityData.BundleName = "cisco_ios_xr"
    clearBgpExternal.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpExternal.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-external"
    clearBgpExternal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpExternal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpExternal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpExternal.EntityData.Children = types.NewOrderedMap()
    clearBgpExternal.EntityData.Leafs = types.NewOrderedMap()

    clearBgpExternal.EntityData.YListKeys = []string {}

    return &(clearBgpExternal.EntityData)
}

// ClearBgpInstanceAllGraceful
// Choose a particular BGP instance.
// Clear all peers and all routes from the BGP table.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpInstanceAllGraceful struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAllGraceful_Input
}

func (clearBgpInstanceAllGraceful *ClearBgpInstanceAllGraceful) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAllGraceful.EntityData.YFilter = clearBgpInstanceAllGraceful.YFilter
    clearBgpInstanceAllGraceful.EntityData.YangName = "clear-bgp-instance-all-graceful"
    clearBgpInstanceAllGraceful.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAllGraceful.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAllGraceful.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all-graceful"
    clearBgpInstanceAllGraceful.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAllGraceful.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAllGraceful.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAllGraceful.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAllGraceful.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAllGraceful.Input})
    clearBgpInstanceAllGraceful.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAllGraceful.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAllGraceful.EntityData)
}

// ClearBgpInstanceAllGraceful_Input
type ClearBgpInstanceAllGraceful_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceAllGraceful_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-all-graceful"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAll
// Choose a particular BGP instance.
// Clear all peers and all routes from the BGP table.
// 
type ClearBgpInstanceAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAll_Input
}

func (clearBgpInstanceAll *ClearBgpInstanceAll) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAll.EntityData.YFilter = clearBgpInstanceAll.YFilter
    clearBgpInstanceAll.EntityData.YangName = "clear-bgp-instance-all"
    clearBgpInstanceAll.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAll.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAll.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all"
    clearBgpInstanceAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAll.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAll.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAll.Input})
    clearBgpInstanceAll.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAll.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAll.EntityData)
}

// ClearBgpInstanceAll_Input
type ClearBgpInstanceAll_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceAll_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-all"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceIpAddrGraceful
// Choose a particular BGP instance.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpInstanceIpAddrGraceful struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceIpAddrGraceful_Input
}

func (clearBgpInstanceIpAddrGraceful *ClearBgpInstanceIpAddrGraceful) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceIpAddrGraceful.EntityData.YFilter = clearBgpInstanceIpAddrGraceful.YFilter
    clearBgpInstanceIpAddrGraceful.EntityData.YangName = "clear-bgp-instance-ip-addr-graceful"
    clearBgpInstanceIpAddrGraceful.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceIpAddrGraceful.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceIpAddrGraceful.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-graceful"
    clearBgpInstanceIpAddrGraceful.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceIpAddrGraceful.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceIpAddrGraceful.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceIpAddrGraceful.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceIpAddrGraceful.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceIpAddrGraceful.Input})
    clearBgpInstanceIpAddrGraceful.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceIpAddrGraceful.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceIpAddrGraceful.EntityData)
}

// ClearBgpInstanceIpAddrGraceful_Input
type ClearBgpInstanceIpAddrGraceful_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceIpAddrGraceful_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-ip-addr-graceful"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceIpAddrLongLivedStale
// Choose a particular BGP instance.
// Clear long-lived-stale routes.
// 
type ClearBgpInstanceIpAddrLongLivedStale struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceIpAddrLongLivedStale_Input
}

func (clearBgpInstanceIpAddrLongLivedStale *ClearBgpInstanceIpAddrLongLivedStale) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceIpAddrLongLivedStale.EntityData.YFilter = clearBgpInstanceIpAddrLongLivedStale.YFilter
    clearBgpInstanceIpAddrLongLivedStale.EntityData.YangName = "clear-bgp-instance-ip-addr-long-lived-stale"
    clearBgpInstanceIpAddrLongLivedStale.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceIpAddrLongLivedStale.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceIpAddrLongLivedStale.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-long-lived-stale"
    clearBgpInstanceIpAddrLongLivedStale.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceIpAddrLongLivedStale.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceIpAddrLongLivedStale.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceIpAddrLongLivedStale.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceIpAddrLongLivedStale.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceIpAddrLongLivedStale.Input})
    clearBgpInstanceIpAddrLongLivedStale.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceIpAddrLongLivedStale.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceIpAddrLongLivedStale.EntityData)
}

// ClearBgpInstanceIpAddrLongLivedStale_Input
type ClearBgpInstanceIpAddrLongLivedStale_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceIpAddrLongLivedStale_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-ip-addr-long-lived-stale"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceIpAddr
// Choose a particular BGP instance.
// 
type ClearBgpInstanceIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceIpAddr_Input
}

func (clearBgpInstanceIpAddr *ClearBgpInstanceIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceIpAddr.EntityData.YFilter = clearBgpInstanceIpAddr.YFilter
    clearBgpInstanceIpAddr.EntityData.YangName = "clear-bgp-instance-ip-addr"
    clearBgpInstanceIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr"
    clearBgpInstanceIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceIpAddr.Input})
    clearBgpInstanceIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceIpAddr.EntityData)
}

// ClearBgpInstanceIpAddr_Input
type ClearBgpInstanceIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiAllSoftInPrefixFilter
// Choose a particular BGP instance.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpInstanceAfiSafiAllSoftInPrefixFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input
}

func (clearBgpInstanceAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiAllSoftInPrefixFilter.EntityData.YFilter = clearBgpInstanceAfiSafiAllSoftInPrefixFilter.YFilter
    clearBgpInstanceAfiSafiAllSoftInPrefixFilter.EntityData.YangName = "clear-bgp-instance-afi-safi-all-soft-in-prefix-filter"
    clearBgpInstanceAfiSafiAllSoftInPrefixFilter.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiAllSoftInPrefixFilter.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiAllSoftInPrefixFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in-prefix-filter"
    clearBgpInstanceAfiSafiAllSoftInPrefixFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiAllSoftInPrefixFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiAllSoftInPrefixFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiAllSoftInPrefixFilter.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiAllSoftInPrefixFilter.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiAllSoftInPrefixFilter.Input})
    clearBgpInstanceAfiSafiAllSoftInPrefixFilter.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiAllSoftInPrefixFilter.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiAllSoftInPrefixFilter.EntityData)
}

// ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input
type ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-all-soft-in-prefix-filter"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiAllSoftIn
// Choose a particular BGP instance.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpInstanceAfiSafiAllSoftIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiAllSoftIn_Input
}

func (clearBgpInstanceAfiSafiAllSoftIn *ClearBgpInstanceAfiSafiAllSoftIn) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiAllSoftIn.EntityData.YFilter = clearBgpInstanceAfiSafiAllSoftIn.YFilter
    clearBgpInstanceAfiSafiAllSoftIn.EntityData.YangName = "clear-bgp-instance-afi-safi-all-soft-in"
    clearBgpInstanceAfiSafiAllSoftIn.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiAllSoftIn.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiAllSoftIn.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in"
    clearBgpInstanceAfiSafiAllSoftIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiAllSoftIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiAllSoftIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiAllSoftIn.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiAllSoftIn.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiAllSoftIn.Input})
    clearBgpInstanceAfiSafiAllSoftIn.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiAllSoftIn.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiAllSoftIn.EntityData)
}

// ClearBgpInstanceAfiSafiAllSoftIn_Input
type ClearBgpInstanceAfiSafiAllSoftIn_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiAllSoftIn_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-all-soft-in"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiAllSoftOut
// Choose a particular BGP instance.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpInstanceAfiSafiAllSoftOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiAllSoftOut_Input
}

func (clearBgpInstanceAfiSafiAllSoftOut *ClearBgpInstanceAfiSafiAllSoftOut) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiAllSoftOut.EntityData.YFilter = clearBgpInstanceAfiSafiAllSoftOut.YFilter
    clearBgpInstanceAfiSafiAllSoftOut.EntityData.YangName = "clear-bgp-instance-afi-safi-all-soft-out"
    clearBgpInstanceAfiSafiAllSoftOut.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiAllSoftOut.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiAllSoftOut.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-out"
    clearBgpInstanceAfiSafiAllSoftOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiAllSoftOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiAllSoftOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiAllSoftOut.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiAllSoftOut.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiAllSoftOut.Input})
    clearBgpInstanceAfiSafiAllSoftOut.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiAllSoftOut.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiAllSoftOut.EntityData)
}

// ClearBgpInstanceAfiSafiAllSoftOut_Input
type ClearBgpInstanceAfiSafiAllSoftOut_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiAllSoftOut_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-all-soft-out"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiAllSoft
// Choose a particular BGP instance.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// 
type ClearBgpInstanceAfiSafiAllSoft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiAllSoft_Input
}

func (clearBgpInstanceAfiSafiAllSoft *ClearBgpInstanceAfiSafiAllSoft) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiAllSoft.EntityData.YFilter = clearBgpInstanceAfiSafiAllSoft.YFilter
    clearBgpInstanceAfiSafiAllSoft.EntityData.YangName = "clear-bgp-instance-afi-safi-all-soft"
    clearBgpInstanceAfiSafiAllSoft.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiAllSoft.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiAllSoft.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft"
    clearBgpInstanceAfiSafiAllSoft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiAllSoft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiAllSoft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiAllSoft.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiAllSoft.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiAllSoft.Input})
    clearBgpInstanceAfiSafiAllSoft.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiAllSoft.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiAllSoft.EntityData)
}

// ClearBgpInstanceAfiSafiAllSoft_Input
type ClearBgpInstanceAfiSafiAllSoft_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiAllSoft_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-all-soft"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiIpAddrLongLivedStale
// Choose a particular BGP instance.
// Clear long-lived-stale routes.
// 
type ClearBgpInstanceAfiSafiIpAddrLongLivedStale struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input
}

func (clearBgpInstanceAfiSafiIpAddrLongLivedStale *ClearBgpInstanceAfiSafiIpAddrLongLivedStale) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiIpAddrLongLivedStale.EntityData.YFilter = clearBgpInstanceAfiSafiIpAddrLongLivedStale.YFilter
    clearBgpInstanceAfiSafiIpAddrLongLivedStale.EntityData.YangName = "clear-bgp-instance-afi-safi-ip-addr-long-lived-stale"
    clearBgpInstanceAfiSafiIpAddrLongLivedStale.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiIpAddrLongLivedStale.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiIpAddrLongLivedStale.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-long-lived-stale"
    clearBgpInstanceAfiSafiIpAddrLongLivedStale.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiIpAddrLongLivedStale.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiIpAddrLongLivedStale.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiIpAddrLongLivedStale.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiIpAddrLongLivedStale.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiIpAddrLongLivedStale.Input})
    clearBgpInstanceAfiSafiIpAddrLongLivedStale.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiIpAddrLongLivedStale.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiIpAddrLongLivedStale.EntityData)
}

// ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input
type ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-ip-addr-long-lived-stale"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter
// Choose a particular BGP instance.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input
}

func (clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.EntityData.YFilter = clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.YFilter
    clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.EntityData.YangName = "clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter"
    clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter"
    clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.Input})
    clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.EntityData)
}

// ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input
type ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiIpAddrSoftIn
// Choose a particular BGP instance.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpInstanceAfiSafiIpAddrSoftIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiIpAddrSoftIn_Input
}

func (clearBgpInstanceAfiSafiIpAddrSoftIn *ClearBgpInstanceAfiSafiIpAddrSoftIn) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiIpAddrSoftIn.EntityData.YFilter = clearBgpInstanceAfiSafiIpAddrSoftIn.YFilter
    clearBgpInstanceAfiSafiIpAddrSoftIn.EntityData.YangName = "clear-bgp-instance-afi-safi-ip-addr-soft-in"
    clearBgpInstanceAfiSafiIpAddrSoftIn.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiIpAddrSoftIn.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiIpAddrSoftIn.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in"
    clearBgpInstanceAfiSafiIpAddrSoftIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiIpAddrSoftIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiIpAddrSoftIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiIpAddrSoftIn.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiIpAddrSoftIn.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiIpAddrSoftIn.Input})
    clearBgpInstanceAfiSafiIpAddrSoftIn.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiIpAddrSoftIn.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiIpAddrSoftIn.EntityData)
}

// ClearBgpInstanceAfiSafiIpAddrSoftIn_Input
type ClearBgpInstanceAfiSafiIpAddrSoftIn_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftIn_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-ip-addr-soft-in"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiIpAddrSoftOut
// Choose a particular BGP instance.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpInstanceAfiSafiIpAddrSoftOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiIpAddrSoftOut_Input
}

func (clearBgpInstanceAfiSafiIpAddrSoftOut *ClearBgpInstanceAfiSafiIpAddrSoftOut) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiIpAddrSoftOut.EntityData.YFilter = clearBgpInstanceAfiSafiIpAddrSoftOut.YFilter
    clearBgpInstanceAfiSafiIpAddrSoftOut.EntityData.YangName = "clear-bgp-instance-afi-safi-ip-addr-soft-out"
    clearBgpInstanceAfiSafiIpAddrSoftOut.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiIpAddrSoftOut.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiIpAddrSoftOut.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-out"
    clearBgpInstanceAfiSafiIpAddrSoftOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiIpAddrSoftOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiIpAddrSoftOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiIpAddrSoftOut.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiIpAddrSoftOut.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiIpAddrSoftOut.Input})
    clearBgpInstanceAfiSafiIpAddrSoftOut.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiIpAddrSoftOut.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiIpAddrSoftOut.EntityData)
}

// ClearBgpInstanceAfiSafiIpAddrSoftOut_Input
type ClearBgpInstanceAfiSafiIpAddrSoftOut_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftOut_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-ip-addr-soft-out"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiIpAddrSoft
// Choose a particular BGP instance.
// Soft reconfig.
// 
type ClearBgpInstanceAfiSafiIpAddrSoft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiIpAddrSoft_Input
}

func (clearBgpInstanceAfiSafiIpAddrSoft *ClearBgpInstanceAfiSafiIpAddrSoft) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiIpAddrSoft.EntityData.YFilter = clearBgpInstanceAfiSafiIpAddrSoft.YFilter
    clearBgpInstanceAfiSafiIpAddrSoft.EntityData.YangName = "clear-bgp-instance-afi-safi-ip-addr-soft"
    clearBgpInstanceAfiSafiIpAddrSoft.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiIpAddrSoft.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiIpAddrSoft.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft"
    clearBgpInstanceAfiSafiIpAddrSoft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiIpAddrSoft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiIpAddrSoft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiIpAddrSoft.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiIpAddrSoft.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiIpAddrSoft.Input})
    clearBgpInstanceAfiSafiIpAddrSoft.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiIpAddrSoft.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiIpAddrSoft.EntityData)
}

// ClearBgpInstanceAfiSafiIpAddrSoft_Input
type ClearBgpInstanceAfiSafiIpAddrSoft_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoft_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-ip-addr-soft"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiAsSoftInPrefixFilter
// Choose a particular BGP instance.
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpInstanceAfiSafiAsSoftInPrefixFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input
}

func (clearBgpInstanceAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiAsSoftInPrefixFilter.EntityData.YFilter = clearBgpInstanceAfiSafiAsSoftInPrefixFilter.YFilter
    clearBgpInstanceAfiSafiAsSoftInPrefixFilter.EntityData.YangName = "clear-bgp-instance-afi-safi-as-soft-in-prefix-filter"
    clearBgpInstanceAfiSafiAsSoftInPrefixFilter.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiAsSoftInPrefixFilter.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiAsSoftInPrefixFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in-prefix-filter"
    clearBgpInstanceAfiSafiAsSoftInPrefixFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiAsSoftInPrefixFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiAsSoftInPrefixFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiAsSoftInPrefixFilter.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiAsSoftInPrefixFilter.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiAsSoftInPrefixFilter.Input})
    clearBgpInstanceAfiSafiAsSoftInPrefixFilter.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiAsSoftInPrefixFilter.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiAsSoftInPrefixFilter.EntityData)
}

// ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input
type ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-as-soft-in-prefix-filter"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiAsSoftIn
// Choose a particular BGP instance.
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpInstanceAfiSafiAsSoftIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiAsSoftIn_Input
}

func (clearBgpInstanceAfiSafiAsSoftIn *ClearBgpInstanceAfiSafiAsSoftIn) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiAsSoftIn.EntityData.YFilter = clearBgpInstanceAfiSafiAsSoftIn.YFilter
    clearBgpInstanceAfiSafiAsSoftIn.EntityData.YangName = "clear-bgp-instance-afi-safi-as-soft-in"
    clearBgpInstanceAfiSafiAsSoftIn.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiAsSoftIn.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiAsSoftIn.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in"
    clearBgpInstanceAfiSafiAsSoftIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiAsSoftIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiAsSoftIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiAsSoftIn.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiAsSoftIn.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiAsSoftIn.Input})
    clearBgpInstanceAfiSafiAsSoftIn.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiAsSoftIn.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiAsSoftIn.EntityData)
}

// ClearBgpInstanceAfiSafiAsSoftIn_Input
type ClearBgpInstanceAfiSafiAsSoftIn_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceAfiSafiAsSoftIn_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-as-soft-in"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiAsSoftOut
// Choose a particular BGP instance.
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpInstanceAfiSafiAsSoftOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiAsSoftOut_Input
}

func (clearBgpInstanceAfiSafiAsSoftOut *ClearBgpInstanceAfiSafiAsSoftOut) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiAsSoftOut.EntityData.YFilter = clearBgpInstanceAfiSafiAsSoftOut.YFilter
    clearBgpInstanceAfiSafiAsSoftOut.EntityData.YangName = "clear-bgp-instance-afi-safi-as-soft-out"
    clearBgpInstanceAfiSafiAsSoftOut.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiAsSoftOut.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiAsSoftOut.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-out"
    clearBgpInstanceAfiSafiAsSoftOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiAsSoftOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiAsSoftOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiAsSoftOut.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiAsSoftOut.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiAsSoftOut.Input})
    clearBgpInstanceAfiSafiAsSoftOut.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiAsSoftOut.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiAsSoftOut.EntityData)
}

// ClearBgpInstanceAfiSafiAsSoftOut_Input
type ClearBgpInstanceAfiSafiAsSoftOut_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceAfiSafiAsSoftOut_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-as-soft-out"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiAsSoft
// Choose a particular BGP instance.
// Clear peers in a specific AS.
// Soft reconfig.
// 
type ClearBgpInstanceAfiSafiAsSoft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiAsSoft_Input
}

func (clearBgpInstanceAfiSafiAsSoft *ClearBgpInstanceAfiSafiAsSoft) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiAsSoft.EntityData.YFilter = clearBgpInstanceAfiSafiAsSoft.YFilter
    clearBgpInstanceAfiSafiAsSoft.EntityData.YangName = "clear-bgp-instance-afi-safi-as-soft"
    clearBgpInstanceAfiSafiAsSoft.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiAsSoft.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiAsSoft.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft"
    clearBgpInstanceAfiSafiAsSoft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiAsSoft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiAsSoft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiAsSoft.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiAsSoft.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiAsSoft.Input})
    clearBgpInstanceAfiSafiAsSoft.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiAsSoft.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiAsSoft.EntityData)
}

// ClearBgpInstanceAfiSafiAsSoft_Input
type ClearBgpInstanceAfiSafiAsSoft_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceAfiSafiAsSoft_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-as-soft"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiDampeningIpPrefix
// Choose a particular BGP instance.
// Clear route flap dampening information.
// 
type ClearBgpInstanceAfiSafiDampeningIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiDampeningIpPrefix_Input
}

func (clearBgpInstanceAfiSafiDampeningIpPrefix *ClearBgpInstanceAfiSafiDampeningIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiDampeningIpPrefix.EntityData.YFilter = clearBgpInstanceAfiSafiDampeningIpPrefix.YFilter
    clearBgpInstanceAfiSafiDampeningIpPrefix.EntityData.YangName = "clear-bgp-instance-afi-safi-dampening-ip-prefix"
    clearBgpInstanceAfiSafiDampeningIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiDampeningIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiDampeningIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ip-prefix"
    clearBgpInstanceAfiSafiDampeningIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiDampeningIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiDampeningIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiDampeningIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiDampeningIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiDampeningIpPrefix.Input})
    clearBgpInstanceAfiSafiDampeningIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiDampeningIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiDampeningIpPrefix.EntityData)
}

// ClearBgpInstanceAfiSafiDampeningIpPrefix_Input
type ClearBgpInstanceAfiSafiDampeningIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network and mask or masklength to clear dampening information. The type is
    // one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceAfiSafiDampeningIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-dampening-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiDampening
// Choose a particular BGP instance.
// Clear route flap dampening information.
// 
type ClearBgpInstanceAfiSafiDampening struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiDampening_Input
}

func (clearBgpInstanceAfiSafiDampening *ClearBgpInstanceAfiSafiDampening) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiDampening.EntityData.YFilter = clearBgpInstanceAfiSafiDampening.YFilter
    clearBgpInstanceAfiSafiDampening.EntityData.YangName = "clear-bgp-instance-afi-safi-dampening"
    clearBgpInstanceAfiSafiDampening.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiDampening.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiDampening.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening"
    clearBgpInstanceAfiSafiDampening.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiDampening.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiDampening.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiDampening.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiDampening.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiDampening.Input})
    clearBgpInstanceAfiSafiDampening.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiDampening.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiDampening.EntityData)
}

// ClearBgpInstanceAfiSafiDampening_Input
type ClearBgpInstanceAfiSafiDampening_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiDampening_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-dampening"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter
// Choose a particular BGP instance.
// Clear all external peers.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input
}

func (clearBgpInstanceAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.EntityData.YFilter = clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.YFilter
    clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.EntityData.YangName = "clear-bgp-instance-afi-safi-external-soft-in-prefix-filter"
    clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in-prefix-filter"
    clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.Input})
    clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.EntityData)
}

// ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input
type ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-external-soft-in-prefix-filter"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiExternalSoftIn
// Choose a particular BGP instance.
// Clear all external peers.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpInstanceAfiSafiExternalSoftIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiExternalSoftIn_Input
}

func (clearBgpInstanceAfiSafiExternalSoftIn *ClearBgpInstanceAfiSafiExternalSoftIn) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiExternalSoftIn.EntityData.YFilter = clearBgpInstanceAfiSafiExternalSoftIn.YFilter
    clearBgpInstanceAfiSafiExternalSoftIn.EntityData.YangName = "clear-bgp-instance-afi-safi-external-soft-in"
    clearBgpInstanceAfiSafiExternalSoftIn.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiExternalSoftIn.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiExternalSoftIn.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in"
    clearBgpInstanceAfiSafiExternalSoftIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiExternalSoftIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiExternalSoftIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiExternalSoftIn.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiExternalSoftIn.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiExternalSoftIn.Input})
    clearBgpInstanceAfiSafiExternalSoftIn.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiExternalSoftIn.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiExternalSoftIn.EntityData)
}

// ClearBgpInstanceAfiSafiExternalSoftIn_Input
type ClearBgpInstanceAfiSafiExternalSoftIn_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiExternalSoftIn_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-external-soft-in"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiExternalSoftOut
// Choose a particular BGP instance.
// Clear all external peers.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpInstanceAfiSafiExternalSoftOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiExternalSoftOut_Input
}

func (clearBgpInstanceAfiSafiExternalSoftOut *ClearBgpInstanceAfiSafiExternalSoftOut) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiExternalSoftOut.EntityData.YFilter = clearBgpInstanceAfiSafiExternalSoftOut.YFilter
    clearBgpInstanceAfiSafiExternalSoftOut.EntityData.YangName = "clear-bgp-instance-afi-safi-external-soft-out"
    clearBgpInstanceAfiSafiExternalSoftOut.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiExternalSoftOut.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiExternalSoftOut.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-out"
    clearBgpInstanceAfiSafiExternalSoftOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiExternalSoftOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiExternalSoftOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiExternalSoftOut.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiExternalSoftOut.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiExternalSoftOut.Input})
    clearBgpInstanceAfiSafiExternalSoftOut.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiExternalSoftOut.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiExternalSoftOut.EntityData)
}

// ClearBgpInstanceAfiSafiExternalSoftOut_Input
type ClearBgpInstanceAfiSafiExternalSoftOut_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiExternalSoftOut_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-external-soft-out"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiExternalSoft
// Choose a particular BGP instance.
// Clear all external peers.
// Soft reconfig.
// 
type ClearBgpInstanceAfiSafiExternalSoft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiExternalSoft_Input
}

func (clearBgpInstanceAfiSafiExternalSoft *ClearBgpInstanceAfiSafiExternalSoft) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiExternalSoft.EntityData.YFilter = clearBgpInstanceAfiSafiExternalSoft.YFilter
    clearBgpInstanceAfiSafiExternalSoft.EntityData.YangName = "clear-bgp-instance-afi-safi-external-soft"
    clearBgpInstanceAfiSafiExternalSoft.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiExternalSoft.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiExternalSoft.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft"
    clearBgpInstanceAfiSafiExternalSoft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiExternalSoft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiExternalSoft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiExternalSoft.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiExternalSoft.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiExternalSoft.Input})
    clearBgpInstanceAfiSafiExternalSoft.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiExternalSoft.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiExternalSoft.EntityData)
}

// ClearBgpInstanceAfiSafiExternalSoft_Input
type ClearBgpInstanceAfiSafiExternalSoft_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiExternalSoft_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-external-soft"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask
// Choose a particular BGP instance.
// Clear flap statistics.
// 
type ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.YFilter = clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.YFilter
    clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.YangName = "clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask"
    clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask"
    clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.Input})
    clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData)
}

// ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input
type ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Network and mask or masklength to clear flap statistics. The type is string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiFlapStatisticsIpAddr
// Choose a particular BGP instance.
// Clear flap statistics.
// 
type ClearBgpInstanceAfiSafiFlapStatisticsIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiFlapStatisticsIpAddr.EntityData.YFilter = clearBgpInstanceAfiSafiFlapStatisticsIpAddr.YFilter
    clearBgpInstanceAfiSafiFlapStatisticsIpAddr.EntityData.YangName = "clear-bgp-instance-afi-safi-flap-statistics-ip-addr"
    clearBgpInstanceAfiSafiFlapStatisticsIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiFlapStatisticsIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiFlapStatisticsIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr"
    clearBgpInstanceAfiSafiFlapStatisticsIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiFlapStatisticsIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiFlapStatisticsIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiFlapStatisticsIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiFlapStatisticsIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiFlapStatisticsIpAddr.Input})
    clearBgpInstanceAfiSafiFlapStatisticsIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiFlapStatisticsIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiFlapStatisticsIpAddr.EntityData)
}

// ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input
type ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-flap-statistics-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix
// Choose a particular BGP instance.
// Clear flap statistics.
// 
type ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpPrefix *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.EntityData.YFilter = clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.YFilter
    clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.EntityData.YangName = "clear-bgp-instance-afi-safi-flap-statistics-ip-prefix"
    clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-prefix"
    clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.Input})
    clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.EntityData)
}

// ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input
type ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network and mask or masklength to clear flap statistics. The type is one of
    // the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-flap-statistics-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiFlapStatisticsRegexp
// Choose a particular BGP instance.
// Clear flap statistics.
// Clear flap statistics for routes matching the regular expression.
// 
type ClearBgpInstanceAfiSafiFlapStatisticsRegexp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input
}

func (clearBgpInstanceAfiSafiFlapStatisticsRegexp *ClearBgpInstanceAfiSafiFlapStatisticsRegexp) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiFlapStatisticsRegexp.EntityData.YFilter = clearBgpInstanceAfiSafiFlapStatisticsRegexp.YFilter
    clearBgpInstanceAfiSafiFlapStatisticsRegexp.EntityData.YangName = "clear-bgp-instance-afi-safi-flap-statistics-regexp"
    clearBgpInstanceAfiSafiFlapStatisticsRegexp.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiFlapStatisticsRegexp.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiFlapStatisticsRegexp.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-regexp"
    clearBgpInstanceAfiSafiFlapStatisticsRegexp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiFlapStatisticsRegexp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiFlapStatisticsRegexp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiFlapStatisticsRegexp.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiFlapStatisticsRegexp.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiFlapStatisticsRegexp.Input})
    clearBgpInstanceAfiSafiFlapStatisticsRegexp.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiFlapStatisticsRegexp.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiFlapStatisticsRegexp.EntityData)
}

// ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input
type ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // A regular expression to match the BGP AS paths.  Use 'ctrl-v ?' to enter
    // '?'. The type is string. This attribute is mandatory.
    RegexpPattern interface{}
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-flap-statistics-regexp"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("regexp-pattern", types.YLeaf{"RegexpPattern", input.RegexpPattern})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy
// Choose a particular BGP instance.
// Clear flap statistics.
// Clear flap statistics for routes matching the route policy.
// 
type ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input
}

func (clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.EntityData.YFilter = clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.YFilter
    clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.EntityData.YangName = "clear-bgp-instance-afi-safi-flap-statistics-route-policy"
    clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-route-policy"
    clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.Input})
    clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.EntityData)
}

// ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input
type ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route Policy name. The type is string. This attribute is mandatory.
    RoutePolicyName interface{}
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-flap-statistics-route-policy"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", input.RoutePolicyName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiFlapStatistics
// Choose a particular BGP instance.
// Clear flap statistics.
// 
type ClearBgpInstanceAfiSafiFlapStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiFlapStatistics_Input
}

func (clearBgpInstanceAfiSafiFlapStatistics *ClearBgpInstanceAfiSafiFlapStatistics) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiFlapStatistics.EntityData.YFilter = clearBgpInstanceAfiSafiFlapStatistics.YFilter
    clearBgpInstanceAfiSafiFlapStatistics.EntityData.YangName = "clear-bgp-instance-afi-safi-flap-statistics"
    clearBgpInstanceAfiSafiFlapStatistics.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiFlapStatistics.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiFlapStatistics.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics"
    clearBgpInstanceAfiSafiFlapStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiFlapStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiFlapStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiFlapStatistics.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiFlapStatistics.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiFlapStatistics.Input})
    clearBgpInstanceAfiSafiFlapStatistics.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiFlapStatistics.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiFlapStatistics.EntityData)
}

// ClearBgpInstanceAfiSafiFlapStatistics_Input
type ClearBgpInstanceAfiSafiFlapStatistics_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiFlapStatistics_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-flap-statistics"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiNexthopPerformanceStatistics
// Choose a particular BGP instance.
// Clear nexthop.
// Performance statistics information related to processing.
// 
type ClearBgpInstanceAfiSafiNexthopPerformanceStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input
}

func (clearBgpInstanceAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiNexthopPerformanceStatistics.EntityData.YFilter = clearBgpInstanceAfiSafiNexthopPerformanceStatistics.YFilter
    clearBgpInstanceAfiSafiNexthopPerformanceStatistics.EntityData.YangName = "clear-bgp-instance-afi-safi-nexthop-performance-statistics"
    clearBgpInstanceAfiSafiNexthopPerformanceStatistics.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiNexthopPerformanceStatistics.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiNexthopPerformanceStatistics.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-performance-statistics"
    clearBgpInstanceAfiSafiNexthopPerformanceStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiNexthopPerformanceStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiNexthopPerformanceStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiNexthopPerformanceStatistics.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiNexthopPerformanceStatistics.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiNexthopPerformanceStatistics.Input})
    clearBgpInstanceAfiSafiNexthopPerformanceStatistics.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiNexthopPerformanceStatistics.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiNexthopPerformanceStatistics.EntityData)
}

// ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input
type ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-nexthop-performance-statistics"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr
// Choose a particular BGP instance.
// Clear nexthop.
// Registration with RIB and reregister.
// 
type ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input
}

func (clearBgpInstanceAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.EntityData.YFilter = clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.YFilter
    clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.EntityData.YangName = "clear-bgp-instance-afi-safi-nexthop-registration-ip-addr"
    clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-registration-ip-addr"
    clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.Input})
    clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.EntityData)
}

// ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input
type ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Nexthop address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-nexthop-registration-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiSelfOriginated
// Choose a particular BGP instance.
// Clear redistributed, network and aggregate routes originated here.
// 
type ClearBgpInstanceAfiSafiSelfOriginated struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiSelfOriginated_Input
}

func (clearBgpInstanceAfiSafiSelfOriginated *ClearBgpInstanceAfiSafiSelfOriginated) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiSelfOriginated.EntityData.YFilter = clearBgpInstanceAfiSafiSelfOriginated.YFilter
    clearBgpInstanceAfiSafiSelfOriginated.EntityData.YangName = "clear-bgp-instance-afi-safi-self-originated"
    clearBgpInstanceAfiSafiSelfOriginated.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiSelfOriginated.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiSelfOriginated.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-self-originated"
    clearBgpInstanceAfiSafiSelfOriginated.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiSelfOriginated.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiSelfOriginated.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiSelfOriginated.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiSelfOriginated.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiSelfOriginated.Input})
    clearBgpInstanceAfiSafiSelfOriginated.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiSelfOriginated.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiSelfOriginated.EntityData)
}

// ClearBgpInstanceAfiSafiSelfOriginated_Input
type ClearBgpInstanceAfiSafiSelfOriginated_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiSelfOriginated_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-self-originated"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiShutdown
// Choose a particular BGP instance.
// Clear all peers which were shut down due to low memory.
// 
type ClearBgpInstanceAfiSafiShutdown struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiShutdown_Input
}

func (clearBgpInstanceAfiSafiShutdown *ClearBgpInstanceAfiSafiShutdown) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiShutdown.EntityData.YFilter = clearBgpInstanceAfiSafiShutdown.YFilter
    clearBgpInstanceAfiSafiShutdown.EntityData.YangName = "clear-bgp-instance-afi-safi-shutdown"
    clearBgpInstanceAfiSafiShutdown.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiShutdown.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiShutdown.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-shutdown"
    clearBgpInstanceAfiSafiShutdown.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiShutdown.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiShutdown.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiShutdown.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiShutdown.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiShutdown.Input})
    clearBgpInstanceAfiSafiShutdown.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiShutdown.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiShutdown.EntityData)
}

// ClearBgpInstanceAfiSafiShutdown_Input
type ClearBgpInstanceAfiSafiShutdown_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiShutdown_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-shutdown"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.YFilter = clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.YFilter
    clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.YangName = "clear-bgp-instance-afi-safi-update-outq-address-family-update-parent"
    clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family-update-parent"
    clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.Input})
    clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input
type ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-update-outq-address-family-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqAddressFamily
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// 
type ClearBgpInstanceAfiSafiUpdateOutqAddressFamily struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiUpdateOutqAddressFamily.EntityData.YFilter = clearBgpInstanceAfiSafiUpdateOutqAddressFamily.YFilter
    clearBgpInstanceAfiSafiUpdateOutqAddressFamily.EntityData.YangName = "clear-bgp-instance-afi-safi-update-outq-address-family"
    clearBgpInstanceAfiSafiUpdateOutqAddressFamily.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiUpdateOutqAddressFamily.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiUpdateOutqAddressFamily.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family"
    clearBgpInstanceAfiSafiUpdateOutqAddressFamily.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiUpdateOutqAddressFamily.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiUpdateOutqAddressFamily.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiUpdateOutqAddressFamily.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiUpdateOutqAddressFamily.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiUpdateOutqAddressFamily.Input})
    clearBgpInstanceAfiSafiUpdateOutqAddressFamily.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiUpdateOutqAddressFamily.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiUpdateOutqAddressFamily.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input
type ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-update-outq-address-family"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YFilter = clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YangName = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input})
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
type ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// 
type ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.YFilter = clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.YFilter
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.YangName = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh"
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh"
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.Input})
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input
type ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.YFilter = clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.YFilter
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.YangName = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent"
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent"
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input})
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input
type ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// 
type ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.EntityData.YFilter = clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.YFilter
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.EntityData.YangName = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr"
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr"
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.Input})
    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input
type ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YFilter = clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YangName = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input})
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("sub-group", types.YLeaf{"SubGroup", input.SubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.YFilter = clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.YFilter
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.YangName = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.Input})
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("sub-group", types.YLeaf{"SubGroup", input.SubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YFilter = clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YangName = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input})
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("refresh-sub-group", types.YLeaf{"RefreshSubGroup", input.RefreshSubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YFilter = clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YangName = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input})
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("refresh-sub-group", types.YLeaf{"RefreshSubGroup", input.RefreshSubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.YFilter = clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.YFilter
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.YangName = "clear-bgp-instance-afi-safi-update-outq-update-group-update-parent"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-update-parent"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.Input})
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-update-outq-update-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// 
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.EntityData.YFilter = clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.YFilter
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.EntityData.YangName = "clear-bgp-instance-afi-safi-update-outq-update-group"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group"
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.Input})
    clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.EntityData)
}

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-update-outq-update-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAsGraceful
// Choose a particular BGP instance.
// Clear peers in a specific AS.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpInstanceAsGraceful struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAsGraceful_Input
}

func (clearBgpInstanceAsGraceful *ClearBgpInstanceAsGraceful) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAsGraceful.EntityData.YFilter = clearBgpInstanceAsGraceful.YFilter
    clearBgpInstanceAsGraceful.EntityData.YangName = "clear-bgp-instance-as-graceful"
    clearBgpInstanceAsGraceful.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAsGraceful.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAsGraceful.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as-graceful"
    clearBgpInstanceAsGraceful.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAsGraceful.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAsGraceful.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAsGraceful.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAsGraceful.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAsGraceful.Input})
    clearBgpInstanceAsGraceful.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAsGraceful.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAsGraceful.EntityData)
}

// ClearBgpInstanceAsGraceful_Input
type ClearBgpInstanceAsGraceful_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceAsGraceful_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-as-graceful"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAs
// Choose a particular BGP instance.
// Clear peers in a specific AS.
// 
type ClearBgpInstanceAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAs_Input
}

func (clearBgpInstanceAs *ClearBgpInstanceAs) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAs.EntityData.YFilter = clearBgpInstanceAs.YFilter
    clearBgpInstanceAs.EntityData.YangName = "clear-bgp-instance-as"
    clearBgpInstanceAs.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAs.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAs.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as"
    clearBgpInstanceAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAs.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAs.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAs.Input})
    clearBgpInstanceAs.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAs.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAs.EntityData)
}

// ClearBgpInstanceAs_Input
type ClearBgpInstanceAs_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceAs_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-as"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathIpAddrIpNetmask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathIpAddrIpNetmask_Input
}

func (clearBgpInstanceBestpathIpAddrIpNetmask *ClearBgpInstanceBestpathIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathIpAddrIpNetmask.EntityData.YFilter = clearBgpInstanceBestpathIpAddrIpNetmask.YFilter
    clearBgpInstanceBestpathIpAddrIpNetmask.EntityData.YangName = "clear-bgp-instance-bestpath-ip-addr-ip-netmask"
    clearBgpInstanceBestpathIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr-ip-netmask"
    clearBgpInstanceBestpathIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathIpAddrIpNetmask.Input})
    clearBgpInstanceBestpathIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathIpAddrIpNetmask.EntityData)
}

// ClearBgpInstanceBestpathIpAddrIpNetmask_Input
type ClearBgpInstanceBestpathIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceBestpathIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathIpAddr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathIpAddr_Input
}

func (clearBgpInstanceBestpathIpAddr *ClearBgpInstanceBestpathIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathIpAddr.EntityData.YFilter = clearBgpInstanceBestpathIpAddr.YFilter
    clearBgpInstanceBestpathIpAddr.EntityData.YangName = "clear-bgp-instance-bestpath-ip-addr"
    clearBgpInstanceBestpathIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr"
    clearBgpInstanceBestpathIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathIpAddr.Input})
    clearBgpInstanceBestpathIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathIpAddr.EntityData)
}

// ClearBgpInstanceBestpathIpAddr_Input
type ClearBgpInstanceBestpathIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceBestpathIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathIpPrefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathIpPrefix_Input
}

func (clearBgpInstanceBestpathIpPrefix *ClearBgpInstanceBestpathIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathIpPrefix.EntityData.YFilter = clearBgpInstanceBestpathIpPrefix.YFilter
    clearBgpInstanceBestpathIpPrefix.EntityData.YangName = "clear-bgp-instance-bestpath-ip-prefix"
    clearBgpInstanceBestpathIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-prefix"
    clearBgpInstanceBestpathIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathIpPrefix.Input})
    clearBgpInstanceBestpathIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathIpPrefix.EntityData)
}

// ClearBgpInstanceBestpathIpPrefix_Input
type ClearBgpInstanceBestpathIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceBestpathIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input
}

func (clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.YFilter
    clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask"
    clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask"
    clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.Input})
    clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input
type ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpAddr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpAddr_Input
}

func (clearBgpInstanceBestpathAfiSafiIpAddr *ClearBgpInstanceBestpathAfiSafiIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiIpAddr.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiIpAddr.YFilter
    clearBgpInstanceBestpathAfiSafiIpAddr.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-ip-addr"
    clearBgpInstanceBestpathAfiSafiIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr"
    clearBgpInstanceBestpathAfiSafiIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiIpAddr.Input})
    clearBgpInstanceBestpathAfiSafiIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiIpAddr.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpAddr_Input
type ClearBgpInstanceBestpathAfiSafiIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpPrefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpPrefix_Input
}

func (clearBgpInstanceBestpathAfiSafiIpPrefix *ClearBgpInstanceBestpathAfiSafiIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiIpPrefix.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiIpPrefix.YFilter
    clearBgpInstanceBestpathAfiSafiIpPrefix.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-ip-prefix"
    clearBgpInstanceBestpathAfiSafiIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-prefix"
    clearBgpInstanceBestpathAfiSafiIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiIpPrefix.Input})
    clearBgpInstanceBestpathAfiSafiIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiIpPrefix.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpPrefix_Input
type ClearBgpInstanceBestpathAfiSafiIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.YFilter
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input})
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input
type ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("bridge-domain-name", types.YLeaf{"BridgeDomainName", input.BridgeDomainName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.YFilter
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr"
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr"
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.Input})
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input
type ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("bridge-domain-name", types.YLeaf{"BridgeDomainName", input.BridgeDomainName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.YFilter
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix"
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix"
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.Input})
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input
type ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("bridge-domain-name", types.YLeaf{"BridgeDomainName", input.BridgeDomainName})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input
}

func (clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.YFilter
    clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask"
    clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask"
    clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.Input})
    clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input
type ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdIpAddr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input
}

func (clearBgpInstanceBestpathAfiSafiRdIpAddr *ClearBgpInstanceBestpathAfiSafiRdIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiRdIpAddr.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiRdIpAddr.YFilter
    clearBgpInstanceBestpathAfiSafiRdIpAddr.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-rd-ip-addr"
    clearBgpInstanceBestpathAfiSafiRdIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiRdIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiRdIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr"
    clearBgpInstanceBestpathAfiSafiRdIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiRdIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiRdIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiRdIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiRdIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiRdIpAddr.Input})
    clearBgpInstanceBestpathAfiSafiRdIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiRdIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiRdIpAddr.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input
type ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-rd-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdIpPrefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input
}

func (clearBgpInstanceBestpathAfiSafiRdIpPrefix *ClearBgpInstanceBestpathAfiSafiRdIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiRdIpPrefix.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiRdIpPrefix.YFilter
    clearBgpInstanceBestpathAfiSafiRdIpPrefix.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix"
    clearBgpInstanceBestpathAfiSafiRdIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiRdIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiRdIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix"
    clearBgpInstanceBestpathAfiSafiRdIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiRdIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiRdIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiRdIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiRdIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiRdIpPrefix.Input})
    clearBgpInstanceBestpathAfiSafiRdIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiRdIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiRdIpPrefix.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input
type ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input
}

func (clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.YFilter
    clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask"
    clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask"
    clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.Input})
    clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input
type ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpv4Addr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpv4Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input
}

func (clearBgpInstanceBestpathAfiSafiIpv4Addr *ClearBgpInstanceBestpathAfiSafiIpv4Addr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiIpv4Addr.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiIpv4Addr.YFilter
    clearBgpInstanceBestpathAfiSafiIpv4Addr.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-ipv4-addr"
    clearBgpInstanceBestpathAfiSafiIpv4Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiIpv4Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiIpv4Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr"
    clearBgpInstanceBestpathAfiSafiIpv4Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiIpv4Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiIpv4Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiIpv4Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiIpv4Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiIpv4Addr.Input})
    clearBgpInstanceBestpathAfiSafiIpv4Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiIpv4Addr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiIpv4Addr.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input
type ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-ipv4-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpv4Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input
}

func (clearBgpInstanceBestpathAfiSafiIpv4Prefix *ClearBgpInstanceBestpathAfiSafiIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiIpv4Prefix.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiIpv4Prefix.YFilter
    clearBgpInstanceBestpathAfiSafiIpv4Prefix.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-ipv4-prefix"
    clearBgpInstanceBestpathAfiSafiIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-prefix"
    clearBgpInstanceBestpathAfiSafiIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiIpv4Prefix.Input})
    clearBgpInstanceBestpathAfiSafiIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiIpv4Prefix.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input
type ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network and masklength. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdIpv4Addr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdIpv4Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4Addr *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiRdIpv4Addr.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiRdIpv4Addr.YFilter
    clearBgpInstanceBestpathAfiSafiRdIpv4Addr.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr"
    clearBgpInstanceBestpathAfiSafiRdIpv4Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiRdIpv4Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiRdIpv4Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr"
    clearBgpInstanceBestpathAfiSafiRdIpv4Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiRdIpv4Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiRdIpv4Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiRdIpv4Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiRdIpv4Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiRdIpv4Addr.Input})
    clearBgpInstanceBestpathAfiSafiRdIpv4Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiRdIpv4Addr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiRdIpv4Addr.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input
type ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv4 MDT network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.YFilter
    clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr"
    clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr"
    clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.Input})
    clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input
type ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv4 MDT network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiNetwork
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiNetwork_Input
}

func (clearBgpInstanceBestpathAfiSafiNetwork *ClearBgpInstanceBestpathAfiSafiNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiNetwork.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiNetwork.YFilter
    clearBgpInstanceBestpathAfiSafiNetwork.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-network"
    clearBgpInstanceBestpathAfiSafiNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-network"
    clearBgpInstanceBestpathAfiSafiNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiNetwork.Input})
    clearBgpInstanceBestpathAfiSafiNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiNetwork.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiNetwork_Input
type ClearBgpInstanceBestpathAfiSafiNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdNetwork
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdNetwork_Input
}

func (clearBgpInstanceBestpathAfiSafiRdNetwork *ClearBgpInstanceBestpathAfiSafiRdNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiRdNetwork.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiRdNetwork.YFilter
    clearBgpInstanceBestpathAfiSafiRdNetwork.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-rd-network"
    clearBgpInstanceBestpathAfiSafiRdNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiRdNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiRdNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-network"
    clearBgpInstanceBestpathAfiSafiRdNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiRdNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiRdNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiRdNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiRdNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiRdNetwork.Input})
    clearBgpInstanceBestpathAfiSafiRdNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiRdNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiRdNetwork.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdNetwork_Input
type ClearBgpInstanceBestpathAfiSafiRdNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-rd-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiVrfNetwork
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathAfiSafiVrfNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input
}

func (clearBgpInstanceBestpathAfiSafiVrfNetwork *ClearBgpInstanceBestpathAfiSafiVrfNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiVrfNetwork.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiVrfNetwork.YFilter
    clearBgpInstanceBestpathAfiSafiVrfNetwork.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-vrf-network"
    clearBgpInstanceBestpathAfiSafiVrfNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiVrfNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiVrfNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-network"
    clearBgpInstanceBestpathAfiSafiVrfNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiVrfNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiVrfNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiVrfNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiVrfNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiVrfNetwork.Input})
    clearBgpInstanceBestpathAfiSafiVrfNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiVrfNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiVrfNetwork.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input
type ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-vrf-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input
}

func (clearBgpInstanceBestpathAfiSafiRtConstraintNetwork *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.YFilter
    clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-rt-constraint-network"
    clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rt-constraint-network"
    clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.Input})
    clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input
type ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // RT-Constraint network. The type is string. This attribute is mandatory.
    RtConstraintNetwork interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-rt-constraint-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rt-constraint-network", types.YLeaf{"RtConstraintNetwork", input.RtConstraintNetwork})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input
}

func (clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.YFilter
    clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network"
    clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network"
    clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.Input})
    clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input
type ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Tunnel network <Tunnel-ID>:<IPv4 Address>. The type is string. This
    // attribute is mandatory.
    Ipv4TunnelNetwork interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-tunnel-network", types.YLeaf{"Ipv4TunnelNetwork", input.Ipv4TunnelNetwork})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input
}

func (clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.YFilter
    clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask"
    clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask"
    clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.Input})
    clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input
type ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})
    input.EntityData.Leafs.Append("ipv6-netmask", types.YLeaf{"Ipv6Netmask", input.Ipv6Netmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpv6Addr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpv6Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input
}

func (clearBgpInstanceBestpathAfiSafiIpv6Addr *ClearBgpInstanceBestpathAfiSafiIpv6Addr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiIpv6Addr.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiIpv6Addr.YFilter
    clearBgpInstanceBestpathAfiSafiIpv6Addr.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-ipv6-addr"
    clearBgpInstanceBestpathAfiSafiIpv6Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiIpv6Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiIpv6Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr"
    clearBgpInstanceBestpathAfiSafiIpv6Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiIpv6Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiIpv6Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiIpv6Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiIpv6Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiIpv6Addr.Input})
    clearBgpInstanceBestpathAfiSafiIpv6Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiIpv6Addr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiIpv6Addr.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input
type ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-ipv6-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpv6Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input
}

func (clearBgpInstanceBestpathAfiSafiIpv6Prefix *ClearBgpInstanceBestpathAfiSafiIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiIpv6Prefix.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiIpv6Prefix.YFilter
    clearBgpInstanceBestpathAfiSafiIpv6Prefix.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-ipv6-prefix"
    clearBgpInstanceBestpathAfiSafiIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-prefix"
    clearBgpInstanceBestpathAfiSafiIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiIpv6Prefix.Input})
    clearBgpInstanceBestpathAfiSafiIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiIpv6Prefix.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input
type ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRd
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRd_Input
}

func (clearBgpInstanceBestpathAfiSafiRd *ClearBgpInstanceBestpathAfiSafiRd) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiRd.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiRd.YFilter
    clearBgpInstanceBestpathAfiSafiRd.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-rd"
    clearBgpInstanceBestpathAfiSafiRd.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiRd.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiRd.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd"
    clearBgpInstanceBestpathAfiSafiRd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiRd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiRd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiRd.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiRd.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiRd.Input})
    clearBgpInstanceBestpathAfiSafiRd.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiRd.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiRd.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRd_Input
type ClearBgpInstanceBestpathAfiSafiRd_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRd_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-rd"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiVrf
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathAfiSafiVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiVrf_Input
}

func (clearBgpInstanceBestpathAfiSafiVrf *ClearBgpInstanceBestpathAfiSafiVrf) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiVrf.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiVrf.YFilter
    clearBgpInstanceBestpathAfiSafiVrf.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-vrf"
    clearBgpInstanceBestpathAfiSafiVrf.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiVrf.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiVrf.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf"
    clearBgpInstanceBestpathAfiSafiVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiVrf.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiVrf.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiVrf.Input})
    clearBgpInstanceBestpathAfiSafiVrf.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiVrf.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiVrf.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiVrf_Input
type ClearBgpInstanceBestpathAfiSafiVrf_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiVrf_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-vrf"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafi
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafi_Input
}

func (clearBgpInstanceBestpathAfiSafi *ClearBgpInstanceBestpathAfiSafi) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafi.EntityData.YFilter = clearBgpInstanceBestpathAfiSafi.YFilter
    clearBgpInstanceBestpathAfiSafi.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi"
    clearBgpInstanceBestpathAfiSafi.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafi.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafi.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi"
    clearBgpInstanceBestpathAfiSafi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafi.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafi.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafi.Input})
    clearBgpInstanceBestpathAfiSafi.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafi.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafi.EntityData)
}

// ClearBgpInstanceBestpathAfiSafi_Input
type ClearBgpInstanceBestpathAfiSafi_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafi_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input
}

func (clearBgpInstanceBestpathAfiSafiSrPolicyPrefix *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.YFilter
    clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix"
    clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix"
    clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.Input})
    clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input
type ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // SR Policy prefix. The type is string. This attribute is mandatory.
    SrPolicyPrefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("sr-policy-prefix", types.YLeaf{"SrPolicyPrefix", input.SrPolicyPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.YFilter
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix"
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix"
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.Input})
    clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input
type ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // L2VPN EVPN Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("bridge-domain-name", types.YLeaf{"BridgeDomainName", input.BridgeDomainName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.YFilter
    clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix"
    clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix"
    clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.Input})
    clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input
type ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // L2VPN EVPN Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified Xconnect group:MP2MP.
// 
type ClearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix_Input
}

func (clearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix *ClearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.YFilter
    clearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix"
    clearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix"
    clearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.Input})
    clearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix_Input
type ClearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Xconnect Group:mp2mp. The type is string. This attribute is mandatory.
    Mp2mp interface{}

    // L2VPN VPWS Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiMp2mpIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("mp2mp", types.YLeaf{"Mp2mp", input.Mp2mp})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.YFilter
    clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix"
    clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix"
    clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.Input})
    clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input
type ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // VPN Fspec Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.YFilter
    clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"
    clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"
    clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.Input})
    clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input
type ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.YFilter
    clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"
    clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"
    clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input})
    clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input
type ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.YFilter
    clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"
    clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"
    clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input})
    clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input
type ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})
    input.EntityData.Leafs.Append("ipv6-netmask", types.YLeaf{"Ipv6Netmask", input.Ipv6Netmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdIpv6Addr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdIpv6Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6Addr *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiRdIpv6Addr.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiRdIpv6Addr.YFilter
    clearBgpInstanceBestpathAfiSafiRdIpv6Addr.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr"
    clearBgpInstanceBestpathAfiSafiRdIpv6Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiRdIpv6Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiRdIpv6Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr"
    clearBgpInstanceBestpathAfiSafiRdIpv6Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiRdIpv6Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiRdIpv6Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiRdIpv6Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiRdIpv6Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiRdIpv6Addr.Input})
    clearBgpInstanceBestpathAfiSafiRdIpv6Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiRdIpv6Addr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiRdIpv6Addr.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input
type ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.YFilter
    clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix"
    clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix"
    clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.Input})
    clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input
type ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.YFilter
    clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"
    clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"
    clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input})
    clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input
type ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})
    input.EntityData.Leafs.Append("ipv6-netmask", types.YLeaf{"Ipv6Netmask", input.Ipv6Netmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.YFilter
    clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr"
    clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr"
    clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.Input})
    clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input
type ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.EntityData.YFilter = clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.YFilter
    clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.EntityData.YangName = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix"
    clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix"
    clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.Input})
    clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.EntityData)
}

// ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input
type ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathVrfIpAddrIpNetmask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input
}

func (clearBgpInstanceBestpathVrfIpAddrIpNetmask *ClearBgpInstanceBestpathVrfIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathVrfIpAddrIpNetmask.EntityData.YFilter = clearBgpInstanceBestpathVrfIpAddrIpNetmask.YFilter
    clearBgpInstanceBestpathVrfIpAddrIpNetmask.EntityData.YangName = "clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask"
    clearBgpInstanceBestpathVrfIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathVrfIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathVrfIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask"
    clearBgpInstanceBestpathVrfIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathVrfIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathVrfIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathVrfIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathVrfIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathVrfIpAddrIpNetmask.Input})
    clearBgpInstanceBestpathVrfIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathVrfIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathVrfIpAddrIpNetmask.EntityData)
}

// ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input
type ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathVrfIpAddr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfIpAddr_Input
}

func (clearBgpInstanceBestpathVrfIpAddr *ClearBgpInstanceBestpathVrfIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathVrfIpAddr.EntityData.YFilter = clearBgpInstanceBestpathVrfIpAddr.YFilter
    clearBgpInstanceBestpathVrfIpAddr.EntityData.YangName = "clear-bgp-instance-bestpath-vrf-ip-addr"
    clearBgpInstanceBestpathVrfIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathVrfIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathVrfIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr"
    clearBgpInstanceBestpathVrfIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathVrfIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathVrfIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathVrfIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathVrfIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathVrfIpAddr.Input})
    clearBgpInstanceBestpathVrfIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathVrfIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathVrfIpAddr.EntityData)
}

// ClearBgpInstanceBestpathVrfIpAddr_Input
type ClearBgpInstanceBestpathVrfIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceBestpathVrfIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-vrf-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathVrfIpPrefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfIpPrefix_Input
}

func (clearBgpInstanceBestpathVrfIpPrefix *ClearBgpInstanceBestpathVrfIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathVrfIpPrefix.EntityData.YFilter = clearBgpInstanceBestpathVrfIpPrefix.YFilter
    clearBgpInstanceBestpathVrfIpPrefix.EntityData.YangName = "clear-bgp-instance-bestpath-vrf-ip-prefix"
    clearBgpInstanceBestpathVrfIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathVrfIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathVrfIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-prefix"
    clearBgpInstanceBestpathVrfIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathVrfIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathVrfIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathVrfIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathVrfIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathVrfIpPrefix.Input})
    clearBgpInstanceBestpathVrfIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathVrfIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathVrfIpPrefix.EntityData)
}

// ClearBgpInstanceBestpathVrfIpPrefix_Input
type ClearBgpInstanceBestpathVrfIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceBestpathVrfIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-vrf-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.EntityData.YFilter = clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.YFilter
    clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.EntityData.YangName = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix"
    clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix"
    clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.Input})
    clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input
type ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Fspec IPv4 Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.YFilter = clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.YFilter
    clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.YangName = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"
    clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"
    clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input})
    clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input
type ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.EntityData.YFilter = clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.YFilter
    clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.EntityData.YangName = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr"
    clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr"
    clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.Input})
    clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input
type ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiNetwork
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafiNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiNetwork *ClearBgpInstanceBestpathVrfAfiSafiNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathVrfAfiSafiNetwork.EntityData.YFilter = clearBgpInstanceBestpathVrfAfiSafiNetwork.YFilter
    clearBgpInstanceBestpathVrfAfiSafiNetwork.EntityData.YangName = "clear-bgp-instance-bestpath-vrf-afi-safi-network"
    clearBgpInstanceBestpathVrfAfiSafiNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathVrfAfiSafiNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathVrfAfiSafiNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-network"
    clearBgpInstanceBestpathVrfAfiSafiNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathVrfAfiSafiNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathVrfAfiSafiNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathVrfAfiSafiNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathVrfAfiSafiNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathVrfAfiSafiNetwork.Input})
    clearBgpInstanceBestpathVrfAfiSafiNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathVrfAfiSafiNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathVrfAfiSafiNetwork.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input
type ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-vrf-afi-safi-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiRdNetwork
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathVrfAfiSafiRdNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiRdNetwork *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathVrfAfiSafiRdNetwork.EntityData.YFilter = clearBgpInstanceBestpathVrfAfiSafiRdNetwork.YFilter
    clearBgpInstanceBestpathVrfAfiSafiRdNetwork.EntityData.YangName = "clear-bgp-instance-bestpath-vrf-afi-safi-rd-network"
    clearBgpInstanceBestpathVrfAfiSafiRdNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathVrfAfiSafiRdNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathVrfAfiSafiRdNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd-network"
    clearBgpInstanceBestpathVrfAfiSafiRdNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathVrfAfiSafiRdNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathVrfAfiSafiRdNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathVrfAfiSafiRdNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathVrfAfiSafiRdNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathVrfAfiSafiRdNetwork.Input})
    clearBgpInstanceBestpathVrfAfiSafiRdNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathVrfAfiSafiRdNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathVrfAfiSafiRdNetwork.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input
type ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-vrf-afi-safi-rd-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiVrfNetwork *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.EntityData.YFilter = clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.YFilter
    clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.EntityData.YangName = "clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network"
    clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network"
    clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.Input})
    clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input
type ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.YFilter = clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.YFilter
    clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.YangName = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"
    clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"
    clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input})
    clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input
type ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})
    input.EntityData.Leafs.Append("ipv6-netmask", types.YLeaf{"Ipv6Netmask", input.Ipv6Netmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.EntityData.YFilter = clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.YFilter
    clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.EntityData.YangName = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr"
    clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr"
    clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.Input})
    clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input
type ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.EntityData.YFilter = clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.YFilter
    clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.EntityData.YangName = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix"
    clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix"
    clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.Input})
    clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input
type ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiRd
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathVrfAfiSafiRd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiRd_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiRd *ClearBgpInstanceBestpathVrfAfiSafiRd) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathVrfAfiSafiRd.EntityData.YFilter = clearBgpInstanceBestpathVrfAfiSafiRd.YFilter
    clearBgpInstanceBestpathVrfAfiSafiRd.EntityData.YangName = "clear-bgp-instance-bestpath-vrf-afi-safi-rd"
    clearBgpInstanceBestpathVrfAfiSafiRd.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathVrfAfiSafiRd.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathVrfAfiSafiRd.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd"
    clearBgpInstanceBestpathVrfAfiSafiRd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathVrfAfiSafiRd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathVrfAfiSafiRd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathVrfAfiSafiRd.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathVrfAfiSafiRd.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathVrfAfiSafiRd.Input})
    clearBgpInstanceBestpathVrfAfiSafiRd.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathVrfAfiSafiRd.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathVrfAfiSafiRd.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiRd_Input
type ClearBgpInstanceBestpathVrfAfiSafiRd_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiRd_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-vrf-afi-safi-rd"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiVrf
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafiVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiVrf_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiVrf *ClearBgpInstanceBestpathVrfAfiSafiVrf) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathVrfAfiSafiVrf.EntityData.YFilter = clearBgpInstanceBestpathVrfAfiSafiVrf.YFilter
    clearBgpInstanceBestpathVrfAfiSafiVrf.EntityData.YangName = "clear-bgp-instance-bestpath-vrf-afi-safi-vrf"
    clearBgpInstanceBestpathVrfAfiSafiVrf.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathVrfAfiSafiVrf.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathVrfAfiSafiVrf.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf"
    clearBgpInstanceBestpathVrfAfiSafiVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathVrfAfiSafiVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathVrfAfiSafiVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathVrfAfiSafiVrf.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathVrfAfiSafiVrf.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathVrfAfiSafiVrf.Input})
    clearBgpInstanceBestpathVrfAfiSafiVrf.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathVrfAfiSafiVrf.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathVrfAfiSafiVrf.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafiVrf_Input
type ClearBgpInstanceBestpathVrfAfiSafiVrf_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrf_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-vrf-afi-safi-vrf"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafi
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafi_Input
}

func (clearBgpInstanceBestpathVrfAfiSafi *ClearBgpInstanceBestpathVrfAfiSafi) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceBestpathVrfAfiSafi.EntityData.YFilter = clearBgpInstanceBestpathVrfAfiSafi.YFilter
    clearBgpInstanceBestpathVrfAfiSafi.EntityData.YangName = "clear-bgp-instance-bestpath-vrf-afi-safi"
    clearBgpInstanceBestpathVrfAfiSafi.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceBestpathVrfAfiSafi.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceBestpathVrfAfiSafi.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi"
    clearBgpInstanceBestpathVrfAfiSafi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceBestpathVrfAfiSafi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceBestpathVrfAfiSafi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceBestpathVrfAfiSafi.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceBestpathVrfAfiSafi.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceBestpathVrfAfiSafi.Input})
    clearBgpInstanceBestpathVrfAfiSafi.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceBestpathVrfAfiSafi.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceBestpathVrfAfiSafi.EntityData)
}

// ClearBgpInstanceBestpathVrfAfiSafi_Input
type ClearBgpInstanceBestpathVrfAfiSafi_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafi_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-bestpath-vrf-afi-safi"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceExternalGraceful
// Choose a particular BGP instance.
// Clear all external peers.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpInstanceExternalGraceful struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceExternalGraceful_Input
}

func (clearBgpInstanceExternalGraceful *ClearBgpInstanceExternalGraceful) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceExternalGraceful.EntityData.YFilter = clearBgpInstanceExternalGraceful.YFilter
    clearBgpInstanceExternalGraceful.EntityData.YangName = "clear-bgp-instance-external-graceful"
    clearBgpInstanceExternalGraceful.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceExternalGraceful.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceExternalGraceful.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external-graceful"
    clearBgpInstanceExternalGraceful.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceExternalGraceful.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceExternalGraceful.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceExternalGraceful.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceExternalGraceful.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceExternalGraceful.Input})
    clearBgpInstanceExternalGraceful.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceExternalGraceful.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceExternalGraceful.EntityData)
}

// ClearBgpInstanceExternalGraceful_Input
type ClearBgpInstanceExternalGraceful_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceExternalGraceful_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-external-graceful"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceExternal
// Choose a particular BGP instance.
// Clear all external peers.
// 
type ClearBgpInstanceExternal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceExternal_Input
}

func (clearBgpInstanceExternal *ClearBgpInstanceExternal) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceExternal.EntityData.YFilter = clearBgpInstanceExternal.YFilter
    clearBgpInstanceExternal.EntityData.YangName = "clear-bgp-instance-external"
    clearBgpInstanceExternal.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceExternal.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceExternal.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external"
    clearBgpInstanceExternal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceExternal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceExternal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceExternal.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceExternal.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceExternal.Input})
    clearBgpInstanceExternal.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceExternal.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceExternal.EntityData)
}

// ClearBgpInstanceExternal_Input
type ClearBgpInstanceExternal_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceExternal_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-external"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiDampeningIpv4Prefix
// Choose a particular BGP instance.
// Clear route flap dampening information.
// 
type ClearBgpInstanceAfiSafiDampeningIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input
}

func (clearBgpInstanceAfiSafiDampeningIpv4Prefix *ClearBgpInstanceAfiSafiDampeningIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiDampeningIpv4Prefix.EntityData.YFilter = clearBgpInstanceAfiSafiDampeningIpv4Prefix.YFilter
    clearBgpInstanceAfiSafiDampeningIpv4Prefix.EntityData.YangName = "clear-bgp-instance-afi-safi-dampening-ipv4-prefix"
    clearBgpInstanceAfiSafiDampeningIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiDampeningIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiDampeningIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv4-prefix"
    clearBgpInstanceAfiSafiDampeningIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiDampeningIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiDampeningIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiDampeningIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiDampeningIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiDampeningIpv4Prefix.Input})
    clearBgpInstanceAfiSafiDampeningIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiDampeningIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiDampeningIpv4Prefix.EntityData)
}

// ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input
type ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Network and mask or masklength to clear dampening information. The
    // type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-dampening-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix
// Choose a particular BGP instance.
// Clear flap statistics.
// 
type ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.EntityData.YFilter = clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.YFilter
    clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.EntityData.YangName = "clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix"
    clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix"
    clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.Input})
    clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.EntityData)
}

// ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input
type ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiDampeningIpv6Prefix
// Choose a particular BGP instance.
// Clear route flap dampening information.
// 
type ClearBgpInstanceAfiSafiDampeningIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input
}

func (clearBgpInstanceAfiSafiDampeningIpv6Prefix *ClearBgpInstanceAfiSafiDampeningIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiDampeningIpv6Prefix.EntityData.YFilter = clearBgpInstanceAfiSafiDampeningIpv6Prefix.YFilter
    clearBgpInstanceAfiSafiDampeningIpv6Prefix.EntityData.YangName = "clear-bgp-instance-afi-safi-dampening-ipv6-prefix"
    clearBgpInstanceAfiSafiDampeningIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiDampeningIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiDampeningIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv6-prefix"
    clearBgpInstanceAfiSafiDampeningIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiDampeningIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiDampeningIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiDampeningIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiDampeningIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiDampeningIpv6Prefix.Input})
    clearBgpInstanceAfiSafiDampeningIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiDampeningIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiDampeningIpv6Prefix.EntityData)
}

// ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input
type ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 Network and mask or masklength to clear dampening information. The
    // type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-dampening-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix
// Choose a particular BGP instance.
// Clear flap statistics.
// 
type ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.EntityData.YFilter = clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.YFilter
    clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.EntityData.YangName = "clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix"
    clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix"
    clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.Input})
    clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.EntityData)
}

// ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input
type ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceNexthopPerformanceStatistics
// Choose a particular BGP instance.
// Clear nexthop.
// Performance statistics information related to processing.
// 
type ClearBgpInstanceNexthopPerformanceStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceNexthopPerformanceStatistics_Input
}

func (clearBgpInstanceNexthopPerformanceStatistics *ClearBgpInstanceNexthopPerformanceStatistics) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceNexthopPerformanceStatistics.EntityData.YFilter = clearBgpInstanceNexthopPerformanceStatistics.YFilter
    clearBgpInstanceNexthopPerformanceStatistics.EntityData.YangName = "clear-bgp-instance-nexthop-performance-statistics"
    clearBgpInstanceNexthopPerformanceStatistics.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceNexthopPerformanceStatistics.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceNexthopPerformanceStatistics.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-performance-statistics"
    clearBgpInstanceNexthopPerformanceStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceNexthopPerformanceStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceNexthopPerformanceStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceNexthopPerformanceStatistics.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceNexthopPerformanceStatistics.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceNexthopPerformanceStatistics.Input})
    clearBgpInstanceNexthopPerformanceStatistics.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceNexthopPerformanceStatistics.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceNexthopPerformanceStatistics.EntityData)
}

// ClearBgpInstanceNexthopPerformanceStatistics_Input
type ClearBgpInstanceNexthopPerformanceStatistics_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceNexthopPerformanceStatistics_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-nexthop-performance-statistics"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceNexthopRegistrationIpAddr
// Choose a particular BGP instance.
// Clear nexthop.
// Registration with RIB and reregister.
// 
type ClearBgpInstanceNexthopRegistrationIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceNexthopRegistrationIpAddr_Input
}

func (clearBgpInstanceNexthopRegistrationIpAddr *ClearBgpInstanceNexthopRegistrationIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceNexthopRegistrationIpAddr.EntityData.YFilter = clearBgpInstanceNexthopRegistrationIpAddr.YFilter
    clearBgpInstanceNexthopRegistrationIpAddr.EntityData.YangName = "clear-bgp-instance-nexthop-registration-ip-addr"
    clearBgpInstanceNexthopRegistrationIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceNexthopRegistrationIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceNexthopRegistrationIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-registration-ip-addr"
    clearBgpInstanceNexthopRegistrationIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceNexthopRegistrationIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceNexthopRegistrationIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceNexthopRegistrationIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceNexthopRegistrationIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceNexthopRegistrationIpAddr.Input})
    clearBgpInstanceNexthopRegistrationIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceNexthopRegistrationIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceNexthopRegistrationIpAddr.EntityData)
}

// ClearBgpInstanceNexthopRegistrationIpAddr_Input
type ClearBgpInstanceNexthopRegistrationIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Nexthop address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceNexthopRegistrationIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-nexthop-registration-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstancePeerDropsAll
// Choose a particular BGP instance.
// Clear established/dropped counters for a peer.
// All Neighbors.
// 
type ClearBgpInstancePeerDropsAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstancePeerDropsAll_Input
}

func (clearBgpInstancePeerDropsAll *ClearBgpInstancePeerDropsAll) GetEntityData() *types.CommonEntityData {
    clearBgpInstancePeerDropsAll.EntityData.YFilter = clearBgpInstancePeerDropsAll.YFilter
    clearBgpInstancePeerDropsAll.EntityData.YangName = "clear-bgp-instance-peer-drops-all"
    clearBgpInstancePeerDropsAll.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstancePeerDropsAll.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstancePeerDropsAll.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-all"
    clearBgpInstancePeerDropsAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstancePeerDropsAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstancePeerDropsAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstancePeerDropsAll.EntityData.Children = types.NewOrderedMap()
    clearBgpInstancePeerDropsAll.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstancePeerDropsAll.Input})
    clearBgpInstancePeerDropsAll.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstancePeerDropsAll.EntityData.YListKeys = []string {}

    return &(clearBgpInstancePeerDropsAll.EntityData)
}

// ClearBgpInstancePeerDropsAll_Input
type ClearBgpInstancePeerDropsAll_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstancePeerDropsAll_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-peer-drops-all"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstancePeerDropsIpAddr
// Choose a particular BGP instance.
// Clear established/dropped counters for a peer.
// 
type ClearBgpInstancePeerDropsIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstancePeerDropsIpAddr_Input
}

func (clearBgpInstancePeerDropsIpAddr *ClearBgpInstancePeerDropsIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstancePeerDropsIpAddr.EntityData.YFilter = clearBgpInstancePeerDropsIpAddr.YFilter
    clearBgpInstancePeerDropsIpAddr.EntityData.YangName = "clear-bgp-instance-peer-drops-ip-addr"
    clearBgpInstancePeerDropsIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstancePeerDropsIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstancePeerDropsIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-ip-addr"
    clearBgpInstancePeerDropsIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstancePeerDropsIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstancePeerDropsIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstancePeerDropsIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstancePeerDropsIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstancePeerDropsIpAddr.Input})
    clearBgpInstancePeerDropsIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstancePeerDropsIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstancePeerDropsIpAddr.EntityData)
}

// ClearBgpInstancePeerDropsIpAddr_Input
type ClearBgpInstancePeerDropsIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // BGP neighbor IP address. The type is one of the following types: string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstancePeerDropsIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-peer-drops-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstancePerformanceStatistics
// Choose a particular BGP instance.
// Clear performance statistics.
// 
type ClearBgpInstancePerformanceStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstancePerformanceStatistics_Input
}

func (clearBgpInstancePerformanceStatistics *ClearBgpInstancePerformanceStatistics) GetEntityData() *types.CommonEntityData {
    clearBgpInstancePerformanceStatistics.EntityData.YFilter = clearBgpInstancePerformanceStatistics.YFilter
    clearBgpInstancePerformanceStatistics.EntityData.YangName = "clear-bgp-instance-performance-statistics"
    clearBgpInstancePerformanceStatistics.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstancePerformanceStatistics.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstancePerformanceStatistics.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-performance-statistics"
    clearBgpInstancePerformanceStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstancePerformanceStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstancePerformanceStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstancePerformanceStatistics.EntityData.Children = types.NewOrderedMap()
    clearBgpInstancePerformanceStatistics.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstancePerformanceStatistics.Input})
    clearBgpInstancePerformanceStatistics.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstancePerformanceStatistics.EntityData.YListKeys = []string {}

    return &(clearBgpInstancePerformanceStatistics.EntityData)
}

// ClearBgpInstancePerformanceStatistics_Input
type ClearBgpInstancePerformanceStatistics_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstancePerformanceStatistics_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-performance-statistics"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceRpkiServerAllSerialQuery
// Choose a particular BGP instance.
// RPKI clear command.
// clear RPKI cache-server.
// clear all RPKI cache-servers.
// send serial-queries to all cache-servers (with latest serial numbers).
// 
type ClearBgpInstanceRpkiServerAllSerialQuery struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceRpkiServerAllSerialQuery_Input
}

func (clearBgpInstanceRpkiServerAllSerialQuery *ClearBgpInstanceRpkiServerAllSerialQuery) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceRpkiServerAllSerialQuery.EntityData.YFilter = clearBgpInstanceRpkiServerAllSerialQuery.YFilter
    clearBgpInstanceRpkiServerAllSerialQuery.EntityData.YangName = "clear-bgp-instance-rpki-server-all-serial-query"
    clearBgpInstanceRpkiServerAllSerialQuery.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceRpkiServerAllSerialQuery.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceRpkiServerAllSerialQuery.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all-serial-query"
    clearBgpInstanceRpkiServerAllSerialQuery.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceRpkiServerAllSerialQuery.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceRpkiServerAllSerialQuery.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceRpkiServerAllSerialQuery.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceRpkiServerAllSerialQuery.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceRpkiServerAllSerialQuery.Input})
    clearBgpInstanceRpkiServerAllSerialQuery.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceRpkiServerAllSerialQuery.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceRpkiServerAllSerialQuery.EntityData)
}

// ClearBgpInstanceRpkiServerAllSerialQuery_Input
type ClearBgpInstanceRpkiServerAllSerialQuery_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceRpkiServerAllSerialQuery_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-rpki-server-all-serial-query"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceRpkiServerAll
// Choose a particular BGP instance.
// RPKI clear command.
// clear RPKI cache-server.
// clear all RPKI cache-servers.
// 
type ClearBgpInstanceRpkiServerAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceRpkiServerAll_Input
}

func (clearBgpInstanceRpkiServerAll *ClearBgpInstanceRpkiServerAll) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceRpkiServerAll.EntityData.YFilter = clearBgpInstanceRpkiServerAll.YFilter
    clearBgpInstanceRpkiServerAll.EntityData.YangName = "clear-bgp-instance-rpki-server-all"
    clearBgpInstanceRpkiServerAll.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceRpkiServerAll.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceRpkiServerAll.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all"
    clearBgpInstanceRpkiServerAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceRpkiServerAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceRpkiServerAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceRpkiServerAll.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceRpkiServerAll.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceRpkiServerAll.Input})
    clearBgpInstanceRpkiServerAll.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceRpkiServerAll.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceRpkiServerAll.EntityData)
}

// ClearBgpInstanceRpkiServerAll_Input
type ClearBgpInstanceRpkiServerAll_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceRpkiServerAll_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-rpki-server-all"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceRpkiServerRpkiServer
// Choose a particular BGP instance.
// RPKI clear command.
// clear RPKI cache-server.
// 
type ClearBgpInstanceRpkiServerRpkiServer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceRpkiServerRpkiServer_Input
}

func (clearBgpInstanceRpkiServerRpkiServer *ClearBgpInstanceRpkiServerRpkiServer) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceRpkiServerRpkiServer.EntityData.YFilter = clearBgpInstanceRpkiServerRpkiServer.YFilter
    clearBgpInstanceRpkiServerRpkiServer.EntityData.YangName = "clear-bgp-instance-rpki-server-rpki-server"
    clearBgpInstanceRpkiServerRpkiServer.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceRpkiServerRpkiServer.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceRpkiServerRpkiServer.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-rpki-server"
    clearBgpInstanceRpkiServerRpkiServer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceRpkiServerRpkiServer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceRpkiServerRpkiServer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceRpkiServerRpkiServer.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceRpkiServerRpkiServer.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceRpkiServerRpkiServer.Input})
    clearBgpInstanceRpkiServerRpkiServer.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceRpkiServerRpkiServer.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceRpkiServerRpkiServer.EntityData)
}

// ClearBgpInstanceRpkiServerRpkiServer_Input
type ClearBgpInstanceRpkiServerRpkiServer_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // clear a specific RPKI cache-server (hostname or IP address). The type is
    // string. This attribute is mandatory.
    RpkiServer interface{}
}

func (input *ClearBgpInstanceRpkiServerRpkiServer_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-rpki-server-rpki-server"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("rpki-server", types.YLeaf{"RpkiServer", input.RpkiServer})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceRpkiValidationIpv4
// Choose a particular BGP instance.
// RPKI clear command.
// clear RPKI origin-validation (trigger origin validation).
// trigger origin validation walk for the IPv4 table.
// 
type ClearBgpInstanceRpkiValidationIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceRpkiValidationIpv4_Input
}

func (clearBgpInstanceRpkiValidationIpv4 *ClearBgpInstanceRpkiValidationIpv4) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceRpkiValidationIpv4.EntityData.YFilter = clearBgpInstanceRpkiValidationIpv4.YFilter
    clearBgpInstanceRpkiValidationIpv4.EntityData.YangName = "clear-bgp-instance-rpki-validation-ipv4"
    clearBgpInstanceRpkiValidationIpv4.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceRpkiValidationIpv4.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceRpkiValidationIpv4.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv4"
    clearBgpInstanceRpkiValidationIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceRpkiValidationIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceRpkiValidationIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceRpkiValidationIpv4.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceRpkiValidationIpv4.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceRpkiValidationIpv4.Input})
    clearBgpInstanceRpkiValidationIpv4.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceRpkiValidationIpv4.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceRpkiValidationIpv4.EntityData)
}

// ClearBgpInstanceRpkiValidationIpv4_Input
type ClearBgpInstanceRpkiValidationIpv4_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceRpkiValidationIpv4_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-rpki-validation-ipv4"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceRpkiValidationIpv6
// Choose a particular BGP instance.
// RPKI clear command.
// clear RPKI origin-validation (trigger origin validation).
// trigger origin validation walk for the IPv6 table.
// 
type ClearBgpInstanceRpkiValidationIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceRpkiValidationIpv6_Input
}

func (clearBgpInstanceRpkiValidationIpv6 *ClearBgpInstanceRpkiValidationIpv6) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceRpkiValidationIpv6.EntityData.YFilter = clearBgpInstanceRpkiValidationIpv6.YFilter
    clearBgpInstanceRpkiValidationIpv6.EntityData.YangName = "clear-bgp-instance-rpki-validation-ipv6"
    clearBgpInstanceRpkiValidationIpv6.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceRpkiValidationIpv6.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceRpkiValidationIpv6.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv6"
    clearBgpInstanceRpkiValidationIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceRpkiValidationIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceRpkiValidationIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceRpkiValidationIpv6.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceRpkiValidationIpv6.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceRpkiValidationIpv6.Input})
    clearBgpInstanceRpkiValidationIpv6.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceRpkiValidationIpv6.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceRpkiValidationIpv6.EntityData)
}

// ClearBgpInstanceRpkiValidationIpv6_Input
type ClearBgpInstanceRpkiValidationIpv6_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceRpkiValidationIpv6_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-rpki-validation-ipv6"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceRpkiValidation
// Choose a particular BGP instance.
// RPKI clear command.
// clear RPKI origin-validation (trigger origin validation).
// 
type ClearBgpInstanceRpkiValidation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceRpkiValidation_Input
}

func (clearBgpInstanceRpkiValidation *ClearBgpInstanceRpkiValidation) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceRpkiValidation.EntityData.YFilter = clearBgpInstanceRpkiValidation.YFilter
    clearBgpInstanceRpkiValidation.EntityData.YangName = "clear-bgp-instance-rpki-validation"
    clearBgpInstanceRpkiValidation.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceRpkiValidation.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceRpkiValidation.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation"
    clearBgpInstanceRpkiValidation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceRpkiValidation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceRpkiValidation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceRpkiValidation.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceRpkiValidation.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceRpkiValidation.Input})
    clearBgpInstanceRpkiValidation.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceRpkiValidation.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceRpkiValidation.EntityData)
}

// ClearBgpInstanceRpkiValidation_Input
type ClearBgpInstanceRpkiValidation_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceRpkiValidation_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-rpki-validation"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceShutdown
// Choose a particular BGP instance.
// Clear all peers which were shut down due to low memory.
// 
type ClearBgpInstanceShutdown struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceShutdown_Input
}

func (clearBgpInstanceShutdown *ClearBgpInstanceShutdown) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceShutdown.EntityData.YFilter = clearBgpInstanceShutdown.YFilter
    clearBgpInstanceShutdown.EntityData.YangName = "clear-bgp-instance-shutdown"
    clearBgpInstanceShutdown.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceShutdown.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceShutdown.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-shutdown"
    clearBgpInstanceShutdown.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceShutdown.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceShutdown.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceShutdown.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceShutdown.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceShutdown.Input})
    clearBgpInstanceShutdown.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceShutdown.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceShutdown.EntityData)
}

// ClearBgpInstanceShutdown_Input
type ClearBgpInstanceShutdown_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceShutdown_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-shutdown"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input
}

func (clearBgpInstanceUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.EntityData.YFilter = clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.YFilter
    clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.EntityData.YangName = "clear-bgp-instance-update-outq-address-family-update-parent"
    clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family-update-parent"
    clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.Input})
    clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.EntityData)
}

// ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input
type ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-update-outq-address-family-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceUpdateOutqAddressFamily
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// 
type ClearBgpInstanceUpdateOutqAddressFamily struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqAddressFamily_Input
}

func (clearBgpInstanceUpdateOutqAddressFamily *ClearBgpInstanceUpdateOutqAddressFamily) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceUpdateOutqAddressFamily.EntityData.YFilter = clearBgpInstanceUpdateOutqAddressFamily.YFilter
    clearBgpInstanceUpdateOutqAddressFamily.EntityData.YangName = "clear-bgp-instance-update-outq-address-family"
    clearBgpInstanceUpdateOutqAddressFamily.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceUpdateOutqAddressFamily.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceUpdateOutqAddressFamily.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family"
    clearBgpInstanceUpdateOutqAddressFamily.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceUpdateOutqAddressFamily.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceUpdateOutqAddressFamily.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceUpdateOutqAddressFamily.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceUpdateOutqAddressFamily.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceUpdateOutqAddressFamily.Input})
    clearBgpInstanceUpdateOutqAddressFamily.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceUpdateOutqAddressFamily.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceUpdateOutqAddressFamily.EntityData)
}

// ClearBgpInstanceUpdateOutqAddressFamily_Input
type ClearBgpInstanceUpdateOutqAddressFamily_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceUpdateOutqAddressFamily_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-update-outq-address-family"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YFilter = clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter
    clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YangName = "clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent"
    clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent"
    clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.Input})
    clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData)
}

// ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
type ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// 
type ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.EntityData.YFilter = clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.YFilter
    clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.EntityData.YangName = "clear-bgp-instance-update-outq-neighbor-ip-addr-refresh"
    clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh"
    clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.Input})
    clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.EntityData)
}

// ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input
type ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-update-outq-neighbor-ip-addr-refresh"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.EntityData.YFilter = clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.YFilter
    clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.EntityData.YangName = "clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent"
    clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent"
    clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.Input})
    clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.EntityData)
}

// ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input
type ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceUpdateOutqNeighborIpAddr
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// 
type ClearBgpInstanceUpdateOutqNeighborIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqNeighborIpAddr_Input
}

func (clearBgpInstanceUpdateOutqNeighborIpAddr *ClearBgpInstanceUpdateOutqNeighborIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceUpdateOutqNeighborIpAddr.EntityData.YFilter = clearBgpInstanceUpdateOutqNeighborIpAddr.YFilter
    clearBgpInstanceUpdateOutqNeighborIpAddr.EntityData.YangName = "clear-bgp-instance-update-outq-neighbor-ip-addr"
    clearBgpInstanceUpdateOutqNeighborIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceUpdateOutqNeighborIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceUpdateOutqNeighborIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr"
    clearBgpInstanceUpdateOutqNeighborIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceUpdateOutqNeighborIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceUpdateOutqNeighborIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceUpdateOutqNeighborIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceUpdateOutqNeighborIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceUpdateOutqNeighborIpAddr.Input})
    clearBgpInstanceUpdateOutqNeighborIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceUpdateOutqNeighborIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceUpdateOutqNeighborIpAddr.EntityData)
}

// ClearBgpInstanceUpdateOutqNeighborIpAddr_Input
type ClearBgpInstanceUpdateOutqNeighborIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-update-outq-neighbor-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceUpdateOutqProcess
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Process.
// 
type ClearBgpInstanceUpdateOutqProcess struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqProcess_Input
}

func (clearBgpInstanceUpdateOutqProcess *ClearBgpInstanceUpdateOutqProcess) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceUpdateOutqProcess.EntityData.YFilter = clearBgpInstanceUpdateOutqProcess.YFilter
    clearBgpInstanceUpdateOutqProcess.EntityData.YangName = "clear-bgp-instance-update-outq-process"
    clearBgpInstanceUpdateOutqProcess.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceUpdateOutqProcess.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceUpdateOutqProcess.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-process"
    clearBgpInstanceUpdateOutqProcess.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceUpdateOutqProcess.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceUpdateOutqProcess.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceUpdateOutqProcess.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceUpdateOutqProcess.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceUpdateOutqProcess.Input})
    clearBgpInstanceUpdateOutqProcess.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceUpdateOutqProcess.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceUpdateOutqProcess.EntityData)
}

// ClearBgpInstanceUpdateOutqProcess_Input
type ClearBgpInstanceUpdateOutqProcess_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceUpdateOutqProcess_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-update-outq-process"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YFilter = clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YangName = "clear-bgp-instance-update-outq-update-group-sub-group-update-parent"
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-update-parent"
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.Input})
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData)
}

// ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input
type ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-update-outq-update-group-sub-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("sub-group", types.YLeaf{"SubGroup", input.SubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceUpdateOutqUpdateGroupSubGroup
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpInstanceUpdateOutqUpdateGroupSubGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceUpdateOutqUpdateGroupSubGroup.EntityData.YFilter = clearBgpInstanceUpdateOutqUpdateGroupSubGroup.YFilter
    clearBgpInstanceUpdateOutqUpdateGroupSubGroup.EntityData.YangName = "clear-bgp-instance-update-outq-update-group-sub-group"
    clearBgpInstanceUpdateOutqUpdateGroupSubGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceUpdateOutqUpdateGroupSubGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceUpdateOutqUpdateGroupSubGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group"
    clearBgpInstanceUpdateOutqUpdateGroupSubGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceUpdateOutqUpdateGroupSubGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceUpdateOutqUpdateGroupSubGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceUpdateOutqUpdateGroupSubGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceUpdateOutqUpdateGroupSubGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceUpdateOutqUpdateGroupSubGroup.Input})
    clearBgpInstanceUpdateOutqUpdateGroupSubGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceUpdateOutqUpdateGroupSubGroup.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceUpdateOutqUpdateGroupSubGroup.EntityData)
}

// ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input
type ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-update-outq-update-group-sub-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("sub-group", types.YLeaf{"SubGroup", input.SubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YFilter = clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YangName = "clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input})
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData)
}

// ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
type ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("refresh-sub-group", types.YLeaf{"RefreshSubGroup", input.RefreshSubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YFilter = clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YangName = "clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group"
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group"
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input})
    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData)
}

// ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
type ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("refresh-sub-group", types.YLeaf{"RefreshSubGroup", input.RefreshSubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input
}

func (clearBgpInstanceUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.EntityData.YFilter = clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.YFilter
    clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.EntityData.YangName = "clear-bgp-instance-update-outq-update-group-update-parent"
    clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-update-parent"
    clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.Input})
    clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.EntityData)
}

// ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input
type ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-update-outq-update-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceUpdateOutqUpdateGroup
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// 
type ClearBgpInstanceUpdateOutqUpdateGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqUpdateGroup_Input
}

func (clearBgpInstanceUpdateOutqUpdateGroup *ClearBgpInstanceUpdateOutqUpdateGroup) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceUpdateOutqUpdateGroup.EntityData.YFilter = clearBgpInstanceUpdateOutqUpdateGroup.YFilter
    clearBgpInstanceUpdateOutqUpdateGroup.EntityData.YangName = "clear-bgp-instance-update-outq-update-group"
    clearBgpInstanceUpdateOutqUpdateGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceUpdateOutqUpdateGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceUpdateOutqUpdateGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group"
    clearBgpInstanceUpdateOutqUpdateGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceUpdateOutqUpdateGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceUpdateOutqUpdateGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceUpdateOutqUpdateGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceUpdateOutqUpdateGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceUpdateOutqUpdateGroup.Input})
    clearBgpInstanceUpdateOutqUpdateGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceUpdateOutqUpdateGroup.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceUpdateOutqUpdateGroup.EntityData)
}

// ClearBgpInstanceUpdateOutqUpdateGroup_Input
type ClearBgpInstanceUpdateOutqUpdateGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-update-outq-update-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionIpAddrIpNetmask
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionIpAddrIpNetmask_Input
}

func (clearBgpInstanceVersionIpAddrIpNetmask *ClearBgpInstanceVersionIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionIpAddrIpNetmask.EntityData.YFilter = clearBgpInstanceVersionIpAddrIpNetmask.YFilter
    clearBgpInstanceVersionIpAddrIpNetmask.EntityData.YangName = "clear-bgp-instance-version-ip-addr-ip-netmask"
    clearBgpInstanceVersionIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr-ip-netmask"
    clearBgpInstanceVersionIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionIpAddrIpNetmask.Input})
    clearBgpInstanceVersionIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionIpAddrIpNetmask.EntityData)
}

// ClearBgpInstanceVersionIpAddrIpNetmask_Input
type ClearBgpInstanceVersionIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceVersionIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionIpAddr
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionIpAddr_Input
}

func (clearBgpInstanceVersionIpAddr *ClearBgpInstanceVersionIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionIpAddr.EntityData.YFilter = clearBgpInstanceVersionIpAddr.YFilter
    clearBgpInstanceVersionIpAddr.EntityData.YangName = "clear-bgp-instance-version-ip-addr"
    clearBgpInstanceVersionIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr"
    clearBgpInstanceVersionIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionIpAddr.Input})
    clearBgpInstanceVersionIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionIpAddr.EntityData)
}

// ClearBgpInstanceVersionIpAddr_Input
type ClearBgpInstanceVersionIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVersionIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionIpPrefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionIpPrefix_Input
}

func (clearBgpInstanceVersionIpPrefix *ClearBgpInstanceVersionIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionIpPrefix.EntityData.YFilter = clearBgpInstanceVersionIpPrefix.YFilter
    clearBgpInstanceVersionIpPrefix.EntityData.YangName = "clear-bgp-instance-version-ip-prefix"
    clearBgpInstanceVersionIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-prefix"
    clearBgpInstanceVersionIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionIpPrefix.Input})
    clearBgpInstanceVersionIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionIpPrefix.EntityData)
}

// ClearBgpInstanceVersionIpPrefix_Input
type ClearBgpInstanceVersionIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceVersionIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input
}

func (clearBgpInstanceVersionAfiSafiIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.EntityData.YFilter = clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.YFilter
    clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.EntityData.YangName = "clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask"
    clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask"
    clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.Input})
    clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input
type ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpAddr
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpAddr_Input
}

func (clearBgpInstanceVersionAfiSafiIpAddr *ClearBgpInstanceVersionAfiSafiIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiIpAddr.EntityData.YFilter = clearBgpInstanceVersionAfiSafiIpAddr.YFilter
    clearBgpInstanceVersionAfiSafiIpAddr.EntityData.YangName = "clear-bgp-instance-version-afi-safi-ip-addr"
    clearBgpInstanceVersionAfiSafiIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr"
    clearBgpInstanceVersionAfiSafiIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiIpAddr.Input})
    clearBgpInstanceVersionAfiSafiIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiIpAddr.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpAddr_Input
type ClearBgpInstanceVersionAfiSafiIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpPrefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpPrefix_Input
}

func (clearBgpInstanceVersionAfiSafiIpPrefix *ClearBgpInstanceVersionAfiSafiIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiIpPrefix.EntityData.YFilter = clearBgpInstanceVersionAfiSafiIpPrefix.YFilter
    clearBgpInstanceVersionAfiSafiIpPrefix.EntityData.YangName = "clear-bgp-instance-version-afi-safi-ip-prefix"
    clearBgpInstanceVersionAfiSafiIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-prefix"
    clearBgpInstanceVersionAfiSafiIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiIpPrefix.Input})
    clearBgpInstanceVersionAfiSafiIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiIpPrefix.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpPrefix_Input
type ClearBgpInstanceVersionAfiSafiIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.YFilter = clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.YFilter
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.YangName = "clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask"
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask"
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input})
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData)
}

// ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input
type ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("bridge-domain-name", types.YLeaf{"BridgeDomainName", input.BridgeDomainName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.EntityData.YFilter = clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.YFilter
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.EntityData.YangName = "clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr"
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr"
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.Input})
    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.EntityData)
}

// ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input
type ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("bridge-domain-name", types.YLeaf{"BridgeDomainName", input.BridgeDomainName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.EntityData.YFilter = clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.YFilter
    clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.EntityData.YangName = "clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix"
    clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix"
    clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.Input})
    clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.EntityData)
}

// ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input
type ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("bridge-domain-name", types.YLeaf{"BridgeDomainName", input.BridgeDomainName})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input
}

func (clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.EntityData.YFilter = clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.YFilter
    clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.EntityData.YangName = "clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask"
    clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask"
    clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.Input})
    clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input
type ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdIpAddr
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdIpAddr_Input
}

func (clearBgpInstanceVersionAfiSafiRdIpAddr *ClearBgpInstanceVersionAfiSafiRdIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiRdIpAddr.EntityData.YFilter = clearBgpInstanceVersionAfiSafiRdIpAddr.YFilter
    clearBgpInstanceVersionAfiSafiRdIpAddr.EntityData.YangName = "clear-bgp-instance-version-afi-safi-rd-ip-addr"
    clearBgpInstanceVersionAfiSafiRdIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiRdIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiRdIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr"
    clearBgpInstanceVersionAfiSafiRdIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiRdIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiRdIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiRdIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiRdIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiRdIpAddr.Input})
    clearBgpInstanceVersionAfiSafiRdIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiRdIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiRdIpAddr.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdIpAddr_Input
type ClearBgpInstanceVersionAfiSafiRdIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-rd-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdIpPrefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input
}

func (clearBgpInstanceVersionAfiSafiRdIpPrefix *ClearBgpInstanceVersionAfiSafiRdIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiRdIpPrefix.EntityData.YFilter = clearBgpInstanceVersionAfiSafiRdIpPrefix.YFilter
    clearBgpInstanceVersionAfiSafiRdIpPrefix.EntityData.YangName = "clear-bgp-instance-version-afi-safi-rd-ip-prefix"
    clearBgpInstanceVersionAfiSafiRdIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiRdIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiRdIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-prefix"
    clearBgpInstanceVersionAfiSafiRdIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiRdIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiRdIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiRdIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiRdIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiRdIpPrefix.Input})
    clearBgpInstanceVersionAfiSafiRdIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiRdIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiRdIpPrefix.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input
type ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-rd-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input
}

func (clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.EntityData.YFilter = clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.YFilter
    clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.EntityData.YangName = "clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask"
    clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask"
    clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.Input})
    clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input
type ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpv4Addr
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpv4Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpv4Addr_Input
}

func (clearBgpInstanceVersionAfiSafiIpv4Addr *ClearBgpInstanceVersionAfiSafiIpv4Addr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiIpv4Addr.EntityData.YFilter = clearBgpInstanceVersionAfiSafiIpv4Addr.YFilter
    clearBgpInstanceVersionAfiSafiIpv4Addr.EntityData.YangName = "clear-bgp-instance-version-afi-safi-ipv4-addr"
    clearBgpInstanceVersionAfiSafiIpv4Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiIpv4Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiIpv4Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr"
    clearBgpInstanceVersionAfiSafiIpv4Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiIpv4Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiIpv4Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiIpv4Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiIpv4Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiIpv4Addr.Input})
    clearBgpInstanceVersionAfiSafiIpv4Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiIpv4Addr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiIpv4Addr.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpv4Addr_Input
type ClearBgpInstanceVersionAfiSafiIpv4Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-ipv4-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpv4Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input
}

func (clearBgpInstanceVersionAfiSafiIpv4Prefix *ClearBgpInstanceVersionAfiSafiIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiIpv4Prefix.EntityData.YFilter = clearBgpInstanceVersionAfiSafiIpv4Prefix.YFilter
    clearBgpInstanceVersionAfiSafiIpv4Prefix.EntityData.YangName = "clear-bgp-instance-version-afi-safi-ipv4-prefix"
    clearBgpInstanceVersionAfiSafiIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-prefix"
    clearBgpInstanceVersionAfiSafiIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiIpv4Prefix.Input})
    clearBgpInstanceVersionAfiSafiIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiIpv4Prefix.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input
type ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network and masklength. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdIpv4Addr
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdIpv4Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input
}

func (clearBgpInstanceVersionAfiSafiRdIpv4Addr *ClearBgpInstanceVersionAfiSafiRdIpv4Addr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiRdIpv4Addr.EntityData.YFilter = clearBgpInstanceVersionAfiSafiRdIpv4Addr.YFilter
    clearBgpInstanceVersionAfiSafiRdIpv4Addr.EntityData.YangName = "clear-bgp-instance-version-afi-safi-rd-ipv4-addr"
    clearBgpInstanceVersionAfiSafiRdIpv4Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiRdIpv4Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiRdIpv4Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr"
    clearBgpInstanceVersionAfiSafiRdIpv4Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiRdIpv4Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiRdIpv4Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiRdIpv4Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiRdIpv4Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiRdIpv4Addr.Input})
    clearBgpInstanceVersionAfiSafiRdIpv4Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiRdIpv4Addr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiRdIpv4Addr.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input
type ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv4 MDT network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-rd-ipv4-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiVrfIpv4Addr
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionAfiSafiVrfIpv4Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4Addr *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiVrfIpv4Addr.EntityData.YFilter = clearBgpInstanceVersionAfiSafiVrfIpv4Addr.YFilter
    clearBgpInstanceVersionAfiSafiVrfIpv4Addr.EntityData.YangName = "clear-bgp-instance-version-afi-safi-vrf-ipv4-addr"
    clearBgpInstanceVersionAfiSafiVrfIpv4Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiVrfIpv4Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiVrfIpv4Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr"
    clearBgpInstanceVersionAfiSafiVrfIpv4Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiVrfIpv4Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiVrfIpv4Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiVrfIpv4Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiVrfIpv4Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiVrfIpv4Addr.Input})
    clearBgpInstanceVersionAfiSafiVrfIpv4Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiVrfIpv4Addr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiVrfIpv4Addr.EntityData)
}

// ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input
type ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv4 MDT network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-vrf-ipv4-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiNetwork
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiNetwork_Input
}

func (clearBgpInstanceVersionAfiSafiNetwork *ClearBgpInstanceVersionAfiSafiNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiNetwork.EntityData.YFilter = clearBgpInstanceVersionAfiSafiNetwork.YFilter
    clearBgpInstanceVersionAfiSafiNetwork.EntityData.YangName = "clear-bgp-instance-version-afi-safi-network"
    clearBgpInstanceVersionAfiSafiNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-network"
    clearBgpInstanceVersionAfiSafiNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiNetwork.Input})
    clearBgpInstanceVersionAfiSafiNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiNetwork.EntityData)
}

// ClearBgpInstanceVersionAfiSafiNetwork_Input
type ClearBgpInstanceVersionAfiSafiNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdNetwork
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdNetwork_Input
}

func (clearBgpInstanceVersionAfiSafiRdNetwork *ClearBgpInstanceVersionAfiSafiRdNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiRdNetwork.EntityData.YFilter = clearBgpInstanceVersionAfiSafiRdNetwork.YFilter
    clearBgpInstanceVersionAfiSafiRdNetwork.EntityData.YangName = "clear-bgp-instance-version-afi-safi-rd-network"
    clearBgpInstanceVersionAfiSafiRdNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiRdNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiRdNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-network"
    clearBgpInstanceVersionAfiSafiRdNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiRdNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiRdNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiRdNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiRdNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiRdNetwork.Input})
    clearBgpInstanceVersionAfiSafiRdNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiRdNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiRdNetwork.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdNetwork_Input
type ClearBgpInstanceVersionAfiSafiRdNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-rd-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiVrfNetwork
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionAfiSafiVrfNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiVrfNetwork_Input
}

func (clearBgpInstanceVersionAfiSafiVrfNetwork *ClearBgpInstanceVersionAfiSafiVrfNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiVrfNetwork.EntityData.YFilter = clearBgpInstanceVersionAfiSafiVrfNetwork.YFilter
    clearBgpInstanceVersionAfiSafiVrfNetwork.EntityData.YangName = "clear-bgp-instance-version-afi-safi-vrf-network"
    clearBgpInstanceVersionAfiSafiVrfNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiVrfNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiVrfNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-network"
    clearBgpInstanceVersionAfiSafiVrfNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiVrfNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiVrfNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiVrfNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiVrfNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiVrfNetwork.Input})
    clearBgpInstanceVersionAfiSafiVrfNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiVrfNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiVrfNetwork.EntityData)
}

// ClearBgpInstanceVersionAfiSafiVrfNetwork_Input
type ClearBgpInstanceVersionAfiSafiVrfNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiVrfNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-vrf-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRtConstraintNetwork
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiRtConstraintNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input
}

func (clearBgpInstanceVersionAfiSafiRtConstraintNetwork *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiRtConstraintNetwork.EntityData.YFilter = clearBgpInstanceVersionAfiSafiRtConstraintNetwork.YFilter
    clearBgpInstanceVersionAfiSafiRtConstraintNetwork.EntityData.YangName = "clear-bgp-instance-version-afi-safi-rt-constraint-network"
    clearBgpInstanceVersionAfiSafiRtConstraintNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiRtConstraintNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiRtConstraintNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rt-constraint-network"
    clearBgpInstanceVersionAfiSafiRtConstraintNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiRtConstraintNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiRtConstraintNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiRtConstraintNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiRtConstraintNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiRtConstraintNetwork.Input})
    clearBgpInstanceVersionAfiSafiRtConstraintNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiRtConstraintNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiRtConstraintNetwork.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input
type ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // RT-Constraint network. The type is string. This attribute is mandatory.
    RtConstraintNetwork interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-rt-constraint-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rt-constraint-network", types.YLeaf{"RtConstraintNetwork", input.RtConstraintNetwork})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input
}

func (clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.EntityData.YFilter = clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.YFilter
    clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.EntityData.YangName = "clear-bgp-instance-version-afi-safi-ipv4-tunnel-network"
    clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-tunnel-network"
    clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.Input})
    clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input
type ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Tunnel network <Tunnel-ID>:<IPv4 Address>. The type is string. This
    // attribute is mandatory.
    Ipv4TunnelNetwork interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-ipv4-tunnel-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-tunnel-network", types.YLeaf{"Ipv4TunnelNetwork", input.Ipv4TunnelNetwork})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input
}

func (clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.YFilter = clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.YFilter
    clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.YangName = "clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask"
    clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask"
    clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.Input})
    clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input
type ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})
    input.EntityData.Leafs.Append("ipv6-netmask", types.YLeaf{"Ipv6Netmask", input.Ipv6Netmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpv6Addr
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpv6Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpv6Addr_Input
}

func (clearBgpInstanceVersionAfiSafiIpv6Addr *ClearBgpInstanceVersionAfiSafiIpv6Addr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiIpv6Addr.EntityData.YFilter = clearBgpInstanceVersionAfiSafiIpv6Addr.YFilter
    clearBgpInstanceVersionAfiSafiIpv6Addr.EntityData.YangName = "clear-bgp-instance-version-afi-safi-ipv6-addr"
    clearBgpInstanceVersionAfiSafiIpv6Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiIpv6Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiIpv6Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr"
    clearBgpInstanceVersionAfiSafiIpv6Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiIpv6Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiIpv6Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiIpv6Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiIpv6Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiIpv6Addr.Input})
    clearBgpInstanceVersionAfiSafiIpv6Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiIpv6Addr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiIpv6Addr.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpv6Addr_Input
type ClearBgpInstanceVersionAfiSafiIpv6Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-ipv6-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpv6Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input
}

func (clearBgpInstanceVersionAfiSafiIpv6Prefix *ClearBgpInstanceVersionAfiSafiIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiIpv6Prefix.EntityData.YFilter = clearBgpInstanceVersionAfiSafiIpv6Prefix.YFilter
    clearBgpInstanceVersionAfiSafiIpv6Prefix.EntityData.YangName = "clear-bgp-instance-version-afi-safi-ipv6-prefix"
    clearBgpInstanceVersionAfiSafiIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-prefix"
    clearBgpInstanceVersionAfiSafiIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiIpv6Prefix.Input})
    clearBgpInstanceVersionAfiSafiIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiIpv6Prefix.EntityData)
}

// ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input
type ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRd
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRd_Input
}

func (clearBgpInstanceVersionAfiSafiRd *ClearBgpInstanceVersionAfiSafiRd) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiRd.EntityData.YFilter = clearBgpInstanceVersionAfiSafiRd.YFilter
    clearBgpInstanceVersionAfiSafiRd.EntityData.YangName = "clear-bgp-instance-version-afi-safi-rd"
    clearBgpInstanceVersionAfiSafiRd.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiRd.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiRd.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd"
    clearBgpInstanceVersionAfiSafiRd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiRd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiRd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiRd.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiRd.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiRd.Input})
    clearBgpInstanceVersionAfiSafiRd.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiRd.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiRd.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRd_Input
type ClearBgpInstanceVersionAfiSafiRd_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRd_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-rd"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiVrf
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionAfiSafiVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiVrf_Input
}

func (clearBgpInstanceVersionAfiSafiVrf *ClearBgpInstanceVersionAfiSafiVrf) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiVrf.EntityData.YFilter = clearBgpInstanceVersionAfiSafiVrf.YFilter
    clearBgpInstanceVersionAfiSafiVrf.EntityData.YangName = "clear-bgp-instance-version-afi-safi-vrf"
    clearBgpInstanceVersionAfiSafiVrf.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiVrf.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiVrf.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf"
    clearBgpInstanceVersionAfiSafiVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiVrf.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiVrf.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiVrf.Input})
    clearBgpInstanceVersionAfiSafiVrf.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiVrf.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiVrf.EntityData)
}

// ClearBgpInstanceVersionAfiSafiVrf_Input
type ClearBgpInstanceVersionAfiSafiVrf_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiVrf_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-vrf"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafi
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafi_Input
}

func (clearBgpInstanceVersionAfiSafi *ClearBgpInstanceVersionAfiSafi) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafi.EntityData.YFilter = clearBgpInstanceVersionAfiSafi.YFilter
    clearBgpInstanceVersionAfiSafi.EntityData.YangName = "clear-bgp-instance-version-afi-safi"
    clearBgpInstanceVersionAfiSafi.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafi.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafi.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi"
    clearBgpInstanceVersionAfiSafi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafi.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafi.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafi.Input})
    clearBgpInstanceVersionAfiSafi.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafi.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafi.EntityData)
}

// ClearBgpInstanceVersionAfiSafi_Input
type ClearBgpInstanceVersionAfiSafi_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVersionAfiSafi_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiSrPolicyPrefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiSrPolicyPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input
}

func (clearBgpInstanceVersionAfiSafiSrPolicyPrefix *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiSrPolicyPrefix.EntityData.YFilter = clearBgpInstanceVersionAfiSafiSrPolicyPrefix.YFilter
    clearBgpInstanceVersionAfiSafiSrPolicyPrefix.EntityData.YangName = "clear-bgp-instance-version-afi-safi-sr-policy-prefix"
    clearBgpInstanceVersionAfiSafiSrPolicyPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiSrPolicyPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiSrPolicyPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-sr-policy-prefix"
    clearBgpInstanceVersionAfiSafiSrPolicyPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiSrPolicyPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiSrPolicyPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiSrPolicyPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiSrPolicyPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiSrPolicyPrefix.Input})
    clearBgpInstanceVersionAfiSafiSrPolicyPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiSrPolicyPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiSrPolicyPrefix.EntityData)
}

// ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input
type ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // SR Policy prefix. The type is string. This attribute is mandatory.
    SrPolicyPrefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-sr-policy-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("sr-policy-prefix", types.YLeaf{"SrPolicyPrefix", input.SrPolicyPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.YFilter = clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.YFilter
    clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.YangName = "clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix"
    clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix"
    clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.Input})
    clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.EntityData)
}

// ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input
type ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // L2VPN EVPN Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("bridge-domain-name", types.YLeaf{"BridgeDomainName", input.BridgeDomainName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdIpv4Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input
}

func (clearBgpInstanceVersionAfiSafiRdIpv4Prefix *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiRdIpv4Prefix.EntityData.YFilter = clearBgpInstanceVersionAfiSafiRdIpv4Prefix.YFilter
    clearBgpInstanceVersionAfiSafiRdIpv4Prefix.EntityData.YangName = "clear-bgp-instance-version-afi-safi-rd-ipv4-prefix"
    clearBgpInstanceVersionAfiSafiRdIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiRdIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiRdIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-prefix"
    clearBgpInstanceVersionAfiSafiRdIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiRdIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiRdIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiRdIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiRdIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiRdIpv4Prefix.Input})
    clearBgpInstanceVersionAfiSafiRdIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiRdIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiRdIpv4Prefix.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input
type ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // L2VPN EVPN Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-rd-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified Xconnect group:MP2MP.
// 
type ClearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix_Input
}

func (clearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix *ClearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.EntityData.YFilter = clearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.YFilter
    clearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.EntityData.YangName = "clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix"
    clearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix"
    clearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.Input})
    clearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix.EntityData)
}

// ClearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix_Input
type ClearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Xconnect Group:mp2mp. The type is string. This attribute is mandatory.
    Mp2mp interface{}

    // L2VPN VPWS Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiMp2mpIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("mp2mp", types.YLeaf{"Mp2mp", input.Mp2mp})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.EntityData.YFilter = clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.YFilter
    clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.EntityData.YangName = "clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix"
    clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix"
    clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.Input})
    clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.EntityData)
}

// ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input
type ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // VPN Fspec Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input
}

func (clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.YFilter = clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.YFilter
    clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.YangName = "clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask"
    clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask"
    clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.Input})
    clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input
type ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.YFilter = clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.YFilter
    clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.YangName = "clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask"
    clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask"
    clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.Input})
    clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData)
}

// ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input
type ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input
}

func (clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.YFilter = clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.YFilter
    clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.YangName = "clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask"
    clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask"
    clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.Input})
    clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input
type ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})
    input.EntityData.Leafs.Append("ipv6-netmask", types.YLeaf{"Ipv6Netmask", input.Ipv6Netmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdIpv6Addr
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdIpv6Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input
}

func (clearBgpInstanceVersionAfiSafiRdIpv6Addr *ClearBgpInstanceVersionAfiSafiRdIpv6Addr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiRdIpv6Addr.EntityData.YFilter = clearBgpInstanceVersionAfiSafiRdIpv6Addr.YFilter
    clearBgpInstanceVersionAfiSafiRdIpv6Addr.EntityData.YangName = "clear-bgp-instance-version-afi-safi-rd-ipv6-addr"
    clearBgpInstanceVersionAfiSafiRdIpv6Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiRdIpv6Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiRdIpv6Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr"
    clearBgpInstanceVersionAfiSafiRdIpv6Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiRdIpv6Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiRdIpv6Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiRdIpv6Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiRdIpv6Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiRdIpv6Addr.Input})
    clearBgpInstanceVersionAfiSafiRdIpv6Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiRdIpv6Addr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiRdIpv6Addr.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input
type ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-rd-ipv6-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdIpv6Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input
}

func (clearBgpInstanceVersionAfiSafiRdIpv6Prefix *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiRdIpv6Prefix.EntityData.YFilter = clearBgpInstanceVersionAfiSafiRdIpv6Prefix.YFilter
    clearBgpInstanceVersionAfiSafiRdIpv6Prefix.EntityData.YangName = "clear-bgp-instance-version-afi-safi-rd-ipv6-prefix"
    clearBgpInstanceVersionAfiSafiRdIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiRdIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiRdIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-prefix"
    clearBgpInstanceVersionAfiSafiRdIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiRdIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiRdIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiRdIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiRdIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiRdIpv6Prefix.Input})
    clearBgpInstanceVersionAfiSafiRdIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiRdIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiRdIpv6Prefix.EntityData)
}

// ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input
type ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-rd-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.YFilter = clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.YFilter
    clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.YangName = "clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"
    clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"
    clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input})
    clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData)
}

// ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input
type ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})
    input.EntityData.Leafs.Append("ipv6-netmask", types.YLeaf{"Ipv6Netmask", input.Ipv6Netmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiVrfIpv6Addr
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionAfiSafiVrfIpv6Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6Addr *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiVrfIpv6Addr.EntityData.YFilter = clearBgpInstanceVersionAfiSafiVrfIpv6Addr.YFilter
    clearBgpInstanceVersionAfiSafiVrfIpv6Addr.EntityData.YangName = "clear-bgp-instance-version-afi-safi-vrf-ipv6-addr"
    clearBgpInstanceVersionAfiSafiVrfIpv6Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiVrfIpv6Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiVrfIpv6Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr"
    clearBgpInstanceVersionAfiSafiVrfIpv6Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiVrfIpv6Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiVrfIpv6Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiVrfIpv6Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiVrfIpv6Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiVrfIpv6Addr.Input})
    clearBgpInstanceVersionAfiSafiVrfIpv6Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiVrfIpv6Addr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiVrfIpv6Addr.EntityData)
}

// ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input
type ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-vrf-ipv6-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.EntityData.YFilter = clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.YFilter
    clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.EntityData.YangName = "clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix"
    clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix"
    clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.Input})
    clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.EntityData)
}

// ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input
type ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionVrfIpAddrIpNetmask
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input
}

func (clearBgpInstanceVersionVrfIpAddrIpNetmask *ClearBgpInstanceVersionVrfIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionVrfIpAddrIpNetmask.EntityData.YFilter = clearBgpInstanceVersionVrfIpAddrIpNetmask.YFilter
    clearBgpInstanceVersionVrfIpAddrIpNetmask.EntityData.YangName = "clear-bgp-instance-version-vrf-ip-addr-ip-netmask"
    clearBgpInstanceVersionVrfIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionVrfIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionVrfIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr-ip-netmask"
    clearBgpInstanceVersionVrfIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionVrfIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionVrfIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionVrfIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionVrfIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionVrfIpAddrIpNetmask.Input})
    clearBgpInstanceVersionVrfIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionVrfIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionVrfIpAddrIpNetmask.EntityData)
}

// ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input
type ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-vrf-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionVrfIpAddr
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfIpAddr_Input
}

func (clearBgpInstanceVersionVrfIpAddr *ClearBgpInstanceVersionVrfIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionVrfIpAddr.EntityData.YFilter = clearBgpInstanceVersionVrfIpAddr.YFilter
    clearBgpInstanceVersionVrfIpAddr.EntityData.YangName = "clear-bgp-instance-version-vrf-ip-addr"
    clearBgpInstanceVersionVrfIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionVrfIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionVrfIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr"
    clearBgpInstanceVersionVrfIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionVrfIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionVrfIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionVrfIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionVrfIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionVrfIpAddr.Input})
    clearBgpInstanceVersionVrfIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionVrfIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionVrfIpAddr.EntityData)
}

// ClearBgpInstanceVersionVrfIpAddr_Input
type ClearBgpInstanceVersionVrfIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVersionVrfIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-vrf-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionVrfIpPrefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfIpPrefix_Input
}

func (clearBgpInstanceVersionVrfIpPrefix *ClearBgpInstanceVersionVrfIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionVrfIpPrefix.EntityData.YFilter = clearBgpInstanceVersionVrfIpPrefix.YFilter
    clearBgpInstanceVersionVrfIpPrefix.EntityData.YangName = "clear-bgp-instance-version-vrf-ip-prefix"
    clearBgpInstanceVersionVrfIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionVrfIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionVrfIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-prefix"
    clearBgpInstanceVersionVrfIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionVrfIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionVrfIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionVrfIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionVrfIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionVrfIpPrefix.Input})
    clearBgpInstanceVersionVrfIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionVrfIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionVrfIpPrefix.EntityData)
}

// ClearBgpInstanceVersionVrfIpPrefix_Input
type ClearBgpInstanceVersionVrfIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceVersionVrfIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-vrf-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.EntityData.YFilter = clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.YFilter
    clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.EntityData.YangName = "clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix"
    clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix"
    clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.Input})
    clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input
type ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Fspec IPv4 Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.YFilter = clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.YFilter
    clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.YangName = "clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask"
    clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask"
    clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.Input})
    clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input
type ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiIpv4Addr
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafiIpv4Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4Addr *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionVrfAfiSafiIpv4Addr.EntityData.YFilter = clearBgpInstanceVersionVrfAfiSafiIpv4Addr.YFilter
    clearBgpInstanceVersionVrfAfiSafiIpv4Addr.EntityData.YangName = "clear-bgp-instance-version-vrf-afi-safi-ipv4-addr"
    clearBgpInstanceVersionVrfAfiSafiIpv4Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionVrfAfiSafiIpv4Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionVrfAfiSafiIpv4Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr"
    clearBgpInstanceVersionVrfAfiSafiIpv4Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionVrfAfiSafiIpv4Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionVrfAfiSafiIpv4Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionVrfAfiSafiIpv4Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionVrfAfiSafiIpv4Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionVrfAfiSafiIpv4Addr.Input})
    clearBgpInstanceVersionVrfAfiSafiIpv4Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionVrfAfiSafiIpv4Addr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionVrfAfiSafiIpv4Addr.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input
type ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-vrf-afi-safi-ipv4-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiNetwork
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafiNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiNetwork_Input
}

func (clearBgpInstanceVersionVrfAfiSafiNetwork *ClearBgpInstanceVersionVrfAfiSafiNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionVrfAfiSafiNetwork.EntityData.YFilter = clearBgpInstanceVersionVrfAfiSafiNetwork.YFilter
    clearBgpInstanceVersionVrfAfiSafiNetwork.EntityData.YangName = "clear-bgp-instance-version-vrf-afi-safi-network"
    clearBgpInstanceVersionVrfAfiSafiNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionVrfAfiSafiNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionVrfAfiSafiNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-network"
    clearBgpInstanceVersionVrfAfiSafiNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionVrfAfiSafiNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionVrfAfiSafiNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionVrfAfiSafiNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionVrfAfiSafiNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionVrfAfiSafiNetwork.Input})
    clearBgpInstanceVersionVrfAfiSafiNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionVrfAfiSafiNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionVrfAfiSafiNetwork.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiNetwork_Input
type ClearBgpInstanceVersionVrfAfiSafiNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-vrf-afi-safi-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiRdNetwork
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionVrfAfiSafiRdNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input
}

func (clearBgpInstanceVersionVrfAfiSafiRdNetwork *ClearBgpInstanceVersionVrfAfiSafiRdNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionVrfAfiSafiRdNetwork.EntityData.YFilter = clearBgpInstanceVersionVrfAfiSafiRdNetwork.YFilter
    clearBgpInstanceVersionVrfAfiSafiRdNetwork.EntityData.YangName = "clear-bgp-instance-version-vrf-afi-safi-rd-network"
    clearBgpInstanceVersionVrfAfiSafiRdNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionVrfAfiSafiRdNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionVrfAfiSafiRdNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd-network"
    clearBgpInstanceVersionVrfAfiSafiRdNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionVrfAfiSafiRdNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionVrfAfiSafiRdNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionVrfAfiSafiRdNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionVrfAfiSafiRdNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionVrfAfiSafiRdNetwork.Input})
    clearBgpInstanceVersionVrfAfiSafiRdNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionVrfAfiSafiRdNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionVrfAfiSafiRdNetwork.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input
type ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-vrf-afi-safi-rd-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiVrfNetwork
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafiVrfNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input
}

func (clearBgpInstanceVersionVrfAfiSafiVrfNetwork *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionVrfAfiSafiVrfNetwork.EntityData.YFilter = clearBgpInstanceVersionVrfAfiSafiVrfNetwork.YFilter
    clearBgpInstanceVersionVrfAfiSafiVrfNetwork.EntityData.YangName = "clear-bgp-instance-version-vrf-afi-safi-vrf-network"
    clearBgpInstanceVersionVrfAfiSafiVrfNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionVrfAfiSafiVrfNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionVrfAfiSafiVrfNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf-network"
    clearBgpInstanceVersionVrfAfiSafiVrfNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionVrfAfiSafiVrfNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionVrfAfiSafiVrfNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionVrfAfiSafiVrfNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionVrfAfiSafiVrfNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionVrfAfiSafiVrfNetwork.Input})
    clearBgpInstanceVersionVrfAfiSafiVrfNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionVrfAfiSafiVrfNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionVrfAfiSafiVrfNetwork.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input
type ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-vrf-afi-safi-vrf-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.YFilter = clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.YFilter
    clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.YangName = "clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"
    clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"
    clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input})
    clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input
type ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})
    input.EntityData.Leafs.Append("ipv6-netmask", types.YLeaf{"Ipv6Netmask", input.Ipv6Netmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiIpv6Addr
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafiIpv6Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6Addr *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionVrfAfiSafiIpv6Addr.EntityData.YFilter = clearBgpInstanceVersionVrfAfiSafiIpv6Addr.YFilter
    clearBgpInstanceVersionVrfAfiSafiIpv6Addr.EntityData.YangName = "clear-bgp-instance-version-vrf-afi-safi-ipv6-addr"
    clearBgpInstanceVersionVrfAfiSafiIpv6Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionVrfAfiSafiIpv6Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionVrfAfiSafiIpv6Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr"
    clearBgpInstanceVersionVrfAfiSafiIpv6Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionVrfAfiSafiIpv6Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionVrfAfiSafiIpv6Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionVrfAfiSafiIpv6Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionVrfAfiSafiIpv6Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionVrfAfiSafiIpv6Addr.Input})
    clearBgpInstanceVersionVrfAfiSafiIpv6Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionVrfAfiSafiIpv6Addr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionVrfAfiSafiIpv6Addr.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input
type ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-vrf-afi-safi-ipv6-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.EntityData.YFilter = clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.YFilter
    clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.EntityData.YangName = "clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix"
    clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix"
    clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.Input})
    clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input
type ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiRd
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionVrfAfiSafiRd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiRd_Input
}

func (clearBgpInstanceVersionVrfAfiSafiRd *ClearBgpInstanceVersionVrfAfiSafiRd) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionVrfAfiSafiRd.EntityData.YFilter = clearBgpInstanceVersionVrfAfiSafiRd.YFilter
    clearBgpInstanceVersionVrfAfiSafiRd.EntityData.YangName = "clear-bgp-instance-version-vrf-afi-safi-rd"
    clearBgpInstanceVersionVrfAfiSafiRd.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionVrfAfiSafiRd.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionVrfAfiSafiRd.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd"
    clearBgpInstanceVersionVrfAfiSafiRd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionVrfAfiSafiRd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionVrfAfiSafiRd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionVrfAfiSafiRd.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionVrfAfiSafiRd.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionVrfAfiSafiRd.Input})
    clearBgpInstanceVersionVrfAfiSafiRd.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionVrfAfiSafiRd.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionVrfAfiSafiRd.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiRd_Input
type ClearBgpInstanceVersionVrfAfiSafiRd_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiRd_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-vrf-afi-safi-rd"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiVrf
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafiVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiVrf_Input
}

func (clearBgpInstanceVersionVrfAfiSafiVrf *ClearBgpInstanceVersionVrfAfiSafiVrf) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionVrfAfiSafiVrf.EntityData.YFilter = clearBgpInstanceVersionVrfAfiSafiVrf.YFilter
    clearBgpInstanceVersionVrfAfiSafiVrf.EntityData.YangName = "clear-bgp-instance-version-vrf-afi-safi-vrf"
    clearBgpInstanceVersionVrfAfiSafiVrf.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionVrfAfiSafiVrf.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionVrfAfiSafiVrf.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf"
    clearBgpInstanceVersionVrfAfiSafiVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionVrfAfiSafiVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionVrfAfiSafiVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionVrfAfiSafiVrf.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionVrfAfiSafiVrf.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionVrfAfiSafiVrf.Input})
    clearBgpInstanceVersionVrfAfiSafiVrf.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionVrfAfiSafiVrf.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionVrfAfiSafiVrf.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafiVrf_Input
type ClearBgpInstanceVersionVrfAfiSafiVrf_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiVrf_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-vrf-afi-safi-vrf"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafi
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafi_Input
}

func (clearBgpInstanceVersionVrfAfiSafi *ClearBgpInstanceVersionVrfAfiSafi) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVersionVrfAfiSafi.EntityData.YFilter = clearBgpInstanceVersionVrfAfiSafi.YFilter
    clearBgpInstanceVersionVrfAfiSafi.EntityData.YangName = "clear-bgp-instance-version-vrf-afi-safi"
    clearBgpInstanceVersionVrfAfiSafi.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVersionVrfAfiSafi.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVersionVrfAfiSafi.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi"
    clearBgpInstanceVersionVrfAfiSafi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVersionVrfAfiSafi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVersionVrfAfiSafi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVersionVrfAfiSafi.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVersionVrfAfiSafi.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVersionVrfAfiSafi.Input})
    clearBgpInstanceVersionVrfAfiSafi.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVersionVrfAfiSafi.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVersionVrfAfiSafi.EntityData)
}

// ClearBgpInstanceVersionVrfAfiSafi_Input
type ClearBgpInstanceVersionVrfAfiSafi_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafi_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-version-vrf-afi-safi"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAllGraceful
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpInstanceVrfAllGraceful struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAllGraceful_Input
}

func (clearBgpInstanceVrfAllGraceful *ClearBgpInstanceVrfAllGraceful) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAllGraceful.EntityData.YFilter = clearBgpInstanceVrfAllGraceful.YFilter
    clearBgpInstanceVrfAllGraceful.EntityData.YangName = "clear-bgp-instance-vrf-all-graceful"
    clearBgpInstanceVrfAllGraceful.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAllGraceful.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAllGraceful.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all-graceful"
    clearBgpInstanceVrfAllGraceful.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAllGraceful.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAllGraceful.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAllGraceful.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAllGraceful.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAllGraceful.Input})
    clearBgpInstanceVrfAllGraceful.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAllGraceful.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAllGraceful.EntityData)
}

// ClearBgpInstanceVrfAllGraceful_Input
type ClearBgpInstanceVrfAllGraceful_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfAllGraceful_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-all-graceful"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAll
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// 
type ClearBgpInstanceVrfAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAll_Input
}

func (clearBgpInstanceVrfAll *ClearBgpInstanceVrfAll) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAll.EntityData.YFilter = clearBgpInstanceVrfAll.YFilter
    clearBgpInstanceVrfAll.EntityData.YangName = "clear-bgp-instance-vrf-all"
    clearBgpInstanceVrfAll.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAll.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAll.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all"
    clearBgpInstanceVrfAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAll.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAll.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAll.Input})
    clearBgpInstanceVrfAll.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAll.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAll.EntityData)
}

// ClearBgpInstanceVrfAll_Input
type ClearBgpInstanceVrfAll_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfAll_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-all"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfIpAddrGraceful
// Choose a particular BGP instance.
// Specify a VRF.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpInstanceVrfIpAddrGraceful struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfIpAddrGraceful_Input
}

func (clearBgpInstanceVrfIpAddrGraceful *ClearBgpInstanceVrfIpAddrGraceful) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfIpAddrGraceful.EntityData.YFilter = clearBgpInstanceVrfIpAddrGraceful.YFilter
    clearBgpInstanceVrfIpAddrGraceful.EntityData.YangName = "clear-bgp-instance-vrf-ip-addr-graceful"
    clearBgpInstanceVrfIpAddrGraceful.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfIpAddrGraceful.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfIpAddrGraceful.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-graceful"
    clearBgpInstanceVrfIpAddrGraceful.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfIpAddrGraceful.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfIpAddrGraceful.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfIpAddrGraceful.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfIpAddrGraceful.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfIpAddrGraceful.Input})
    clearBgpInstanceVrfIpAddrGraceful.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfIpAddrGraceful.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfIpAddrGraceful.EntityData)
}

// ClearBgpInstanceVrfIpAddrGraceful_Input
type ClearBgpInstanceVrfIpAddrGraceful_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfIpAddrGraceful_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-ip-addr-graceful"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfIpAddrLongLivedStale
// Choose a particular BGP instance.
// Specify a VRF.
// Clear long-lived-stale routes.
// 
type ClearBgpInstanceVrfIpAddrLongLivedStale struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfIpAddrLongLivedStale_Input
}

func (clearBgpInstanceVrfIpAddrLongLivedStale *ClearBgpInstanceVrfIpAddrLongLivedStale) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfIpAddrLongLivedStale.EntityData.YFilter = clearBgpInstanceVrfIpAddrLongLivedStale.YFilter
    clearBgpInstanceVrfIpAddrLongLivedStale.EntityData.YangName = "clear-bgp-instance-vrf-ip-addr-long-lived-stale"
    clearBgpInstanceVrfIpAddrLongLivedStale.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfIpAddrLongLivedStale.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfIpAddrLongLivedStale.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-long-lived-stale"
    clearBgpInstanceVrfIpAddrLongLivedStale.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfIpAddrLongLivedStale.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfIpAddrLongLivedStale.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfIpAddrLongLivedStale.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfIpAddrLongLivedStale.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfIpAddrLongLivedStale.Input})
    clearBgpInstanceVrfIpAddrLongLivedStale.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfIpAddrLongLivedStale.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfIpAddrLongLivedStale.EntityData)
}

// ClearBgpInstanceVrfIpAddrLongLivedStale_Input
type ClearBgpInstanceVrfIpAddrLongLivedStale_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfIpAddrLongLivedStale_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-ip-addr-long-lived-stale"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfIpAddr
// Choose a particular BGP instance.
// Specify a VRF.
// 
type ClearBgpInstanceVrfIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfIpAddr_Input
}

func (clearBgpInstanceVrfIpAddr *ClearBgpInstanceVrfIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfIpAddr.EntityData.YFilter = clearBgpInstanceVrfIpAddr.YFilter
    clearBgpInstanceVrfIpAddr.EntityData.YangName = "clear-bgp-instance-vrf-ip-addr"
    clearBgpInstanceVrfIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr"
    clearBgpInstanceVrfIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfIpAddr.Input})
    clearBgpInstanceVrfIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfIpAddr.EntityData)
}

// ClearBgpInstanceVrfIpAddr_Input
type ClearBgpInstanceVrfIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAsGraceful
// Choose a particular BGP instance.
// Specify a VRF.
// Clear peers in a specific AS.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpInstanceVrfAsGraceful struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAsGraceful_Input
}

func (clearBgpInstanceVrfAsGraceful *ClearBgpInstanceVrfAsGraceful) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAsGraceful.EntityData.YFilter = clearBgpInstanceVrfAsGraceful.YFilter
    clearBgpInstanceVrfAsGraceful.EntityData.YangName = "clear-bgp-instance-vrf-as-graceful"
    clearBgpInstanceVrfAsGraceful.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAsGraceful.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAsGraceful.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as-graceful"
    clearBgpInstanceVrfAsGraceful.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAsGraceful.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAsGraceful.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAsGraceful.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAsGraceful.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAsGraceful.Input})
    clearBgpInstanceVrfAsGraceful.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAsGraceful.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAsGraceful.EntityData)
}

// ClearBgpInstanceVrfAsGraceful_Input
type ClearBgpInstanceVrfAsGraceful_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceVrfAsGraceful_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-as-graceful"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAs
// Choose a particular BGP instance.
// Specify a VRF.
// Clear peers in a specific AS.
// 
type ClearBgpInstanceVrfAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAs_Input
}

func (clearBgpInstanceVrfAs *ClearBgpInstanceVrfAs) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAs.EntityData.YFilter = clearBgpInstanceVrfAs.YFilter
    clearBgpInstanceVrfAs.EntityData.YangName = "clear-bgp-instance-vrf-as"
    clearBgpInstanceVrfAs.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAs.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAs.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as"
    clearBgpInstanceVrfAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAs.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAs.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAs.Input})
    clearBgpInstanceVrfAs.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAs.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAs.EntityData)
}

// ClearBgpInstanceVrfAs_Input
type ClearBgpInstanceVrfAs_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceVrfAs_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-as"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfExternalGraceful
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all external peers.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpInstanceVrfExternalGraceful struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfExternalGraceful_Input
}

func (clearBgpInstanceVrfExternalGraceful *ClearBgpInstanceVrfExternalGraceful) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfExternalGraceful.EntityData.YFilter = clearBgpInstanceVrfExternalGraceful.YFilter
    clearBgpInstanceVrfExternalGraceful.EntityData.YangName = "clear-bgp-instance-vrf-external-graceful"
    clearBgpInstanceVrfExternalGraceful.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfExternalGraceful.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfExternalGraceful.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external-graceful"
    clearBgpInstanceVrfExternalGraceful.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfExternalGraceful.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfExternalGraceful.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfExternalGraceful.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfExternalGraceful.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfExternalGraceful.Input})
    clearBgpInstanceVrfExternalGraceful.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfExternalGraceful.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfExternalGraceful.EntityData)
}

// ClearBgpInstanceVrfExternalGraceful_Input
type ClearBgpInstanceVrfExternalGraceful_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfExternalGraceful_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-external-graceful"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfExternal
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all external peers.
// 
type ClearBgpInstanceVrfExternal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfExternal_Input
}

func (clearBgpInstanceVrfExternal *ClearBgpInstanceVrfExternal) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfExternal.EntityData.YFilter = clearBgpInstanceVrfExternal.YFilter
    clearBgpInstanceVrfExternal.EntityData.YangName = "clear-bgp-instance-vrf-external"
    clearBgpInstanceVrfExternal.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfExternal.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfExternal.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external"
    clearBgpInstanceVrfExternal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfExternal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfExternal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfExternal.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfExternal.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfExternal.Input})
    clearBgpInstanceVrfExternal.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfExternal.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfExternal.EntityData)
}

// ClearBgpInstanceVrfExternal_Input
type ClearBgpInstanceVrfExternal_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfExternal_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-external"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input
}

func (clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.EntityData.YFilter = clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.YFilter
    clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter"
    clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter"
    clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.Input})
    clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.EntityData)
}

// ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input
type ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiAllSoftIn
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpInstanceVrfAfiSafiAllSoftIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiAllSoftIn_Input
}

func (clearBgpInstanceVrfAfiSafiAllSoftIn *ClearBgpInstanceVrfAfiSafiAllSoftIn) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiAllSoftIn.EntityData.YFilter = clearBgpInstanceVrfAfiSafiAllSoftIn.YFilter
    clearBgpInstanceVrfAfiSafiAllSoftIn.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-all-soft-in"
    clearBgpInstanceVrfAfiSafiAllSoftIn.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiAllSoftIn.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiAllSoftIn.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in"
    clearBgpInstanceVrfAfiSafiAllSoftIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiAllSoftIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiAllSoftIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiAllSoftIn.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiAllSoftIn.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiAllSoftIn.Input})
    clearBgpInstanceVrfAfiSafiAllSoftIn.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiAllSoftIn.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiAllSoftIn.EntityData)
}

// ClearBgpInstanceVrfAfiSafiAllSoftIn_Input
type ClearBgpInstanceVrfAfiSafiAllSoftIn_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftIn_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-all-soft-in"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiAllSoftOut
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpInstanceVrfAfiSafiAllSoftOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiAllSoftOut_Input
}

func (clearBgpInstanceVrfAfiSafiAllSoftOut *ClearBgpInstanceVrfAfiSafiAllSoftOut) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiAllSoftOut.EntityData.YFilter = clearBgpInstanceVrfAfiSafiAllSoftOut.YFilter
    clearBgpInstanceVrfAfiSafiAllSoftOut.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-all-soft-out"
    clearBgpInstanceVrfAfiSafiAllSoftOut.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiAllSoftOut.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiAllSoftOut.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-out"
    clearBgpInstanceVrfAfiSafiAllSoftOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiAllSoftOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiAllSoftOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiAllSoftOut.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiAllSoftOut.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiAllSoftOut.Input})
    clearBgpInstanceVrfAfiSafiAllSoftOut.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiAllSoftOut.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiAllSoftOut.EntityData)
}

// ClearBgpInstanceVrfAfiSafiAllSoftOut_Input
type ClearBgpInstanceVrfAfiSafiAllSoftOut_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftOut_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-all-soft-out"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiAllSoft
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// 
type ClearBgpInstanceVrfAfiSafiAllSoft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiAllSoft_Input
}

func (clearBgpInstanceVrfAfiSafiAllSoft *ClearBgpInstanceVrfAfiSafiAllSoft) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiAllSoft.EntityData.YFilter = clearBgpInstanceVrfAfiSafiAllSoft.YFilter
    clearBgpInstanceVrfAfiSafiAllSoft.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-all-soft"
    clearBgpInstanceVrfAfiSafiAllSoft.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiAllSoft.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiAllSoft.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft"
    clearBgpInstanceVrfAfiSafiAllSoft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiAllSoft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiAllSoft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiAllSoft.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiAllSoft.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiAllSoft.Input})
    clearBgpInstanceVrfAfiSafiAllSoft.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiAllSoft.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiAllSoft.EntityData)
}

// ClearBgpInstanceVrfAfiSafiAllSoft_Input
type ClearBgpInstanceVrfAfiSafiAllSoft_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoft_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-all-soft"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale
// Choose a particular BGP instance.
// Specify a VRF.
// Clear long-lived-stale routes.
// 
type ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input
}

func (clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.EntityData.YFilter = clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.YFilter
    clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale"
    clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale"
    clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.Input})
    clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.EntityData)
}

// ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input
type ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter
// Choose a particular BGP instance.
// Specify a VRF.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.YFilter = clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.YFilter
    clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter"
    clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter"
    clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.Input})
    clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData)
}

// ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input
type ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiIpAddrSoftIn
// Choose a particular BGP instance.
// Specify a VRF.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpInstanceVrfAfiSafiIpAddrSoftIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftIn *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiIpAddrSoftIn.EntityData.YFilter = clearBgpInstanceVrfAfiSafiIpAddrSoftIn.YFilter
    clearBgpInstanceVrfAfiSafiIpAddrSoftIn.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in"
    clearBgpInstanceVrfAfiSafiIpAddrSoftIn.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiIpAddrSoftIn.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiIpAddrSoftIn.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in"
    clearBgpInstanceVrfAfiSafiIpAddrSoftIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiIpAddrSoftIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiIpAddrSoftIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiIpAddrSoftIn.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiIpAddrSoftIn.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiIpAddrSoftIn.Input})
    clearBgpInstanceVrfAfiSafiIpAddrSoftIn.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiIpAddrSoftIn.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiIpAddrSoftIn.EntityData)
}

// ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input
type ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiIpAddrSoftOut
// Choose a particular BGP instance.
// Specify a VRF.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpInstanceVrfAfiSafiIpAddrSoftOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftOut *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiIpAddrSoftOut.EntityData.YFilter = clearBgpInstanceVrfAfiSafiIpAddrSoftOut.YFilter
    clearBgpInstanceVrfAfiSafiIpAddrSoftOut.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out"
    clearBgpInstanceVrfAfiSafiIpAddrSoftOut.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiIpAddrSoftOut.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiIpAddrSoftOut.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out"
    clearBgpInstanceVrfAfiSafiIpAddrSoftOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiIpAddrSoftOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiIpAddrSoftOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiIpAddrSoftOut.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiIpAddrSoftOut.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiIpAddrSoftOut.Input})
    clearBgpInstanceVrfAfiSafiIpAddrSoftOut.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiIpAddrSoftOut.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiIpAddrSoftOut.EntityData)
}

// ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input
type ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiIpAddrSoft
// Choose a particular BGP instance.
// Specify a VRF.
// Soft reconfig.
// 
type ClearBgpInstanceVrfAfiSafiIpAddrSoft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoft *ClearBgpInstanceVrfAfiSafiIpAddrSoft) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiIpAddrSoft.EntityData.YFilter = clearBgpInstanceVrfAfiSafiIpAddrSoft.YFilter
    clearBgpInstanceVrfAfiSafiIpAddrSoft.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft"
    clearBgpInstanceVrfAfiSafiIpAddrSoft.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiIpAddrSoft.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiIpAddrSoft.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft"
    clearBgpInstanceVrfAfiSafiIpAddrSoft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiIpAddrSoft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiIpAddrSoft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiIpAddrSoft.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiIpAddrSoft.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiIpAddrSoft.Input})
    clearBgpInstanceVrfAfiSafiIpAddrSoft.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiIpAddrSoft.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiIpAddrSoft.EntityData)
}

// ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input
type ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-ip-addr-soft"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter
// Choose a particular BGP instance.
// Specify a VRF.
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input
}

func (clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.EntityData.YFilter = clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.YFilter
    clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter"
    clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter"
    clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.Input})
    clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.EntityData)
}

// ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input
type ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiAsSoftIn
// Choose a particular BGP instance.
// Specify a VRF.
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpInstanceVrfAfiSafiAsSoftIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiAsSoftIn_Input
}

func (clearBgpInstanceVrfAfiSafiAsSoftIn *ClearBgpInstanceVrfAfiSafiAsSoftIn) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiAsSoftIn.EntityData.YFilter = clearBgpInstanceVrfAfiSafiAsSoftIn.YFilter
    clearBgpInstanceVrfAfiSafiAsSoftIn.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-as-soft-in"
    clearBgpInstanceVrfAfiSafiAsSoftIn.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiAsSoftIn.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiAsSoftIn.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in"
    clearBgpInstanceVrfAfiSafiAsSoftIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiAsSoftIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiAsSoftIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiAsSoftIn.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiAsSoftIn.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiAsSoftIn.Input})
    clearBgpInstanceVrfAfiSafiAsSoftIn.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiAsSoftIn.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiAsSoftIn.EntityData)
}

// ClearBgpInstanceVrfAfiSafiAsSoftIn_Input
type ClearBgpInstanceVrfAfiSafiAsSoftIn_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftIn_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-as-soft-in"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiAsSoftOut
// Choose a particular BGP instance.
// Specify a VRF.
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpInstanceVrfAfiSafiAsSoftOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiAsSoftOut_Input
}

func (clearBgpInstanceVrfAfiSafiAsSoftOut *ClearBgpInstanceVrfAfiSafiAsSoftOut) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiAsSoftOut.EntityData.YFilter = clearBgpInstanceVrfAfiSafiAsSoftOut.YFilter
    clearBgpInstanceVrfAfiSafiAsSoftOut.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-as-soft-out"
    clearBgpInstanceVrfAfiSafiAsSoftOut.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiAsSoftOut.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiAsSoftOut.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-out"
    clearBgpInstanceVrfAfiSafiAsSoftOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiAsSoftOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiAsSoftOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiAsSoftOut.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiAsSoftOut.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiAsSoftOut.Input})
    clearBgpInstanceVrfAfiSafiAsSoftOut.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiAsSoftOut.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiAsSoftOut.EntityData)
}

// ClearBgpInstanceVrfAfiSafiAsSoftOut_Input
type ClearBgpInstanceVrfAfiSafiAsSoftOut_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftOut_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-as-soft-out"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiAsSoft
// Choose a particular BGP instance.
// Specify a VRF.
// Clear peers in a specific AS.
// Soft reconfig.
// 
type ClearBgpInstanceVrfAfiSafiAsSoft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiAsSoft_Input
}

func (clearBgpInstanceVrfAfiSafiAsSoft *ClearBgpInstanceVrfAfiSafiAsSoft) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiAsSoft.EntityData.YFilter = clearBgpInstanceVrfAfiSafiAsSoft.YFilter
    clearBgpInstanceVrfAfiSafiAsSoft.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-as-soft"
    clearBgpInstanceVrfAfiSafiAsSoft.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiAsSoft.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiAsSoft.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft"
    clearBgpInstanceVrfAfiSafiAsSoft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiAsSoft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiAsSoft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiAsSoft.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiAsSoft.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiAsSoft.Input})
    clearBgpInstanceVrfAfiSafiAsSoft.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiAsSoft.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiAsSoft.EntityData)
}

// ClearBgpInstanceVrfAfiSafiAsSoft_Input
type ClearBgpInstanceVrfAfiSafiAsSoft_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoft_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-as-soft"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix
// Choose a particular BGP instance.
// Specify a VRF.
// Clear route flap dampening information.
// 
type ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input
}

func (clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.EntityData.YFilter = clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.YFilter
    clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix"
    clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix"
    clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.Input})
    clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.EntityData)
}

// ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input
type ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Network and mask or masklength to clear dampening information. The
    // type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiDampening
// Choose a particular BGP instance.
// Specify a VRF.
// Clear route flap dampening information.
// 
type ClearBgpInstanceVrfAfiSafiDampening struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiDampening_Input
}

func (clearBgpInstanceVrfAfiSafiDampening *ClearBgpInstanceVrfAfiSafiDampening) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiDampening.EntityData.YFilter = clearBgpInstanceVrfAfiSafiDampening.YFilter
    clearBgpInstanceVrfAfiSafiDampening.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-dampening"
    clearBgpInstanceVrfAfiSafiDampening.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiDampening.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiDampening.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening"
    clearBgpInstanceVrfAfiSafiDampening.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiDampening.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiDampening.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiDampening.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiDampening.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiDampening.Input})
    clearBgpInstanceVrfAfiSafiDampening.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiDampening.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiDampening.EntityData)
}

// ClearBgpInstanceVrfAfiSafiDampening_Input
type ClearBgpInstanceVrfAfiSafiDampening_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiDampening_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-dampening"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all external peers.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input
}

func (clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.EntityData.YFilter = clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.YFilter
    clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter"
    clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter"
    clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.Input})
    clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.EntityData)
}

// ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input
type ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiExternalSoftIn
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all external peers.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpInstanceVrfAfiSafiExternalSoftIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input
}

func (clearBgpInstanceVrfAfiSafiExternalSoftIn *ClearBgpInstanceVrfAfiSafiExternalSoftIn) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiExternalSoftIn.EntityData.YFilter = clearBgpInstanceVrfAfiSafiExternalSoftIn.YFilter
    clearBgpInstanceVrfAfiSafiExternalSoftIn.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-external-soft-in"
    clearBgpInstanceVrfAfiSafiExternalSoftIn.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiExternalSoftIn.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiExternalSoftIn.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in"
    clearBgpInstanceVrfAfiSafiExternalSoftIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiExternalSoftIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiExternalSoftIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiExternalSoftIn.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiExternalSoftIn.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiExternalSoftIn.Input})
    clearBgpInstanceVrfAfiSafiExternalSoftIn.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiExternalSoftIn.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiExternalSoftIn.EntityData)
}

// ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input
type ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-external-soft-in"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiExternalSoftOut
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all external peers.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpInstanceVrfAfiSafiExternalSoftOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input
}

func (clearBgpInstanceVrfAfiSafiExternalSoftOut *ClearBgpInstanceVrfAfiSafiExternalSoftOut) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiExternalSoftOut.EntityData.YFilter = clearBgpInstanceVrfAfiSafiExternalSoftOut.YFilter
    clearBgpInstanceVrfAfiSafiExternalSoftOut.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-external-soft-out"
    clearBgpInstanceVrfAfiSafiExternalSoftOut.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiExternalSoftOut.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiExternalSoftOut.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-out"
    clearBgpInstanceVrfAfiSafiExternalSoftOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiExternalSoftOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiExternalSoftOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiExternalSoftOut.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiExternalSoftOut.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiExternalSoftOut.Input})
    clearBgpInstanceVrfAfiSafiExternalSoftOut.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiExternalSoftOut.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiExternalSoftOut.EntityData)
}

// ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input
type ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-external-soft-out"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiExternalSoft
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all external peers.
// Soft reconfig.
// 
type ClearBgpInstanceVrfAfiSafiExternalSoft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiExternalSoft_Input
}

func (clearBgpInstanceVrfAfiSafiExternalSoft *ClearBgpInstanceVrfAfiSafiExternalSoft) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiExternalSoft.EntityData.YFilter = clearBgpInstanceVrfAfiSafiExternalSoft.YFilter
    clearBgpInstanceVrfAfiSafiExternalSoft.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-external-soft"
    clearBgpInstanceVrfAfiSafiExternalSoft.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiExternalSoft.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiExternalSoft.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft"
    clearBgpInstanceVrfAfiSafiExternalSoft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiExternalSoft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiExternalSoft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiExternalSoft.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiExternalSoft.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiExternalSoft.Input})
    clearBgpInstanceVrfAfiSafiExternalSoft.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiExternalSoft.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiExternalSoft.EntityData)
}

// ClearBgpInstanceVrfAfiSafiExternalSoft_Input
type ClearBgpInstanceVrfAfiSafiExternalSoft_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoft_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-external-soft"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask
// Choose a particular BGP instance.
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.YFilter = clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.YFilter
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input})
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData)
}

// ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input
type ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // IPv4 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr
// Choose a particular BGP instance.
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.EntityData.YFilter = clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.YFilter
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr"
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr"
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.Input})
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.EntityData)
}

// ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input
type ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix
// Choose a particular BGP instance.
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.YFilter = clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.YFilter
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix"
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix"
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.Input})
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData)
}

// ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input
type ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp
// Choose a particular BGP instance.
// Specify a VRF.
// Clear flap statistics.
// Clear flap statistics for routes matching the regular expression.
// 
type ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.EntityData.YFilter = clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.YFilter
    clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp"
    clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp"
    clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.Input})
    clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.EntityData)
}

// ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input
type ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // A regular expression to match the BGP AS paths.  Use 'ctrl-v ?' to enter
    // '?'. The type is string. This attribute is mandatory.
    RegexpPattern interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("regexp-pattern", types.YLeaf{"RegexpPattern", input.RegexpPattern})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy
// Choose a particular BGP instance.
// Specify a VRF.
// Clear flap statistics.
// Clear flap statistics for routes matching the route policy.
// 
type ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.YFilter = clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.YFilter
    clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy"
    clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy"
    clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.Input})
    clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.EntityData)
}

// ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input
type ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route Policy name. The type is string. This attribute is mandatory.
    RoutePolicyName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", input.RoutePolicyName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiFlapStatistics
// Choose a particular BGP instance.
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpInstanceVrfAfiSafiFlapStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiFlapStatistics_Input
}

func (clearBgpInstanceVrfAfiSafiFlapStatistics *ClearBgpInstanceVrfAfiSafiFlapStatistics) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiFlapStatistics.EntityData.YFilter = clearBgpInstanceVrfAfiSafiFlapStatistics.YFilter
    clearBgpInstanceVrfAfiSafiFlapStatistics.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-flap-statistics"
    clearBgpInstanceVrfAfiSafiFlapStatistics.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiFlapStatistics.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiFlapStatistics.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics"
    clearBgpInstanceVrfAfiSafiFlapStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiFlapStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiFlapStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiFlapStatistics.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiFlapStatistics.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiFlapStatistics.Input})
    clearBgpInstanceVrfAfiSafiFlapStatistics.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiFlapStatistics.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiFlapStatistics.EntityData)
}

// ClearBgpInstanceVrfAfiSafiFlapStatistics_Input
type ClearBgpInstanceVrfAfiSafiFlapStatistics_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatistics_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-flap-statistics"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics
// Choose a particular BGP instance.
// Specify a VRF.
// Clear nexthop.
// Performance statistics information related to processing.
// 
type ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input
}

func (clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.EntityData.YFilter = clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.YFilter
    clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics"
    clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics"
    clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.Input})
    clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.EntityData)
}

// ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input
type ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr
// Choose a particular BGP instance.
// Specify a VRF.
// Clear nexthop.
// Registration with RIB and reregister.
// 
type ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input
}

func (clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.EntityData.YFilter = clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.YFilter
    clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr"
    clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr"
    clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.Input})
    clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.EntityData)
}

// ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input
type ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Nexthop address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiSelfOriginated
// Choose a particular BGP instance.
// Specify a VRF.
// Clear redistributed, network and aggregate routes originated here.
// 
type ClearBgpInstanceVrfAfiSafiSelfOriginated struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiSelfOriginated_Input
}

func (clearBgpInstanceVrfAfiSafiSelfOriginated *ClearBgpInstanceVrfAfiSafiSelfOriginated) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiSelfOriginated.EntityData.YFilter = clearBgpInstanceVrfAfiSafiSelfOriginated.YFilter
    clearBgpInstanceVrfAfiSafiSelfOriginated.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-self-originated"
    clearBgpInstanceVrfAfiSafiSelfOriginated.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiSelfOriginated.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiSelfOriginated.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-self-originated"
    clearBgpInstanceVrfAfiSafiSelfOriginated.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiSelfOriginated.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiSelfOriginated.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiSelfOriginated.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiSelfOriginated.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiSelfOriginated.Input})
    clearBgpInstanceVrfAfiSafiSelfOriginated.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiSelfOriginated.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiSelfOriginated.EntityData)
}

// ClearBgpInstanceVrfAfiSafiSelfOriginated_Input
type ClearBgpInstanceVrfAfiSafiSelfOriginated_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiSelfOriginated_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-self-originated"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiShutdown
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all peers which were shut down due to low memory.
// 
type ClearBgpInstanceVrfAfiSafiShutdown struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiShutdown_Input
}

func (clearBgpInstanceVrfAfiSafiShutdown *ClearBgpInstanceVrfAfiSafiShutdown) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiShutdown.EntityData.YFilter = clearBgpInstanceVrfAfiSafiShutdown.YFilter
    clearBgpInstanceVrfAfiSafiShutdown.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-shutdown"
    clearBgpInstanceVrfAfiSafiShutdown.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiShutdown.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiShutdown.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-shutdown"
    clearBgpInstanceVrfAfiSafiShutdown.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiShutdown.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiShutdown.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiShutdown.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiShutdown.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiShutdown.Input})
    clearBgpInstanceVrfAfiSafiShutdown.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiShutdown.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiShutdown.EntityData)
}

// ClearBgpInstanceVrfAfiSafiShutdown_Input
type ClearBgpInstanceVrfAfiSafiShutdown_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiShutdown_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-shutdown"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.YFilter = clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.YFilter
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent"
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent"
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input})
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.EntityData.YFilter = clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.YFilter
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-update-outq-address-family"
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family"
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.Input})
    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-update-outq-address-family"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YFilter = clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input})
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.YFilter = clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.YFilter
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input})
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.YFilter = clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.YFilter
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input})
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.YFilter = clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.YFilter
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr"
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr"
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.Input})
    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YFilter = clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input})
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("sub-group", types.YLeaf{"SubGroup", input.SubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.YFilter = clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.YFilter
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input})
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("sub-group", types.YLeaf{"SubGroup", input.SubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YFilter = clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input})
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("refresh-sub-group", types.YLeaf{"RefreshSubGroup", input.RefreshSubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YFilter = clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input})
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("refresh-sub-group", types.YLeaf{"RefreshSubGroup", input.RefreshSubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.YFilter = clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.YFilter
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input})
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.EntityData.YFilter = clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.YFilter
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group"
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.Input})
    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.EntityData)
}

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-update-outq-update-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix
// Choose a particular BGP instance.
// Specify a VRF.
// Clear route flap dampening information.
// 
type ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input
}

func (clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.EntityData.YFilter = clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.YFilter
    clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix"
    clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix"
    clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.Input})
    clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.EntityData)
}

// ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input
type ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 Network and mask or masklength to clear dampening information. The
    // type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix
// Choose a particular BGP instance.
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.YFilter = clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.YFilter
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.YangName = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix"
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix"
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.Input})
    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData)
}

// ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input
type ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfNexthopPerformanceStatistics
// Choose a particular BGP instance.
// Specify a VRF.
// Clear nexthop.
// Performance statistics information related to processing.
// 
type ClearBgpInstanceVrfNexthopPerformanceStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfNexthopPerformanceStatistics_Input
}

func (clearBgpInstanceVrfNexthopPerformanceStatistics *ClearBgpInstanceVrfNexthopPerformanceStatistics) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfNexthopPerformanceStatistics.EntityData.YFilter = clearBgpInstanceVrfNexthopPerformanceStatistics.YFilter
    clearBgpInstanceVrfNexthopPerformanceStatistics.EntityData.YangName = "clear-bgp-instance-vrf-nexthop-performance-statistics"
    clearBgpInstanceVrfNexthopPerformanceStatistics.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfNexthopPerformanceStatistics.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfNexthopPerformanceStatistics.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-performance-statistics"
    clearBgpInstanceVrfNexthopPerformanceStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfNexthopPerformanceStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfNexthopPerformanceStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfNexthopPerformanceStatistics.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfNexthopPerformanceStatistics.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfNexthopPerformanceStatistics.Input})
    clearBgpInstanceVrfNexthopPerformanceStatistics.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfNexthopPerformanceStatistics.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfNexthopPerformanceStatistics.EntityData)
}

// ClearBgpInstanceVrfNexthopPerformanceStatistics_Input
type ClearBgpInstanceVrfNexthopPerformanceStatistics_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfNexthopPerformanceStatistics_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-nexthop-performance-statistics"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfNexthopRegistrationIpAddr
// Choose a particular BGP instance.
// Specify a VRF.
// Clear nexthop.
// Registration with RIB and reregister.
// 
type ClearBgpInstanceVrfNexthopRegistrationIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input
}

func (clearBgpInstanceVrfNexthopRegistrationIpAddr *ClearBgpInstanceVrfNexthopRegistrationIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfNexthopRegistrationIpAddr.EntityData.YFilter = clearBgpInstanceVrfNexthopRegistrationIpAddr.YFilter
    clearBgpInstanceVrfNexthopRegistrationIpAddr.EntityData.YangName = "clear-bgp-instance-vrf-nexthop-registration-ip-addr"
    clearBgpInstanceVrfNexthopRegistrationIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfNexthopRegistrationIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfNexthopRegistrationIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-registration-ip-addr"
    clearBgpInstanceVrfNexthopRegistrationIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfNexthopRegistrationIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfNexthopRegistrationIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfNexthopRegistrationIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfNexthopRegistrationIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfNexthopRegistrationIpAddr.Input})
    clearBgpInstanceVrfNexthopRegistrationIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfNexthopRegistrationIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfNexthopRegistrationIpAddr.EntityData)
}

// ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input
type ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Nexthop address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-nexthop-registration-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfPeerDropsAll
// Choose a particular BGP instance.
// Specify a VRF.
// Clear established/dropped counters for a peer.
// All Neighbors.
// 
type ClearBgpInstanceVrfPeerDropsAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfPeerDropsAll_Input
}

func (clearBgpInstanceVrfPeerDropsAll *ClearBgpInstanceVrfPeerDropsAll) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfPeerDropsAll.EntityData.YFilter = clearBgpInstanceVrfPeerDropsAll.YFilter
    clearBgpInstanceVrfPeerDropsAll.EntityData.YangName = "clear-bgp-instance-vrf-peer-drops-all"
    clearBgpInstanceVrfPeerDropsAll.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfPeerDropsAll.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfPeerDropsAll.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-all"
    clearBgpInstanceVrfPeerDropsAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfPeerDropsAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfPeerDropsAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfPeerDropsAll.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfPeerDropsAll.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfPeerDropsAll.Input})
    clearBgpInstanceVrfPeerDropsAll.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfPeerDropsAll.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfPeerDropsAll.EntityData)
}

// ClearBgpInstanceVrfPeerDropsAll_Input
type ClearBgpInstanceVrfPeerDropsAll_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfPeerDropsAll_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-peer-drops-all"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfPeerDropsIpAddr
// Choose a particular BGP instance.
// Specify a VRF.
// Clear established/dropped counters for a peer.
// 
type ClearBgpInstanceVrfPeerDropsIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfPeerDropsIpAddr_Input
}

func (clearBgpInstanceVrfPeerDropsIpAddr *ClearBgpInstanceVrfPeerDropsIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfPeerDropsIpAddr.EntityData.YFilter = clearBgpInstanceVrfPeerDropsIpAddr.YFilter
    clearBgpInstanceVrfPeerDropsIpAddr.EntityData.YangName = "clear-bgp-instance-vrf-peer-drops-ip-addr"
    clearBgpInstanceVrfPeerDropsIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfPeerDropsIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfPeerDropsIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-ip-addr"
    clearBgpInstanceVrfPeerDropsIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfPeerDropsIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfPeerDropsIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfPeerDropsIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfPeerDropsIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfPeerDropsIpAddr.Input})
    clearBgpInstanceVrfPeerDropsIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfPeerDropsIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfPeerDropsIpAddr.EntityData)
}

// ClearBgpInstanceVrfPeerDropsIpAddr_Input
type ClearBgpInstanceVrfPeerDropsIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // BGP neighbor IP address. The type is one of the following types: string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfPeerDropsIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-peer-drops-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfPerformanceStatistics
// Choose a particular BGP instance.
// Specify a VRF.
// Clear performance statistics.
// 
type ClearBgpInstanceVrfPerformanceStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfPerformanceStatistics_Input
}

func (clearBgpInstanceVrfPerformanceStatistics *ClearBgpInstanceVrfPerformanceStatistics) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfPerformanceStatistics.EntityData.YFilter = clearBgpInstanceVrfPerformanceStatistics.YFilter
    clearBgpInstanceVrfPerformanceStatistics.EntityData.YangName = "clear-bgp-instance-vrf-performance-statistics"
    clearBgpInstanceVrfPerformanceStatistics.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfPerformanceStatistics.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfPerformanceStatistics.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-performance-statistics"
    clearBgpInstanceVrfPerformanceStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfPerformanceStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfPerformanceStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfPerformanceStatistics.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfPerformanceStatistics.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfPerformanceStatistics.Input})
    clearBgpInstanceVrfPerformanceStatistics.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfPerformanceStatistics.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfPerformanceStatistics.EntityData)
}

// ClearBgpInstanceVrfPerformanceStatistics_Input
type ClearBgpInstanceVrfPerformanceStatistics_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfPerformanceStatistics_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-performance-statistics"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfShutdown
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all peers which were shut down due to low memory.
// 
type ClearBgpInstanceVrfShutdown struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfShutdown_Input
}

func (clearBgpInstanceVrfShutdown *ClearBgpInstanceVrfShutdown) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfShutdown.EntityData.YFilter = clearBgpInstanceVrfShutdown.YFilter
    clearBgpInstanceVrfShutdown.EntityData.YangName = "clear-bgp-instance-vrf-shutdown"
    clearBgpInstanceVrfShutdown.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfShutdown.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfShutdown.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-shutdown"
    clearBgpInstanceVrfShutdown.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfShutdown.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfShutdown.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfShutdown.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfShutdown.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfShutdown.Input})
    clearBgpInstanceVrfShutdown.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfShutdown.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfShutdown.EntityData)
}

// ClearBgpInstanceVrfShutdown_Input
type ClearBgpInstanceVrfShutdown_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfShutdown_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-shutdown"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input
}

func (clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.EntityData.YFilter = clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.YFilter
    clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.EntityData.YangName = "clear-bgp-instance-vrf-update-outq-address-family-update-parent"
    clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family-update-parent"
    clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.Input})
    clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input
type ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-update-outq-address-family-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqAddressFamily
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// 
type ClearBgpInstanceVrfUpdateOutqAddressFamily struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqAddressFamily_Input
}

func (clearBgpInstanceVrfUpdateOutqAddressFamily *ClearBgpInstanceVrfUpdateOutqAddressFamily) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfUpdateOutqAddressFamily.EntityData.YFilter = clearBgpInstanceVrfUpdateOutqAddressFamily.YFilter
    clearBgpInstanceVrfUpdateOutqAddressFamily.EntityData.YangName = "clear-bgp-instance-vrf-update-outq-address-family"
    clearBgpInstanceVrfUpdateOutqAddressFamily.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfUpdateOutqAddressFamily.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfUpdateOutqAddressFamily.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family"
    clearBgpInstanceVrfUpdateOutqAddressFamily.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfUpdateOutqAddressFamily.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfUpdateOutqAddressFamily.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfUpdateOutqAddressFamily.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfUpdateOutqAddressFamily.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfUpdateOutqAddressFamily.Input})
    clearBgpInstanceVrfUpdateOutqAddressFamily.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfUpdateOutqAddressFamily.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfUpdateOutqAddressFamily.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqAddressFamily_Input
type ClearBgpInstanceVrfUpdateOutqAddressFamily_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamily_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-update-outq-address-family"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YFilter = clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YangName = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input})
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
type ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// 
type ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.EntityData.YFilter = clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.YFilter
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.EntityData.YangName = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh"
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh"
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.Input})
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input
type ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.YFilter = clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.YFilter
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.YangName = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent"
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent"
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.Input})
    clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input
type ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqNeighborIpAddr
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// 
type ClearBgpInstanceVrfUpdateOutqNeighborIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfUpdateOutqNeighborIpAddr.EntityData.YFilter = clearBgpInstanceVrfUpdateOutqNeighborIpAddr.YFilter
    clearBgpInstanceVrfUpdateOutqNeighborIpAddr.EntityData.YangName = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr"
    clearBgpInstanceVrfUpdateOutqNeighborIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfUpdateOutqNeighborIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfUpdateOutqNeighborIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr"
    clearBgpInstanceVrfUpdateOutqNeighborIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfUpdateOutqNeighborIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfUpdateOutqNeighborIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfUpdateOutqNeighborIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfUpdateOutqNeighborIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfUpdateOutqNeighborIpAddr.Input})
    clearBgpInstanceVrfUpdateOutqNeighborIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfUpdateOutqNeighborIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfUpdateOutqNeighborIpAddr.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input
type ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YFilter = clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YangName = "clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent"
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent"
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input})
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input
type ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("sub-group", types.YLeaf{"SubGroup", input.SubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.EntityData.YFilter = clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.YFilter
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.EntityData.YangName = "clear-bgp-instance-vrf-update-outq-update-group-sub-group"
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group"
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.Input})
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input
type ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-update-outq-update-group-sub-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("sub-group", types.YLeaf{"SubGroup", input.SubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YFilter = clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YangName = "clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input})
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
type ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("refresh-sub-group", types.YLeaf{"RefreshSubGroup", input.RefreshSubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YFilter = clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YangName = "clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group"
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group"
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input})
    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
type ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("refresh-sub-group", types.YLeaf{"RefreshSubGroup", input.RefreshSubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.EntityData.YFilter = clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.YFilter
    clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.EntityData.YangName = "clear-bgp-instance-vrf-update-outq-update-group-update-parent"
    clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-update-parent"
    clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.Input})
    clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input
type ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-update-outq-update-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqUpdateGroup
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// 
type ClearBgpInstanceVrfUpdateOutqUpdateGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroup) GetEntityData() *types.CommonEntityData {
    clearBgpInstanceVrfUpdateOutqUpdateGroup.EntityData.YFilter = clearBgpInstanceVrfUpdateOutqUpdateGroup.YFilter
    clearBgpInstanceVrfUpdateOutqUpdateGroup.EntityData.YangName = "clear-bgp-instance-vrf-update-outq-update-group"
    clearBgpInstanceVrfUpdateOutqUpdateGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpInstanceVrfUpdateOutqUpdateGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpInstanceVrfUpdateOutqUpdateGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group"
    clearBgpInstanceVrfUpdateOutqUpdateGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpInstanceVrfUpdateOutqUpdateGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpInstanceVrfUpdateOutqUpdateGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpInstanceVrfUpdateOutqUpdateGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpInstanceVrfUpdateOutqUpdateGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpInstanceVrfUpdateOutqUpdateGroup.Input})
    clearBgpInstanceVrfUpdateOutqUpdateGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpInstanceVrfUpdateOutqUpdateGroup.EntityData.YListKeys = []string {}

    return &(clearBgpInstanceVrfUpdateOutqUpdateGroup.EntityData)
}

// ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input
type ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-instance-vrf-update-outq-update-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", input.InstanceName})
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiDampeningIpv4Prefix
// Clear route flap dampening information.
// 
type ClearBgpAfiSafiDampeningIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiDampeningIpv4Prefix_Input
}

func (clearBgpAfiSafiDampeningIpv4Prefix *ClearBgpAfiSafiDampeningIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiDampeningIpv4Prefix.EntityData.YFilter = clearBgpAfiSafiDampeningIpv4Prefix.YFilter
    clearBgpAfiSafiDampeningIpv4Prefix.EntityData.YangName = "clear-bgp-afi-safi-dampening-ipv4-prefix"
    clearBgpAfiSafiDampeningIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiDampeningIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiDampeningIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv4-prefix"
    clearBgpAfiSafiDampeningIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiDampeningIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiDampeningIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiDampeningIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiDampeningIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiDampeningIpv4Prefix.Input})
    clearBgpAfiSafiDampeningIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiDampeningIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiDampeningIpv4Prefix.EntityData)
}

// ClearBgpAfiSafiDampeningIpv4Prefix_Input
type ClearBgpAfiSafiDampeningIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Network and mask or masklength to clear dampening information. The
    // type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpAfiSafiDampeningIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-dampening-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiFlapStatisticsIpv4Prefix
// Clear flap statistics.
// 
type ClearBgpAfiSafiFlapStatisticsIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input
}

func (clearBgpAfiSafiFlapStatisticsIpv4Prefix *ClearBgpAfiSafiFlapStatisticsIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiFlapStatisticsIpv4Prefix.EntityData.YFilter = clearBgpAfiSafiFlapStatisticsIpv4Prefix.YFilter
    clearBgpAfiSafiFlapStatisticsIpv4Prefix.EntityData.YangName = "clear-bgp-afi-safi-flap-statistics-ipv4-prefix"
    clearBgpAfiSafiFlapStatisticsIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiFlapStatisticsIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiFlapStatisticsIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv4-prefix"
    clearBgpAfiSafiFlapStatisticsIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiFlapStatisticsIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiFlapStatisticsIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiFlapStatisticsIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiFlapStatisticsIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiFlapStatisticsIpv4Prefix.Input})
    clearBgpAfiSafiFlapStatisticsIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiFlapStatisticsIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiFlapStatisticsIpv4Prefix.EntityData)
}

// ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input
type ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-flap-statistics-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiDampeningIpv6Prefix
// Clear route flap dampening information.
// 
type ClearBgpAfiSafiDampeningIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiDampeningIpv6Prefix_Input
}

func (clearBgpAfiSafiDampeningIpv6Prefix *ClearBgpAfiSafiDampeningIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiDampeningIpv6Prefix.EntityData.YFilter = clearBgpAfiSafiDampeningIpv6Prefix.YFilter
    clearBgpAfiSafiDampeningIpv6Prefix.EntityData.YangName = "clear-bgp-afi-safi-dampening-ipv6-prefix"
    clearBgpAfiSafiDampeningIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiDampeningIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiDampeningIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv6-prefix"
    clearBgpAfiSafiDampeningIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiDampeningIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiDampeningIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiDampeningIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiDampeningIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiDampeningIpv6Prefix.Input})
    clearBgpAfiSafiDampeningIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiDampeningIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiDampeningIpv6Prefix.EntityData)
}

// ClearBgpAfiSafiDampeningIpv6Prefix_Input
type ClearBgpAfiSafiDampeningIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 Network and mask or masklength to clear dampening information. The
    // type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpAfiSafiDampeningIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-dampening-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpAfiSafiFlapStatisticsIpv6Prefix
// Clear flap statistics.
// 
type ClearBgpAfiSafiFlapStatisticsIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input
}

func (clearBgpAfiSafiFlapStatisticsIpv6Prefix *ClearBgpAfiSafiFlapStatisticsIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpAfiSafiFlapStatisticsIpv6Prefix.EntityData.YFilter = clearBgpAfiSafiFlapStatisticsIpv6Prefix.YFilter
    clearBgpAfiSafiFlapStatisticsIpv6Prefix.EntityData.YangName = "clear-bgp-afi-safi-flap-statistics-ipv6-prefix"
    clearBgpAfiSafiFlapStatisticsIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpAfiSafiFlapStatisticsIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpAfiSafiFlapStatisticsIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv6-prefix"
    clearBgpAfiSafiFlapStatisticsIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpAfiSafiFlapStatisticsIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpAfiSafiFlapStatisticsIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpAfiSafiFlapStatisticsIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpAfiSafiFlapStatisticsIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpAfiSafiFlapStatisticsIpv6Prefix.Input})
    clearBgpAfiSafiFlapStatisticsIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpAfiSafiFlapStatisticsIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpAfiSafiFlapStatisticsIpv6Prefix.EntityData)
}

// ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input
type ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-afi-safi-flap-statistics-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpNexthopPerformanceStatistics
// Clear nexthop.
// Performance statistics information related to processing.
// 
type ClearBgpNexthopPerformanceStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (clearBgpNexthopPerformanceStatistics *ClearBgpNexthopPerformanceStatistics) GetEntityData() *types.CommonEntityData {
    clearBgpNexthopPerformanceStatistics.EntityData.YFilter = clearBgpNexthopPerformanceStatistics.YFilter
    clearBgpNexthopPerformanceStatistics.EntityData.YangName = "clear-bgp-nexthop-performance-statistics"
    clearBgpNexthopPerformanceStatistics.EntityData.BundleName = "cisco_ios_xr"
    clearBgpNexthopPerformanceStatistics.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpNexthopPerformanceStatistics.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-nexthop-performance-statistics"
    clearBgpNexthopPerformanceStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpNexthopPerformanceStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpNexthopPerformanceStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpNexthopPerformanceStatistics.EntityData.Children = types.NewOrderedMap()
    clearBgpNexthopPerformanceStatistics.EntityData.Leafs = types.NewOrderedMap()

    clearBgpNexthopPerformanceStatistics.EntityData.YListKeys = []string {}

    return &(clearBgpNexthopPerformanceStatistics.EntityData)
}

// ClearBgpNexthopRegistrationIpAddr
// Clear nexthop.
// Registration with RIB and reregister.
// 
type ClearBgpNexthopRegistrationIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpNexthopRegistrationIpAddr_Input
}

func (clearBgpNexthopRegistrationIpAddr *ClearBgpNexthopRegistrationIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpNexthopRegistrationIpAddr.EntityData.YFilter = clearBgpNexthopRegistrationIpAddr.YFilter
    clearBgpNexthopRegistrationIpAddr.EntityData.YangName = "clear-bgp-nexthop-registration-ip-addr"
    clearBgpNexthopRegistrationIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpNexthopRegistrationIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpNexthopRegistrationIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-nexthop-registration-ip-addr"
    clearBgpNexthopRegistrationIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpNexthopRegistrationIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpNexthopRegistrationIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpNexthopRegistrationIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpNexthopRegistrationIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpNexthopRegistrationIpAddr.Input})
    clearBgpNexthopRegistrationIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpNexthopRegistrationIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpNexthopRegistrationIpAddr.EntityData)
}

// ClearBgpNexthopRegistrationIpAddr_Input
type ClearBgpNexthopRegistrationIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpNexthopRegistrationIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-nexthop-registration-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpPeerDropsAll
// Clear established/dropped counters for a peer.
// All Neighbors.
// 
type ClearBgpPeerDropsAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (clearBgpPeerDropsAll *ClearBgpPeerDropsAll) GetEntityData() *types.CommonEntityData {
    clearBgpPeerDropsAll.EntityData.YFilter = clearBgpPeerDropsAll.YFilter
    clearBgpPeerDropsAll.EntityData.YangName = "clear-bgp-peer-drops-all"
    clearBgpPeerDropsAll.EntityData.BundleName = "cisco_ios_xr"
    clearBgpPeerDropsAll.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpPeerDropsAll.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-peer-drops-all"
    clearBgpPeerDropsAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpPeerDropsAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpPeerDropsAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpPeerDropsAll.EntityData.Children = types.NewOrderedMap()
    clearBgpPeerDropsAll.EntityData.Leafs = types.NewOrderedMap()

    clearBgpPeerDropsAll.EntityData.YListKeys = []string {}

    return &(clearBgpPeerDropsAll.EntityData)
}

// ClearBgpPeerDropsIpAddr
// Clear established/dropped counters for a peer.
// 
type ClearBgpPeerDropsIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpPeerDropsIpAddr_Input
}

func (clearBgpPeerDropsIpAddr *ClearBgpPeerDropsIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpPeerDropsIpAddr.EntityData.YFilter = clearBgpPeerDropsIpAddr.YFilter
    clearBgpPeerDropsIpAddr.EntityData.YangName = "clear-bgp-peer-drops-ip-addr"
    clearBgpPeerDropsIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpPeerDropsIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpPeerDropsIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-peer-drops-ip-addr"
    clearBgpPeerDropsIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpPeerDropsIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpPeerDropsIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpPeerDropsIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpPeerDropsIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpPeerDropsIpAddr.Input})
    clearBgpPeerDropsIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpPeerDropsIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpPeerDropsIpAddr.EntityData)
}

// ClearBgpPeerDropsIpAddr_Input
type ClearBgpPeerDropsIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BGP neighbor IP address. The type is one of the following types: string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpPeerDropsIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-peer-drops-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpPerformanceStatistics
// Clear performance statistics.
// 
type ClearBgpPerformanceStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (clearBgpPerformanceStatistics *ClearBgpPerformanceStatistics) GetEntityData() *types.CommonEntityData {
    clearBgpPerformanceStatistics.EntityData.YFilter = clearBgpPerformanceStatistics.YFilter
    clearBgpPerformanceStatistics.EntityData.YangName = "clear-bgp-performance-statistics"
    clearBgpPerformanceStatistics.EntityData.BundleName = "cisco_ios_xr"
    clearBgpPerformanceStatistics.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpPerformanceStatistics.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-performance-statistics"
    clearBgpPerformanceStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpPerformanceStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpPerformanceStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpPerformanceStatistics.EntityData.Children = types.NewOrderedMap()
    clearBgpPerformanceStatistics.EntityData.Leafs = types.NewOrderedMap()

    clearBgpPerformanceStatistics.EntityData.YListKeys = []string {}

    return &(clearBgpPerformanceStatistics.EntityData)
}

// ClearBgpRpkiServerAllSerialQuery
// RPKI clear command.
// clear RPKI cache-server.
// clear all RPKI cache-servers.
// send serial-queries to all cache-servers (with latest serial numbers).
// 
type ClearBgpRpkiServerAllSerialQuery struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (clearBgpRpkiServerAllSerialQuery *ClearBgpRpkiServerAllSerialQuery) GetEntityData() *types.CommonEntityData {
    clearBgpRpkiServerAllSerialQuery.EntityData.YFilter = clearBgpRpkiServerAllSerialQuery.YFilter
    clearBgpRpkiServerAllSerialQuery.EntityData.YangName = "clear-bgp-rpki-server-all-serial-query"
    clearBgpRpkiServerAllSerialQuery.EntityData.BundleName = "cisco_ios_xr"
    clearBgpRpkiServerAllSerialQuery.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpRpkiServerAllSerialQuery.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-all-serial-query"
    clearBgpRpkiServerAllSerialQuery.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpRpkiServerAllSerialQuery.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpRpkiServerAllSerialQuery.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpRpkiServerAllSerialQuery.EntityData.Children = types.NewOrderedMap()
    clearBgpRpkiServerAllSerialQuery.EntityData.Leafs = types.NewOrderedMap()

    clearBgpRpkiServerAllSerialQuery.EntityData.YListKeys = []string {}

    return &(clearBgpRpkiServerAllSerialQuery.EntityData)
}

// ClearBgpRpkiServerAll
// RPKI clear command.
// clear RPKI cache-server.
// clear all RPKI cache-servers.
// 
type ClearBgpRpkiServerAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (clearBgpRpkiServerAll *ClearBgpRpkiServerAll) GetEntityData() *types.CommonEntityData {
    clearBgpRpkiServerAll.EntityData.YFilter = clearBgpRpkiServerAll.YFilter
    clearBgpRpkiServerAll.EntityData.YangName = "clear-bgp-rpki-server-all"
    clearBgpRpkiServerAll.EntityData.BundleName = "cisco_ios_xr"
    clearBgpRpkiServerAll.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpRpkiServerAll.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-all"
    clearBgpRpkiServerAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpRpkiServerAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpRpkiServerAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpRpkiServerAll.EntityData.Children = types.NewOrderedMap()
    clearBgpRpkiServerAll.EntityData.Leafs = types.NewOrderedMap()

    clearBgpRpkiServerAll.EntityData.YListKeys = []string {}

    return &(clearBgpRpkiServerAll.EntityData)
}

// ClearBgpRpkiServerRpkiServer
// RPKI clear command.
// clear RPKI cache-server.
// 
type ClearBgpRpkiServerRpkiServer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpRpkiServerRpkiServer_Input
}

func (clearBgpRpkiServerRpkiServer *ClearBgpRpkiServerRpkiServer) GetEntityData() *types.CommonEntityData {
    clearBgpRpkiServerRpkiServer.EntityData.YFilter = clearBgpRpkiServerRpkiServer.YFilter
    clearBgpRpkiServerRpkiServer.EntityData.YangName = "clear-bgp-rpki-server-rpki-server"
    clearBgpRpkiServerRpkiServer.EntityData.BundleName = "cisco_ios_xr"
    clearBgpRpkiServerRpkiServer.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpRpkiServerRpkiServer.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-rpki-server"
    clearBgpRpkiServerRpkiServer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpRpkiServerRpkiServer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpRpkiServerRpkiServer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpRpkiServerRpkiServer.EntityData.Children = types.NewOrderedMap()
    clearBgpRpkiServerRpkiServer.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpRpkiServerRpkiServer.Input})
    clearBgpRpkiServerRpkiServer.EntityData.Leafs = types.NewOrderedMap()

    clearBgpRpkiServerRpkiServer.EntityData.YListKeys = []string {}

    return &(clearBgpRpkiServerRpkiServer.EntityData)
}

// ClearBgpRpkiServerRpkiServer_Input
type ClearBgpRpkiServerRpkiServer_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // clear a specific RPKI cache-server (hostname or IP address). The type is
    // string. This attribute is mandatory.
    RpkiServer interface{}
}

func (input *ClearBgpRpkiServerRpkiServer_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-rpki-server-rpki-server"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("rpki-server", types.YLeaf{"RpkiServer", input.RpkiServer})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpRpkiValidationIpv4
// RPKI clear command.
// clear RPKI origin-validation (trigger origin validation).
// trigger origin validation walk for the IPv4 table.
// 
type ClearBgpRpkiValidationIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (clearBgpRpkiValidationIpv4 *ClearBgpRpkiValidationIpv4) GetEntityData() *types.CommonEntityData {
    clearBgpRpkiValidationIpv4.EntityData.YFilter = clearBgpRpkiValidationIpv4.YFilter
    clearBgpRpkiValidationIpv4.EntityData.YangName = "clear-bgp-rpki-validation-ipv4"
    clearBgpRpkiValidationIpv4.EntityData.BundleName = "cisco_ios_xr"
    clearBgpRpkiValidationIpv4.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpRpkiValidationIpv4.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation-ipv4"
    clearBgpRpkiValidationIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpRpkiValidationIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpRpkiValidationIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpRpkiValidationIpv4.EntityData.Children = types.NewOrderedMap()
    clearBgpRpkiValidationIpv4.EntityData.Leafs = types.NewOrderedMap()

    clearBgpRpkiValidationIpv4.EntityData.YListKeys = []string {}

    return &(clearBgpRpkiValidationIpv4.EntityData)
}

// ClearBgpRpkiValidationIpv6
// RPKI clear command.
// clear RPKI origin-validation (trigger origin validation).
// trigger origin validation walk for the IPv6 table.
// 
type ClearBgpRpkiValidationIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (clearBgpRpkiValidationIpv6 *ClearBgpRpkiValidationIpv6) GetEntityData() *types.CommonEntityData {
    clearBgpRpkiValidationIpv6.EntityData.YFilter = clearBgpRpkiValidationIpv6.YFilter
    clearBgpRpkiValidationIpv6.EntityData.YangName = "clear-bgp-rpki-validation-ipv6"
    clearBgpRpkiValidationIpv6.EntityData.BundleName = "cisco_ios_xr"
    clearBgpRpkiValidationIpv6.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpRpkiValidationIpv6.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation-ipv6"
    clearBgpRpkiValidationIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpRpkiValidationIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpRpkiValidationIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpRpkiValidationIpv6.EntityData.Children = types.NewOrderedMap()
    clearBgpRpkiValidationIpv6.EntityData.Leafs = types.NewOrderedMap()

    clearBgpRpkiValidationIpv6.EntityData.YListKeys = []string {}

    return &(clearBgpRpkiValidationIpv6.EntityData)
}

// ClearBgpRpkiValidation
// RPKI clear command.
// clear RPKI origin-validation (trigger origin validation).
// 
type ClearBgpRpkiValidation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (clearBgpRpkiValidation *ClearBgpRpkiValidation) GetEntityData() *types.CommonEntityData {
    clearBgpRpkiValidation.EntityData.YFilter = clearBgpRpkiValidation.YFilter
    clearBgpRpkiValidation.EntityData.YangName = "clear-bgp-rpki-validation"
    clearBgpRpkiValidation.EntityData.BundleName = "cisco_ios_xr"
    clearBgpRpkiValidation.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpRpkiValidation.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation"
    clearBgpRpkiValidation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpRpkiValidation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpRpkiValidation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpRpkiValidation.EntityData.Children = types.NewOrderedMap()
    clearBgpRpkiValidation.EntityData.Leafs = types.NewOrderedMap()

    clearBgpRpkiValidation.EntityData.YListKeys = []string {}

    return &(clearBgpRpkiValidation.EntityData)
}

// ClearBgpShutdown
// Clear all peers which were shut down due to low memory.
// 
type ClearBgpShutdown struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (clearBgpShutdown *ClearBgpShutdown) GetEntityData() *types.CommonEntityData {
    clearBgpShutdown.EntityData.YFilter = clearBgpShutdown.YFilter
    clearBgpShutdown.EntityData.YangName = "clear-bgp-shutdown"
    clearBgpShutdown.EntityData.BundleName = "cisco_ios_xr"
    clearBgpShutdown.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpShutdown.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-shutdown"
    clearBgpShutdown.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpShutdown.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpShutdown.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpShutdown.EntityData.Children = types.NewOrderedMap()
    clearBgpShutdown.EntityData.Leafs = types.NewOrderedMap()

    clearBgpShutdown.EntityData.YListKeys = []string {}

    return &(clearBgpShutdown.EntityData)
}

// ClearBgpUpdateOutqAddressFamilyUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// Update parents' OutQ counters too.
// 
type ClearBgpUpdateOutqAddressFamilyUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (clearBgpUpdateOutqAddressFamilyUpdateParent *ClearBgpUpdateOutqAddressFamilyUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpUpdateOutqAddressFamilyUpdateParent.EntityData.YFilter = clearBgpUpdateOutqAddressFamilyUpdateParent.YFilter
    clearBgpUpdateOutqAddressFamilyUpdateParent.EntityData.YangName = "clear-bgp-update-outq-address-family-update-parent"
    clearBgpUpdateOutqAddressFamilyUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpUpdateOutqAddressFamilyUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpUpdateOutqAddressFamilyUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-address-family-update-parent"
    clearBgpUpdateOutqAddressFamilyUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpUpdateOutqAddressFamilyUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpUpdateOutqAddressFamilyUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpUpdateOutqAddressFamilyUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpUpdateOutqAddressFamilyUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpUpdateOutqAddressFamilyUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpUpdateOutqAddressFamilyUpdateParent.EntityData)
}

// ClearBgpUpdateOutqAddressFamily
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// 
type ClearBgpUpdateOutqAddressFamily struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (clearBgpUpdateOutqAddressFamily *ClearBgpUpdateOutqAddressFamily) GetEntityData() *types.CommonEntityData {
    clearBgpUpdateOutqAddressFamily.EntityData.YFilter = clearBgpUpdateOutqAddressFamily.YFilter
    clearBgpUpdateOutqAddressFamily.EntityData.YangName = "clear-bgp-update-outq-address-family"
    clearBgpUpdateOutqAddressFamily.EntityData.BundleName = "cisco_ios_xr"
    clearBgpUpdateOutqAddressFamily.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpUpdateOutqAddressFamily.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-address-family"
    clearBgpUpdateOutqAddressFamily.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpUpdateOutqAddressFamily.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpUpdateOutqAddressFamily.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpUpdateOutqAddressFamily.EntityData.Children = types.NewOrderedMap()
    clearBgpUpdateOutqAddressFamily.EntityData.Leafs = types.NewOrderedMap()

    clearBgpUpdateOutqAddressFamily.EntityData.YListKeys = []string {}

    return &(clearBgpUpdateOutqAddressFamily.EntityData)
}

// ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// Update parents' OutQ counters too.
// 
type ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
}

func (clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YFilter = clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter
    clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YangName = "clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent"
    clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent"
    clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.Input})
    clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData)
}

// ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
type ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpUpdateOutqNeighborIpAddrRefresh
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// 
type ClearBgpUpdateOutqNeighborIpAddrRefresh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqNeighborIpAddrRefresh_Input
}

func (clearBgpUpdateOutqNeighborIpAddrRefresh *ClearBgpUpdateOutqNeighborIpAddrRefresh) GetEntityData() *types.CommonEntityData {
    clearBgpUpdateOutqNeighborIpAddrRefresh.EntityData.YFilter = clearBgpUpdateOutqNeighborIpAddrRefresh.YFilter
    clearBgpUpdateOutqNeighborIpAddrRefresh.EntityData.YangName = "clear-bgp-update-outq-neighbor-ip-addr-refresh"
    clearBgpUpdateOutqNeighborIpAddrRefresh.EntityData.BundleName = "cisco_ios_xr"
    clearBgpUpdateOutqNeighborIpAddrRefresh.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpUpdateOutqNeighborIpAddrRefresh.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh"
    clearBgpUpdateOutqNeighborIpAddrRefresh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpUpdateOutqNeighborIpAddrRefresh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpUpdateOutqNeighborIpAddrRefresh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpUpdateOutqNeighborIpAddrRefresh.EntityData.Children = types.NewOrderedMap()
    clearBgpUpdateOutqNeighborIpAddrRefresh.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpUpdateOutqNeighborIpAddrRefresh.Input})
    clearBgpUpdateOutqNeighborIpAddrRefresh.EntityData.Leafs = types.NewOrderedMap()

    clearBgpUpdateOutqNeighborIpAddrRefresh.EntityData.YListKeys = []string {}

    return &(clearBgpUpdateOutqNeighborIpAddrRefresh.EntityData)
}

// ClearBgpUpdateOutqNeighborIpAddrRefresh_Input
type ClearBgpUpdateOutqNeighborIpAddrRefresh_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpUpdateOutqNeighborIpAddrRefresh_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-update-outq-neighbor-ip-addr-refresh"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpUpdateOutqNeighborIpAddrUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Update parents' OutQ counters too.
// 
type ClearBgpUpdateOutqNeighborIpAddrUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input
}

func (clearBgpUpdateOutqNeighborIpAddrUpdateParent *ClearBgpUpdateOutqNeighborIpAddrUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpUpdateOutqNeighborIpAddrUpdateParent.EntityData.YFilter = clearBgpUpdateOutqNeighborIpAddrUpdateParent.YFilter
    clearBgpUpdateOutqNeighborIpAddrUpdateParent.EntityData.YangName = "clear-bgp-update-outq-neighbor-ip-addr-update-parent"
    clearBgpUpdateOutqNeighborIpAddrUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpUpdateOutqNeighborIpAddrUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpUpdateOutqNeighborIpAddrUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-update-parent"
    clearBgpUpdateOutqNeighborIpAddrUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpUpdateOutqNeighborIpAddrUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpUpdateOutqNeighborIpAddrUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpUpdateOutqNeighborIpAddrUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpUpdateOutqNeighborIpAddrUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpUpdateOutqNeighborIpAddrUpdateParent.Input})
    clearBgpUpdateOutqNeighborIpAddrUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpUpdateOutqNeighborIpAddrUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpUpdateOutqNeighborIpAddrUpdateParent.EntityData)
}

// ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input
type ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-update-outq-neighbor-ip-addr-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpUpdateOutqNeighborIpAddr
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// 
type ClearBgpUpdateOutqNeighborIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqNeighborIpAddr_Input
}

func (clearBgpUpdateOutqNeighborIpAddr *ClearBgpUpdateOutqNeighborIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpUpdateOutqNeighborIpAddr.EntityData.YFilter = clearBgpUpdateOutqNeighborIpAddr.YFilter
    clearBgpUpdateOutqNeighborIpAddr.EntityData.YangName = "clear-bgp-update-outq-neighbor-ip-addr"
    clearBgpUpdateOutqNeighborIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpUpdateOutqNeighborIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpUpdateOutqNeighborIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr"
    clearBgpUpdateOutqNeighborIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpUpdateOutqNeighborIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpUpdateOutqNeighborIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpUpdateOutqNeighborIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpUpdateOutqNeighborIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpUpdateOutqNeighborIpAddr.Input})
    clearBgpUpdateOutqNeighborIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpUpdateOutqNeighborIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpUpdateOutqNeighborIpAddr.EntityData)
}

// ClearBgpUpdateOutqNeighborIpAddr_Input
type ClearBgpUpdateOutqNeighborIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpUpdateOutqNeighborIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-update-outq-neighbor-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpUpdateOutqProcess
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Process.
// 
type ClearBgpUpdateOutqProcess struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (clearBgpUpdateOutqProcess *ClearBgpUpdateOutqProcess) GetEntityData() *types.CommonEntityData {
    clearBgpUpdateOutqProcess.EntityData.YFilter = clearBgpUpdateOutqProcess.YFilter
    clearBgpUpdateOutqProcess.EntityData.YangName = "clear-bgp-update-outq-process"
    clearBgpUpdateOutqProcess.EntityData.BundleName = "cisco_ios_xr"
    clearBgpUpdateOutqProcess.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpUpdateOutqProcess.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-process"
    clearBgpUpdateOutqProcess.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpUpdateOutqProcess.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpUpdateOutqProcess.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpUpdateOutqProcess.EntityData.Children = types.NewOrderedMap()
    clearBgpUpdateOutqProcess.EntityData.Leafs = types.NewOrderedMap()

    clearBgpUpdateOutqProcess.EntityData.YListKeys = []string {}

    return &(clearBgpUpdateOutqProcess.EntityData)
}

// ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input
}

func (clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YFilter = clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter
    clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YangName = "clear-bgp-update-outq-update-group-sub-group-update-parent"
    clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-update-parent"
    clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.Input})
    clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData)
}

// ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input
type ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-update-outq-update-group-sub-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("sub-group", types.YLeaf{"SubGroup", input.SubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpUpdateOutqUpdateGroupSubGroup
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpUpdateOutqUpdateGroupSubGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqUpdateGroupSubGroup_Input
}

func (clearBgpUpdateOutqUpdateGroupSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroup) GetEntityData() *types.CommonEntityData {
    clearBgpUpdateOutqUpdateGroupSubGroup.EntityData.YFilter = clearBgpUpdateOutqUpdateGroupSubGroup.YFilter
    clearBgpUpdateOutqUpdateGroupSubGroup.EntityData.YangName = "clear-bgp-update-outq-update-group-sub-group"
    clearBgpUpdateOutqUpdateGroupSubGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpUpdateOutqUpdateGroupSubGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpUpdateOutqUpdateGroupSubGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group"
    clearBgpUpdateOutqUpdateGroupSubGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpUpdateOutqUpdateGroupSubGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpUpdateOutqUpdateGroupSubGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpUpdateOutqUpdateGroupSubGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpUpdateOutqUpdateGroupSubGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpUpdateOutqUpdateGroupSubGroup.Input})
    clearBgpUpdateOutqUpdateGroupSubGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpUpdateOutqUpdateGroupSubGroup.EntityData.YListKeys = []string {}

    return &(clearBgpUpdateOutqUpdateGroupSubGroup.EntityData)
}

// ClearBgpUpdateOutqUpdateGroupSubGroup_Input
type ClearBgpUpdateOutqUpdateGroupSubGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-update-outq-update-group-sub-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("sub-group", types.YLeaf{"SubGroup", input.SubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
}

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YFilter = clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YangName = "clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input})
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData)
}

// ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
type ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("refresh-sub-group", types.YLeaf{"RefreshSubGroup", input.RefreshSubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
}

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetEntityData() *types.CommonEntityData {
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YFilter = clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YangName = "clear-bgp-update-outq-update-group-sub-group-refresh-sub-group"
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group"
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input})
    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YListKeys = []string {}

    return &(clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData)
}

// ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
type ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-update-outq-update-group-sub-group-refresh-sub-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("refresh-sub-group", types.YLeaf{"RefreshSubGroup", input.RefreshSubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpUpdateOutqUpdateGroupUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Update parents' OutQ counters too.
// 
type ClearBgpUpdateOutqUpdateGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqUpdateGroupUpdateParent_Input
}

func (clearBgpUpdateOutqUpdateGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpUpdateOutqUpdateGroupUpdateParent.EntityData.YFilter = clearBgpUpdateOutqUpdateGroupUpdateParent.YFilter
    clearBgpUpdateOutqUpdateGroupUpdateParent.EntityData.YangName = "clear-bgp-update-outq-update-group-update-parent"
    clearBgpUpdateOutqUpdateGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpUpdateOutqUpdateGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpUpdateOutqUpdateGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-update-parent"
    clearBgpUpdateOutqUpdateGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpUpdateOutqUpdateGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpUpdateOutqUpdateGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpUpdateOutqUpdateGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpUpdateOutqUpdateGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpUpdateOutqUpdateGroupUpdateParent.Input})
    clearBgpUpdateOutqUpdateGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpUpdateOutqUpdateGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpUpdateOutqUpdateGroupUpdateParent.EntityData)
}

// ClearBgpUpdateOutqUpdateGroupUpdateParent_Input
type ClearBgpUpdateOutqUpdateGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpUpdateOutqUpdateGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-update-outq-update-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpUpdateOutqUpdateGroup
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// 
type ClearBgpUpdateOutqUpdateGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqUpdateGroup_Input
}

func (clearBgpUpdateOutqUpdateGroup *ClearBgpUpdateOutqUpdateGroup) GetEntityData() *types.CommonEntityData {
    clearBgpUpdateOutqUpdateGroup.EntityData.YFilter = clearBgpUpdateOutqUpdateGroup.YFilter
    clearBgpUpdateOutqUpdateGroup.EntityData.YangName = "clear-bgp-update-outq-update-group"
    clearBgpUpdateOutqUpdateGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpUpdateOutqUpdateGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpUpdateOutqUpdateGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group"
    clearBgpUpdateOutqUpdateGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpUpdateOutqUpdateGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpUpdateOutqUpdateGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpUpdateOutqUpdateGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpUpdateOutqUpdateGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpUpdateOutqUpdateGroup.Input})
    clearBgpUpdateOutqUpdateGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpUpdateOutqUpdateGroup.EntityData.YListKeys = []string {}

    return &(clearBgpUpdateOutqUpdateGroup.EntityData)
}

// ClearBgpUpdateOutqUpdateGroup_Input
type ClearBgpUpdateOutqUpdateGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpUpdateOutqUpdateGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-update-outq-update-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionIpAddrIpNetmask
// clear BGP prefix version.
// 
type ClearBgpVersionIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionIpAddrIpNetmask_Input
}

func (clearBgpVersionIpAddrIpNetmask *ClearBgpVersionIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpVersionIpAddrIpNetmask.EntityData.YFilter = clearBgpVersionIpAddrIpNetmask.YFilter
    clearBgpVersionIpAddrIpNetmask.EntityData.YangName = "clear-bgp-version-ip-addr-ip-netmask"
    clearBgpVersionIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr-ip-netmask"
    clearBgpVersionIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionIpAddrIpNetmask.Input})
    clearBgpVersionIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpVersionIpAddrIpNetmask.EntityData)
}

// ClearBgpVersionIpAddrIpNetmask_Input
type ClearBgpVersionIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpVersionIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionIpAddr
// clear BGP prefix version.
// 
type ClearBgpVersionIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionIpAddr_Input
}

func (clearBgpVersionIpAddr *ClearBgpVersionIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpVersionIpAddr.EntityData.YFilter = clearBgpVersionIpAddr.YFilter
    clearBgpVersionIpAddr.EntityData.YangName = "clear-bgp-version-ip-addr"
    clearBgpVersionIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr"
    clearBgpVersionIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionIpAddr.Input})
    clearBgpVersionIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpVersionIpAddr.EntityData)
}

// ClearBgpVersionIpAddr_Input
type ClearBgpVersionIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVersionIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionIpPrefix
// clear BGP prefix version.
// 
type ClearBgpVersionIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionIpPrefix_Input
}

func (clearBgpVersionIpPrefix *ClearBgpVersionIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpVersionIpPrefix.EntityData.YFilter = clearBgpVersionIpPrefix.YFilter
    clearBgpVersionIpPrefix.EntityData.YangName = "clear-bgp-version-ip-prefix"
    clearBgpVersionIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-prefix"
    clearBgpVersionIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionIpPrefix.Input})
    clearBgpVersionIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpVersionIpPrefix.EntityData)
}

// ClearBgpVersionIpPrefix_Input
type ClearBgpVersionIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpVersionIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiIpAddrIpNetmask
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpAddrIpNetmask_Input
}

func (clearBgpVersionAfiSafiIpAddrIpNetmask *ClearBgpVersionAfiSafiIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiIpAddrIpNetmask.EntityData.YFilter = clearBgpVersionAfiSafiIpAddrIpNetmask.YFilter
    clearBgpVersionAfiSafiIpAddrIpNetmask.EntityData.YangName = "clear-bgp-version-afi-safi-ip-addr-ip-netmask"
    clearBgpVersionAfiSafiIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr-ip-netmask"
    clearBgpVersionAfiSafiIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiIpAddrIpNetmask.Input})
    clearBgpVersionAfiSafiIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiIpAddrIpNetmask.EntityData)
}

// ClearBgpVersionAfiSafiIpAddrIpNetmask_Input
type ClearBgpVersionAfiSafiIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpVersionAfiSafiIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiIpAddr
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpAddr_Input
}

func (clearBgpVersionAfiSafiIpAddr *ClearBgpVersionAfiSafiIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiIpAddr.EntityData.YFilter = clearBgpVersionAfiSafiIpAddr.YFilter
    clearBgpVersionAfiSafiIpAddr.EntityData.YangName = "clear-bgp-version-afi-safi-ip-addr"
    clearBgpVersionAfiSafiIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr"
    clearBgpVersionAfiSafiIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiIpAddr.Input})
    clearBgpVersionAfiSafiIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiIpAddr.EntityData)
}

// ClearBgpVersionAfiSafiIpAddr_Input
type ClearBgpVersionAfiSafiIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVersionAfiSafiIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiIpPrefix
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpPrefix_Input
}

func (clearBgpVersionAfiSafiIpPrefix *ClearBgpVersionAfiSafiIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiIpPrefix.EntityData.YFilter = clearBgpVersionAfiSafiIpPrefix.YFilter
    clearBgpVersionAfiSafiIpPrefix.EntityData.YangName = "clear-bgp-version-afi-safi-ip-prefix"
    clearBgpVersionAfiSafiIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-prefix"
    clearBgpVersionAfiSafiIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiIpPrefix.Input})
    clearBgpVersionAfiSafiIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiIpPrefix.EntityData)
}

// ClearBgpVersionAfiSafiIpPrefix_Input
type ClearBgpVersionAfiSafiIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpVersionAfiSafiIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask
// clear BGP prefix version.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input
}

func (clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.YFilter = clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.YFilter
    clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.YangName = "clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask"
    clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask"
    clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input})
    clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.EntityData)
}

// ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input
type ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("bridge-domain-name", types.YLeaf{"BridgeDomainName", input.BridgeDomainName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiBridgeDomainIpAddr
// clear BGP prefix version.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpVersionAfiSafiBridgeDomainIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input
}

func (clearBgpVersionAfiSafiBridgeDomainIpAddr *ClearBgpVersionAfiSafiBridgeDomainIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiBridgeDomainIpAddr.EntityData.YFilter = clearBgpVersionAfiSafiBridgeDomainIpAddr.YFilter
    clearBgpVersionAfiSafiBridgeDomainIpAddr.EntityData.YangName = "clear-bgp-version-afi-safi-bridge-domain-ip-addr"
    clearBgpVersionAfiSafiBridgeDomainIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiBridgeDomainIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiBridgeDomainIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr"
    clearBgpVersionAfiSafiBridgeDomainIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiBridgeDomainIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiBridgeDomainIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiBridgeDomainIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiBridgeDomainIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiBridgeDomainIpAddr.Input})
    clearBgpVersionAfiSafiBridgeDomainIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiBridgeDomainIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiBridgeDomainIpAddr.EntityData)
}

// ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input
type ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-bridge-domain-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("bridge-domain-name", types.YLeaf{"BridgeDomainName", input.BridgeDomainName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiBridgeDomainIpPrefix
// clear BGP prefix version.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpVersionAfiSafiBridgeDomainIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input
}

func (clearBgpVersionAfiSafiBridgeDomainIpPrefix *ClearBgpVersionAfiSafiBridgeDomainIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiBridgeDomainIpPrefix.EntityData.YFilter = clearBgpVersionAfiSafiBridgeDomainIpPrefix.YFilter
    clearBgpVersionAfiSafiBridgeDomainIpPrefix.EntityData.YangName = "clear-bgp-version-afi-safi-bridge-domain-ip-prefix"
    clearBgpVersionAfiSafiBridgeDomainIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiBridgeDomainIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiBridgeDomainIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-prefix"
    clearBgpVersionAfiSafiBridgeDomainIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiBridgeDomainIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiBridgeDomainIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiBridgeDomainIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiBridgeDomainIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiBridgeDomainIpPrefix.Input})
    clearBgpVersionAfiSafiBridgeDomainIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiBridgeDomainIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiBridgeDomainIpPrefix.EntityData)
}

// ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input
type ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-bridge-domain-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("bridge-domain-name", types.YLeaf{"BridgeDomainName", input.BridgeDomainName})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiRdIpAddrIpNetmask
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input
}

func (clearBgpVersionAfiSafiRdIpAddrIpNetmask *ClearBgpVersionAfiSafiRdIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiRdIpAddrIpNetmask.EntityData.YFilter = clearBgpVersionAfiSafiRdIpAddrIpNetmask.YFilter
    clearBgpVersionAfiSafiRdIpAddrIpNetmask.EntityData.YangName = "clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask"
    clearBgpVersionAfiSafiRdIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiRdIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiRdIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask"
    clearBgpVersionAfiSafiRdIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiRdIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiRdIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiRdIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiRdIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiRdIpAddrIpNetmask.Input})
    clearBgpVersionAfiSafiRdIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiRdIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiRdIpAddrIpNetmask.EntityData)
}

// ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input
type ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiRdIpAddr
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdIpAddr_Input
}

func (clearBgpVersionAfiSafiRdIpAddr *ClearBgpVersionAfiSafiRdIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiRdIpAddr.EntityData.YFilter = clearBgpVersionAfiSafiRdIpAddr.YFilter
    clearBgpVersionAfiSafiRdIpAddr.EntityData.YangName = "clear-bgp-version-afi-safi-rd-ip-addr"
    clearBgpVersionAfiSafiRdIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiRdIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiRdIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr"
    clearBgpVersionAfiSafiRdIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiRdIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiRdIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiRdIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiRdIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiRdIpAddr.Input})
    clearBgpVersionAfiSafiRdIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiRdIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiRdIpAddr.EntityData)
}

// ClearBgpVersionAfiSafiRdIpAddr_Input
type ClearBgpVersionAfiSafiRdIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVersionAfiSafiRdIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-rd-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiRdIpPrefix
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdIpPrefix_Input
}

func (clearBgpVersionAfiSafiRdIpPrefix *ClearBgpVersionAfiSafiRdIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiRdIpPrefix.EntityData.YFilter = clearBgpVersionAfiSafiRdIpPrefix.YFilter
    clearBgpVersionAfiSafiRdIpPrefix.EntityData.YangName = "clear-bgp-version-afi-safi-rd-ip-prefix"
    clearBgpVersionAfiSafiRdIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiRdIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiRdIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-prefix"
    clearBgpVersionAfiSafiRdIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiRdIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiRdIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiRdIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiRdIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiRdIpPrefix.Input})
    clearBgpVersionAfiSafiRdIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiRdIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiRdIpPrefix.EntityData)
}

// ClearBgpVersionAfiSafiRdIpPrefix_Input
type ClearBgpVersionAfiSafiRdIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpVersionAfiSafiRdIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-rd-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiIpv4AddrIpv4Mask
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpv4AddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input
}

func (clearBgpVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiIpv4AddrIpv4Mask.EntityData.YFilter = clearBgpVersionAfiSafiIpv4AddrIpv4Mask.YFilter
    clearBgpVersionAfiSafiIpv4AddrIpv4Mask.EntityData.YangName = "clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask"
    clearBgpVersionAfiSafiIpv4AddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiIpv4AddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiIpv4AddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask"
    clearBgpVersionAfiSafiIpv4AddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiIpv4AddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiIpv4AddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiIpv4AddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiIpv4AddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiIpv4AddrIpv4Mask.Input})
    clearBgpVersionAfiSafiIpv4AddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiIpv4AddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiIpv4AddrIpv4Mask.EntityData)
}

// ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input
type ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiIpv4Addr
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpv4Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpv4Addr_Input
}

func (clearBgpVersionAfiSafiIpv4Addr *ClearBgpVersionAfiSafiIpv4Addr) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiIpv4Addr.EntityData.YFilter = clearBgpVersionAfiSafiIpv4Addr.YFilter
    clearBgpVersionAfiSafiIpv4Addr.EntityData.YangName = "clear-bgp-version-afi-safi-ipv4-addr"
    clearBgpVersionAfiSafiIpv4Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiIpv4Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiIpv4Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr"
    clearBgpVersionAfiSafiIpv4Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiIpv4Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiIpv4Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiIpv4Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiIpv4Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiIpv4Addr.Input})
    clearBgpVersionAfiSafiIpv4Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiIpv4Addr.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiIpv4Addr.EntityData)
}

// ClearBgpVersionAfiSafiIpv4Addr_Input
type ClearBgpVersionAfiSafiIpv4Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpVersionAfiSafiIpv4Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-ipv4-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiIpv4Prefix
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpv4Prefix_Input
}

func (clearBgpVersionAfiSafiIpv4Prefix *ClearBgpVersionAfiSafiIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiIpv4Prefix.EntityData.YFilter = clearBgpVersionAfiSafiIpv4Prefix.YFilter
    clearBgpVersionAfiSafiIpv4Prefix.EntityData.YangName = "clear-bgp-version-afi-safi-ipv4-prefix"
    clearBgpVersionAfiSafiIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-prefix"
    clearBgpVersionAfiSafiIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiIpv4Prefix.Input})
    clearBgpVersionAfiSafiIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiIpv4Prefix.EntityData)
}

// ClearBgpVersionAfiSafiIpv4Prefix_Input
type ClearBgpVersionAfiSafiIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network and masklength. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpVersionAfiSafiIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiRdIpv4Addr
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdIpv4Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdIpv4Addr_Input
}

func (clearBgpVersionAfiSafiRdIpv4Addr *ClearBgpVersionAfiSafiRdIpv4Addr) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiRdIpv4Addr.EntityData.YFilter = clearBgpVersionAfiSafiRdIpv4Addr.YFilter
    clearBgpVersionAfiSafiRdIpv4Addr.EntityData.YangName = "clear-bgp-version-afi-safi-rd-ipv4-addr"
    clearBgpVersionAfiSafiRdIpv4Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiRdIpv4Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiRdIpv4Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr"
    clearBgpVersionAfiSafiRdIpv4Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiRdIpv4Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiRdIpv4Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiRdIpv4Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiRdIpv4Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiRdIpv4Addr.Input})
    clearBgpVersionAfiSafiRdIpv4Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiRdIpv4Addr.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiRdIpv4Addr.EntityData)
}

// ClearBgpVersionAfiSafiRdIpv4Addr_Input
type ClearBgpVersionAfiSafiRdIpv4Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv4 MDT network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpVersionAfiSafiRdIpv4Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-rd-ipv4-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiVrfIpv4Addr
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpVersionAfiSafiVrfIpv4Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiVrfIpv4Addr_Input
}

func (clearBgpVersionAfiSafiVrfIpv4Addr *ClearBgpVersionAfiSafiVrfIpv4Addr) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiVrfIpv4Addr.EntityData.YFilter = clearBgpVersionAfiSafiVrfIpv4Addr.YFilter
    clearBgpVersionAfiSafiVrfIpv4Addr.EntityData.YangName = "clear-bgp-version-afi-safi-vrf-ipv4-addr"
    clearBgpVersionAfiSafiVrfIpv4Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiVrfIpv4Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiVrfIpv4Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr"
    clearBgpVersionAfiSafiVrfIpv4Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiVrfIpv4Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiVrfIpv4Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiVrfIpv4Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiVrfIpv4Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiVrfIpv4Addr.Input})
    clearBgpVersionAfiSafiVrfIpv4Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiVrfIpv4Addr.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiVrfIpv4Addr.EntityData)
}

// ClearBgpVersionAfiSafiVrfIpv4Addr_Input
type ClearBgpVersionAfiSafiVrfIpv4Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv4 MDT network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpVersionAfiSafiVrfIpv4Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-vrf-ipv4-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiNetwork
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiNetwork_Input
}

func (clearBgpVersionAfiSafiNetwork *ClearBgpVersionAfiSafiNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiNetwork.EntityData.YFilter = clearBgpVersionAfiSafiNetwork.YFilter
    clearBgpVersionAfiSafiNetwork.EntityData.YangName = "clear-bgp-version-afi-safi-network"
    clearBgpVersionAfiSafiNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-network"
    clearBgpVersionAfiSafiNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiNetwork.Input})
    clearBgpVersionAfiSafiNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiNetwork.EntityData)
}

// ClearBgpVersionAfiSafiNetwork_Input
type ClearBgpVersionAfiSafiNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpVersionAfiSafiNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiRdNetwork
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdNetwork_Input
}

func (clearBgpVersionAfiSafiRdNetwork *ClearBgpVersionAfiSafiRdNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiRdNetwork.EntityData.YFilter = clearBgpVersionAfiSafiRdNetwork.YFilter
    clearBgpVersionAfiSafiRdNetwork.EntityData.YangName = "clear-bgp-version-afi-safi-rd-network"
    clearBgpVersionAfiSafiRdNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiRdNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiRdNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-network"
    clearBgpVersionAfiSafiRdNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiRdNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiRdNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiRdNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiRdNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiRdNetwork.Input})
    clearBgpVersionAfiSafiRdNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiRdNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiRdNetwork.EntityData)
}

// ClearBgpVersionAfiSafiRdNetwork_Input
type ClearBgpVersionAfiSafiRdNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpVersionAfiSafiRdNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-rd-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiVrfNetwork
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpVersionAfiSafiVrfNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiVrfNetwork_Input
}

func (clearBgpVersionAfiSafiVrfNetwork *ClearBgpVersionAfiSafiVrfNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiVrfNetwork.EntityData.YFilter = clearBgpVersionAfiSafiVrfNetwork.YFilter
    clearBgpVersionAfiSafiVrfNetwork.EntityData.YangName = "clear-bgp-version-afi-safi-vrf-network"
    clearBgpVersionAfiSafiVrfNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiVrfNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiVrfNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-network"
    clearBgpVersionAfiSafiVrfNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiVrfNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiVrfNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiVrfNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiVrfNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiVrfNetwork.Input})
    clearBgpVersionAfiSafiVrfNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiVrfNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiVrfNetwork.EntityData)
}

// ClearBgpVersionAfiSafiVrfNetwork_Input
type ClearBgpVersionAfiSafiVrfNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpVersionAfiSafiVrfNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-vrf-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiRtConstraintNetwork
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiRtConstraintNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRtConstraintNetwork_Input
}

func (clearBgpVersionAfiSafiRtConstraintNetwork *ClearBgpVersionAfiSafiRtConstraintNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiRtConstraintNetwork.EntityData.YFilter = clearBgpVersionAfiSafiRtConstraintNetwork.YFilter
    clearBgpVersionAfiSafiRtConstraintNetwork.EntityData.YangName = "clear-bgp-version-afi-safi-rt-constraint-network"
    clearBgpVersionAfiSafiRtConstraintNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiRtConstraintNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiRtConstraintNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rt-constraint-network"
    clearBgpVersionAfiSafiRtConstraintNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiRtConstraintNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiRtConstraintNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiRtConstraintNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiRtConstraintNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiRtConstraintNetwork.Input})
    clearBgpVersionAfiSafiRtConstraintNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiRtConstraintNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiRtConstraintNetwork.EntityData)
}

// ClearBgpVersionAfiSafiRtConstraintNetwork_Input
type ClearBgpVersionAfiSafiRtConstraintNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // RT-Constraint network. The type is string. This attribute is mandatory.
    RtConstraintNetwork interface{}
}

func (input *ClearBgpVersionAfiSafiRtConstraintNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-rt-constraint-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rt-constraint-network", types.YLeaf{"RtConstraintNetwork", input.RtConstraintNetwork})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiIpv4TunnelNetwork
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpv4TunnelNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input
}

func (clearBgpVersionAfiSafiIpv4TunnelNetwork *ClearBgpVersionAfiSafiIpv4TunnelNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiIpv4TunnelNetwork.EntityData.YFilter = clearBgpVersionAfiSafiIpv4TunnelNetwork.YFilter
    clearBgpVersionAfiSafiIpv4TunnelNetwork.EntityData.YangName = "clear-bgp-version-afi-safi-ipv4-tunnel-network"
    clearBgpVersionAfiSafiIpv4TunnelNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiIpv4TunnelNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiIpv4TunnelNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-tunnel-network"
    clearBgpVersionAfiSafiIpv4TunnelNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiIpv4TunnelNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiIpv4TunnelNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiIpv4TunnelNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiIpv4TunnelNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiIpv4TunnelNetwork.Input})
    clearBgpVersionAfiSafiIpv4TunnelNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiIpv4TunnelNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiIpv4TunnelNetwork.EntityData)
}

// ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input
type ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Tunnel network <Tunnel-ID>:<IPv4 Address>. The type is string. This
    // attribute is mandatory.
    Ipv4TunnelNetwork interface{}
}

func (input *ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-ipv4-tunnel-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-tunnel-network", types.YLeaf{"Ipv4TunnelNetwork", input.Ipv4TunnelNetwork})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input
}

func (clearBgpVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.YFilter = clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.YFilter
    clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.YangName = "clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask"
    clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask"
    clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.Input})
    clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.EntityData)
}

// ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input
type ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})
    input.EntityData.Leafs.Append("ipv6-netmask", types.YLeaf{"Ipv6Netmask", input.Ipv6Netmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiIpv6Addr
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpv6Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpv6Addr_Input
}

func (clearBgpVersionAfiSafiIpv6Addr *ClearBgpVersionAfiSafiIpv6Addr) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiIpv6Addr.EntityData.YFilter = clearBgpVersionAfiSafiIpv6Addr.YFilter
    clearBgpVersionAfiSafiIpv6Addr.EntityData.YangName = "clear-bgp-version-afi-safi-ipv6-addr"
    clearBgpVersionAfiSafiIpv6Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiIpv6Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiIpv6Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr"
    clearBgpVersionAfiSafiIpv6Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiIpv6Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiIpv6Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiIpv6Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiIpv6Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiIpv6Addr.Input})
    clearBgpVersionAfiSafiIpv6Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiIpv6Addr.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiIpv6Addr.EntityData)
}

// ClearBgpVersionAfiSafiIpv6Addr_Input
type ClearBgpVersionAfiSafiIpv6Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpVersionAfiSafiIpv6Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-ipv6-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiIpv6Prefix
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpv6Prefix_Input
}

func (clearBgpVersionAfiSafiIpv6Prefix *ClearBgpVersionAfiSafiIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiIpv6Prefix.EntityData.YFilter = clearBgpVersionAfiSafiIpv6Prefix.YFilter
    clearBgpVersionAfiSafiIpv6Prefix.EntityData.YangName = "clear-bgp-version-afi-safi-ipv6-prefix"
    clearBgpVersionAfiSafiIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-prefix"
    clearBgpVersionAfiSafiIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiIpv6Prefix.Input})
    clearBgpVersionAfiSafiIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiIpv6Prefix.EntityData)
}

// ClearBgpVersionAfiSafiIpv6Prefix_Input
type ClearBgpVersionAfiSafiIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpVersionAfiSafiIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiRd
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRd_Input
}

func (clearBgpVersionAfiSafiRd *ClearBgpVersionAfiSafiRd) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiRd.EntityData.YFilter = clearBgpVersionAfiSafiRd.YFilter
    clearBgpVersionAfiSafiRd.EntityData.YangName = "clear-bgp-version-afi-safi-rd"
    clearBgpVersionAfiSafiRd.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiRd.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiRd.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd"
    clearBgpVersionAfiSafiRd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiRd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiRd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiRd.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiRd.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiRd.Input})
    clearBgpVersionAfiSafiRd.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiRd.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiRd.EntityData)
}

// ClearBgpVersionAfiSafiRd_Input
type ClearBgpVersionAfiSafiRd_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}
}

func (input *ClearBgpVersionAfiSafiRd_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-rd"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiVrf
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpVersionAfiSafiVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiVrf_Input
}

func (clearBgpVersionAfiSafiVrf *ClearBgpVersionAfiSafiVrf) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiVrf.EntityData.YFilter = clearBgpVersionAfiSafiVrf.YFilter
    clearBgpVersionAfiSafiVrf.EntityData.YangName = "clear-bgp-version-afi-safi-vrf"
    clearBgpVersionAfiSafiVrf.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiVrf.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiVrf.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf"
    clearBgpVersionAfiSafiVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiVrf.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiVrf.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiVrf.Input})
    clearBgpVersionAfiSafiVrf.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiVrf.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiVrf.EntityData)
}

// ClearBgpVersionAfiSafiVrf_Input
type ClearBgpVersionAfiSafiVrf_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}
}

func (input *ClearBgpVersionAfiSafiVrf_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-vrf"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafi
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafi_Input
}

func (clearBgpVersionAfiSafi *ClearBgpVersionAfiSafi) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafi.EntityData.YFilter = clearBgpVersionAfiSafi.YFilter
    clearBgpVersionAfiSafi.EntityData.YangName = "clear-bgp-version-afi-safi"
    clearBgpVersionAfiSafi.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafi.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafi.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi"
    clearBgpVersionAfiSafi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafi.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafi.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafi.Input})
    clearBgpVersionAfiSafi.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafi.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafi.EntityData)
}

// ClearBgpVersionAfiSafi_Input
type ClearBgpVersionAfiSafi_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVersionAfiSafi_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiSrPolicyPrefix
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiSrPolicyPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiSrPolicyPrefix_Input
}

func (clearBgpVersionAfiSafiSrPolicyPrefix *ClearBgpVersionAfiSafiSrPolicyPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiSrPolicyPrefix.EntityData.YFilter = clearBgpVersionAfiSafiSrPolicyPrefix.YFilter
    clearBgpVersionAfiSafiSrPolicyPrefix.EntityData.YangName = "clear-bgp-version-afi-safi-sr-policy-prefix"
    clearBgpVersionAfiSafiSrPolicyPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiSrPolicyPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiSrPolicyPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-sr-policy-prefix"
    clearBgpVersionAfiSafiSrPolicyPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiSrPolicyPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiSrPolicyPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiSrPolicyPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiSrPolicyPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiSrPolicyPrefix.Input})
    clearBgpVersionAfiSafiSrPolicyPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiSrPolicyPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiSrPolicyPrefix.EntityData)
}

// ClearBgpVersionAfiSafiSrPolicyPrefix_Input
type ClearBgpVersionAfiSafiSrPolicyPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // SR Policy prefix. The type is string. This attribute is mandatory.
    SrPolicyPrefix interface{}
}

func (input *ClearBgpVersionAfiSafiSrPolicyPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-sr-policy-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("sr-policy-prefix", types.YLeaf{"SrPolicyPrefix", input.SrPolicyPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix
// clear BGP prefix version.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input
}

func (clearBgpVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.YFilter = clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.YFilter
    clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.YangName = "clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix"
    clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix"
    clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.Input})
    clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.EntityData)
}

// ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input
type ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // L2VPN EVPN Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("bridge-domain-name", types.YLeaf{"BridgeDomainName", input.BridgeDomainName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiRdIpv4Prefix
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdIpv4Prefix_Input
}

func (clearBgpVersionAfiSafiRdIpv4Prefix *ClearBgpVersionAfiSafiRdIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiRdIpv4Prefix.EntityData.YFilter = clearBgpVersionAfiSafiRdIpv4Prefix.YFilter
    clearBgpVersionAfiSafiRdIpv4Prefix.EntityData.YangName = "clear-bgp-version-afi-safi-rd-ipv4-prefix"
    clearBgpVersionAfiSafiRdIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiRdIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiRdIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-prefix"
    clearBgpVersionAfiSafiRdIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiRdIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiRdIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiRdIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiRdIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiRdIpv4Prefix.Input})
    clearBgpVersionAfiSafiRdIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiRdIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiRdIpv4Prefix.EntityData)
}

// ClearBgpVersionAfiSafiRdIpv4Prefix_Input
type ClearBgpVersionAfiSafiRdIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // L2VPN EVPN Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpVersionAfiSafiRdIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-rd-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiMp2mpIpv4Prefix
// clear BGP prefix version.
// Display routes for a specified Xconnect group:MP2MP.
// 
type ClearBgpVersionAfiSafiMp2mpIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiMp2mpIpv4Prefix_Input
}

func (clearBgpVersionAfiSafiMp2mpIpv4Prefix *ClearBgpVersionAfiSafiMp2mpIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiMp2mpIpv4Prefix.EntityData.YFilter = clearBgpVersionAfiSafiMp2mpIpv4Prefix.YFilter
    clearBgpVersionAfiSafiMp2mpIpv4Prefix.EntityData.YangName = "clear-bgp-version-afi-safi-mp2mp-ipv4-prefix"
    clearBgpVersionAfiSafiMp2mpIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiMp2mpIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiMp2mpIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-mp2mp-ipv4-prefix"
    clearBgpVersionAfiSafiMp2mpIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiMp2mpIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiMp2mpIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiMp2mpIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiMp2mpIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiMp2mpIpv4Prefix.Input})
    clearBgpVersionAfiSafiMp2mpIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiMp2mpIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiMp2mpIpv4Prefix.EntityData)
}

// ClearBgpVersionAfiSafiMp2mpIpv4Prefix_Input
type ClearBgpVersionAfiSafiMp2mpIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Xconnect Group:mp2mp. The type is string. This attribute is mandatory.
    Mp2mp interface{}

    // L2VPN VPWS Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpVersionAfiSafiMp2mpIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-mp2mp-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("mp2mp", types.YLeaf{"Mp2mp", input.Mp2mp})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiVrfIpv4Prefix
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpVersionAfiSafiVrfIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiVrfIpv4Prefix_Input
}

func (clearBgpVersionAfiSafiVrfIpv4Prefix *ClearBgpVersionAfiSafiVrfIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiVrfIpv4Prefix.EntityData.YFilter = clearBgpVersionAfiSafiVrfIpv4Prefix.YFilter
    clearBgpVersionAfiSafiVrfIpv4Prefix.EntityData.YangName = "clear-bgp-version-afi-safi-vrf-ipv4-prefix"
    clearBgpVersionAfiSafiVrfIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiVrfIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiVrfIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-prefix"
    clearBgpVersionAfiSafiVrfIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiVrfIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiVrfIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiVrfIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiVrfIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiVrfIpv4Prefix.Input})
    clearBgpVersionAfiSafiVrfIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiVrfIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiVrfIpv4Prefix.EntityData)
}

// ClearBgpVersionAfiSafiVrfIpv4Prefix_Input
type ClearBgpVersionAfiSafiVrfIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // VPN Fspec Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpVersionAfiSafiVrfIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-vrf-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input
}

func (clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.YFilter = clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.YFilter
    clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.YangName = "clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask"
    clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask"
    clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.Input})
    clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.EntityData)
}

// ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input
type ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input
}

func (clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.YFilter = clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.YFilter
    clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.YangName = "clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask"
    clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask"
    clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.Input})
    clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.EntityData)
}

// ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input
type ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input
}

func (clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.YFilter = clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.YFilter
    clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.YangName = "clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask"
    clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask"
    clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.Input})
    clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.EntityData)
}

// ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input
type ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})
    input.EntityData.Leafs.Append("ipv6-netmask", types.YLeaf{"Ipv6Netmask", input.Ipv6Netmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiRdIpv6Addr
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdIpv6Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdIpv6Addr_Input
}

func (clearBgpVersionAfiSafiRdIpv6Addr *ClearBgpVersionAfiSafiRdIpv6Addr) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiRdIpv6Addr.EntityData.YFilter = clearBgpVersionAfiSafiRdIpv6Addr.YFilter
    clearBgpVersionAfiSafiRdIpv6Addr.EntityData.YangName = "clear-bgp-version-afi-safi-rd-ipv6-addr"
    clearBgpVersionAfiSafiRdIpv6Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiRdIpv6Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiRdIpv6Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr"
    clearBgpVersionAfiSafiRdIpv6Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiRdIpv6Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiRdIpv6Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiRdIpv6Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiRdIpv6Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiRdIpv6Addr.Input})
    clearBgpVersionAfiSafiRdIpv6Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiRdIpv6Addr.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiRdIpv6Addr.EntityData)
}

// ClearBgpVersionAfiSafiRdIpv6Addr_Input
type ClearBgpVersionAfiSafiRdIpv6Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpVersionAfiSafiRdIpv6Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-rd-ipv6-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiRdIpv6Prefix
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdIpv6Prefix_Input
}

func (clearBgpVersionAfiSafiRdIpv6Prefix *ClearBgpVersionAfiSafiRdIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiRdIpv6Prefix.EntityData.YFilter = clearBgpVersionAfiSafiRdIpv6Prefix.YFilter
    clearBgpVersionAfiSafiRdIpv6Prefix.EntityData.YangName = "clear-bgp-version-afi-safi-rd-ipv6-prefix"
    clearBgpVersionAfiSafiRdIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiRdIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiRdIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-prefix"
    clearBgpVersionAfiSafiRdIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiRdIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiRdIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiRdIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiRdIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiRdIpv6Prefix.Input})
    clearBgpVersionAfiSafiRdIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiRdIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiRdIpv6Prefix.EntityData)
}

// ClearBgpVersionAfiSafiRdIpv6Prefix_Input
type ClearBgpVersionAfiSafiRdIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpVersionAfiSafiRdIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-rd-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input
}

func (clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.YFilter = clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.YFilter
    clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.YangName = "clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"
    clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"
    clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input})
    clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.EntityData)
}

// ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input
type ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})
    input.EntityData.Leafs.Append("ipv6-netmask", types.YLeaf{"Ipv6Netmask", input.Ipv6Netmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiVrfIpv6Addr
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpVersionAfiSafiVrfIpv6Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiVrfIpv6Addr_Input
}

func (clearBgpVersionAfiSafiVrfIpv6Addr *ClearBgpVersionAfiSafiVrfIpv6Addr) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiVrfIpv6Addr.EntityData.YFilter = clearBgpVersionAfiSafiVrfIpv6Addr.YFilter
    clearBgpVersionAfiSafiVrfIpv6Addr.EntityData.YangName = "clear-bgp-version-afi-safi-vrf-ipv6-addr"
    clearBgpVersionAfiSafiVrfIpv6Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiVrfIpv6Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiVrfIpv6Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr"
    clearBgpVersionAfiSafiVrfIpv6Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiVrfIpv6Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiVrfIpv6Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiVrfIpv6Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiVrfIpv6Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiVrfIpv6Addr.Input})
    clearBgpVersionAfiSafiVrfIpv6Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiVrfIpv6Addr.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiVrfIpv6Addr.EntityData)
}

// ClearBgpVersionAfiSafiVrfIpv6Addr_Input
type ClearBgpVersionAfiSafiVrfIpv6Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpVersionAfiSafiVrfIpv6Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-vrf-ipv6-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionAfiSafiVrfIpv6Prefix
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpVersionAfiSafiVrfIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiVrfIpv6Prefix_Input
}

func (clearBgpVersionAfiSafiVrfIpv6Prefix *ClearBgpVersionAfiSafiVrfIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpVersionAfiSafiVrfIpv6Prefix.EntityData.YFilter = clearBgpVersionAfiSafiVrfIpv6Prefix.YFilter
    clearBgpVersionAfiSafiVrfIpv6Prefix.EntityData.YangName = "clear-bgp-version-afi-safi-vrf-ipv6-prefix"
    clearBgpVersionAfiSafiVrfIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionAfiSafiVrfIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionAfiSafiVrfIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-prefix"
    clearBgpVersionAfiSafiVrfIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionAfiSafiVrfIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionAfiSafiVrfIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionAfiSafiVrfIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionAfiSafiVrfIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionAfiSafiVrfIpv6Prefix.Input})
    clearBgpVersionAfiSafiVrfIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionAfiSafiVrfIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpVersionAfiSafiVrfIpv6Prefix.EntityData)
}

// ClearBgpVersionAfiSafiVrfIpv6Prefix_Input
type ClearBgpVersionAfiSafiVrfIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpVersionAfiSafiVrfIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-afi-safi-vrf-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionVrfIpAddrIpNetmask
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfIpAddrIpNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfIpAddrIpNetmask_Input
}

func (clearBgpVersionVrfIpAddrIpNetmask *ClearBgpVersionVrfIpAddrIpNetmask) GetEntityData() *types.CommonEntityData {
    clearBgpVersionVrfIpAddrIpNetmask.EntityData.YFilter = clearBgpVersionVrfIpAddrIpNetmask.YFilter
    clearBgpVersionVrfIpAddrIpNetmask.EntityData.YangName = "clear-bgp-version-vrf-ip-addr-ip-netmask"
    clearBgpVersionVrfIpAddrIpNetmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionVrfIpAddrIpNetmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionVrfIpAddrIpNetmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr-ip-netmask"
    clearBgpVersionVrfIpAddrIpNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionVrfIpAddrIpNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionVrfIpAddrIpNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionVrfIpAddrIpNetmask.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionVrfIpAddrIpNetmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionVrfIpAddrIpNetmask.Input})
    clearBgpVersionVrfIpAddrIpNetmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionVrfIpAddrIpNetmask.EntityData.YListKeys = []string {}

    return &(clearBgpVersionVrfIpAddrIpNetmask.EntityData)
}

// ClearBgpVersionVrfIpAddrIpNetmask_Input
type ClearBgpVersionVrfIpAddrIpNetmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpVersionVrfIpAddrIpNetmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-vrf-ip-addr-ip-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ip-netmask", types.YLeaf{"IpNetmask", input.IpNetmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionVrfIpAddr
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfIpAddr_Input
}

func (clearBgpVersionVrfIpAddr *ClearBgpVersionVrfIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpVersionVrfIpAddr.EntityData.YFilter = clearBgpVersionVrfIpAddr.YFilter
    clearBgpVersionVrfIpAddr.EntityData.YangName = "clear-bgp-version-vrf-ip-addr"
    clearBgpVersionVrfIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionVrfIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionVrfIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr"
    clearBgpVersionVrfIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionVrfIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionVrfIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionVrfIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionVrfIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionVrfIpAddr.Input})
    clearBgpVersionVrfIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionVrfIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpVersionVrfIpAddr.EntityData)
}

// ClearBgpVersionVrfIpAddr_Input
type ClearBgpVersionVrfIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVersionVrfIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-vrf-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionVrfIpPrefix
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfIpPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfIpPrefix_Input
}

func (clearBgpVersionVrfIpPrefix *ClearBgpVersionVrfIpPrefix) GetEntityData() *types.CommonEntityData {
    clearBgpVersionVrfIpPrefix.EntityData.YFilter = clearBgpVersionVrfIpPrefix.YFilter
    clearBgpVersionVrfIpPrefix.EntityData.YangName = "clear-bgp-version-vrf-ip-prefix"
    clearBgpVersionVrfIpPrefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionVrfIpPrefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionVrfIpPrefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-prefix"
    clearBgpVersionVrfIpPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionVrfIpPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionVrfIpPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionVrfIpPrefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionVrfIpPrefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionVrfIpPrefix.Input})
    clearBgpVersionVrfIpPrefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionVrfIpPrefix.EntityData.YListKeys = []string {}

    return &(clearBgpVersionVrfIpPrefix.EntityData)
}

// ClearBgpVersionVrfIpPrefix_Input
type ClearBgpVersionVrfIpPrefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpVersionVrfIpPrefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-vrf-ip-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-prefix", types.YLeaf{"IpPrefix", input.IpPrefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionVrfAfiSafiIpv4Prefix
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfAfiSafiIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiIpv4Prefix_Input
}

func (clearBgpVersionVrfAfiSafiIpv4Prefix *ClearBgpVersionVrfAfiSafiIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpVersionVrfAfiSafiIpv4Prefix.EntityData.YFilter = clearBgpVersionVrfAfiSafiIpv4Prefix.YFilter
    clearBgpVersionVrfAfiSafiIpv4Prefix.EntityData.YangName = "clear-bgp-version-vrf-afi-safi-ipv4-prefix"
    clearBgpVersionVrfAfiSafiIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionVrfAfiSafiIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionVrfAfiSafiIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-prefix"
    clearBgpVersionVrfAfiSafiIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionVrfAfiSafiIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionVrfAfiSafiIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionVrfAfiSafiIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionVrfAfiSafiIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionVrfAfiSafiIpv4Prefix.Input})
    clearBgpVersionVrfAfiSafiIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionVrfAfiSafiIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpVersionVrfAfiSafiIpv4Prefix.EntityData)
}

// ClearBgpVersionVrfAfiSafiIpv4Prefix_Input
type ClearBgpVersionVrfAfiSafiIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Fspec IPv4 Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpVersionVrfAfiSafiIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-vrf-afi-safi-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input
}

func (clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.YFilter = clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.YFilter
    clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.YangName = "clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask"
    clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask"
    clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.Input})
    clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.EntityData)
}

// ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input
type ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionVrfAfiSafiIpv4Addr
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfAfiSafiIpv4Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiIpv4Addr_Input
}

func (clearBgpVersionVrfAfiSafiIpv4Addr *ClearBgpVersionVrfAfiSafiIpv4Addr) GetEntityData() *types.CommonEntityData {
    clearBgpVersionVrfAfiSafiIpv4Addr.EntityData.YFilter = clearBgpVersionVrfAfiSafiIpv4Addr.YFilter
    clearBgpVersionVrfAfiSafiIpv4Addr.EntityData.YangName = "clear-bgp-version-vrf-afi-safi-ipv4-addr"
    clearBgpVersionVrfAfiSafiIpv4Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionVrfAfiSafiIpv4Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionVrfAfiSafiIpv4Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr"
    clearBgpVersionVrfAfiSafiIpv4Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionVrfAfiSafiIpv4Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionVrfAfiSafiIpv4Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionVrfAfiSafiIpv4Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionVrfAfiSafiIpv4Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionVrfAfiSafiIpv4Addr.Input})
    clearBgpVersionVrfAfiSafiIpv4Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionVrfAfiSafiIpv4Addr.EntityData.YListKeys = []string {}

    return &(clearBgpVersionVrfAfiSafiIpv4Addr.EntityData)
}

// ClearBgpVersionVrfAfiSafiIpv4Addr_Input
type ClearBgpVersionVrfAfiSafiIpv4Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpVersionVrfAfiSafiIpv4Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-vrf-afi-safi-ipv4-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-addr", types.YLeaf{"Ipv4Addr", input.Ipv4Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionVrfAfiSafiNetwork
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfAfiSafiNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiNetwork_Input
}

func (clearBgpVersionVrfAfiSafiNetwork *ClearBgpVersionVrfAfiSafiNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpVersionVrfAfiSafiNetwork.EntityData.YFilter = clearBgpVersionVrfAfiSafiNetwork.YFilter
    clearBgpVersionVrfAfiSafiNetwork.EntityData.YangName = "clear-bgp-version-vrf-afi-safi-network"
    clearBgpVersionVrfAfiSafiNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionVrfAfiSafiNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionVrfAfiSafiNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-network"
    clearBgpVersionVrfAfiSafiNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionVrfAfiSafiNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionVrfAfiSafiNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionVrfAfiSafiNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionVrfAfiSafiNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionVrfAfiSafiNetwork.Input})
    clearBgpVersionVrfAfiSafiNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionVrfAfiSafiNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpVersionVrfAfiSafiNetwork.EntityData)
}

// ClearBgpVersionVrfAfiSafiNetwork_Input
type ClearBgpVersionVrfAfiSafiNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpVersionVrfAfiSafiNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-vrf-afi-safi-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionVrfAfiSafiRdNetwork
// clear BGP prefix version.
// Specify a VRF.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionVrfAfiSafiRdNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiRdNetwork_Input
}

func (clearBgpVersionVrfAfiSafiRdNetwork *ClearBgpVersionVrfAfiSafiRdNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpVersionVrfAfiSafiRdNetwork.EntityData.YFilter = clearBgpVersionVrfAfiSafiRdNetwork.YFilter
    clearBgpVersionVrfAfiSafiRdNetwork.EntityData.YangName = "clear-bgp-version-vrf-afi-safi-rd-network"
    clearBgpVersionVrfAfiSafiRdNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionVrfAfiSafiRdNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionVrfAfiSafiRdNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd-network"
    clearBgpVersionVrfAfiSafiRdNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionVrfAfiSafiRdNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionVrfAfiSafiRdNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionVrfAfiSafiRdNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionVrfAfiSafiRdNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionVrfAfiSafiRdNetwork.Input})
    clearBgpVersionVrfAfiSafiRdNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionVrfAfiSafiRdNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpVersionVrfAfiSafiRdNetwork.EntityData)
}

// ClearBgpVersionVrfAfiSafiRdNetwork_Input
type ClearBgpVersionVrfAfiSafiRdNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpVersionVrfAfiSafiRdNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-vrf-afi-safi-rd-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionVrfAfiSafiVrfNetwork
// clear BGP prefix version.
// Specify a VRF.
// Display routes for a specified VRF.
// 
type ClearBgpVersionVrfAfiSafiVrfNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiVrfNetwork_Input
}

func (clearBgpVersionVrfAfiSafiVrfNetwork *ClearBgpVersionVrfAfiSafiVrfNetwork) GetEntityData() *types.CommonEntityData {
    clearBgpVersionVrfAfiSafiVrfNetwork.EntityData.YFilter = clearBgpVersionVrfAfiSafiVrfNetwork.YFilter
    clearBgpVersionVrfAfiSafiVrfNetwork.EntityData.YangName = "clear-bgp-version-vrf-afi-safi-vrf-network"
    clearBgpVersionVrfAfiSafiVrfNetwork.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionVrfAfiSafiVrfNetwork.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionVrfAfiSafiVrfNetwork.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf-network"
    clearBgpVersionVrfAfiSafiVrfNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionVrfAfiSafiVrfNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionVrfAfiSafiVrfNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionVrfAfiSafiVrfNetwork.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionVrfAfiSafiVrfNetwork.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionVrfAfiSafiVrfNetwork.Input})
    clearBgpVersionVrfAfiSafiVrfNetwork.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionVrfAfiSafiVrfNetwork.EntityData.YListKeys = []string {}

    return &(clearBgpVersionVrfAfiSafiVrfNetwork.EntityData)
}

// ClearBgpVersionVrfAfiSafiVrfNetwork_Input
type ClearBgpVersionVrfAfiSafiVrfNetwork_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpVersionVrfAfiSafiVrfNetwork_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-vrf-afi-safi-vrf-network"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})
    input.EntityData.Leafs.Append("network", types.YLeaf{"Network", input.Network})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input
}

func (clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetEntityData() *types.CommonEntityData {
    clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.YFilter = clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.YFilter
    clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.YangName = "clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"
    clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"
    clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input})
    clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData.YListKeys = []string {}

    return &(clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.EntityData)
}

// ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input
type ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})
    input.EntityData.Leafs.Append("ipv6-netmask", types.YLeaf{"Ipv6Netmask", input.Ipv6Netmask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionVrfAfiSafiIpv6Addr
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfAfiSafiIpv6Addr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiIpv6Addr_Input
}

func (clearBgpVersionVrfAfiSafiIpv6Addr *ClearBgpVersionVrfAfiSafiIpv6Addr) GetEntityData() *types.CommonEntityData {
    clearBgpVersionVrfAfiSafiIpv6Addr.EntityData.YFilter = clearBgpVersionVrfAfiSafiIpv6Addr.YFilter
    clearBgpVersionVrfAfiSafiIpv6Addr.EntityData.YangName = "clear-bgp-version-vrf-afi-safi-ipv6-addr"
    clearBgpVersionVrfAfiSafiIpv6Addr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionVrfAfiSafiIpv6Addr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionVrfAfiSafiIpv6Addr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr"
    clearBgpVersionVrfAfiSafiIpv6Addr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionVrfAfiSafiIpv6Addr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionVrfAfiSafiIpv6Addr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionVrfAfiSafiIpv6Addr.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionVrfAfiSafiIpv6Addr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionVrfAfiSafiIpv6Addr.Input})
    clearBgpVersionVrfAfiSafiIpv6Addr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionVrfAfiSafiIpv6Addr.EntityData.YListKeys = []string {}

    return &(clearBgpVersionVrfAfiSafiIpv6Addr.EntityData)
}

// ClearBgpVersionVrfAfiSafiIpv6Addr_Input
type ClearBgpVersionVrfAfiSafiIpv6Addr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpVersionVrfAfiSafiIpv6Addr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-vrf-afi-safi-ipv6-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-addr", types.YLeaf{"Ipv6Addr", input.Ipv6Addr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionVrfAfiSafiIpv6Prefix
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfAfiSafiIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiIpv6Prefix_Input
}

func (clearBgpVersionVrfAfiSafiIpv6Prefix *ClearBgpVersionVrfAfiSafiIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpVersionVrfAfiSafiIpv6Prefix.EntityData.YFilter = clearBgpVersionVrfAfiSafiIpv6Prefix.YFilter
    clearBgpVersionVrfAfiSafiIpv6Prefix.EntityData.YangName = "clear-bgp-version-vrf-afi-safi-ipv6-prefix"
    clearBgpVersionVrfAfiSafiIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionVrfAfiSafiIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionVrfAfiSafiIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-prefix"
    clearBgpVersionVrfAfiSafiIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionVrfAfiSafiIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionVrfAfiSafiIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionVrfAfiSafiIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionVrfAfiSafiIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionVrfAfiSafiIpv6Prefix.Input})
    clearBgpVersionVrfAfiSafiIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionVrfAfiSafiIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpVersionVrfAfiSafiIpv6Prefix.EntityData)
}

// ClearBgpVersionVrfAfiSafiIpv6Prefix_Input
type ClearBgpVersionVrfAfiSafiIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpVersionVrfAfiSafiIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-vrf-afi-safi-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionVrfAfiSafiRd
// clear BGP prefix version.
// Specify a VRF.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionVrfAfiSafiRd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiRd_Input
}

func (clearBgpVersionVrfAfiSafiRd *ClearBgpVersionVrfAfiSafiRd) GetEntityData() *types.CommonEntityData {
    clearBgpVersionVrfAfiSafiRd.EntityData.YFilter = clearBgpVersionVrfAfiSafiRd.YFilter
    clearBgpVersionVrfAfiSafiRd.EntityData.YangName = "clear-bgp-version-vrf-afi-safi-rd"
    clearBgpVersionVrfAfiSafiRd.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionVrfAfiSafiRd.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionVrfAfiSafiRd.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd"
    clearBgpVersionVrfAfiSafiRd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionVrfAfiSafiRd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionVrfAfiSafiRd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionVrfAfiSafiRd.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionVrfAfiSafiRd.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionVrfAfiSafiRd.Input})
    clearBgpVersionVrfAfiSafiRd.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionVrfAfiSafiRd.EntityData.YListKeys = []string {}

    return &(clearBgpVersionVrfAfiSafiRd.EntityData)
}

// ClearBgpVersionVrfAfiSafiRd_Input
type ClearBgpVersionVrfAfiSafiRd_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}
}

func (input *ClearBgpVersionVrfAfiSafiRd_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-vrf-afi-safi-rd"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", input.Rd})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionVrfAfiSafiVrf
// clear BGP prefix version.
// Specify a VRF.
// Display routes for a specified VRF.
// 
type ClearBgpVersionVrfAfiSafiVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiVrf_Input
}

func (clearBgpVersionVrfAfiSafiVrf *ClearBgpVersionVrfAfiSafiVrf) GetEntityData() *types.CommonEntityData {
    clearBgpVersionVrfAfiSafiVrf.EntityData.YFilter = clearBgpVersionVrfAfiSafiVrf.YFilter
    clearBgpVersionVrfAfiSafiVrf.EntityData.YangName = "clear-bgp-version-vrf-afi-safi-vrf"
    clearBgpVersionVrfAfiSafiVrf.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionVrfAfiSafiVrf.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionVrfAfiSafiVrf.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf"
    clearBgpVersionVrfAfiSafiVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionVrfAfiSafiVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionVrfAfiSafiVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionVrfAfiSafiVrf.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionVrfAfiSafiVrf.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionVrfAfiSafiVrf.Input})
    clearBgpVersionVrfAfiSafiVrf.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionVrfAfiSafiVrf.EntityData.YListKeys = []string {}

    return &(clearBgpVersionVrfAfiSafiVrf.EntityData)
}

// ClearBgpVersionVrfAfiSafiVrf_Input
type ClearBgpVersionVrfAfiSafiVrf_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}
}

func (input *ClearBgpVersionVrfAfiSafiVrf_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-vrf-afi-safi-vrf"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", input.VrfName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVersionVrfAfiSafi
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfAfiSafi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafi_Input
}

func (clearBgpVersionVrfAfiSafi *ClearBgpVersionVrfAfiSafi) GetEntityData() *types.CommonEntityData {
    clearBgpVersionVrfAfiSafi.EntityData.YFilter = clearBgpVersionVrfAfiSafi.YFilter
    clearBgpVersionVrfAfiSafi.EntityData.YangName = "clear-bgp-version-vrf-afi-safi"
    clearBgpVersionVrfAfiSafi.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVersionVrfAfiSafi.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVersionVrfAfiSafi.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi"
    clearBgpVersionVrfAfiSafi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVersionVrfAfiSafi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVersionVrfAfiSafi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVersionVrfAfiSafi.EntityData.Children = types.NewOrderedMap()
    clearBgpVersionVrfAfiSafi.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVersionVrfAfiSafi.Input})
    clearBgpVersionVrfAfiSafi.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVersionVrfAfiSafi.EntityData.YListKeys = []string {}

    return &(clearBgpVersionVrfAfiSafi.EntityData)
}

// ClearBgpVersionVrfAfiSafi_Input
type ClearBgpVersionVrfAfiSafi_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVersionVrfAfiSafi_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-version-vrf-afi-safi"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAllGraceful
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpVrfAllGraceful struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAllGraceful_Input
}

func (clearBgpVrfAllGraceful *ClearBgpVrfAllGraceful) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAllGraceful.EntityData.YFilter = clearBgpVrfAllGraceful.YFilter
    clearBgpVrfAllGraceful.EntityData.YangName = "clear-bgp-vrf-all-graceful"
    clearBgpVrfAllGraceful.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAllGraceful.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAllGraceful.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all-graceful"
    clearBgpVrfAllGraceful.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAllGraceful.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAllGraceful.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAllGraceful.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAllGraceful.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAllGraceful.Input})
    clearBgpVrfAllGraceful.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAllGraceful.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAllGraceful.EntityData)
}

// ClearBgpVrfAllGraceful_Input
type ClearBgpVrfAllGraceful_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfAllGraceful_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-all-graceful"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAll
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// 
type ClearBgpVrfAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAll_Input
}

func (clearBgpVrfAll *ClearBgpVrfAll) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAll.EntityData.YFilter = clearBgpVrfAll.YFilter
    clearBgpVrfAll.EntityData.YangName = "clear-bgp-vrf-all"
    clearBgpVrfAll.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAll.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAll.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all"
    clearBgpVrfAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAll.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAll.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAll.Input})
    clearBgpVrfAll.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAll.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAll.EntityData)
}

// ClearBgpVrfAll_Input
type ClearBgpVrfAll_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfAll_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-all"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfIpAddrGraceful
// Specify a VRF.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpVrfIpAddrGraceful struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfIpAddrGraceful_Input
}

func (clearBgpVrfIpAddrGraceful *ClearBgpVrfIpAddrGraceful) GetEntityData() *types.CommonEntityData {
    clearBgpVrfIpAddrGraceful.EntityData.YFilter = clearBgpVrfIpAddrGraceful.YFilter
    clearBgpVrfIpAddrGraceful.EntityData.YangName = "clear-bgp-vrf-ip-addr-graceful"
    clearBgpVrfIpAddrGraceful.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfIpAddrGraceful.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfIpAddrGraceful.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-graceful"
    clearBgpVrfIpAddrGraceful.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfIpAddrGraceful.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfIpAddrGraceful.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfIpAddrGraceful.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfIpAddrGraceful.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfIpAddrGraceful.Input})
    clearBgpVrfIpAddrGraceful.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfIpAddrGraceful.EntityData.YListKeys = []string {}

    return &(clearBgpVrfIpAddrGraceful.EntityData)
}

// ClearBgpVrfIpAddrGraceful_Input
type ClearBgpVrfIpAddrGraceful_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfIpAddrGraceful_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-ip-addr-graceful"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfIpAddrLongLivedStale
// Specify a VRF.
// Clear long-lived-stale routes.
// 
type ClearBgpVrfIpAddrLongLivedStale struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfIpAddrLongLivedStale_Input
}

func (clearBgpVrfIpAddrLongLivedStale *ClearBgpVrfIpAddrLongLivedStale) GetEntityData() *types.CommonEntityData {
    clearBgpVrfIpAddrLongLivedStale.EntityData.YFilter = clearBgpVrfIpAddrLongLivedStale.YFilter
    clearBgpVrfIpAddrLongLivedStale.EntityData.YangName = "clear-bgp-vrf-ip-addr-long-lived-stale"
    clearBgpVrfIpAddrLongLivedStale.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfIpAddrLongLivedStale.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfIpAddrLongLivedStale.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-long-lived-stale"
    clearBgpVrfIpAddrLongLivedStale.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfIpAddrLongLivedStale.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfIpAddrLongLivedStale.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfIpAddrLongLivedStale.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfIpAddrLongLivedStale.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfIpAddrLongLivedStale.Input})
    clearBgpVrfIpAddrLongLivedStale.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfIpAddrLongLivedStale.EntityData.YListKeys = []string {}

    return &(clearBgpVrfIpAddrLongLivedStale.EntityData)
}

// ClearBgpVrfIpAddrLongLivedStale_Input
type ClearBgpVrfIpAddrLongLivedStale_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfIpAddrLongLivedStale_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-ip-addr-long-lived-stale"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfIpAddr
// Specify a VRF.
// 
type ClearBgpVrfIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfIpAddr_Input
}

func (clearBgpVrfIpAddr *ClearBgpVrfIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpVrfIpAddr.EntityData.YFilter = clearBgpVrfIpAddr.YFilter
    clearBgpVrfIpAddr.EntityData.YangName = "clear-bgp-vrf-ip-addr"
    clearBgpVrfIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr"
    clearBgpVrfIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfIpAddr.Input})
    clearBgpVrfIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpVrfIpAddr.EntityData)
}

// ClearBgpVrfIpAddr_Input
type ClearBgpVrfIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAsGraceful
// Specify a VRF.
// Clear peers in a specific AS.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpVrfAsGraceful struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAsGraceful_Input
}

func (clearBgpVrfAsGraceful *ClearBgpVrfAsGraceful) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAsGraceful.EntityData.YFilter = clearBgpVrfAsGraceful.YFilter
    clearBgpVrfAsGraceful.EntityData.YangName = "clear-bgp-vrf-as-graceful"
    clearBgpVrfAsGraceful.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAsGraceful.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAsGraceful.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as-graceful"
    clearBgpVrfAsGraceful.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAsGraceful.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAsGraceful.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAsGraceful.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAsGraceful.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAsGraceful.Input})
    clearBgpVrfAsGraceful.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAsGraceful.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAsGraceful.EntityData)
}

// ClearBgpVrfAsGraceful_Input
type ClearBgpVrfAsGraceful_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpVrfAsGraceful_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-as-graceful"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAs
// Specify a VRF.
// Clear peers in a specific AS.
// 
type ClearBgpVrfAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAs_Input
}

func (clearBgpVrfAs *ClearBgpVrfAs) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAs.EntityData.YFilter = clearBgpVrfAs.YFilter
    clearBgpVrfAs.EntityData.YangName = "clear-bgp-vrf-as"
    clearBgpVrfAs.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAs.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAs.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as"
    clearBgpVrfAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAs.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAs.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAs.Input})
    clearBgpVrfAs.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAs.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAs.EntityData)
}

// ClearBgpVrfAs_Input
type ClearBgpVrfAs_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpVrfAs_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-as"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfExternalGraceful
// Specify a VRF.
// Clear all external peers.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpVrfExternalGraceful struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfExternalGraceful_Input
}

func (clearBgpVrfExternalGraceful *ClearBgpVrfExternalGraceful) GetEntityData() *types.CommonEntityData {
    clearBgpVrfExternalGraceful.EntityData.YFilter = clearBgpVrfExternalGraceful.YFilter
    clearBgpVrfExternalGraceful.EntityData.YangName = "clear-bgp-vrf-external-graceful"
    clearBgpVrfExternalGraceful.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfExternalGraceful.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfExternalGraceful.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external-graceful"
    clearBgpVrfExternalGraceful.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfExternalGraceful.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfExternalGraceful.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfExternalGraceful.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfExternalGraceful.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfExternalGraceful.Input})
    clearBgpVrfExternalGraceful.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfExternalGraceful.EntityData.YListKeys = []string {}

    return &(clearBgpVrfExternalGraceful.EntityData)
}

// ClearBgpVrfExternalGraceful_Input
type ClearBgpVrfExternalGraceful_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfExternalGraceful_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-external-graceful"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfExternal
// Specify a VRF.
// Clear all external peers.
// 
type ClearBgpVrfExternal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfExternal_Input
}

func (clearBgpVrfExternal *ClearBgpVrfExternal) GetEntityData() *types.CommonEntityData {
    clearBgpVrfExternal.EntityData.YFilter = clearBgpVrfExternal.YFilter
    clearBgpVrfExternal.EntityData.YangName = "clear-bgp-vrf-external"
    clearBgpVrfExternal.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfExternal.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfExternal.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external"
    clearBgpVrfExternal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfExternal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfExternal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfExternal.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfExternal.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfExternal.Input})
    clearBgpVrfExternal.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfExternal.EntityData.YListKeys = []string {}

    return &(clearBgpVrfExternal.EntityData)
}

// ClearBgpVrfExternal_Input
type ClearBgpVrfExternal_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfExternal_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-external"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiAllSoftInPrefixFilter
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpVrfAfiSafiAllSoftInPrefixFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input
}

func (clearBgpVrfAfiSafiAllSoftInPrefixFilter *ClearBgpVrfAfiSafiAllSoftInPrefixFilter) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiAllSoftInPrefixFilter.EntityData.YFilter = clearBgpVrfAfiSafiAllSoftInPrefixFilter.YFilter
    clearBgpVrfAfiSafiAllSoftInPrefixFilter.EntityData.YangName = "clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter"
    clearBgpVrfAfiSafiAllSoftInPrefixFilter.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiAllSoftInPrefixFilter.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiAllSoftInPrefixFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter"
    clearBgpVrfAfiSafiAllSoftInPrefixFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiAllSoftInPrefixFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiAllSoftInPrefixFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiAllSoftInPrefixFilter.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiAllSoftInPrefixFilter.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiAllSoftInPrefixFilter.Input})
    clearBgpVrfAfiSafiAllSoftInPrefixFilter.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiAllSoftInPrefixFilter.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiAllSoftInPrefixFilter.EntityData)
}

// ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input
type ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiAllSoftIn
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpVrfAfiSafiAllSoftIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiAllSoftIn_Input
}

func (clearBgpVrfAfiSafiAllSoftIn *ClearBgpVrfAfiSafiAllSoftIn) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiAllSoftIn.EntityData.YFilter = clearBgpVrfAfiSafiAllSoftIn.YFilter
    clearBgpVrfAfiSafiAllSoftIn.EntityData.YangName = "clear-bgp-vrf-afi-safi-all-soft-in"
    clearBgpVrfAfiSafiAllSoftIn.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiAllSoftIn.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiAllSoftIn.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in"
    clearBgpVrfAfiSafiAllSoftIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiAllSoftIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiAllSoftIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiAllSoftIn.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiAllSoftIn.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiAllSoftIn.Input})
    clearBgpVrfAfiSafiAllSoftIn.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiAllSoftIn.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiAllSoftIn.EntityData)
}

// ClearBgpVrfAfiSafiAllSoftIn_Input
type ClearBgpVrfAfiSafiAllSoftIn_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiAllSoftIn_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-all-soft-in"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiAllSoftOut
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpVrfAfiSafiAllSoftOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiAllSoftOut_Input
}

func (clearBgpVrfAfiSafiAllSoftOut *ClearBgpVrfAfiSafiAllSoftOut) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiAllSoftOut.EntityData.YFilter = clearBgpVrfAfiSafiAllSoftOut.YFilter
    clearBgpVrfAfiSafiAllSoftOut.EntityData.YangName = "clear-bgp-vrf-afi-safi-all-soft-out"
    clearBgpVrfAfiSafiAllSoftOut.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiAllSoftOut.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiAllSoftOut.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-out"
    clearBgpVrfAfiSafiAllSoftOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiAllSoftOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiAllSoftOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiAllSoftOut.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiAllSoftOut.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiAllSoftOut.Input})
    clearBgpVrfAfiSafiAllSoftOut.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiAllSoftOut.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiAllSoftOut.EntityData)
}

// ClearBgpVrfAfiSafiAllSoftOut_Input
type ClearBgpVrfAfiSafiAllSoftOut_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiAllSoftOut_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-all-soft-out"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiAllSoft
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// 
type ClearBgpVrfAfiSafiAllSoft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiAllSoft_Input
}

func (clearBgpVrfAfiSafiAllSoft *ClearBgpVrfAfiSafiAllSoft) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiAllSoft.EntityData.YFilter = clearBgpVrfAfiSafiAllSoft.YFilter
    clearBgpVrfAfiSafiAllSoft.EntityData.YangName = "clear-bgp-vrf-afi-safi-all-soft"
    clearBgpVrfAfiSafiAllSoft.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiAllSoft.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiAllSoft.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft"
    clearBgpVrfAfiSafiAllSoft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiAllSoft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiAllSoft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiAllSoft.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiAllSoft.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiAllSoft.Input})
    clearBgpVrfAfiSafiAllSoft.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiAllSoft.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiAllSoft.EntityData)
}

// ClearBgpVrfAfiSafiAllSoft_Input
type ClearBgpVrfAfiSafiAllSoft_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiAllSoft_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-all-soft"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiIpAddrLongLivedStale
// Specify a VRF.
// Clear long-lived-stale routes.
// 
type ClearBgpVrfAfiSafiIpAddrLongLivedStale struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input
}

func (clearBgpVrfAfiSafiIpAddrLongLivedStale *ClearBgpVrfAfiSafiIpAddrLongLivedStale) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiIpAddrLongLivedStale.EntityData.YFilter = clearBgpVrfAfiSafiIpAddrLongLivedStale.YFilter
    clearBgpVrfAfiSafiIpAddrLongLivedStale.EntityData.YangName = "clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale"
    clearBgpVrfAfiSafiIpAddrLongLivedStale.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiIpAddrLongLivedStale.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiIpAddrLongLivedStale.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale"
    clearBgpVrfAfiSafiIpAddrLongLivedStale.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiIpAddrLongLivedStale.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiIpAddrLongLivedStale.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiIpAddrLongLivedStale.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiIpAddrLongLivedStale.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiIpAddrLongLivedStale.Input})
    clearBgpVrfAfiSafiIpAddrLongLivedStale.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiIpAddrLongLivedStale.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiIpAddrLongLivedStale.EntityData)
}

// ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input
type ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter
// Specify a VRF.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input
}

func (clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.YFilter = clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.YFilter
    clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.YangName = "clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter"
    clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter"
    clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.Input})
    clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.EntityData)
}

// ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input
type ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiIpAddrSoftIn
// Specify a VRF.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpVrfAfiSafiIpAddrSoftIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiIpAddrSoftIn_Input
}

func (clearBgpVrfAfiSafiIpAddrSoftIn *ClearBgpVrfAfiSafiIpAddrSoftIn) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiIpAddrSoftIn.EntityData.YFilter = clearBgpVrfAfiSafiIpAddrSoftIn.YFilter
    clearBgpVrfAfiSafiIpAddrSoftIn.EntityData.YangName = "clear-bgp-vrf-afi-safi-ip-addr-soft-in"
    clearBgpVrfAfiSafiIpAddrSoftIn.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiIpAddrSoftIn.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiIpAddrSoftIn.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in"
    clearBgpVrfAfiSafiIpAddrSoftIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiIpAddrSoftIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiIpAddrSoftIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiIpAddrSoftIn.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiIpAddrSoftIn.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiIpAddrSoftIn.Input})
    clearBgpVrfAfiSafiIpAddrSoftIn.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiIpAddrSoftIn.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiIpAddrSoftIn.EntityData)
}

// ClearBgpVrfAfiSafiIpAddrSoftIn_Input
type ClearBgpVrfAfiSafiIpAddrSoftIn_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftIn_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-ip-addr-soft-in"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiIpAddrSoftOut
// Specify a VRF.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpVrfAfiSafiIpAddrSoftOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiIpAddrSoftOut_Input
}

func (clearBgpVrfAfiSafiIpAddrSoftOut *ClearBgpVrfAfiSafiIpAddrSoftOut) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiIpAddrSoftOut.EntityData.YFilter = clearBgpVrfAfiSafiIpAddrSoftOut.YFilter
    clearBgpVrfAfiSafiIpAddrSoftOut.EntityData.YangName = "clear-bgp-vrf-afi-safi-ip-addr-soft-out"
    clearBgpVrfAfiSafiIpAddrSoftOut.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiIpAddrSoftOut.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiIpAddrSoftOut.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-out"
    clearBgpVrfAfiSafiIpAddrSoftOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiIpAddrSoftOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiIpAddrSoftOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiIpAddrSoftOut.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiIpAddrSoftOut.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiIpAddrSoftOut.Input})
    clearBgpVrfAfiSafiIpAddrSoftOut.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiIpAddrSoftOut.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiIpAddrSoftOut.EntityData)
}

// ClearBgpVrfAfiSafiIpAddrSoftOut_Input
type ClearBgpVrfAfiSafiIpAddrSoftOut_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftOut_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-ip-addr-soft-out"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiIpAddrSoft
// Specify a VRF.
// Soft reconfig.
// 
type ClearBgpVrfAfiSafiIpAddrSoft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiIpAddrSoft_Input
}

func (clearBgpVrfAfiSafiIpAddrSoft *ClearBgpVrfAfiSafiIpAddrSoft) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiIpAddrSoft.EntityData.YFilter = clearBgpVrfAfiSafiIpAddrSoft.YFilter
    clearBgpVrfAfiSafiIpAddrSoft.EntityData.YangName = "clear-bgp-vrf-afi-safi-ip-addr-soft"
    clearBgpVrfAfiSafiIpAddrSoft.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiIpAddrSoft.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiIpAddrSoft.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft"
    clearBgpVrfAfiSafiIpAddrSoft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiIpAddrSoft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiIpAddrSoft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiIpAddrSoft.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiIpAddrSoft.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiIpAddrSoft.Input})
    clearBgpVrfAfiSafiIpAddrSoft.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiIpAddrSoft.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiIpAddrSoft.EntityData)
}

// ClearBgpVrfAfiSafiIpAddrSoft_Input
type ClearBgpVrfAfiSafiIpAddrSoft_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiIpAddrSoft_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-ip-addr-soft"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiAsSoftInPrefixFilter
// Specify a VRF.
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpVrfAfiSafiAsSoftInPrefixFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input
}

func (clearBgpVrfAfiSafiAsSoftInPrefixFilter *ClearBgpVrfAfiSafiAsSoftInPrefixFilter) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiAsSoftInPrefixFilter.EntityData.YFilter = clearBgpVrfAfiSafiAsSoftInPrefixFilter.YFilter
    clearBgpVrfAfiSafiAsSoftInPrefixFilter.EntityData.YangName = "clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter"
    clearBgpVrfAfiSafiAsSoftInPrefixFilter.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiAsSoftInPrefixFilter.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiAsSoftInPrefixFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter"
    clearBgpVrfAfiSafiAsSoftInPrefixFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiAsSoftInPrefixFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiAsSoftInPrefixFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiAsSoftInPrefixFilter.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiAsSoftInPrefixFilter.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiAsSoftInPrefixFilter.Input})
    clearBgpVrfAfiSafiAsSoftInPrefixFilter.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiAsSoftInPrefixFilter.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiAsSoftInPrefixFilter.EntityData)
}

// ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input
type ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiAsSoftIn
// Specify a VRF.
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpVrfAfiSafiAsSoftIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiAsSoftIn_Input
}

func (clearBgpVrfAfiSafiAsSoftIn *ClearBgpVrfAfiSafiAsSoftIn) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiAsSoftIn.EntityData.YFilter = clearBgpVrfAfiSafiAsSoftIn.YFilter
    clearBgpVrfAfiSafiAsSoftIn.EntityData.YangName = "clear-bgp-vrf-afi-safi-as-soft-in"
    clearBgpVrfAfiSafiAsSoftIn.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiAsSoftIn.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiAsSoftIn.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in"
    clearBgpVrfAfiSafiAsSoftIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiAsSoftIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiAsSoftIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiAsSoftIn.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiAsSoftIn.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiAsSoftIn.Input})
    clearBgpVrfAfiSafiAsSoftIn.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiAsSoftIn.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiAsSoftIn.EntityData)
}

// ClearBgpVrfAfiSafiAsSoftIn_Input
type ClearBgpVrfAfiSafiAsSoftIn_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpVrfAfiSafiAsSoftIn_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-as-soft-in"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiAsSoftOut
// Specify a VRF.
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpVrfAfiSafiAsSoftOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiAsSoftOut_Input
}

func (clearBgpVrfAfiSafiAsSoftOut *ClearBgpVrfAfiSafiAsSoftOut) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiAsSoftOut.EntityData.YFilter = clearBgpVrfAfiSafiAsSoftOut.YFilter
    clearBgpVrfAfiSafiAsSoftOut.EntityData.YangName = "clear-bgp-vrf-afi-safi-as-soft-out"
    clearBgpVrfAfiSafiAsSoftOut.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiAsSoftOut.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiAsSoftOut.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-out"
    clearBgpVrfAfiSafiAsSoftOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiAsSoftOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiAsSoftOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiAsSoftOut.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiAsSoftOut.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiAsSoftOut.Input})
    clearBgpVrfAfiSafiAsSoftOut.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiAsSoftOut.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiAsSoftOut.EntityData)
}

// ClearBgpVrfAfiSafiAsSoftOut_Input
type ClearBgpVrfAfiSafiAsSoftOut_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpVrfAfiSafiAsSoftOut_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-as-soft-out"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiAsSoft
// Specify a VRF.
// Clear peers in a specific AS.
// Soft reconfig.
// 
type ClearBgpVrfAfiSafiAsSoft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiAsSoft_Input
}

func (clearBgpVrfAfiSafiAsSoft *ClearBgpVrfAfiSafiAsSoft) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiAsSoft.EntityData.YFilter = clearBgpVrfAfiSafiAsSoft.YFilter
    clearBgpVrfAfiSafiAsSoft.EntityData.YangName = "clear-bgp-vrf-afi-safi-as-soft"
    clearBgpVrfAfiSafiAsSoft.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiAsSoft.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiAsSoft.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft"
    clearBgpVrfAfiSafiAsSoft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiAsSoft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiAsSoft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiAsSoft.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiAsSoft.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiAsSoft.Input})
    clearBgpVrfAfiSafiAsSoft.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiAsSoft.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiAsSoft.EntityData)
}

// ClearBgpVrfAfiSafiAsSoft_Input
type ClearBgpVrfAfiSafiAsSoft_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpVrfAfiSafiAsSoft_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-as-soft"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("as-number", types.YLeaf{"AsNumber", input.AsNumber})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiDampeningIpv4Prefix
// Specify a VRF.
// Clear route flap dampening information.
// 
type ClearBgpVrfAfiSafiDampeningIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input
}

func (clearBgpVrfAfiSafiDampeningIpv4Prefix *ClearBgpVrfAfiSafiDampeningIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiDampeningIpv4Prefix.EntityData.YFilter = clearBgpVrfAfiSafiDampeningIpv4Prefix.YFilter
    clearBgpVrfAfiSafiDampeningIpv4Prefix.EntityData.YangName = "clear-bgp-vrf-afi-safi-dampening-ipv4-prefix"
    clearBgpVrfAfiSafiDampeningIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiDampeningIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiDampeningIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv4-prefix"
    clearBgpVrfAfiSafiDampeningIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiDampeningIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiDampeningIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiDampeningIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiDampeningIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiDampeningIpv4Prefix.Input})
    clearBgpVrfAfiSafiDampeningIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiDampeningIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiDampeningIpv4Prefix.EntityData)
}

// ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input
type ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Network and mask or masklength to clear dampening information. The
    // type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-dampening-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiDampening
// Specify a VRF.
// Clear route flap dampening information.
// 
type ClearBgpVrfAfiSafiDampening struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiDampening_Input
}

func (clearBgpVrfAfiSafiDampening *ClearBgpVrfAfiSafiDampening) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiDampening.EntityData.YFilter = clearBgpVrfAfiSafiDampening.YFilter
    clearBgpVrfAfiSafiDampening.EntityData.YangName = "clear-bgp-vrf-afi-safi-dampening"
    clearBgpVrfAfiSafiDampening.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiDampening.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiDampening.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening"
    clearBgpVrfAfiSafiDampening.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiDampening.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiDampening.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiDampening.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiDampening.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiDampening.Input})
    clearBgpVrfAfiSafiDampening.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiDampening.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiDampening.EntityData)
}

// ClearBgpVrfAfiSafiDampening_Input
type ClearBgpVrfAfiSafiDampening_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiDampening_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-dampening"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiExternalSoftInPrefixFilter
// Specify a VRF.
// Clear all external peers.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpVrfAfiSafiExternalSoftInPrefixFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input
}

func (clearBgpVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiExternalSoftInPrefixFilter.EntityData.YFilter = clearBgpVrfAfiSafiExternalSoftInPrefixFilter.YFilter
    clearBgpVrfAfiSafiExternalSoftInPrefixFilter.EntityData.YangName = "clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter"
    clearBgpVrfAfiSafiExternalSoftInPrefixFilter.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiExternalSoftInPrefixFilter.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiExternalSoftInPrefixFilter.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter"
    clearBgpVrfAfiSafiExternalSoftInPrefixFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiExternalSoftInPrefixFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiExternalSoftInPrefixFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiExternalSoftInPrefixFilter.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiExternalSoftInPrefixFilter.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiExternalSoftInPrefixFilter.Input})
    clearBgpVrfAfiSafiExternalSoftInPrefixFilter.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiExternalSoftInPrefixFilter.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiExternalSoftInPrefixFilter.EntityData)
}

// ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input
type ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiExternalSoftIn
// Specify a VRF.
// Clear all external peers.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpVrfAfiSafiExternalSoftIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiExternalSoftIn_Input
}

func (clearBgpVrfAfiSafiExternalSoftIn *ClearBgpVrfAfiSafiExternalSoftIn) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiExternalSoftIn.EntityData.YFilter = clearBgpVrfAfiSafiExternalSoftIn.YFilter
    clearBgpVrfAfiSafiExternalSoftIn.EntityData.YangName = "clear-bgp-vrf-afi-safi-external-soft-in"
    clearBgpVrfAfiSafiExternalSoftIn.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiExternalSoftIn.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiExternalSoftIn.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in"
    clearBgpVrfAfiSafiExternalSoftIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiExternalSoftIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiExternalSoftIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiExternalSoftIn.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiExternalSoftIn.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiExternalSoftIn.Input})
    clearBgpVrfAfiSafiExternalSoftIn.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiExternalSoftIn.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiExternalSoftIn.EntityData)
}

// ClearBgpVrfAfiSafiExternalSoftIn_Input
type ClearBgpVrfAfiSafiExternalSoftIn_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiExternalSoftIn_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-external-soft-in"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiExternalSoftOut
// Specify a VRF.
// Clear all external peers.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpVrfAfiSafiExternalSoftOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiExternalSoftOut_Input
}

func (clearBgpVrfAfiSafiExternalSoftOut *ClearBgpVrfAfiSafiExternalSoftOut) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiExternalSoftOut.EntityData.YFilter = clearBgpVrfAfiSafiExternalSoftOut.YFilter
    clearBgpVrfAfiSafiExternalSoftOut.EntityData.YangName = "clear-bgp-vrf-afi-safi-external-soft-out"
    clearBgpVrfAfiSafiExternalSoftOut.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiExternalSoftOut.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiExternalSoftOut.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-out"
    clearBgpVrfAfiSafiExternalSoftOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiExternalSoftOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiExternalSoftOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiExternalSoftOut.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiExternalSoftOut.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiExternalSoftOut.Input})
    clearBgpVrfAfiSafiExternalSoftOut.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiExternalSoftOut.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiExternalSoftOut.EntityData)
}

// ClearBgpVrfAfiSafiExternalSoftOut_Input
type ClearBgpVrfAfiSafiExternalSoftOut_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiExternalSoftOut_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-external-soft-out"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiExternalSoft
// Specify a VRF.
// Clear all external peers.
// Soft reconfig.
// 
type ClearBgpVrfAfiSafiExternalSoft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiExternalSoft_Input
}

func (clearBgpVrfAfiSafiExternalSoft *ClearBgpVrfAfiSafiExternalSoft) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiExternalSoft.EntityData.YFilter = clearBgpVrfAfiSafiExternalSoft.YFilter
    clearBgpVrfAfiSafiExternalSoft.EntityData.YangName = "clear-bgp-vrf-afi-safi-external-soft"
    clearBgpVrfAfiSafiExternalSoft.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiExternalSoft.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiExternalSoft.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft"
    clearBgpVrfAfiSafiExternalSoft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiExternalSoft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiExternalSoft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiExternalSoft.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiExternalSoft.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiExternalSoft.Input})
    clearBgpVrfAfiSafiExternalSoft.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiExternalSoft.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiExternalSoft.EntityData)
}

// ClearBgpVrfAfiSafiExternalSoft_Input
type ClearBgpVrfAfiSafiExternalSoft_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiExternalSoft_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-external-soft"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input
}

func (clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.YFilter = clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.YFilter
    clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.YangName = "clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"
    clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"
    clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input})
    clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.EntityData)
}

// ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input
type ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // IPv4 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})
    input.EntityData.Leafs.Append("ipv4-mask", types.YLeaf{"Ipv4Mask", input.Ipv4Mask})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiFlapStatisticsIpAddr
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpVrfAfiSafiFlapStatisticsIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input
}

func (clearBgpVrfAfiSafiFlapStatisticsIpAddr *ClearBgpVrfAfiSafiFlapStatisticsIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiFlapStatisticsIpAddr.EntityData.YFilter = clearBgpVrfAfiSafiFlapStatisticsIpAddr.YFilter
    clearBgpVrfAfiSafiFlapStatisticsIpAddr.EntityData.YangName = "clear-bgp-vrf-afi-safi-flap-statistics-ip-addr"
    clearBgpVrfAfiSafiFlapStatisticsIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiFlapStatisticsIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiFlapStatisticsIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr"
    clearBgpVrfAfiSafiFlapStatisticsIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiFlapStatisticsIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiFlapStatisticsIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiFlapStatisticsIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiFlapStatisticsIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiFlapStatisticsIpAddr.Input})
    clearBgpVrfAfiSafiFlapStatisticsIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiFlapStatisticsIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiFlapStatisticsIpAddr.EntityData)
}

// ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input
type ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-flap-statistics-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input
}

func (clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.YFilter = clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.YFilter
    clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.YangName = "clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix"
    clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix"
    clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.Input})
    clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.EntityData)
}

// ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input
type ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv4-prefix", types.YLeaf{"Ipv4Prefix", input.Ipv4Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiFlapStatisticsRegexp
// Specify a VRF.
// Clear flap statistics.
// Clear flap statistics for routes matching the regular expression.
// 
type ClearBgpVrfAfiSafiFlapStatisticsRegexp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input
}

func (clearBgpVrfAfiSafiFlapStatisticsRegexp *ClearBgpVrfAfiSafiFlapStatisticsRegexp) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiFlapStatisticsRegexp.EntityData.YFilter = clearBgpVrfAfiSafiFlapStatisticsRegexp.YFilter
    clearBgpVrfAfiSafiFlapStatisticsRegexp.EntityData.YangName = "clear-bgp-vrf-afi-safi-flap-statistics-regexp"
    clearBgpVrfAfiSafiFlapStatisticsRegexp.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiFlapStatisticsRegexp.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiFlapStatisticsRegexp.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-regexp"
    clearBgpVrfAfiSafiFlapStatisticsRegexp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiFlapStatisticsRegexp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiFlapStatisticsRegexp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiFlapStatisticsRegexp.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiFlapStatisticsRegexp.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiFlapStatisticsRegexp.Input})
    clearBgpVrfAfiSafiFlapStatisticsRegexp.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiFlapStatisticsRegexp.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiFlapStatisticsRegexp.EntityData)
}

// ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input
type ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // A regular expression to match the BGP AS paths.  Use 'ctrl-v ?' to enter
    // '?'. The type is string. This attribute is mandatory.
    RegexpPattern interface{}
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-flap-statistics-regexp"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("regexp-pattern", types.YLeaf{"RegexpPattern", input.RegexpPattern})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy
// Specify a VRF.
// Clear flap statistics.
// Clear flap statistics for routes matching the route policy.
// 
type ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input
}

func (clearBgpVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.YFilter = clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.YFilter
    clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.YangName = "clear-bgp-vrf-afi-safi-flap-statistics-route-policy"
    clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-route-policy"
    clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.Input})
    clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.EntityData)
}

// ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input
type ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route Policy name. The type is string. This attribute is mandatory.
    RoutePolicyName interface{}
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-flap-statistics-route-policy"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", input.RoutePolicyName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiFlapStatistics
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpVrfAfiSafiFlapStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiFlapStatistics_Input
}

func (clearBgpVrfAfiSafiFlapStatistics *ClearBgpVrfAfiSafiFlapStatistics) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiFlapStatistics.EntityData.YFilter = clearBgpVrfAfiSafiFlapStatistics.YFilter
    clearBgpVrfAfiSafiFlapStatistics.EntityData.YangName = "clear-bgp-vrf-afi-safi-flap-statistics"
    clearBgpVrfAfiSafiFlapStatistics.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiFlapStatistics.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiFlapStatistics.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics"
    clearBgpVrfAfiSafiFlapStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiFlapStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiFlapStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiFlapStatistics.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiFlapStatistics.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiFlapStatistics.Input})
    clearBgpVrfAfiSafiFlapStatistics.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiFlapStatistics.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiFlapStatistics.EntityData)
}

// ClearBgpVrfAfiSafiFlapStatistics_Input
type ClearBgpVrfAfiSafiFlapStatistics_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiFlapStatistics_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-flap-statistics"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiNexthopPerformanceStatistics
// Specify a VRF.
// Clear nexthop.
// Performance statistics information related to processing.
// 
type ClearBgpVrfAfiSafiNexthopPerformanceStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input
}

func (clearBgpVrfAfiSafiNexthopPerformanceStatistics *ClearBgpVrfAfiSafiNexthopPerformanceStatistics) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiNexthopPerformanceStatistics.EntityData.YFilter = clearBgpVrfAfiSafiNexthopPerformanceStatistics.YFilter
    clearBgpVrfAfiSafiNexthopPerformanceStatistics.EntityData.YangName = "clear-bgp-vrf-afi-safi-nexthop-performance-statistics"
    clearBgpVrfAfiSafiNexthopPerformanceStatistics.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiNexthopPerformanceStatistics.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiNexthopPerformanceStatistics.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-performance-statistics"
    clearBgpVrfAfiSafiNexthopPerformanceStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiNexthopPerformanceStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiNexthopPerformanceStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiNexthopPerformanceStatistics.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiNexthopPerformanceStatistics.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiNexthopPerformanceStatistics.Input})
    clearBgpVrfAfiSafiNexthopPerformanceStatistics.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiNexthopPerformanceStatistics.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiNexthopPerformanceStatistics.EntityData)
}

// ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input
type ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-nexthop-performance-statistics"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiNexthopRegistrationIpAddr
// Specify a VRF.
// Clear nexthop.
// Registration with RIB and reregister.
// 
type ClearBgpVrfAfiSafiNexthopRegistrationIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input
}

func (clearBgpVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiNexthopRegistrationIpAddr.EntityData.YFilter = clearBgpVrfAfiSafiNexthopRegistrationIpAddr.YFilter
    clearBgpVrfAfiSafiNexthopRegistrationIpAddr.EntityData.YangName = "clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr"
    clearBgpVrfAfiSafiNexthopRegistrationIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiNexthopRegistrationIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiNexthopRegistrationIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr"
    clearBgpVrfAfiSafiNexthopRegistrationIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiNexthopRegistrationIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiNexthopRegistrationIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiNexthopRegistrationIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiNexthopRegistrationIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiNexthopRegistrationIpAddr.Input})
    clearBgpVrfAfiSafiNexthopRegistrationIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiNexthopRegistrationIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiNexthopRegistrationIpAddr.EntityData)
}

// ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input
type ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Nexthop address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiSelfOriginated
// Specify a VRF.
// Clear redistributed, network and aggregate routes originated here.
// 
type ClearBgpVrfAfiSafiSelfOriginated struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiSelfOriginated_Input
}

func (clearBgpVrfAfiSafiSelfOriginated *ClearBgpVrfAfiSafiSelfOriginated) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiSelfOriginated.EntityData.YFilter = clearBgpVrfAfiSafiSelfOriginated.YFilter
    clearBgpVrfAfiSafiSelfOriginated.EntityData.YangName = "clear-bgp-vrf-afi-safi-self-originated"
    clearBgpVrfAfiSafiSelfOriginated.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiSelfOriginated.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiSelfOriginated.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-self-originated"
    clearBgpVrfAfiSafiSelfOriginated.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiSelfOriginated.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiSelfOriginated.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiSelfOriginated.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiSelfOriginated.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiSelfOriginated.Input})
    clearBgpVrfAfiSafiSelfOriginated.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiSelfOriginated.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiSelfOriginated.EntityData)
}

// ClearBgpVrfAfiSafiSelfOriginated_Input
type ClearBgpVrfAfiSafiSelfOriginated_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiSelfOriginated_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-self-originated"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiShutdown
// Specify a VRF.
// Clear all peers which were shut down due to low memory.
// 
type ClearBgpVrfAfiSafiShutdown struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiShutdown_Input
}

func (clearBgpVrfAfiSafiShutdown *ClearBgpVrfAfiSafiShutdown) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiShutdown.EntityData.YFilter = clearBgpVrfAfiSafiShutdown.YFilter
    clearBgpVrfAfiSafiShutdown.EntityData.YangName = "clear-bgp-vrf-afi-safi-shutdown"
    clearBgpVrfAfiSafiShutdown.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiShutdown.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiShutdown.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-shutdown"
    clearBgpVrfAfiSafiShutdown.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiShutdown.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiShutdown.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiShutdown.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiShutdown.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiShutdown.Input})
    clearBgpVrfAfiSafiShutdown.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiShutdown.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiShutdown.EntityData)
}

// ClearBgpVrfAfiSafiShutdown_Input
type ClearBgpVrfAfiSafiShutdown_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiShutdown_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-shutdown"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input
}

func (clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.YFilter = clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.YFilter
    clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.YangName = "clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent"
    clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent"
    clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input})
    clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input
type ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqAddressFamily
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// 
type ClearBgpVrfAfiSafiUpdateOutqAddressFamily struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input
}

func (clearBgpVrfAfiSafiUpdateOutqAddressFamily *ClearBgpVrfAfiSafiUpdateOutqAddressFamily) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiUpdateOutqAddressFamily.EntityData.YFilter = clearBgpVrfAfiSafiUpdateOutqAddressFamily.YFilter
    clearBgpVrfAfiSafiUpdateOutqAddressFamily.EntityData.YangName = "clear-bgp-vrf-afi-safi-update-outq-address-family"
    clearBgpVrfAfiSafiUpdateOutqAddressFamily.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiUpdateOutqAddressFamily.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiUpdateOutqAddressFamily.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family"
    clearBgpVrfAfiSafiUpdateOutqAddressFamily.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiUpdateOutqAddressFamily.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiUpdateOutqAddressFamily.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiUpdateOutqAddressFamily.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiUpdateOutqAddressFamily.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiUpdateOutqAddressFamily.Input})
    clearBgpVrfAfiSafiUpdateOutqAddressFamily.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiUpdateOutqAddressFamily.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiUpdateOutqAddressFamily.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input
type ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-update-outq-address-family"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YFilter = clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YangName = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input})
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
type ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// 
type ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.YFilter = clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.YFilter
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.YangName = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input})
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input
type ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.YFilter = clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.YFilter
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.YangName = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input})
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input
type ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// 
type ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.YFilter = clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.YFilter
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.YangName = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr"
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr"
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.Input})
    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input
type ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YFilter = clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YangName = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input})
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("sub-group", types.YLeaf{"SubGroup", input.SubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.YFilter = clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.YFilter
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.YangName = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input})
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("sub-group", types.YLeaf{"SubGroup", input.SubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YFilter = clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YangName = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input})
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("refresh-sub-group", types.YLeaf{"RefreshSubGroup", input.RefreshSubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YFilter = clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YangName = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input})
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("refresh-sub-group", types.YLeaf{"RefreshSubGroup", input.RefreshSubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.YFilter = clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.YFilter
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.YangName = "clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input})
    clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroup
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// 
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiUpdateOutqUpdateGroup.EntityData.YFilter = clearBgpVrfAfiSafiUpdateOutqUpdateGroup.YFilter
    clearBgpVrfAfiSafiUpdateOutqUpdateGroup.EntityData.YangName = "clear-bgp-vrf-afi-safi-update-outq-update-group"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group"
    clearBgpVrfAfiSafiUpdateOutqUpdateGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiUpdateOutqUpdateGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiUpdateOutqUpdateGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiUpdateOutqUpdateGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiUpdateOutqUpdateGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiUpdateOutqUpdateGroup.Input})
    clearBgpVrfAfiSafiUpdateOutqUpdateGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiUpdateOutqUpdateGroup.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiUpdateOutqUpdateGroup.EntityData)
}

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-update-outq-update-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiDampeningIpv6Prefix
// Specify a VRF.
// Clear route flap dampening information.
// 
type ClearBgpVrfAfiSafiDampeningIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input
}

func (clearBgpVrfAfiSafiDampeningIpv6Prefix *ClearBgpVrfAfiSafiDampeningIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiDampeningIpv6Prefix.EntityData.YFilter = clearBgpVrfAfiSafiDampeningIpv6Prefix.YFilter
    clearBgpVrfAfiSafiDampeningIpv6Prefix.EntityData.YangName = "clear-bgp-vrf-afi-safi-dampening-ipv6-prefix"
    clearBgpVrfAfiSafiDampeningIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiDampeningIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiDampeningIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv6-prefix"
    clearBgpVrfAfiSafiDampeningIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiDampeningIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiDampeningIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiDampeningIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiDampeningIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiDampeningIpv6Prefix.Input})
    clearBgpVrfAfiSafiDampeningIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiDampeningIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiDampeningIpv6Prefix.EntityData)
}

// ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input
type ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 Network and mask or masklength to clear dampening information. The
    // type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-dampening-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input
}

func (clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix) GetEntityData() *types.CommonEntityData {
    clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.YFilter = clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.YFilter
    clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.YangName = "clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix"
    clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix"
    clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.Input})
    clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData.YListKeys = []string {}

    return &(clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.EntityData)
}

// ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input
type ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("afi-safi-name", types.YLeaf{"AfiSafiName", input.AfiSafiName})
    input.EntityData.Leafs.Append("ipv6-prefix", types.YLeaf{"Ipv6Prefix", input.Ipv6Prefix})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfNexthopPerformanceStatistics
// Specify a VRF.
// Clear nexthop.
// Performance statistics information related to processing.
// 
type ClearBgpVrfNexthopPerformanceStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfNexthopPerformanceStatistics_Input
}

func (clearBgpVrfNexthopPerformanceStatistics *ClearBgpVrfNexthopPerformanceStatistics) GetEntityData() *types.CommonEntityData {
    clearBgpVrfNexthopPerformanceStatistics.EntityData.YFilter = clearBgpVrfNexthopPerformanceStatistics.YFilter
    clearBgpVrfNexthopPerformanceStatistics.EntityData.YangName = "clear-bgp-vrf-nexthop-performance-statistics"
    clearBgpVrfNexthopPerformanceStatistics.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfNexthopPerformanceStatistics.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfNexthopPerformanceStatistics.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-performance-statistics"
    clearBgpVrfNexthopPerformanceStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfNexthopPerformanceStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfNexthopPerformanceStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfNexthopPerformanceStatistics.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfNexthopPerformanceStatistics.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfNexthopPerformanceStatistics.Input})
    clearBgpVrfNexthopPerformanceStatistics.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfNexthopPerformanceStatistics.EntityData.YListKeys = []string {}

    return &(clearBgpVrfNexthopPerformanceStatistics.EntityData)
}

// ClearBgpVrfNexthopPerformanceStatistics_Input
type ClearBgpVrfNexthopPerformanceStatistics_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfNexthopPerformanceStatistics_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-nexthop-performance-statistics"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfNexthopRegistrationIpAddr
// Specify a VRF.
// Clear nexthop.
// Registration with RIB and reregister.
// 
type ClearBgpVrfNexthopRegistrationIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfNexthopRegistrationIpAddr_Input
}

func (clearBgpVrfNexthopRegistrationIpAddr *ClearBgpVrfNexthopRegistrationIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpVrfNexthopRegistrationIpAddr.EntityData.YFilter = clearBgpVrfNexthopRegistrationIpAddr.YFilter
    clearBgpVrfNexthopRegistrationIpAddr.EntityData.YangName = "clear-bgp-vrf-nexthop-registration-ip-addr"
    clearBgpVrfNexthopRegistrationIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfNexthopRegistrationIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfNexthopRegistrationIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-registration-ip-addr"
    clearBgpVrfNexthopRegistrationIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfNexthopRegistrationIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfNexthopRegistrationIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfNexthopRegistrationIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfNexthopRegistrationIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfNexthopRegistrationIpAddr.Input})
    clearBgpVrfNexthopRegistrationIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfNexthopRegistrationIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpVrfNexthopRegistrationIpAddr.EntityData)
}

// ClearBgpVrfNexthopRegistrationIpAddr_Input
type ClearBgpVrfNexthopRegistrationIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Nexthop address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfNexthopRegistrationIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-nexthop-registration-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfPeerDropsAll
// Specify a VRF.
// Clear established/dropped counters for a peer.
// All Neighbors.
// 
type ClearBgpVrfPeerDropsAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfPeerDropsAll_Input
}

func (clearBgpVrfPeerDropsAll *ClearBgpVrfPeerDropsAll) GetEntityData() *types.CommonEntityData {
    clearBgpVrfPeerDropsAll.EntityData.YFilter = clearBgpVrfPeerDropsAll.YFilter
    clearBgpVrfPeerDropsAll.EntityData.YangName = "clear-bgp-vrf-peer-drops-all"
    clearBgpVrfPeerDropsAll.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfPeerDropsAll.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfPeerDropsAll.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-all"
    clearBgpVrfPeerDropsAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfPeerDropsAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfPeerDropsAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfPeerDropsAll.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfPeerDropsAll.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfPeerDropsAll.Input})
    clearBgpVrfPeerDropsAll.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfPeerDropsAll.EntityData.YListKeys = []string {}

    return &(clearBgpVrfPeerDropsAll.EntityData)
}

// ClearBgpVrfPeerDropsAll_Input
type ClearBgpVrfPeerDropsAll_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfPeerDropsAll_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-peer-drops-all"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfPeerDropsIpAddr
// Specify a VRF.
// Clear established/dropped counters for a peer.
// 
type ClearBgpVrfPeerDropsIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfPeerDropsIpAddr_Input
}

func (clearBgpVrfPeerDropsIpAddr *ClearBgpVrfPeerDropsIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpVrfPeerDropsIpAddr.EntityData.YFilter = clearBgpVrfPeerDropsIpAddr.YFilter
    clearBgpVrfPeerDropsIpAddr.EntityData.YangName = "clear-bgp-vrf-peer-drops-ip-addr"
    clearBgpVrfPeerDropsIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfPeerDropsIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfPeerDropsIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-ip-addr"
    clearBgpVrfPeerDropsIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfPeerDropsIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfPeerDropsIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfPeerDropsIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfPeerDropsIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfPeerDropsIpAddr.Input})
    clearBgpVrfPeerDropsIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfPeerDropsIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpVrfPeerDropsIpAddr.EntityData)
}

// ClearBgpVrfPeerDropsIpAddr_Input
type ClearBgpVrfPeerDropsIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // BGP neighbor IP address. The type is one of the following types: string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfPeerDropsIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-peer-drops-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfPerformanceStatistics
// Specify a VRF.
// Clear performance statistics.
// 
type ClearBgpVrfPerformanceStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfPerformanceStatistics_Input
}

func (clearBgpVrfPerformanceStatistics *ClearBgpVrfPerformanceStatistics) GetEntityData() *types.CommonEntityData {
    clearBgpVrfPerformanceStatistics.EntityData.YFilter = clearBgpVrfPerformanceStatistics.YFilter
    clearBgpVrfPerformanceStatistics.EntityData.YangName = "clear-bgp-vrf-performance-statistics"
    clearBgpVrfPerformanceStatistics.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfPerformanceStatistics.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfPerformanceStatistics.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-performance-statistics"
    clearBgpVrfPerformanceStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfPerformanceStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfPerformanceStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfPerformanceStatistics.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfPerformanceStatistics.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfPerformanceStatistics.Input})
    clearBgpVrfPerformanceStatistics.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfPerformanceStatistics.EntityData.YListKeys = []string {}

    return &(clearBgpVrfPerformanceStatistics.EntityData)
}

// ClearBgpVrfPerformanceStatistics_Input
type ClearBgpVrfPerformanceStatistics_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfPerformanceStatistics_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-performance-statistics"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfShutdown
// Specify a VRF.
// Clear all peers which were shut down due to low memory.
// 
type ClearBgpVrfShutdown struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfShutdown_Input
}

func (clearBgpVrfShutdown *ClearBgpVrfShutdown) GetEntityData() *types.CommonEntityData {
    clearBgpVrfShutdown.EntityData.YFilter = clearBgpVrfShutdown.YFilter
    clearBgpVrfShutdown.EntityData.YangName = "clear-bgp-vrf-shutdown"
    clearBgpVrfShutdown.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfShutdown.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfShutdown.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-shutdown"
    clearBgpVrfShutdown.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfShutdown.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfShutdown.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfShutdown.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfShutdown.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfShutdown.Input})
    clearBgpVrfShutdown.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfShutdown.EntityData.YListKeys = []string {}

    return &(clearBgpVrfShutdown.EntityData)
}

// ClearBgpVrfShutdown_Input
type ClearBgpVrfShutdown_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfShutdown_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-shutdown"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfUpdateOutqAddressFamilyUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfUpdateOutqAddressFamilyUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input
}

func (clearBgpVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpVrfUpdateOutqAddressFamilyUpdateParent.EntityData.YFilter = clearBgpVrfUpdateOutqAddressFamilyUpdateParent.YFilter
    clearBgpVrfUpdateOutqAddressFamilyUpdateParent.EntityData.YangName = "clear-bgp-vrf-update-outq-address-family-update-parent"
    clearBgpVrfUpdateOutqAddressFamilyUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfUpdateOutqAddressFamilyUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfUpdateOutqAddressFamilyUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family-update-parent"
    clearBgpVrfUpdateOutqAddressFamilyUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfUpdateOutqAddressFamilyUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfUpdateOutqAddressFamilyUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfUpdateOutqAddressFamilyUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfUpdateOutqAddressFamilyUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfUpdateOutqAddressFamilyUpdateParent.Input})
    clearBgpVrfUpdateOutqAddressFamilyUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfUpdateOutqAddressFamilyUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpVrfUpdateOutqAddressFamilyUpdateParent.EntityData)
}

// ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input
type ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-update-outq-address-family-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfUpdateOutqAddressFamily
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// 
type ClearBgpVrfUpdateOutqAddressFamily struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqAddressFamily_Input
}

func (clearBgpVrfUpdateOutqAddressFamily *ClearBgpVrfUpdateOutqAddressFamily) GetEntityData() *types.CommonEntityData {
    clearBgpVrfUpdateOutqAddressFamily.EntityData.YFilter = clearBgpVrfUpdateOutqAddressFamily.YFilter
    clearBgpVrfUpdateOutqAddressFamily.EntityData.YangName = "clear-bgp-vrf-update-outq-address-family"
    clearBgpVrfUpdateOutqAddressFamily.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfUpdateOutqAddressFamily.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfUpdateOutqAddressFamily.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family"
    clearBgpVrfUpdateOutqAddressFamily.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfUpdateOutqAddressFamily.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfUpdateOutqAddressFamily.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfUpdateOutqAddressFamily.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfUpdateOutqAddressFamily.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfUpdateOutqAddressFamily.Input})
    clearBgpVrfUpdateOutqAddressFamily.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfUpdateOutqAddressFamily.EntityData.YListKeys = []string {}

    return &(clearBgpVrfUpdateOutqAddressFamily.EntityData)
}

// ClearBgpVrfUpdateOutqAddressFamily_Input
type ClearBgpVrfUpdateOutqAddressFamily_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfUpdateOutqAddressFamily_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-update-outq-address-family"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
}

func (clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YFilter = clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter
    clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YangName = "clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"
    clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"
    clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input})
    clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.EntityData)
}

// ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
type ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfUpdateOutqNeighborIpAddrRefresh
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// 
type ClearBgpVrfUpdateOutqNeighborIpAddrRefresh struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input
}

func (clearBgpVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh) GetEntityData() *types.CommonEntityData {
    clearBgpVrfUpdateOutqNeighborIpAddrRefresh.EntityData.YFilter = clearBgpVrfUpdateOutqNeighborIpAddrRefresh.YFilter
    clearBgpVrfUpdateOutqNeighborIpAddrRefresh.EntityData.YangName = "clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh"
    clearBgpVrfUpdateOutqNeighborIpAddrRefresh.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfUpdateOutqNeighborIpAddrRefresh.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfUpdateOutqNeighborIpAddrRefresh.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh"
    clearBgpVrfUpdateOutqNeighborIpAddrRefresh.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfUpdateOutqNeighborIpAddrRefresh.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfUpdateOutqNeighborIpAddrRefresh.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfUpdateOutqNeighborIpAddrRefresh.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfUpdateOutqNeighborIpAddrRefresh.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfUpdateOutqNeighborIpAddrRefresh.Input})
    clearBgpVrfUpdateOutqNeighborIpAddrRefresh.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfUpdateOutqNeighborIpAddrRefresh.EntityData.YListKeys = []string {}

    return &(clearBgpVrfUpdateOutqNeighborIpAddrRefresh.EntityData)
}

// ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input
type ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input
}

func (clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.YFilter = clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.YFilter
    clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.YangName = "clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent"
    clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent"
    clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.Input})
    clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.EntityData)
}

// ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input
type ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfUpdateOutqNeighborIpAddr
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// 
type ClearBgpVrfUpdateOutqNeighborIpAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqNeighborIpAddr_Input
}

func (clearBgpVrfUpdateOutqNeighborIpAddr *ClearBgpVrfUpdateOutqNeighborIpAddr) GetEntityData() *types.CommonEntityData {
    clearBgpVrfUpdateOutqNeighborIpAddr.EntityData.YFilter = clearBgpVrfUpdateOutqNeighborIpAddr.YFilter
    clearBgpVrfUpdateOutqNeighborIpAddr.EntityData.YangName = "clear-bgp-vrf-update-outq-neighbor-ip-addr"
    clearBgpVrfUpdateOutqNeighborIpAddr.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfUpdateOutqNeighborIpAddr.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfUpdateOutqNeighborIpAddr.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr"
    clearBgpVrfUpdateOutqNeighborIpAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfUpdateOutqNeighborIpAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfUpdateOutqNeighborIpAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfUpdateOutqNeighborIpAddr.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfUpdateOutqNeighborIpAddr.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfUpdateOutqNeighborIpAddr.Input})
    clearBgpVrfUpdateOutqNeighborIpAddr.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfUpdateOutqNeighborIpAddr.EntityData.YListKeys = []string {}

    return &(clearBgpVrfUpdateOutqNeighborIpAddr.EntityData)
}

// ClearBgpVrfUpdateOutqNeighborIpAddr_Input
type ClearBgpVrfUpdateOutqNeighborIpAddr_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddr_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-update-outq-neighbor-ip-addr"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("ip-addr", types.YLeaf{"IpAddr", input.IpAddr})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YFilter = clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter
    clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YangName = "clear-bgp-vrf-update-outq-update-group-sub-group-update-parent"
    clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-update-parent"
    clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input})
    clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.EntityData)
}

// ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input
type ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-update-outq-update-group-sub-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("sub-group", types.YLeaf{"SubGroup", input.SubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfUpdateOutqUpdateGroupSubGroup
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpVrfUpdateOutqUpdateGroupSubGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroup) GetEntityData() *types.CommonEntityData {
    clearBgpVrfUpdateOutqUpdateGroupSubGroup.EntityData.YFilter = clearBgpVrfUpdateOutqUpdateGroupSubGroup.YFilter
    clearBgpVrfUpdateOutqUpdateGroupSubGroup.EntityData.YangName = "clear-bgp-vrf-update-outq-update-group-sub-group"
    clearBgpVrfUpdateOutqUpdateGroupSubGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfUpdateOutqUpdateGroupSubGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfUpdateOutqUpdateGroupSubGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group"
    clearBgpVrfUpdateOutqUpdateGroupSubGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfUpdateOutqUpdateGroupSubGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfUpdateOutqUpdateGroupSubGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfUpdateOutqUpdateGroupSubGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfUpdateOutqUpdateGroupSubGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfUpdateOutqUpdateGroupSubGroup.Input})
    clearBgpVrfUpdateOutqUpdateGroupSubGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfUpdateOutqUpdateGroupSubGroup.EntityData.YListKeys = []string {}

    return &(clearBgpVrfUpdateOutqUpdateGroupSubGroup.EntityData)
}

// ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input
type ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-update-outq-update-group-sub-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("sub-group", types.YLeaf{"SubGroup", input.SubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YFilter = clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YangName = "clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input})
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.EntityData)
}

// ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
type ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("refresh-sub-group", types.YLeaf{"RefreshSubGroup", input.RefreshSubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetEntityData() *types.CommonEntityData {
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YFilter = clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YangName = "clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group"
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group"
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input})
    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData.YListKeys = []string {}

    return &(clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.EntityData)
}

// ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
type ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})
    input.EntityData.Leafs.Append("refresh-sub-group", types.YLeaf{"RefreshSubGroup", input.RefreshSubGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfUpdateOutqUpdateGroupUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfUpdateOutqUpdateGroupUpdateParent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input
}

func (clearBgpVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent) GetEntityData() *types.CommonEntityData {
    clearBgpVrfUpdateOutqUpdateGroupUpdateParent.EntityData.YFilter = clearBgpVrfUpdateOutqUpdateGroupUpdateParent.YFilter
    clearBgpVrfUpdateOutqUpdateGroupUpdateParent.EntityData.YangName = "clear-bgp-vrf-update-outq-update-group-update-parent"
    clearBgpVrfUpdateOutqUpdateGroupUpdateParent.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfUpdateOutqUpdateGroupUpdateParent.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfUpdateOutqUpdateGroupUpdateParent.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-update-parent"
    clearBgpVrfUpdateOutqUpdateGroupUpdateParent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfUpdateOutqUpdateGroupUpdateParent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfUpdateOutqUpdateGroupUpdateParent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfUpdateOutqUpdateGroupUpdateParent.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfUpdateOutqUpdateGroupUpdateParent.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfUpdateOutqUpdateGroupUpdateParent.Input})
    clearBgpVrfUpdateOutqUpdateGroupUpdateParent.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfUpdateOutqUpdateGroupUpdateParent.EntityData.YListKeys = []string {}

    return &(clearBgpVrfUpdateOutqUpdateGroupUpdateParent.EntityData)
}

// ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input
type ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-update-outq-update-group-update-parent"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

// ClearBgpVrfUpdateOutqUpdateGroup
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// 
type ClearBgpVrfUpdateOutqUpdateGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqUpdateGroup_Input
}

func (clearBgpVrfUpdateOutqUpdateGroup *ClearBgpVrfUpdateOutqUpdateGroup) GetEntityData() *types.CommonEntityData {
    clearBgpVrfUpdateOutqUpdateGroup.EntityData.YFilter = clearBgpVrfUpdateOutqUpdateGroup.YFilter
    clearBgpVrfUpdateOutqUpdateGroup.EntityData.YangName = "clear-bgp-vrf-update-outq-update-group"
    clearBgpVrfUpdateOutqUpdateGroup.EntityData.BundleName = "cisco_ios_xr"
    clearBgpVrfUpdateOutqUpdateGroup.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-act"
    clearBgpVrfUpdateOutqUpdateGroup.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group"
    clearBgpVrfUpdateOutqUpdateGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clearBgpVrfUpdateOutqUpdateGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clearBgpVrfUpdateOutqUpdateGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clearBgpVrfUpdateOutqUpdateGroup.EntityData.Children = types.NewOrderedMap()
    clearBgpVrfUpdateOutqUpdateGroup.EntityData.Children.Append("input", types.YChild{"Input", &clearBgpVrfUpdateOutqUpdateGroup.Input})
    clearBgpVrfUpdateOutqUpdateGroup.EntityData.Leafs = types.NewOrderedMap()

    clearBgpVrfUpdateOutqUpdateGroup.EntityData.YListKeys = []string {}

    return &(clearBgpVrfUpdateOutqUpdateGroup.EntityData)
}

// ClearBgpVrfUpdateOutqUpdateGroup_Input
type ClearBgpVrfUpdateOutqUpdateGroup_Input struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpVrfUpdateOutqUpdateGroup_Input) GetEntityData() *types.CommonEntityData {
    input.EntityData.YFilter = input.YFilter
    input.EntityData.YangName = "input"
    input.EntityData.BundleName = "cisco_ios_xr"
    input.EntityData.ParentYangName = "clear-bgp-vrf-update-outq-update-group"
    input.EntityData.SegmentPath = "input"
    input.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    input.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    input.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    input.EntityData.Children = types.NewOrderedMap()
    input.EntityData.Leafs = types.NewOrderedMap()
    input.EntityData.Leafs.Append("vrf-all", types.YLeaf{"VrfAll", input.VrfAll})
    input.EntityData.Leafs.Append("update-group", types.YLeaf{"UpdateGroup", input.UpdateGroup})

    input.EntityData.YListKeys = []string {}

    return &(input.EntityData)
}

