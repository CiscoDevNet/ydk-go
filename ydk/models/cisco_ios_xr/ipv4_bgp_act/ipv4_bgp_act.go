// This module contains a collection of YANG definitions
// for Cisco IOS-XR action package configuration.
// 
// Copyright (c) 2016-2017 by Cisco Systems, Inc.
// All rights reserved.
package ipv4_bgp_act

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ipv4_bgp_act"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-all-graceful}", reflect.TypeOf(ClearBgpAllGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-all-graceful", reflect.TypeOf(ClearBgpAllGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-all}", reflect.TypeOf(ClearBgpAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-all", reflect.TypeOf(ClearBgpAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-ip-addr-graceful}", reflect.TypeOf(ClearBgpIpAddrGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-graceful", reflect.TypeOf(ClearBgpIpAddrGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-ip-addr-long-lived-stale}", reflect.TypeOf(ClearBgpIpAddrLongLivedStale{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-long-lived-stale", reflect.TypeOf(ClearBgpIpAddrLongLivedStale{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-ip-addr}", reflect.TypeOf(ClearBgpIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr", reflect.TypeOf(ClearBgpIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-all-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpAfiSafiAllSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in-prefix-filter", reflect.TypeOf(ClearBgpAfiSafiAllSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-all-soft-in}", reflect.TypeOf(ClearBgpAfiSafiAllSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in", reflect.TypeOf(ClearBgpAfiSafiAllSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-all-soft-out}", reflect.TypeOf(ClearBgpAfiSafiAllSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-out", reflect.TypeOf(ClearBgpAfiSafiAllSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-all-soft}", reflect.TypeOf(ClearBgpAfiSafiAllSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft", reflect.TypeOf(ClearBgpAfiSafiAllSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-ip-addr-long-lived-stale}", reflect.TypeOf(ClearBgpAfiSafiIpAddrLongLivedStale{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-long-lived-stale", reflect.TypeOf(ClearBgpAfiSafiIpAddrLongLivedStale{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpAfiSafiIpAddrSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter", reflect.TypeOf(ClearBgpAfiSafiIpAddrSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-ip-addr-soft-in}", reflect.TypeOf(ClearBgpAfiSafiIpAddrSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in", reflect.TypeOf(ClearBgpAfiSafiIpAddrSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-ip-addr-soft-out}", reflect.TypeOf(ClearBgpAfiSafiIpAddrSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-out", reflect.TypeOf(ClearBgpAfiSafiIpAddrSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-ip-addr-soft}", reflect.TypeOf(ClearBgpAfiSafiIpAddrSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft", reflect.TypeOf(ClearBgpAfiSafiIpAddrSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-as-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpAfiSafiAsSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in-prefix-filter", reflect.TypeOf(ClearBgpAfiSafiAsSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-as-soft-in}", reflect.TypeOf(ClearBgpAfiSafiAsSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in", reflect.TypeOf(ClearBgpAfiSafiAsSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-as-soft-out}", reflect.TypeOf(ClearBgpAfiSafiAsSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-out", reflect.TypeOf(ClearBgpAfiSafiAsSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-as-soft}", reflect.TypeOf(ClearBgpAfiSafiAsSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft", reflect.TypeOf(ClearBgpAfiSafiAsSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-dampening-ip-prefix}", reflect.TypeOf(ClearBgpAfiSafiDampeningIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ip-prefix", reflect.TypeOf(ClearBgpAfiSafiDampeningIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-dampening}", reflect.TypeOf(ClearBgpAfiSafiDampening{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening", reflect.TypeOf(ClearBgpAfiSafiDampening{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-external-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpAfiSafiExternalSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in-prefix-filter", reflect.TypeOf(ClearBgpAfiSafiExternalSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-external-soft-in}", reflect.TypeOf(ClearBgpAfiSafiExternalSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in", reflect.TypeOf(ClearBgpAfiSafiExternalSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-external-soft-out}", reflect.TypeOf(ClearBgpAfiSafiExternalSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-out", reflect.TypeOf(ClearBgpAfiSafiExternalSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-external-soft}", reflect.TypeOf(ClearBgpAfiSafiExternalSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft", reflect.TypeOf(ClearBgpAfiSafiExternalSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask}", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-flap-statistics-ip-addr}", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-flap-statistics-ip-prefix}", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-prefix", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-flap-statistics-regexp}", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsRegexp{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-regexp", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsRegexp{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-flap-statistics-route-policy}", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsRoutePolicy{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-route-policy", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsRoutePolicy{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-flap-statistics}", reflect.TypeOf(ClearBgpAfiSafiFlapStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics", reflect.TypeOf(ClearBgpAfiSafiFlapStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-nexthop-performance-statistics}", reflect.TypeOf(ClearBgpAfiSafiNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-performance-statistics", reflect.TypeOf(ClearBgpAfiSafiNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-nexthop-registration-ip-addr}", reflect.TypeOf(ClearBgpAfiSafiNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-registration-ip-addr", reflect.TypeOf(ClearBgpAfiSafiNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-self-originated}", reflect.TypeOf(ClearBgpAfiSafiSelfOriginated{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-self-originated", reflect.TypeOf(ClearBgpAfiSafiSelfOriginated{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-shutdown}", reflect.TypeOf(ClearBgpAfiSafiShutdown{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-shutdown", reflect.TypeOf(ClearBgpAfiSafiShutdown{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-address-family-update-parent}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family-update-parent", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-address-family}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-neighbor-ip-addr}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-update-group-sub-group}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-update-group-update-parent}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-update-parent", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-update-outq-update-group}", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group", reflect.TypeOf(ClearBgpAfiSafiUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-as-graceful}", reflect.TypeOf(ClearBgpAsGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as-graceful", reflect.TypeOf(ClearBgpAsGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-as}", reflect.TypeOf(ClearBgpAs{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as", reflect.TypeOf(ClearBgpAs{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpBestpathIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpBestpathIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-ip-addr}", reflect.TypeOf(ClearBgpBestpathIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr", reflect.TypeOf(ClearBgpBestpathIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-ip-prefix}", reflect.TypeOf(ClearBgpBestpathIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-prefix", reflect.TypeOf(ClearBgpBestpathIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpBestpathAfiSafiIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ip-addr}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr", reflect.TypeOf(ClearBgpBestpathAfiSafiIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ip-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr}", reflect.TypeOf(ClearBgpBestpathAfiSafiBridgeDomainIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr", reflect.TypeOf(ClearBgpBestpathAfiSafiBridgeDomainIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiBridgeDomainIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiBridgeDomainIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-ip-addr}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-ip-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ipv4-addr}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ipv4-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-ipv4-addr}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-vrf-ipv4-addr}", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-network}", reflect.TypeOf(ClearBgpBestpathAfiSafiNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-network", reflect.TypeOf(ClearBgpBestpathAfiSafiNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-network}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-network", reflect.TypeOf(ClearBgpBestpathAfiSafiRdNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-vrf-network}", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-network", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rt-constraint-network}", reflect.TypeOf(ClearBgpBestpathAfiSafiRtConstraintNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rt-constraint-network", reflect.TypeOf(ClearBgpBestpathAfiSafiRtConstraintNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ipv4-tunnel-network}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv4TunnelNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-tunnel-network", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv4TunnelNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ipv6-addr}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-ipv6-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd}", reflect.TypeOf(ClearBgpBestpathAfiSafiRd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd", reflect.TypeOf(ClearBgpBestpathAfiSafiRd{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-vrf}", reflect.TypeOf(ClearBgpBestpathAfiSafiVrf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf", reflect.TypeOf(ClearBgpBestpathAfiSafiVrf{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi}", reflect.TypeOf(ClearBgpBestpathAfiSafi{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi", reflect.TypeOf(ClearBgpBestpathAfiSafi{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-sr-policy-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiSrPolicyPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-sr-policy-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiSrPolicyPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-ipv4-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiMp2MpIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiMp2MpIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-ipv6-addr}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-rd-ipv6-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiRdIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-vrf-ipv6-addr}", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix}", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix", reflect.TypeOf(ClearBgpBestpathAfiSafiVrfIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpBestpathVrfIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpBestpathVrfIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-ip-addr}", reflect.TypeOf(ClearBgpBestpathVrfIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr", reflect.TypeOf(ClearBgpBestpathVrfIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-ip-prefix}", reflect.TypeOf(ClearBgpBestpathVrfIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-prefix", reflect.TypeOf(ClearBgpBestpathVrfIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-ipv4-addr}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-network}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-network", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-rd-network}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiRdNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd-network", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiRdNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-vrf-network}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf-network", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-ipv6-addr}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-rd}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiRd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiRd{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi-vrf}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiVrf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf", reflect.TypeOf(ClearBgpBestpathVrfAfiSafiVrf{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-bestpath-vrf-afi-safi}", reflect.TypeOf(ClearBgpBestpathVrfAfiSafi{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi", reflect.TypeOf(ClearBgpBestpathVrfAfiSafi{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-external-graceful}", reflect.TypeOf(ClearBgpExternalGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-external-graceful", reflect.TypeOf(ClearBgpExternalGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-external}", reflect.TypeOf(ClearBgpExternal{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-external", reflect.TypeOf(ClearBgpExternal{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-all-graceful}", reflect.TypeOf(ClearBgpInstanceAllGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all-graceful", reflect.TypeOf(ClearBgpInstanceAllGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-all}", reflect.TypeOf(ClearBgpInstanceAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all", reflect.TypeOf(ClearBgpInstanceAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-ip-addr-graceful}", reflect.TypeOf(ClearBgpInstanceIpAddrGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-graceful", reflect.TypeOf(ClearBgpInstanceIpAddrGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-ip-addr-long-lived-stale}", reflect.TypeOf(ClearBgpInstanceIpAddrLongLivedStale{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-long-lived-stale", reflect.TypeOf(ClearBgpInstanceIpAddrLongLivedStale{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-ip-addr}", reflect.TypeOf(ClearBgpInstanceIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr", reflect.TypeOf(ClearBgpInstanceIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-all-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpInstanceAfiSafiAllSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in-prefix-filter", reflect.TypeOf(ClearBgpInstanceAfiSafiAllSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-all-soft-in}", reflect.TypeOf(ClearBgpInstanceAfiSafiAllSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in", reflect.TypeOf(ClearBgpInstanceAfiSafiAllSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-all-soft-out}", reflect.TypeOf(ClearBgpInstanceAfiSafiAllSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-out", reflect.TypeOf(ClearBgpInstanceAfiSafiAllSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-all-soft}", reflect.TypeOf(ClearBgpInstanceAfiSafiAllSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft", reflect.TypeOf(ClearBgpInstanceAfiSafiAllSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-ip-addr-long-lived-stale}", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrLongLivedStale{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-long-lived-stale", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrLongLivedStale{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-ip-addr-soft-in}", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-ip-addr-soft-out}", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-out", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-ip-addr-soft}", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft", reflect.TypeOf(ClearBgpInstanceAfiSafiIpAddrSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-as-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpInstanceAfiSafiAsSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in-prefix-filter", reflect.TypeOf(ClearBgpInstanceAfiSafiAsSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-as-soft-in}", reflect.TypeOf(ClearBgpInstanceAfiSafiAsSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in", reflect.TypeOf(ClearBgpInstanceAfiSafiAsSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-as-soft-out}", reflect.TypeOf(ClearBgpInstanceAfiSafiAsSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-out", reflect.TypeOf(ClearBgpInstanceAfiSafiAsSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-as-soft}", reflect.TypeOf(ClearBgpInstanceAfiSafiAsSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft", reflect.TypeOf(ClearBgpInstanceAfiSafiAsSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-dampening-ip-prefix}", reflect.TypeOf(ClearBgpInstanceAfiSafiDampeningIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ip-prefix", reflect.TypeOf(ClearBgpInstanceAfiSafiDampeningIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-dampening}", reflect.TypeOf(ClearBgpInstanceAfiSafiDampening{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening", reflect.TypeOf(ClearBgpInstanceAfiSafiDampening{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-external-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in-prefix-filter", reflect.TypeOf(ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-external-soft-in}", reflect.TypeOf(ClearBgpInstanceAfiSafiExternalSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in", reflect.TypeOf(ClearBgpInstanceAfiSafiExternalSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-external-soft-out}", reflect.TypeOf(ClearBgpInstanceAfiSafiExternalSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-out", reflect.TypeOf(ClearBgpInstanceAfiSafiExternalSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-external-soft}", reflect.TypeOf(ClearBgpInstanceAfiSafiExternalSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft", reflect.TypeOf(ClearBgpInstanceAfiSafiExternalSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-flap-statistics-ip-addr}", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-flap-statistics-ip-prefix}", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-prefix", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-flap-statistics-regexp}", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsRegexp{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-regexp", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsRegexp{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-flap-statistics-route-policy}", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-route-policy", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-flap-statistics}", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-nexthop-performance-statistics}", reflect.TypeOf(ClearBgpInstanceAfiSafiNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-performance-statistics", reflect.TypeOf(ClearBgpInstanceAfiSafiNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-nexthop-registration-ip-addr}", reflect.TypeOf(ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-registration-ip-addr", reflect.TypeOf(ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-self-originated}", reflect.TypeOf(ClearBgpInstanceAfiSafiSelfOriginated{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-self-originated", reflect.TypeOf(ClearBgpInstanceAfiSafiSelfOriginated{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-shutdown}", reflect.TypeOf(ClearBgpInstanceAfiSafiShutdown{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-shutdown", reflect.TypeOf(ClearBgpInstanceAfiSafiShutdown{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-address-family-update-parent}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family-update-parent", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-address-family}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-update-group-sub-group}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-update-group-update-parent}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-update-parent", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-update-outq-update-group}", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group", reflect.TypeOf(ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-as-graceful}", reflect.TypeOf(ClearBgpInstanceAsGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as-graceful", reflect.TypeOf(ClearBgpInstanceAsGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-as}", reflect.TypeOf(ClearBgpInstanceAs{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as", reflect.TypeOf(ClearBgpInstanceAs{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceBestpathIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceBestpathIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-ip-addr}", reflect.TypeOf(ClearBgpInstanceBestpathIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr", reflect.TypeOf(ClearBgpInstanceBestpathIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-ip-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-prefix", reflect.TypeOf(ClearBgpInstanceBestpathIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ip-addr}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ip-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-ip-addr}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ipv4-addr}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-network}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-network", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-network}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-network", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-vrf-network}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-network", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rt-constraint-network}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rt-constraint-network", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ipv6-addr}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRd{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-vrf}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrf{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafi{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafi{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceBestpathVrfIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceBestpathVrfIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-ip-addr}", reflect.TypeOf(ClearBgpInstanceBestpathVrfIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr", reflect.TypeOf(ClearBgpInstanceBestpathVrfIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-ip-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathVrfIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-prefix", reflect.TypeOf(ClearBgpInstanceBestpathVrfIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-network}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-network", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-rd-network}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiRdNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd-network", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiRdNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-rd}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiRd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiRd{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi-vrf}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiVrf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafiVrf{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-bestpath-vrf-afi-safi}", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafi{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi", reflect.TypeOf(ClearBgpInstanceBestpathVrfAfiSafi{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-external-graceful}", reflect.TypeOf(ClearBgpInstanceExternalGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external-graceful", reflect.TypeOf(ClearBgpInstanceExternalGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-external}", reflect.TypeOf(ClearBgpInstanceExternal{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external", reflect.TypeOf(ClearBgpInstanceExternal{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-dampening-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceAfiSafiDampeningIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceAfiSafiDampeningIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-dampening-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceAfiSafiDampeningIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceAfiSafiDampeningIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-nexthop-performance-statistics}", reflect.TypeOf(ClearBgpInstanceNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-performance-statistics", reflect.TypeOf(ClearBgpInstanceNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-nexthop-registration-ip-addr}", reflect.TypeOf(ClearBgpInstanceNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-registration-ip-addr", reflect.TypeOf(ClearBgpInstanceNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-peer-drops-all}", reflect.TypeOf(ClearBgpInstancePeerDropsAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-all", reflect.TypeOf(ClearBgpInstancePeerDropsAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-peer-drops-ip-addr}", reflect.TypeOf(ClearBgpInstancePeerDropsIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-ip-addr", reflect.TypeOf(ClearBgpInstancePeerDropsIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-performance-statistics}", reflect.TypeOf(ClearBgpInstancePerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-performance-statistics", reflect.TypeOf(ClearBgpInstancePerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-rpki-server-all-serial-query}", reflect.TypeOf(ClearBgpInstanceRpkiServerAllSerialQuery{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all-serial-query", reflect.TypeOf(ClearBgpInstanceRpkiServerAllSerialQuery{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-rpki-server-all}", reflect.TypeOf(ClearBgpInstanceRpkiServerAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all", reflect.TypeOf(ClearBgpInstanceRpkiServerAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-rpki-server-rpki-server}", reflect.TypeOf(ClearBgpInstanceRpkiServerRpkiServer{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-rpki-server", reflect.TypeOf(ClearBgpInstanceRpkiServerRpkiServer{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-rpki-validation-ipv4}", reflect.TypeOf(ClearBgpInstanceRpkiValidationIpv4{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv4", reflect.TypeOf(ClearBgpInstanceRpkiValidationIpv4{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-rpki-validation-ipv6}", reflect.TypeOf(ClearBgpInstanceRpkiValidationIpv6{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv6", reflect.TypeOf(ClearBgpInstanceRpkiValidationIpv6{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-rpki-validation}", reflect.TypeOf(ClearBgpInstanceRpkiValidation{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation", reflect.TypeOf(ClearBgpInstanceRpkiValidation{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-shutdown}", reflect.TypeOf(ClearBgpInstanceShutdown{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-shutdown", reflect.TypeOf(ClearBgpInstanceShutdown{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-address-family-update-parent}", reflect.TypeOf(ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family-update-parent", reflect.TypeOf(ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-address-family}", reflect.TypeOf(ClearBgpInstanceUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family", reflect.TypeOf(ClearBgpInstanceUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent}", reflect.TypeOf(ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent", reflect.TypeOf(ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-neighbor-ip-addr-refresh}", reflect.TypeOf(ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh", reflect.TypeOf(ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent}", reflect.TypeOf(ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent", reflect.TypeOf(ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-neighbor-ip-addr}", reflect.TypeOf(ClearBgpInstanceUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr", reflect.TypeOf(ClearBgpInstanceUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-process}", reflect.TypeOf(ClearBgpInstanceUpdateOutqProcess{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-process", reflect.TypeOf(ClearBgpInstanceUpdateOutqProcess{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-update-group-sub-group-update-parent}", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-update-parent", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-update-group-sub-group}", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent}", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group}", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-update-group-update-parent}", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-update-parent", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-update-outq-update-group}", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group", reflect.TypeOf(ClearBgpInstanceUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceVersionIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceVersionIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-ip-addr}", reflect.TypeOf(ClearBgpInstanceVersionIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr", reflect.TypeOf(ClearBgpInstanceVersionIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-ip-prefix}", reflect.TypeOf(ClearBgpInstanceVersionIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-prefix", reflect.TypeOf(ClearBgpInstanceVersionIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ip-addr}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ip-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-ip-addr}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-ip-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ipv4-addr}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-ipv4-addr}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-vrf-ipv4-addr}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-network}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-network", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-network}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-network", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-vrf-network}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-network", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rt-constraint-network}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRtConstraintNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rt-constraint-network", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRtConstraintNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ipv4-tunnel-network}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-tunnel-network", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ipv6-addr}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRd{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-vrf}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrf{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafi{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi", reflect.TypeOf(ClearBgpInstanceVersionAfiSafi{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-sr-policy-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiSrPolicyPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-sr-policy-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiSrPolicyPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-ipv6-addr}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-rd-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiRdIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-vrf-ipv6-addr}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpInstanceVersionVrfIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpInstanceVersionVrfIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-ip-addr}", reflect.TypeOf(ClearBgpInstanceVersionVrfIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr", reflect.TypeOf(ClearBgpInstanceVersionVrfIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-ip-prefix}", reflect.TypeOf(ClearBgpInstanceVersionVrfIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-prefix", reflect.TypeOf(ClearBgpInstanceVersionVrfIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-ipv4-addr}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-network}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-network", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-rd-network}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiRdNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd-network", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiRdNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-vrf-network}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf-network", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-ipv6-addr}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-rd}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiRd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiRd{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi-vrf}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiVrf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafiVrf{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-version-vrf-afi-safi}", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafi{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi", reflect.TypeOf(ClearBgpInstanceVersionVrfAfiSafi{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-all-graceful}", reflect.TypeOf(ClearBgpInstanceVrfAllGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all-graceful", reflect.TypeOf(ClearBgpInstanceVrfAllGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-all}", reflect.TypeOf(ClearBgpInstanceVrfAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all", reflect.TypeOf(ClearBgpInstanceVrfAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-ip-addr-graceful}", reflect.TypeOf(ClearBgpInstanceVrfIpAddrGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-graceful", reflect.TypeOf(ClearBgpInstanceVrfIpAddrGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-ip-addr-long-lived-stale}", reflect.TypeOf(ClearBgpInstanceVrfIpAddrLongLivedStale{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-long-lived-stale", reflect.TypeOf(ClearBgpInstanceVrfIpAddrLongLivedStale{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-ip-addr}", reflect.TypeOf(ClearBgpInstanceVrfIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr", reflect.TypeOf(ClearBgpInstanceVrfIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-as-graceful}", reflect.TypeOf(ClearBgpInstanceVrfAsGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as-graceful", reflect.TypeOf(ClearBgpInstanceVrfAsGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-as}", reflect.TypeOf(ClearBgpInstanceVrfAs{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as", reflect.TypeOf(ClearBgpInstanceVrfAs{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-external-graceful}", reflect.TypeOf(ClearBgpInstanceVrfExternalGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external-graceful", reflect.TypeOf(ClearBgpInstanceVrfExternalGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-external}", reflect.TypeOf(ClearBgpInstanceVrfExternal{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external", reflect.TypeOf(ClearBgpInstanceVrfExternal{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-all-soft-in}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAllSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAllSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-all-soft-out}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAllSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-out", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAllSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-all-soft}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAllSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAllSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-ip-addr-soft}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiIpAddrSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-as-soft-in}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAsSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAsSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-as-soft-out}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAsSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-out", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAsSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-as-soft}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAsSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiAsSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-dampening}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiDampening{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiDampening{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-external-soft-in}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiExternalSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiExternalSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-external-soft-out}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiExternalSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-out", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiExternalSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-external-soft}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiExternalSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiExternalSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-flap-statistics}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-self-originated}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiSelfOriginated{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-self-originated", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiSelfOriginated{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-shutdown}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiShutdown{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-shutdown", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiShutdown{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-address-family}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-update-outq-update-group}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix}", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix", reflect.TypeOf(ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-nexthop-performance-statistics}", reflect.TypeOf(ClearBgpInstanceVrfNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-performance-statistics", reflect.TypeOf(ClearBgpInstanceVrfNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-nexthop-registration-ip-addr}", reflect.TypeOf(ClearBgpInstanceVrfNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-registration-ip-addr", reflect.TypeOf(ClearBgpInstanceVrfNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-peer-drops-all}", reflect.TypeOf(ClearBgpInstanceVrfPeerDropsAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-all", reflect.TypeOf(ClearBgpInstanceVrfPeerDropsAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-peer-drops-ip-addr}", reflect.TypeOf(ClearBgpInstanceVrfPeerDropsIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-ip-addr", reflect.TypeOf(ClearBgpInstanceVrfPeerDropsIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-performance-statistics}", reflect.TypeOf(ClearBgpInstanceVrfPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-performance-statistics", reflect.TypeOf(ClearBgpInstanceVrfPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-shutdown}", reflect.TypeOf(ClearBgpInstanceVrfShutdown{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-shutdown", reflect.TypeOf(ClearBgpInstanceVrfShutdown{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-address-family-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family-update-parent", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-address-family}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-neighbor-ip-addr}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-update-group-sub-group}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-update-group-update-parent}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-update-parent", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-instance-vrf-update-outq-update-group}", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group", reflect.TypeOf(ClearBgpInstanceVrfUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-dampening-ipv4-prefix}", reflect.TypeOf(ClearBgpAfiSafiDampeningIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv4-prefix", reflect.TypeOf(ClearBgpAfiSafiDampeningIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-flap-statistics-ipv4-prefix}", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv4-prefix", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-dampening-ipv6-prefix}", reflect.TypeOf(ClearBgpAfiSafiDampeningIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv6-prefix", reflect.TypeOf(ClearBgpAfiSafiDampeningIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-afi-safi-flap-statistics-ipv6-prefix}", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv6-prefix", reflect.TypeOf(ClearBgpAfiSafiFlapStatisticsIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-nexthop-performance-statistics}", reflect.TypeOf(ClearBgpNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-nexthop-performance-statistics", reflect.TypeOf(ClearBgpNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-nexthop-registration-ip-addr}", reflect.TypeOf(ClearBgpNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-nexthop-registration-ip-addr", reflect.TypeOf(ClearBgpNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-peer-drops-all}", reflect.TypeOf(ClearBgpPeerDropsAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-peer-drops-all", reflect.TypeOf(ClearBgpPeerDropsAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-peer-drops-ip-addr}", reflect.TypeOf(ClearBgpPeerDropsIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-peer-drops-ip-addr", reflect.TypeOf(ClearBgpPeerDropsIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-performance-statistics}", reflect.TypeOf(ClearBgpPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-performance-statistics", reflect.TypeOf(ClearBgpPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-rpki-server-all-serial-query}", reflect.TypeOf(ClearBgpRpkiServerAllSerialQuery{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-all-serial-query", reflect.TypeOf(ClearBgpRpkiServerAllSerialQuery{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-rpki-server-all}", reflect.TypeOf(ClearBgpRpkiServerAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-all", reflect.TypeOf(ClearBgpRpkiServerAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-rpki-server-rpki-server}", reflect.TypeOf(ClearBgpRpkiServerRpkiServer{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-rpki-server", reflect.TypeOf(ClearBgpRpkiServerRpkiServer{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-rpki-validation-ipv4}", reflect.TypeOf(ClearBgpRpkiValidationIpv4{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation-ipv4", reflect.TypeOf(ClearBgpRpkiValidationIpv4{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-rpki-validation-ipv6}", reflect.TypeOf(ClearBgpRpkiValidationIpv6{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation-ipv6", reflect.TypeOf(ClearBgpRpkiValidationIpv6{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-rpki-validation}", reflect.TypeOf(ClearBgpRpkiValidation{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation", reflect.TypeOf(ClearBgpRpkiValidation{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-shutdown}", reflect.TypeOf(ClearBgpShutdown{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-shutdown", reflect.TypeOf(ClearBgpShutdown{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-address-family-update-parent}", reflect.TypeOf(ClearBgpUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-address-family-update-parent", reflect.TypeOf(ClearBgpUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-address-family}", reflect.TypeOf(ClearBgpUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-address-family", reflect.TypeOf(ClearBgpUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent}", reflect.TypeOf(ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent", reflect.TypeOf(ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-neighbor-ip-addr-refresh}", reflect.TypeOf(ClearBgpUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh", reflect.TypeOf(ClearBgpUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-neighbor-ip-addr-update-parent}", reflect.TypeOf(ClearBgpUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-update-parent", reflect.TypeOf(ClearBgpUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-neighbor-ip-addr}", reflect.TypeOf(ClearBgpUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr", reflect.TypeOf(ClearBgpUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-process}", reflect.TypeOf(ClearBgpUpdateOutqProcess{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-process", reflect.TypeOf(ClearBgpUpdateOutqProcess{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-update-group-sub-group-update-parent}", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-update-parent", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-update-group-sub-group}", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent}", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-update-group-sub-group-refresh-sub-group}", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-update-group-update-parent}", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-update-parent", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-update-outq-update-group}", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group", reflect.TypeOf(ClearBgpUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpVersionIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpVersionIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-ip-addr}", reflect.TypeOf(ClearBgpVersionIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr", reflect.TypeOf(ClearBgpVersionIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-ip-prefix}", reflect.TypeOf(ClearBgpVersionIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-prefix", reflect.TypeOf(ClearBgpVersionIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpVersionAfiSafiIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpVersionAfiSafiIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ip-addr}", reflect.TypeOf(ClearBgpVersionAfiSafiIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr", reflect.TypeOf(ClearBgpVersionAfiSafiIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ip-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-bridge-domain-ip-addr}", reflect.TypeOf(ClearBgpVersionAfiSafiBridgeDomainIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr", reflect.TypeOf(ClearBgpVersionAfiSafiBridgeDomainIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-bridge-domain-ip-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiBridgeDomainIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiBridgeDomainIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-ip-addr}", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-ip-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpVersionAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpVersionAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ipv4-addr}", reflect.TypeOf(ClearBgpVersionAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr", reflect.TypeOf(ClearBgpVersionAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ipv4-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-ipv4-addr}", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-vrf-ipv4-addr}", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-network}", reflect.TypeOf(ClearBgpVersionAfiSafiNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-network", reflect.TypeOf(ClearBgpVersionAfiSafiNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-network}", reflect.TypeOf(ClearBgpVersionAfiSafiRdNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-network", reflect.TypeOf(ClearBgpVersionAfiSafiRdNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-vrf-network}", reflect.TypeOf(ClearBgpVersionAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-network", reflect.TypeOf(ClearBgpVersionAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rt-constraint-network}", reflect.TypeOf(ClearBgpVersionAfiSafiRtConstraintNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rt-constraint-network", reflect.TypeOf(ClearBgpVersionAfiSafiRtConstraintNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ipv4-tunnel-network}", reflect.TypeOf(ClearBgpVersionAfiSafiIpv4TunnelNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-tunnel-network", reflect.TypeOf(ClearBgpVersionAfiSafiIpv4TunnelNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ipv6-addr}", reflect.TypeOf(ClearBgpVersionAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr", reflect.TypeOf(ClearBgpVersionAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-ipv6-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd}", reflect.TypeOf(ClearBgpVersionAfiSafiRd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd", reflect.TypeOf(ClearBgpVersionAfiSafiRd{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-vrf}", reflect.TypeOf(ClearBgpVersionAfiSafiVrf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf", reflect.TypeOf(ClearBgpVersionAfiSafiVrf{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi}", reflect.TypeOf(ClearBgpVersionAfiSafi{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi", reflect.TypeOf(ClearBgpVersionAfiSafi{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-sr-policy-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiSrPolicyPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-sr-policy-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiSrPolicyPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-ipv4-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-mp2mp-ipv4-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiMp2MpIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-mp2mp-ipv4-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiMp2MpIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-vrf-ipv4-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-ipv6-addr}", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-rd-ipv6-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiRdIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-vrf-ipv6-addr}", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-afi-safi-vrf-ipv6-prefix}", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-prefix", reflect.TypeOf(ClearBgpVersionAfiSafiVrfIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-ip-addr-ip-netmask}", reflect.TypeOf(ClearBgpVersionVrfIpAddrIpNetmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr-ip-netmask", reflect.TypeOf(ClearBgpVersionVrfIpAddrIpNetmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-ip-addr}", reflect.TypeOf(ClearBgpVersionVrfIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr", reflect.TypeOf(ClearBgpVersionVrfIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-ip-prefix}", reflect.TypeOf(ClearBgpVersionVrfIpPrefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-prefix", reflect.TypeOf(ClearBgpVersionVrfIpPrefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-ipv4-prefix}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-prefix", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-ipv4-addr}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv4Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-network}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-network", reflect.TypeOf(ClearBgpVersionVrfAfiSafiNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-rd-network}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiRdNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd-network", reflect.TypeOf(ClearBgpVersionVrfAfiSafiRdNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-vrf-network}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf-network", reflect.TypeOf(ClearBgpVersionVrfAfiSafiVrfNetwork{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-ipv6-addr}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv6Addr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-ipv6-prefix}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-prefix", reflect.TypeOf(ClearBgpVersionVrfAfiSafiIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-rd}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiRd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd", reflect.TypeOf(ClearBgpVersionVrfAfiSafiRd{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi-vrf}", reflect.TypeOf(ClearBgpVersionVrfAfiSafiVrf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf", reflect.TypeOf(ClearBgpVersionVrfAfiSafiVrf{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-version-vrf-afi-safi}", reflect.TypeOf(ClearBgpVersionVrfAfiSafi{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi", reflect.TypeOf(ClearBgpVersionVrfAfiSafi{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-all-graceful}", reflect.TypeOf(ClearBgpVrfAllGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all-graceful", reflect.TypeOf(ClearBgpVrfAllGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-all}", reflect.TypeOf(ClearBgpVrfAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all", reflect.TypeOf(ClearBgpVrfAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-ip-addr-graceful}", reflect.TypeOf(ClearBgpVrfIpAddrGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-graceful", reflect.TypeOf(ClearBgpVrfIpAddrGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-ip-addr-long-lived-stale}", reflect.TypeOf(ClearBgpVrfIpAddrLongLivedStale{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-long-lived-stale", reflect.TypeOf(ClearBgpVrfIpAddrLongLivedStale{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-ip-addr}", reflect.TypeOf(ClearBgpVrfIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr", reflect.TypeOf(ClearBgpVrfIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-as-graceful}", reflect.TypeOf(ClearBgpVrfAsGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as-graceful", reflect.TypeOf(ClearBgpVrfAsGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-as}", reflect.TypeOf(ClearBgpVrfAs{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as", reflect.TypeOf(ClearBgpVrfAs{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-external-graceful}", reflect.TypeOf(ClearBgpVrfExternalGraceful{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external-graceful", reflect.TypeOf(ClearBgpVrfExternalGraceful{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-external}", reflect.TypeOf(ClearBgpVrfExternal{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external", reflect.TypeOf(ClearBgpVrfExternal{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpVrfAfiSafiAllSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter", reflect.TypeOf(ClearBgpVrfAfiSafiAllSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-all-soft-in}", reflect.TypeOf(ClearBgpVrfAfiSafiAllSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in", reflect.TypeOf(ClearBgpVrfAfiSafiAllSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-all-soft-out}", reflect.TypeOf(ClearBgpVrfAfiSafiAllSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-out", reflect.TypeOf(ClearBgpVrfAfiSafiAllSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-all-soft}", reflect.TypeOf(ClearBgpVrfAfiSafiAllSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft", reflect.TypeOf(ClearBgpVrfAfiSafiAllSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale}", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrLongLivedStale{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrLongLivedStale{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-ip-addr-soft-in}", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-ip-addr-soft-out}", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-out", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-ip-addr-soft}", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft", reflect.TypeOf(ClearBgpVrfAfiSafiIpAddrSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpVrfAfiSafiAsSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter", reflect.TypeOf(ClearBgpVrfAfiSafiAsSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-as-soft-in}", reflect.TypeOf(ClearBgpVrfAfiSafiAsSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in", reflect.TypeOf(ClearBgpVrfAfiSafiAsSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-as-soft-out}", reflect.TypeOf(ClearBgpVrfAfiSafiAsSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-out", reflect.TypeOf(ClearBgpVrfAfiSafiAsSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-as-soft}", reflect.TypeOf(ClearBgpVrfAfiSafiAsSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft", reflect.TypeOf(ClearBgpVrfAfiSafiAsSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-dampening-ipv4-prefix}", reflect.TypeOf(ClearBgpVrfAfiSafiDampeningIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv4-prefix", reflect.TypeOf(ClearBgpVrfAfiSafiDampeningIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-dampening}", reflect.TypeOf(ClearBgpVrfAfiSafiDampening{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening", reflect.TypeOf(ClearBgpVrfAfiSafiDampening{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter}", reflect.TypeOf(ClearBgpVrfAfiSafiExternalSoftInPrefixFilter{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter", reflect.TypeOf(ClearBgpVrfAfiSafiExternalSoftInPrefixFilter{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-external-soft-in}", reflect.TypeOf(ClearBgpVrfAfiSafiExternalSoftIn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in", reflect.TypeOf(ClearBgpVrfAfiSafiExternalSoftIn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-external-soft-out}", reflect.TypeOf(ClearBgpVrfAfiSafiExternalSoftOut{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-out", reflect.TypeOf(ClearBgpVrfAfiSafiExternalSoftOut{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-external-soft}", reflect.TypeOf(ClearBgpVrfAfiSafiExternalSoft{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft", reflect.TypeOf(ClearBgpVrfAfiSafiExternalSoft{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask}", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-flap-statistics-ip-addr}", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix}", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-flap-statistics-regexp}", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsRegexp{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-regexp", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsRegexp{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-flap-statistics-route-policy}", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-route-policy", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-flap-statistics}", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-nexthop-performance-statistics}", reflect.TypeOf(ClearBgpVrfAfiSafiNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-performance-statistics", reflect.TypeOf(ClearBgpVrfAfiSafiNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr}", reflect.TypeOf(ClearBgpVrfAfiSafiNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr", reflect.TypeOf(ClearBgpVrfAfiSafiNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-self-originated}", reflect.TypeOf(ClearBgpVrfAfiSafiSelfOriginated{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-self-originated", reflect.TypeOf(ClearBgpVrfAfiSafiSelfOriginated{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-shutdown}", reflect.TypeOf(ClearBgpVrfAfiSafiShutdown{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-shutdown", reflect.TypeOf(ClearBgpVrfAfiSafiShutdown{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-address-family}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-update-outq-update-group}", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group", reflect.TypeOf(ClearBgpVrfAfiSafiUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-dampening-ipv6-prefix}", reflect.TypeOf(ClearBgpVrfAfiSafiDampeningIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv6-prefix", reflect.TypeOf(ClearBgpVrfAfiSafiDampeningIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix}", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix", reflect.TypeOf(ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-nexthop-performance-statistics}", reflect.TypeOf(ClearBgpVrfNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-performance-statistics", reflect.TypeOf(ClearBgpVrfNexthopPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-nexthop-registration-ip-addr}", reflect.TypeOf(ClearBgpVrfNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-registration-ip-addr", reflect.TypeOf(ClearBgpVrfNexthopRegistrationIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-peer-drops-all}", reflect.TypeOf(ClearBgpVrfPeerDropsAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-all", reflect.TypeOf(ClearBgpVrfPeerDropsAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-peer-drops-ip-addr}", reflect.TypeOf(ClearBgpVrfPeerDropsIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-ip-addr", reflect.TypeOf(ClearBgpVrfPeerDropsIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-performance-statistics}", reflect.TypeOf(ClearBgpVrfPerformanceStatistics{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-performance-statistics", reflect.TypeOf(ClearBgpVrfPerformanceStatistics{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-shutdown}", reflect.TypeOf(ClearBgpVrfShutdown{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-shutdown", reflect.TypeOf(ClearBgpVrfShutdown{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-address-family-update-parent}", reflect.TypeOf(ClearBgpVrfUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family-update-parent", reflect.TypeOf(ClearBgpVrfUpdateOutqAddressFamilyUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-address-family}", reflect.TypeOf(ClearBgpVrfUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family", reflect.TypeOf(ClearBgpVrfUpdateOutqAddressFamily{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent}", reflect.TypeOf(ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent", reflect.TypeOf(ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh}", reflect.TypeOf(ClearBgpVrfUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh", reflect.TypeOf(ClearBgpVrfUpdateOutqNeighborIpAddrRefresh{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent}", reflect.TypeOf(ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent", reflect.TypeOf(ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-neighbor-ip-addr}", reflect.TypeOf(ClearBgpVrfUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr", reflect.TypeOf(ClearBgpVrfUpdateOutqNeighborIpAddr{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-update-group-sub-group-update-parent}", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-update-parent", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-update-group-sub-group}", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent}", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group}", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-update-group-update-parent}", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-update-parent", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroupUpdateParent{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-act clear-bgp-vrf-update-outq-update-group}", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroup{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group", reflect.TypeOf(ClearBgpVrfUpdateOutqUpdateGroup{}))
}

// InstanceName
type InstanceName string

const (
    InstanceName_all InstanceName = "all"
)

// Vpnv6Safi
type Vpnv6Safi string

const (
    Vpnv6Safi_flowspec Vpnv6Safi = "flowspec"

    Vpnv6Safi_multicast Vpnv6Safi = "multicast"

    Vpnv6Safi_unicast Vpnv6Safi = "unicast"
)

// Afi
type Afi string

const (
    // Both ipv4 and ipv6 address families
    Afi_all Afi = "all"

    Afi_ipv4 Afi = "ipv4"

    Afi_ipv6 Afi = "ipv6"

    Afi_l2vpn Afi = "l2vpn"

    Afi_link_state Afi = "link-state"

    Afi_vpnv4 Afi = "vpnv4"

    Afi_vpnv6 Afi = "vpnv6"
)

// VrfName
type VrfName string

const (
    VrfName_all VrfName = "all"
)

// Ipv4Safi
type Ipv4Safi string

const (
    // Both unicast and multicast address family modifiers
    Ipv4Safi_all Ipv4Safi = "all"

    Ipv4Safi_flowspec Ipv4Safi = "flowspec"

    Ipv4Safi_labeled_unicast Ipv4Safi = "labeled-unicast"

    Ipv4Safi_mdt Ipv4Safi = "mdt"

    Ipv4Safi_multicast Ipv4Safi = "multicast"

    Ipv4Safi_mvpn Ipv4Safi = "mvpn"

    Ipv4Safi_rt_filter Ipv4Safi = "rt-filter"

    Ipv4Safi_sr_policy Ipv4Safi = "sr-policy"

    Ipv4Safi_tunnel Ipv4Safi = "tunnel"

    Ipv4Safi_unicast Ipv4Safi = "unicast"
)

// AfiSafiType
type AfiSafiType string

const (
    // Both unicast and multicast address family modifiers
    // of ipv4 and ipv6 address family
    AfiSafiType_all_all AfiSafiType = "all-all"

    AfiSafiType_all_evpn AfiSafiType = "all-evpn"

    AfiSafiType_all_flowspec AfiSafiType = "all-flowspec"

    AfiSafiType_all_labeled_unicast AfiSafiType = "all-labeled-unicast"

    AfiSafiType_all_mdt AfiSafiType = "all-mdt"

    AfiSafiType_all_mspw AfiSafiType = "all-mspw"

    AfiSafiType_all_multicast AfiSafiType = "all-multicast"

    AfiSafiType_all_mvpn AfiSafiType = "all-mvpn"

    AfiSafiType_all_rt_filter AfiSafiType = "all-rt-filter"

    AfiSafiType_all_sr_policy AfiSafiType = "all-sr-policy"

    AfiSafiType_all_tunnel AfiSafiType = "all-tunnel"

    AfiSafiType_all_unicast AfiSafiType = "all-unicast"

    AfiSafiType_all_vpls AfiSafiType = "all-vpls"

    AfiSafiType_all_vpws AfiSafiType = "all-vpws"

    // Both unicast and multicast address family modifiers
    AfiSafiType_ipv4_all AfiSafiType = "ipv4-all"

    AfiSafiType_ipv4_flowspec AfiSafiType = "ipv4-flowspec"

    AfiSafiType_ipv4_labeled_unicast AfiSafiType = "ipv4-labeled-unicast"

    AfiSafiType_ipv4_mdt AfiSafiType = "ipv4-mdt"

    AfiSafiType_ipv4_multicast AfiSafiType = "ipv4-multicast"

    AfiSafiType_ipv4_mvpn AfiSafiType = "ipv4-mvpn"

    AfiSafiType_ipv4_rt_filter AfiSafiType = "ipv4-rt-filter"

    AfiSafiType_ipv4_sr_policy AfiSafiType = "ipv4-sr-policy"

    AfiSafiType_ipv4_tunnel AfiSafiType = "ipv4-tunnel"

    AfiSafiType_ipv4_unicast AfiSafiType = "ipv4-unicast"

    // Both unicast and multicast address family modifiers
    AfiSafiType_ipv6_all AfiSafiType = "ipv6-all"

    AfiSafiType_ipv6_flowspec AfiSafiType = "ipv6-flowspec"

    AfiSafiType_ipv6_labeled_unicast AfiSafiType = "ipv6-labeled-unicast"

    AfiSafiType_ipv6_multicast AfiSafiType = "ipv6-multicast"

    AfiSafiType_ipv6_mvpn AfiSafiType = "ipv6-mvpn"

    AfiSafiType_ipv6_sr_policy AfiSafiType = "ipv6-sr-policy"

    AfiSafiType_ipv6_unicast AfiSafiType = "ipv6-unicast"

    AfiSafiType_l2vpn_evpn AfiSafiType = "l2vpn-evpn"

    AfiSafiType_l2vpn_mspw AfiSafiType = "l2vpn-mspw"

    AfiSafiType_l2vpn_vpls AfiSafiType = "l2vpn-vpls"

    AfiSafiType_l2vpn_vpws AfiSafiType = "l2vpn-vpws"

    AfiSafiType_link_state AfiSafiType = "link-state"

    AfiSafiType_vpnv4_flowspec AfiSafiType = "vpnv4-flowspec"

    AfiSafiType_vpnv4_multicast AfiSafiType = "vpnv4-multicast"

    AfiSafiType_vpnv4_unicast AfiSafiType = "vpnv4-unicast"

    AfiSafiType_vpnv6_flowspec AfiSafiType = "vpnv6-flowspec"

    AfiSafiType_vpnv6_multicast AfiSafiType = "vpnv6-multicast"

    AfiSafiType_vpnv6_unicast AfiSafiType = "vpnv6-unicast"
)

// Vpnv4Safi
type Vpnv4Safi string

const (
    Vpnv4Safi_flowspec Vpnv4Safi = "flowspec"

    Vpnv4Safi_multicast Vpnv4Safi = "multicast"

    Vpnv4Safi_unicast Vpnv4Safi = "unicast"
)

// Ipv6Safi
type Ipv6Safi string

const (
    // Both unicast and multicast address family modifiers
    Ipv6Safi_all Ipv6Safi = "all"

    Ipv6Safi_flowspec Ipv6Safi = "flowspec"

    Ipv6Safi_labeled_unicast Ipv6Safi = "labeled-unicast"

    Ipv6Safi_multicast Ipv6Safi = "multicast"

    Ipv6Safi_mvpn Ipv6Safi = "mvpn"

    Ipv6Safi_sr_policy Ipv6Safi = "sr-policy"

    Ipv6Safi_unicast Ipv6Safi = "unicast"
)

// Ipv4Safi
type Ipv4Safi string

const (
    // Both unicast and multicast address family modifiers
    Ipv4Safi_all Ipv4Safi = "all"

    Ipv4Safi_flowspec Ipv4Safi = "flowspec"

    Ipv4Safi_labeled_unicast Ipv4Safi = "labeled-unicast"

    Ipv4Safi_mdt Ipv4Safi = "mdt"

    Ipv4Safi_multicast Ipv4Safi = "multicast"

    Ipv4Safi_mvpn Ipv4Safi = "mvpn"

    Ipv4Safi_rt_filter Ipv4Safi = "rt-filter"

    Ipv4Safi_sr_policy Ipv4Safi = "sr-policy"

    Ipv4Safi_tunnel Ipv4Safi = "tunnel"

    Ipv4Safi_unicast Ipv4Safi = "unicast"
)

// Ipv6Safi
type Ipv6Safi string

const (
    // Both unicast and multicast address family modifiers
    Ipv6Safi_all Ipv6Safi = "all"

    Ipv6Safi_flowspec Ipv6Safi = "flowspec"

    Ipv6Safi_labeled_unicast Ipv6Safi = "labeled-unicast"

    Ipv6Safi_multicast Ipv6Safi = "multicast"

    Ipv6Safi_mvpn Ipv6Safi = "mvpn"

    Ipv6Safi_sr_policy Ipv6Safi = "sr-policy"

    Ipv6Safi_unicast Ipv6Safi = "unicast"
)

// L2VpnSafi
type L2VpnSafi string

const (
    L2VpnSafi_evpn L2VpnSafi = "evpn"

    L2VpnSafi_mspw L2VpnSafi = "mspw"

    L2VpnSafi_vpls L2VpnSafi = "vpls"

    L2VpnSafi_vpws L2VpnSafi = "vpws"
)

// LinkStateSafi
type LinkStateSafi string

const (
    LinkStateSafi_link_state LinkStateSafi = "link-state"
)

// Vpnv4Safi
type Vpnv4Safi string

const (
    Vpnv4Safi_flowspec Vpnv4Safi = "flowspec"

    Vpnv4Safi_multicast Vpnv4Safi = "multicast"

    Vpnv4Safi_unicast Vpnv4Safi = "unicast"
)

// Vpnv6Safi
type Vpnv6Safi string

const (
    Vpnv6Safi_flowspec Vpnv6Safi = "flowspec"

    Vpnv6Safi_multicast Vpnv6Safi = "multicast"

    Vpnv6Safi_unicast Vpnv6Safi = "unicast"
)

// L2VpnSafi
type L2VpnSafi string

const (
    L2VpnSafi_evpn L2VpnSafi = "evpn"

    L2VpnSafi_mspw L2VpnSafi = "mspw"

    L2VpnSafi_vpls L2VpnSafi = "vpls"

    L2VpnSafi_vpws L2VpnSafi = "vpws"
)

// LinkStateSafi
type LinkStateSafi string

const (
    LinkStateSafi_link_state LinkStateSafi = "link-state"
)

// ClearBgpAllGraceful
// Clear all peers and all routes from the BGP table.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpAllGraceful struct {
    parent types.Entity
    YFilter yfilter.YFilter
}

func (clearBgpAllGraceful *ClearBgpAllGraceful) GetFilter() yfilter.YFilter { return clearBgpAllGraceful.YFilter }

func (clearBgpAllGraceful *ClearBgpAllGraceful) SetFilter(yf yfilter.YFilter) { clearBgpAllGraceful.YFilter = yf }

func (clearBgpAllGraceful *ClearBgpAllGraceful) GetGoName(yname string) string {
    return ""
}

func (clearBgpAllGraceful *ClearBgpAllGraceful) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-all-graceful"
}

func (clearBgpAllGraceful *ClearBgpAllGraceful) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clearBgpAllGraceful *ClearBgpAllGraceful) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clearBgpAllGraceful *ClearBgpAllGraceful) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAllGraceful *ClearBgpAllGraceful) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAllGraceful *ClearBgpAllGraceful) GetYangName() string { return "clear-bgp-all-graceful" }

func (clearBgpAllGraceful *ClearBgpAllGraceful) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAllGraceful *ClearBgpAllGraceful) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAllGraceful *ClearBgpAllGraceful) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAllGraceful *ClearBgpAllGraceful) SetParent(parent types.Entity) { clearBgpAllGraceful.parent = parent }

func (clearBgpAllGraceful *ClearBgpAllGraceful) GetParent() types.Entity { return clearBgpAllGraceful.parent }

func (clearBgpAllGraceful *ClearBgpAllGraceful) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAll
// Clear all peers and all routes from the BGP table.
// 
type ClearBgpAll struct {
    parent types.Entity
    YFilter yfilter.YFilter
}

func (clearBgpAll *ClearBgpAll) GetFilter() yfilter.YFilter { return clearBgpAll.YFilter }

func (clearBgpAll *ClearBgpAll) SetFilter(yf yfilter.YFilter) { clearBgpAll.YFilter = yf }

func (clearBgpAll *ClearBgpAll) GetGoName(yname string) string {
    return ""
}

func (clearBgpAll *ClearBgpAll) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-all"
}

func (clearBgpAll *ClearBgpAll) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clearBgpAll *ClearBgpAll) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clearBgpAll *ClearBgpAll) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAll *ClearBgpAll) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAll *ClearBgpAll) GetYangName() string { return "clear-bgp-all" }

func (clearBgpAll *ClearBgpAll) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAll *ClearBgpAll) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAll *ClearBgpAll) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAll *ClearBgpAll) SetParent(parent types.Entity) { clearBgpAll.parent = parent }

func (clearBgpAll *ClearBgpAll) GetParent() types.Entity { return clearBgpAll.parent }

func (clearBgpAll *ClearBgpAll) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpIpAddrGraceful
// BGP neighbor address to clear.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpIpAddrGraceful struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpIpAddrGraceful_Input
}

func (clearBgpIpAddrGraceful *ClearBgpIpAddrGraceful) GetFilter() yfilter.YFilter { return clearBgpIpAddrGraceful.YFilter }

func (clearBgpIpAddrGraceful *ClearBgpIpAddrGraceful) SetFilter(yf yfilter.YFilter) { clearBgpIpAddrGraceful.YFilter = yf }

func (clearBgpIpAddrGraceful *ClearBgpIpAddrGraceful) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpIpAddrGraceful *ClearBgpIpAddrGraceful) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-graceful"
}

func (clearBgpIpAddrGraceful *ClearBgpIpAddrGraceful) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpIpAddrGraceful.Input
    }
    return nil
}

func (clearBgpIpAddrGraceful *ClearBgpIpAddrGraceful) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpIpAddrGraceful.Input
    return children
}

func (clearBgpIpAddrGraceful *ClearBgpIpAddrGraceful) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpIpAddrGraceful *ClearBgpIpAddrGraceful) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpIpAddrGraceful *ClearBgpIpAddrGraceful) GetYangName() string { return "clear-bgp-ip-addr-graceful" }

func (clearBgpIpAddrGraceful *ClearBgpIpAddrGraceful) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpIpAddrGraceful *ClearBgpIpAddrGraceful) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpIpAddrGraceful *ClearBgpIpAddrGraceful) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpIpAddrGraceful *ClearBgpIpAddrGraceful) SetParent(parent types.Entity) { clearBgpIpAddrGraceful.parent = parent }

func (clearBgpIpAddrGraceful *ClearBgpIpAddrGraceful) GetParent() types.Entity { return clearBgpIpAddrGraceful.parent }

func (clearBgpIpAddrGraceful *ClearBgpIpAddrGraceful) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpIpAddrGraceful_Input
type ClearBgpIpAddrGraceful_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpIpAddrGraceful_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpIpAddrGraceful_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpIpAddrGraceful_Input) GetGoName(yname string) string {
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpIpAddrGraceful_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpIpAddrGraceful_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpIpAddrGraceful_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpIpAddrGraceful_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpIpAddrGraceful_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpIpAddrGraceful_Input) GetYangName() string { return "input" }

func (input *ClearBgpIpAddrGraceful_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpIpAddrGraceful_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpIpAddrGraceful_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpIpAddrGraceful_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpIpAddrGraceful_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpIpAddrGraceful_Input) GetParentYangName() string { return "clear-bgp-ip-addr-graceful" }

// ClearBgpIpAddrLongLivedStale
// BGP neighbor address to clear.
// Clear long-lived-stale routes.
// 
type ClearBgpIpAddrLongLivedStale struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpIpAddrLongLivedStale_Input
}

func (clearBgpIpAddrLongLivedStale *ClearBgpIpAddrLongLivedStale) GetFilter() yfilter.YFilter { return clearBgpIpAddrLongLivedStale.YFilter }

func (clearBgpIpAddrLongLivedStale *ClearBgpIpAddrLongLivedStale) SetFilter(yf yfilter.YFilter) { clearBgpIpAddrLongLivedStale.YFilter = yf }

func (clearBgpIpAddrLongLivedStale *ClearBgpIpAddrLongLivedStale) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpIpAddrLongLivedStale *ClearBgpIpAddrLongLivedStale) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr-long-lived-stale"
}

func (clearBgpIpAddrLongLivedStale *ClearBgpIpAddrLongLivedStale) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpIpAddrLongLivedStale.Input
    }
    return nil
}

func (clearBgpIpAddrLongLivedStale *ClearBgpIpAddrLongLivedStale) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpIpAddrLongLivedStale.Input
    return children
}

func (clearBgpIpAddrLongLivedStale *ClearBgpIpAddrLongLivedStale) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpIpAddrLongLivedStale *ClearBgpIpAddrLongLivedStale) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpIpAddrLongLivedStale *ClearBgpIpAddrLongLivedStale) GetYangName() string { return "clear-bgp-ip-addr-long-lived-stale" }

func (clearBgpIpAddrLongLivedStale *ClearBgpIpAddrLongLivedStale) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpIpAddrLongLivedStale *ClearBgpIpAddrLongLivedStale) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpIpAddrLongLivedStale *ClearBgpIpAddrLongLivedStale) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpIpAddrLongLivedStale *ClearBgpIpAddrLongLivedStale) SetParent(parent types.Entity) { clearBgpIpAddrLongLivedStale.parent = parent }

func (clearBgpIpAddrLongLivedStale *ClearBgpIpAddrLongLivedStale) GetParent() types.Entity { return clearBgpIpAddrLongLivedStale.parent }

func (clearBgpIpAddrLongLivedStale *ClearBgpIpAddrLongLivedStale) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpIpAddrLongLivedStale_Input
type ClearBgpIpAddrLongLivedStale_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpIpAddrLongLivedStale_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpIpAddrLongLivedStale_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpIpAddrLongLivedStale_Input) GetGoName(yname string) string {
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpIpAddrLongLivedStale_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpIpAddrLongLivedStale_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpIpAddrLongLivedStale_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpIpAddrLongLivedStale_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpIpAddrLongLivedStale_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpIpAddrLongLivedStale_Input) GetYangName() string { return "input" }

func (input *ClearBgpIpAddrLongLivedStale_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpIpAddrLongLivedStale_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpIpAddrLongLivedStale_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpIpAddrLongLivedStale_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpIpAddrLongLivedStale_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpIpAddrLongLivedStale_Input) GetParentYangName() string { return "clear-bgp-ip-addr-long-lived-stale" }

// ClearBgpIpAddr
// BGP neighbor address to clear.
// 
type ClearBgpIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpIpAddr_Input
}

func (clearBgpIpAddr *ClearBgpIpAddr) GetFilter() yfilter.YFilter { return clearBgpIpAddr.YFilter }

func (clearBgpIpAddr *ClearBgpIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpIpAddr.YFilter = yf }

func (clearBgpIpAddr *ClearBgpIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpIpAddr *ClearBgpIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-ip-addr"
}

func (clearBgpIpAddr *ClearBgpIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpIpAddr.Input
    }
    return nil
}

func (clearBgpIpAddr *ClearBgpIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpIpAddr.Input
    return children
}

func (clearBgpIpAddr *ClearBgpIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpIpAddr *ClearBgpIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpIpAddr *ClearBgpIpAddr) GetYangName() string { return "clear-bgp-ip-addr" }

func (clearBgpIpAddr *ClearBgpIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpIpAddr *ClearBgpIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpIpAddr *ClearBgpIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpIpAddr *ClearBgpIpAddr) SetParent(parent types.Entity) { clearBgpIpAddr.parent = parent }

func (clearBgpIpAddr *ClearBgpIpAddr) GetParent() types.Entity { return clearBgpIpAddr.parent }

func (clearBgpIpAddr *ClearBgpIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpIpAddr_Input
type ClearBgpIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpIpAddr_Input) GetGoName(yname string) string {
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpIpAddr_Input) GetParentYangName() string { return "clear-bgp-ip-addr" }

// ClearBgpAfiSafiAllSoftInPrefixFilter
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpAfiSafiAllSoftInPrefixFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiAllSoftInPrefixFilter_Input
}

func (clearBgpAfiSafiAllSoftInPrefixFilter *ClearBgpAfiSafiAllSoftInPrefixFilter) GetFilter() yfilter.YFilter { return clearBgpAfiSafiAllSoftInPrefixFilter.YFilter }

func (clearBgpAfiSafiAllSoftInPrefixFilter *ClearBgpAfiSafiAllSoftInPrefixFilter) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiAllSoftInPrefixFilter.YFilter = yf }

func (clearBgpAfiSafiAllSoftInPrefixFilter *ClearBgpAfiSafiAllSoftInPrefixFilter) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiAllSoftInPrefixFilter *ClearBgpAfiSafiAllSoftInPrefixFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in-prefix-filter"
}

func (clearBgpAfiSafiAllSoftInPrefixFilter *ClearBgpAfiSafiAllSoftInPrefixFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiAllSoftInPrefixFilter.Input
    }
    return nil
}

func (clearBgpAfiSafiAllSoftInPrefixFilter *ClearBgpAfiSafiAllSoftInPrefixFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiAllSoftInPrefixFilter.Input
    return children
}

func (clearBgpAfiSafiAllSoftInPrefixFilter *ClearBgpAfiSafiAllSoftInPrefixFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiAllSoftInPrefixFilter *ClearBgpAfiSafiAllSoftInPrefixFilter) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiAllSoftInPrefixFilter *ClearBgpAfiSafiAllSoftInPrefixFilter) GetYangName() string { return "clear-bgp-afi-safi-all-soft-in-prefix-filter" }

func (clearBgpAfiSafiAllSoftInPrefixFilter *ClearBgpAfiSafiAllSoftInPrefixFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiAllSoftInPrefixFilter *ClearBgpAfiSafiAllSoftInPrefixFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiAllSoftInPrefixFilter *ClearBgpAfiSafiAllSoftInPrefixFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiAllSoftInPrefixFilter *ClearBgpAfiSafiAllSoftInPrefixFilter) SetParent(parent types.Entity) { clearBgpAfiSafiAllSoftInPrefixFilter.parent = parent }

func (clearBgpAfiSafiAllSoftInPrefixFilter *ClearBgpAfiSafiAllSoftInPrefixFilter) GetParent() types.Entity { return clearBgpAfiSafiAllSoftInPrefixFilter.parent }

func (clearBgpAfiSafiAllSoftInPrefixFilter *ClearBgpAfiSafiAllSoftInPrefixFilter) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiAllSoftInPrefixFilter_Input
type ClearBgpAfiSafiAllSoftInPrefixFilter_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiAllSoftInPrefixFilter_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiAllSoftInPrefixFilter_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiAllSoftInPrefixFilter_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpAfiSafiAllSoftInPrefixFilter_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiAllSoftInPrefixFilter_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiAllSoftInPrefixFilter_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiAllSoftInPrefixFilter_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpAfiSafiAllSoftInPrefixFilter_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiAllSoftInPrefixFilter_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiAllSoftInPrefixFilter_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiAllSoftInPrefixFilter_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiAllSoftInPrefixFilter_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiAllSoftInPrefixFilter_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiAllSoftInPrefixFilter_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiAllSoftInPrefixFilter_Input) GetParentYangName() string { return "clear-bgp-afi-safi-all-soft-in-prefix-filter" }

// ClearBgpAfiSafiAllSoftIn
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpAfiSafiAllSoftIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiAllSoftIn_Input
}

func (clearBgpAfiSafiAllSoftIn *ClearBgpAfiSafiAllSoftIn) GetFilter() yfilter.YFilter { return clearBgpAfiSafiAllSoftIn.YFilter }

func (clearBgpAfiSafiAllSoftIn *ClearBgpAfiSafiAllSoftIn) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiAllSoftIn.YFilter = yf }

func (clearBgpAfiSafiAllSoftIn *ClearBgpAfiSafiAllSoftIn) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiAllSoftIn *ClearBgpAfiSafiAllSoftIn) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-in"
}

func (clearBgpAfiSafiAllSoftIn *ClearBgpAfiSafiAllSoftIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiAllSoftIn.Input
    }
    return nil
}

func (clearBgpAfiSafiAllSoftIn *ClearBgpAfiSafiAllSoftIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiAllSoftIn.Input
    return children
}

func (clearBgpAfiSafiAllSoftIn *ClearBgpAfiSafiAllSoftIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiAllSoftIn *ClearBgpAfiSafiAllSoftIn) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiAllSoftIn *ClearBgpAfiSafiAllSoftIn) GetYangName() string { return "clear-bgp-afi-safi-all-soft-in" }

func (clearBgpAfiSafiAllSoftIn *ClearBgpAfiSafiAllSoftIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiAllSoftIn *ClearBgpAfiSafiAllSoftIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiAllSoftIn *ClearBgpAfiSafiAllSoftIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiAllSoftIn *ClearBgpAfiSafiAllSoftIn) SetParent(parent types.Entity) { clearBgpAfiSafiAllSoftIn.parent = parent }

func (clearBgpAfiSafiAllSoftIn *ClearBgpAfiSafiAllSoftIn) GetParent() types.Entity { return clearBgpAfiSafiAllSoftIn.parent }

func (clearBgpAfiSafiAllSoftIn *ClearBgpAfiSafiAllSoftIn) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiAllSoftIn_Input
type ClearBgpAfiSafiAllSoftIn_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiAllSoftIn_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiAllSoftIn_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiAllSoftIn_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpAfiSafiAllSoftIn_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiAllSoftIn_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiAllSoftIn_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiAllSoftIn_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpAfiSafiAllSoftIn_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiAllSoftIn_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiAllSoftIn_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiAllSoftIn_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiAllSoftIn_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiAllSoftIn_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiAllSoftIn_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiAllSoftIn_Input) GetParentYangName() string { return "clear-bgp-afi-safi-all-soft-in" }

// ClearBgpAfiSafiAllSoftOut
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpAfiSafiAllSoftOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiAllSoftOut_Input
}

func (clearBgpAfiSafiAllSoftOut *ClearBgpAfiSafiAllSoftOut) GetFilter() yfilter.YFilter { return clearBgpAfiSafiAllSoftOut.YFilter }

func (clearBgpAfiSafiAllSoftOut *ClearBgpAfiSafiAllSoftOut) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiAllSoftOut.YFilter = yf }

func (clearBgpAfiSafiAllSoftOut *ClearBgpAfiSafiAllSoftOut) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiAllSoftOut *ClearBgpAfiSafiAllSoftOut) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft-out"
}

func (clearBgpAfiSafiAllSoftOut *ClearBgpAfiSafiAllSoftOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiAllSoftOut.Input
    }
    return nil
}

func (clearBgpAfiSafiAllSoftOut *ClearBgpAfiSafiAllSoftOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiAllSoftOut.Input
    return children
}

func (clearBgpAfiSafiAllSoftOut *ClearBgpAfiSafiAllSoftOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiAllSoftOut *ClearBgpAfiSafiAllSoftOut) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiAllSoftOut *ClearBgpAfiSafiAllSoftOut) GetYangName() string { return "clear-bgp-afi-safi-all-soft-out" }

func (clearBgpAfiSafiAllSoftOut *ClearBgpAfiSafiAllSoftOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiAllSoftOut *ClearBgpAfiSafiAllSoftOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiAllSoftOut *ClearBgpAfiSafiAllSoftOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiAllSoftOut *ClearBgpAfiSafiAllSoftOut) SetParent(parent types.Entity) { clearBgpAfiSafiAllSoftOut.parent = parent }

func (clearBgpAfiSafiAllSoftOut *ClearBgpAfiSafiAllSoftOut) GetParent() types.Entity { return clearBgpAfiSafiAllSoftOut.parent }

func (clearBgpAfiSafiAllSoftOut *ClearBgpAfiSafiAllSoftOut) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiAllSoftOut_Input
type ClearBgpAfiSafiAllSoftOut_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiAllSoftOut_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiAllSoftOut_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiAllSoftOut_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpAfiSafiAllSoftOut_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiAllSoftOut_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiAllSoftOut_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiAllSoftOut_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpAfiSafiAllSoftOut_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiAllSoftOut_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiAllSoftOut_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiAllSoftOut_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiAllSoftOut_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiAllSoftOut_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiAllSoftOut_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiAllSoftOut_Input) GetParentYangName() string { return "clear-bgp-afi-safi-all-soft-out" }

// ClearBgpAfiSafiAllSoft
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// 
type ClearBgpAfiSafiAllSoft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiAllSoft_Input
}

func (clearBgpAfiSafiAllSoft *ClearBgpAfiSafiAllSoft) GetFilter() yfilter.YFilter { return clearBgpAfiSafiAllSoft.YFilter }

func (clearBgpAfiSafiAllSoft *ClearBgpAfiSafiAllSoft) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiAllSoft.YFilter = yf }

func (clearBgpAfiSafiAllSoft *ClearBgpAfiSafiAllSoft) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiAllSoft *ClearBgpAfiSafiAllSoft) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-all-soft"
}

func (clearBgpAfiSafiAllSoft *ClearBgpAfiSafiAllSoft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiAllSoft.Input
    }
    return nil
}

func (clearBgpAfiSafiAllSoft *ClearBgpAfiSafiAllSoft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiAllSoft.Input
    return children
}

func (clearBgpAfiSafiAllSoft *ClearBgpAfiSafiAllSoft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiAllSoft *ClearBgpAfiSafiAllSoft) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiAllSoft *ClearBgpAfiSafiAllSoft) GetYangName() string { return "clear-bgp-afi-safi-all-soft" }

func (clearBgpAfiSafiAllSoft *ClearBgpAfiSafiAllSoft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiAllSoft *ClearBgpAfiSafiAllSoft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiAllSoft *ClearBgpAfiSafiAllSoft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiAllSoft *ClearBgpAfiSafiAllSoft) SetParent(parent types.Entity) { clearBgpAfiSafiAllSoft.parent = parent }

func (clearBgpAfiSafiAllSoft *ClearBgpAfiSafiAllSoft) GetParent() types.Entity { return clearBgpAfiSafiAllSoft.parent }

func (clearBgpAfiSafiAllSoft *ClearBgpAfiSafiAllSoft) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiAllSoft_Input
type ClearBgpAfiSafiAllSoft_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiAllSoft_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiAllSoft_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiAllSoft_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpAfiSafiAllSoft_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiAllSoft_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiAllSoft_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiAllSoft_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpAfiSafiAllSoft_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiAllSoft_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiAllSoft_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiAllSoft_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiAllSoft_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiAllSoft_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiAllSoft_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiAllSoft_Input) GetParentYangName() string { return "clear-bgp-afi-safi-all-soft" }

// ClearBgpAfiSafiIpAddrLongLivedStale
// Clear long-lived-stale routes.
// 
type ClearBgpAfiSafiIpAddrLongLivedStale struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiIpAddrLongLivedStale_Input
}

func (clearBgpAfiSafiIpAddrLongLivedStale *ClearBgpAfiSafiIpAddrLongLivedStale) GetFilter() yfilter.YFilter { return clearBgpAfiSafiIpAddrLongLivedStale.YFilter }

func (clearBgpAfiSafiIpAddrLongLivedStale *ClearBgpAfiSafiIpAddrLongLivedStale) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiIpAddrLongLivedStale.YFilter = yf }

func (clearBgpAfiSafiIpAddrLongLivedStale *ClearBgpAfiSafiIpAddrLongLivedStale) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiIpAddrLongLivedStale *ClearBgpAfiSafiIpAddrLongLivedStale) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-long-lived-stale"
}

func (clearBgpAfiSafiIpAddrLongLivedStale *ClearBgpAfiSafiIpAddrLongLivedStale) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiIpAddrLongLivedStale.Input
    }
    return nil
}

func (clearBgpAfiSafiIpAddrLongLivedStale *ClearBgpAfiSafiIpAddrLongLivedStale) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiIpAddrLongLivedStale.Input
    return children
}

func (clearBgpAfiSafiIpAddrLongLivedStale *ClearBgpAfiSafiIpAddrLongLivedStale) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiIpAddrLongLivedStale *ClearBgpAfiSafiIpAddrLongLivedStale) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiIpAddrLongLivedStale *ClearBgpAfiSafiIpAddrLongLivedStale) GetYangName() string { return "clear-bgp-afi-safi-ip-addr-long-lived-stale" }

func (clearBgpAfiSafiIpAddrLongLivedStale *ClearBgpAfiSafiIpAddrLongLivedStale) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiIpAddrLongLivedStale *ClearBgpAfiSafiIpAddrLongLivedStale) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiIpAddrLongLivedStale *ClearBgpAfiSafiIpAddrLongLivedStale) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiIpAddrLongLivedStale *ClearBgpAfiSafiIpAddrLongLivedStale) SetParent(parent types.Entity) { clearBgpAfiSafiIpAddrLongLivedStale.parent = parent }

func (clearBgpAfiSafiIpAddrLongLivedStale *ClearBgpAfiSafiIpAddrLongLivedStale) GetParent() types.Entity { return clearBgpAfiSafiIpAddrLongLivedStale.parent }

func (clearBgpAfiSafiIpAddrLongLivedStale *ClearBgpAfiSafiIpAddrLongLivedStale) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiIpAddrLongLivedStale_Input
type ClearBgpAfiSafiIpAddrLongLivedStale_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiIpAddrLongLivedStale_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiIpAddrLongLivedStale_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiIpAddrLongLivedStale_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpAfiSafiIpAddrLongLivedStale_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiIpAddrLongLivedStale_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiIpAddrLongLivedStale_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiIpAddrLongLivedStale_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpAfiSafiIpAddrLongLivedStale_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiIpAddrLongLivedStale_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiIpAddrLongLivedStale_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiIpAddrLongLivedStale_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiIpAddrLongLivedStale_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiIpAddrLongLivedStale_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiIpAddrLongLivedStale_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiIpAddrLongLivedStale_Input) GetParentYangName() string { return "clear-bgp-afi-safi-ip-addr-long-lived-stale" }

// ClearBgpAfiSafiIpAddrSoftInPrefixFilter
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpAfiSafiIpAddrSoftInPrefixFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input
}

func (clearBgpAfiSafiIpAddrSoftInPrefixFilter *ClearBgpAfiSafiIpAddrSoftInPrefixFilter) GetFilter() yfilter.YFilter { return clearBgpAfiSafiIpAddrSoftInPrefixFilter.YFilter }

func (clearBgpAfiSafiIpAddrSoftInPrefixFilter *ClearBgpAfiSafiIpAddrSoftInPrefixFilter) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiIpAddrSoftInPrefixFilter.YFilter = yf }

func (clearBgpAfiSafiIpAddrSoftInPrefixFilter *ClearBgpAfiSafiIpAddrSoftInPrefixFilter) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiIpAddrSoftInPrefixFilter *ClearBgpAfiSafiIpAddrSoftInPrefixFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter"
}

func (clearBgpAfiSafiIpAddrSoftInPrefixFilter *ClearBgpAfiSafiIpAddrSoftInPrefixFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiIpAddrSoftInPrefixFilter.Input
    }
    return nil
}

func (clearBgpAfiSafiIpAddrSoftInPrefixFilter *ClearBgpAfiSafiIpAddrSoftInPrefixFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiIpAddrSoftInPrefixFilter.Input
    return children
}

func (clearBgpAfiSafiIpAddrSoftInPrefixFilter *ClearBgpAfiSafiIpAddrSoftInPrefixFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiIpAddrSoftInPrefixFilter *ClearBgpAfiSafiIpAddrSoftInPrefixFilter) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiIpAddrSoftInPrefixFilter *ClearBgpAfiSafiIpAddrSoftInPrefixFilter) GetYangName() string { return "clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter" }

func (clearBgpAfiSafiIpAddrSoftInPrefixFilter *ClearBgpAfiSafiIpAddrSoftInPrefixFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiIpAddrSoftInPrefixFilter *ClearBgpAfiSafiIpAddrSoftInPrefixFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiIpAddrSoftInPrefixFilter *ClearBgpAfiSafiIpAddrSoftInPrefixFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiIpAddrSoftInPrefixFilter *ClearBgpAfiSafiIpAddrSoftInPrefixFilter) SetParent(parent types.Entity) { clearBgpAfiSafiIpAddrSoftInPrefixFilter.parent = parent }

func (clearBgpAfiSafiIpAddrSoftInPrefixFilter *ClearBgpAfiSafiIpAddrSoftInPrefixFilter) GetParent() types.Entity { return clearBgpAfiSafiIpAddrSoftInPrefixFilter.parent }

func (clearBgpAfiSafiIpAddrSoftInPrefixFilter *ClearBgpAfiSafiIpAddrSoftInPrefixFilter) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input
type ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiIpAddrSoftInPrefixFilter_Input) GetParentYangName() string { return "clear-bgp-afi-safi-ip-addr-soft-in-prefix-filter" }

// ClearBgpAfiSafiIpAddrSoftIn
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpAfiSafiIpAddrSoftIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiIpAddrSoftIn_Input
}

func (clearBgpAfiSafiIpAddrSoftIn *ClearBgpAfiSafiIpAddrSoftIn) GetFilter() yfilter.YFilter { return clearBgpAfiSafiIpAddrSoftIn.YFilter }

func (clearBgpAfiSafiIpAddrSoftIn *ClearBgpAfiSafiIpAddrSoftIn) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiIpAddrSoftIn.YFilter = yf }

func (clearBgpAfiSafiIpAddrSoftIn *ClearBgpAfiSafiIpAddrSoftIn) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiIpAddrSoftIn *ClearBgpAfiSafiIpAddrSoftIn) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-in"
}

func (clearBgpAfiSafiIpAddrSoftIn *ClearBgpAfiSafiIpAddrSoftIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiIpAddrSoftIn.Input
    }
    return nil
}

func (clearBgpAfiSafiIpAddrSoftIn *ClearBgpAfiSafiIpAddrSoftIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiIpAddrSoftIn.Input
    return children
}

func (clearBgpAfiSafiIpAddrSoftIn *ClearBgpAfiSafiIpAddrSoftIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiIpAddrSoftIn *ClearBgpAfiSafiIpAddrSoftIn) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiIpAddrSoftIn *ClearBgpAfiSafiIpAddrSoftIn) GetYangName() string { return "clear-bgp-afi-safi-ip-addr-soft-in" }

func (clearBgpAfiSafiIpAddrSoftIn *ClearBgpAfiSafiIpAddrSoftIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiIpAddrSoftIn *ClearBgpAfiSafiIpAddrSoftIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiIpAddrSoftIn *ClearBgpAfiSafiIpAddrSoftIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiIpAddrSoftIn *ClearBgpAfiSafiIpAddrSoftIn) SetParent(parent types.Entity) { clearBgpAfiSafiIpAddrSoftIn.parent = parent }

func (clearBgpAfiSafiIpAddrSoftIn *ClearBgpAfiSafiIpAddrSoftIn) GetParent() types.Entity { return clearBgpAfiSafiIpAddrSoftIn.parent }

func (clearBgpAfiSafiIpAddrSoftIn *ClearBgpAfiSafiIpAddrSoftIn) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiIpAddrSoftIn_Input
type ClearBgpAfiSafiIpAddrSoftIn_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiIpAddrSoftIn_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiIpAddrSoftIn_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiIpAddrSoftIn_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpAfiSafiIpAddrSoftIn_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiIpAddrSoftIn_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiIpAddrSoftIn_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiIpAddrSoftIn_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpAfiSafiIpAddrSoftIn_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiIpAddrSoftIn_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiIpAddrSoftIn_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiIpAddrSoftIn_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiIpAddrSoftIn_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiIpAddrSoftIn_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiIpAddrSoftIn_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiIpAddrSoftIn_Input) GetParentYangName() string { return "clear-bgp-afi-safi-ip-addr-soft-in" }

// ClearBgpAfiSafiIpAddrSoftOut
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpAfiSafiIpAddrSoftOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiIpAddrSoftOut_Input
}

func (clearBgpAfiSafiIpAddrSoftOut *ClearBgpAfiSafiIpAddrSoftOut) GetFilter() yfilter.YFilter { return clearBgpAfiSafiIpAddrSoftOut.YFilter }

func (clearBgpAfiSafiIpAddrSoftOut *ClearBgpAfiSafiIpAddrSoftOut) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiIpAddrSoftOut.YFilter = yf }

func (clearBgpAfiSafiIpAddrSoftOut *ClearBgpAfiSafiIpAddrSoftOut) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiIpAddrSoftOut *ClearBgpAfiSafiIpAddrSoftOut) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft-out"
}

func (clearBgpAfiSafiIpAddrSoftOut *ClearBgpAfiSafiIpAddrSoftOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiIpAddrSoftOut.Input
    }
    return nil
}

func (clearBgpAfiSafiIpAddrSoftOut *ClearBgpAfiSafiIpAddrSoftOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiIpAddrSoftOut.Input
    return children
}

func (clearBgpAfiSafiIpAddrSoftOut *ClearBgpAfiSafiIpAddrSoftOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiIpAddrSoftOut *ClearBgpAfiSafiIpAddrSoftOut) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiIpAddrSoftOut *ClearBgpAfiSafiIpAddrSoftOut) GetYangName() string { return "clear-bgp-afi-safi-ip-addr-soft-out" }

func (clearBgpAfiSafiIpAddrSoftOut *ClearBgpAfiSafiIpAddrSoftOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiIpAddrSoftOut *ClearBgpAfiSafiIpAddrSoftOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiIpAddrSoftOut *ClearBgpAfiSafiIpAddrSoftOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiIpAddrSoftOut *ClearBgpAfiSafiIpAddrSoftOut) SetParent(parent types.Entity) { clearBgpAfiSafiIpAddrSoftOut.parent = parent }

func (clearBgpAfiSafiIpAddrSoftOut *ClearBgpAfiSafiIpAddrSoftOut) GetParent() types.Entity { return clearBgpAfiSafiIpAddrSoftOut.parent }

func (clearBgpAfiSafiIpAddrSoftOut *ClearBgpAfiSafiIpAddrSoftOut) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiIpAddrSoftOut_Input
type ClearBgpAfiSafiIpAddrSoftOut_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiIpAddrSoftOut_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiIpAddrSoftOut_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiIpAddrSoftOut_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpAfiSafiIpAddrSoftOut_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiIpAddrSoftOut_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiIpAddrSoftOut_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiIpAddrSoftOut_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpAfiSafiIpAddrSoftOut_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiIpAddrSoftOut_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiIpAddrSoftOut_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiIpAddrSoftOut_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiIpAddrSoftOut_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiIpAddrSoftOut_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiIpAddrSoftOut_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiIpAddrSoftOut_Input) GetParentYangName() string { return "clear-bgp-afi-safi-ip-addr-soft-out" }

// ClearBgpAfiSafiIpAddrSoft
// Soft reconfig.
// 
type ClearBgpAfiSafiIpAddrSoft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiIpAddrSoft_Input
}

func (clearBgpAfiSafiIpAddrSoft *ClearBgpAfiSafiIpAddrSoft) GetFilter() yfilter.YFilter { return clearBgpAfiSafiIpAddrSoft.YFilter }

func (clearBgpAfiSafiIpAddrSoft *ClearBgpAfiSafiIpAddrSoft) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiIpAddrSoft.YFilter = yf }

func (clearBgpAfiSafiIpAddrSoft *ClearBgpAfiSafiIpAddrSoft) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiIpAddrSoft *ClearBgpAfiSafiIpAddrSoft) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-ip-addr-soft"
}

func (clearBgpAfiSafiIpAddrSoft *ClearBgpAfiSafiIpAddrSoft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiIpAddrSoft.Input
    }
    return nil
}

func (clearBgpAfiSafiIpAddrSoft *ClearBgpAfiSafiIpAddrSoft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiIpAddrSoft.Input
    return children
}

func (clearBgpAfiSafiIpAddrSoft *ClearBgpAfiSafiIpAddrSoft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiIpAddrSoft *ClearBgpAfiSafiIpAddrSoft) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiIpAddrSoft *ClearBgpAfiSafiIpAddrSoft) GetYangName() string { return "clear-bgp-afi-safi-ip-addr-soft" }

func (clearBgpAfiSafiIpAddrSoft *ClearBgpAfiSafiIpAddrSoft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiIpAddrSoft *ClearBgpAfiSafiIpAddrSoft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiIpAddrSoft *ClearBgpAfiSafiIpAddrSoft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiIpAddrSoft *ClearBgpAfiSafiIpAddrSoft) SetParent(parent types.Entity) { clearBgpAfiSafiIpAddrSoft.parent = parent }

func (clearBgpAfiSafiIpAddrSoft *ClearBgpAfiSafiIpAddrSoft) GetParent() types.Entity { return clearBgpAfiSafiIpAddrSoft.parent }

func (clearBgpAfiSafiIpAddrSoft *ClearBgpAfiSafiIpAddrSoft) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiIpAddrSoft_Input
type ClearBgpAfiSafiIpAddrSoft_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiIpAddrSoft_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiIpAddrSoft_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiIpAddrSoft_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpAfiSafiIpAddrSoft_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiIpAddrSoft_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiIpAddrSoft_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiIpAddrSoft_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpAfiSafiIpAddrSoft_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiIpAddrSoft_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiIpAddrSoft_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiIpAddrSoft_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiIpAddrSoft_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiIpAddrSoft_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiIpAddrSoft_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiIpAddrSoft_Input) GetParentYangName() string { return "clear-bgp-afi-safi-ip-addr-soft" }

// ClearBgpAfiSafiAsSoftInPrefixFilter
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpAfiSafiAsSoftInPrefixFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiAsSoftInPrefixFilter_Input
}

func (clearBgpAfiSafiAsSoftInPrefixFilter *ClearBgpAfiSafiAsSoftInPrefixFilter) GetFilter() yfilter.YFilter { return clearBgpAfiSafiAsSoftInPrefixFilter.YFilter }

func (clearBgpAfiSafiAsSoftInPrefixFilter *ClearBgpAfiSafiAsSoftInPrefixFilter) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiAsSoftInPrefixFilter.YFilter = yf }

func (clearBgpAfiSafiAsSoftInPrefixFilter *ClearBgpAfiSafiAsSoftInPrefixFilter) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiAsSoftInPrefixFilter *ClearBgpAfiSafiAsSoftInPrefixFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in-prefix-filter"
}

func (clearBgpAfiSafiAsSoftInPrefixFilter *ClearBgpAfiSafiAsSoftInPrefixFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiAsSoftInPrefixFilter.Input
    }
    return nil
}

func (clearBgpAfiSafiAsSoftInPrefixFilter *ClearBgpAfiSafiAsSoftInPrefixFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiAsSoftInPrefixFilter.Input
    return children
}

func (clearBgpAfiSafiAsSoftInPrefixFilter *ClearBgpAfiSafiAsSoftInPrefixFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiAsSoftInPrefixFilter *ClearBgpAfiSafiAsSoftInPrefixFilter) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiAsSoftInPrefixFilter *ClearBgpAfiSafiAsSoftInPrefixFilter) GetYangName() string { return "clear-bgp-afi-safi-as-soft-in-prefix-filter" }

func (clearBgpAfiSafiAsSoftInPrefixFilter *ClearBgpAfiSafiAsSoftInPrefixFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiAsSoftInPrefixFilter *ClearBgpAfiSafiAsSoftInPrefixFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiAsSoftInPrefixFilter *ClearBgpAfiSafiAsSoftInPrefixFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiAsSoftInPrefixFilter *ClearBgpAfiSafiAsSoftInPrefixFilter) SetParent(parent types.Entity) { clearBgpAfiSafiAsSoftInPrefixFilter.parent = parent }

func (clearBgpAfiSafiAsSoftInPrefixFilter *ClearBgpAfiSafiAsSoftInPrefixFilter) GetParent() types.Entity { return clearBgpAfiSafiAsSoftInPrefixFilter.parent }

func (clearBgpAfiSafiAsSoftInPrefixFilter *ClearBgpAfiSafiAsSoftInPrefixFilter) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiAsSoftInPrefixFilter_Input
type ClearBgpAfiSafiAsSoftInPrefixFilter_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpAfiSafiAsSoftInPrefixFilter_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiAsSoftInPrefixFilter_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiAsSoftInPrefixFilter_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpAfiSafiAsSoftInPrefixFilter_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiAsSoftInPrefixFilter_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiAsSoftInPrefixFilter_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiAsSoftInPrefixFilter_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpAfiSafiAsSoftInPrefixFilter_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiAsSoftInPrefixFilter_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiAsSoftInPrefixFilter_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiAsSoftInPrefixFilter_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiAsSoftInPrefixFilter_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiAsSoftInPrefixFilter_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiAsSoftInPrefixFilter_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiAsSoftInPrefixFilter_Input) GetParentYangName() string { return "clear-bgp-afi-safi-as-soft-in-prefix-filter" }

// ClearBgpAfiSafiAsSoftIn
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpAfiSafiAsSoftIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiAsSoftIn_Input
}

func (clearBgpAfiSafiAsSoftIn *ClearBgpAfiSafiAsSoftIn) GetFilter() yfilter.YFilter { return clearBgpAfiSafiAsSoftIn.YFilter }

func (clearBgpAfiSafiAsSoftIn *ClearBgpAfiSafiAsSoftIn) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiAsSoftIn.YFilter = yf }

func (clearBgpAfiSafiAsSoftIn *ClearBgpAfiSafiAsSoftIn) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiAsSoftIn *ClearBgpAfiSafiAsSoftIn) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-in"
}

func (clearBgpAfiSafiAsSoftIn *ClearBgpAfiSafiAsSoftIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiAsSoftIn.Input
    }
    return nil
}

func (clearBgpAfiSafiAsSoftIn *ClearBgpAfiSafiAsSoftIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiAsSoftIn.Input
    return children
}

func (clearBgpAfiSafiAsSoftIn *ClearBgpAfiSafiAsSoftIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiAsSoftIn *ClearBgpAfiSafiAsSoftIn) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiAsSoftIn *ClearBgpAfiSafiAsSoftIn) GetYangName() string { return "clear-bgp-afi-safi-as-soft-in" }

func (clearBgpAfiSafiAsSoftIn *ClearBgpAfiSafiAsSoftIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiAsSoftIn *ClearBgpAfiSafiAsSoftIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiAsSoftIn *ClearBgpAfiSafiAsSoftIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiAsSoftIn *ClearBgpAfiSafiAsSoftIn) SetParent(parent types.Entity) { clearBgpAfiSafiAsSoftIn.parent = parent }

func (clearBgpAfiSafiAsSoftIn *ClearBgpAfiSafiAsSoftIn) GetParent() types.Entity { return clearBgpAfiSafiAsSoftIn.parent }

func (clearBgpAfiSafiAsSoftIn *ClearBgpAfiSafiAsSoftIn) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiAsSoftIn_Input
type ClearBgpAfiSafiAsSoftIn_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpAfiSafiAsSoftIn_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiAsSoftIn_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiAsSoftIn_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpAfiSafiAsSoftIn_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiAsSoftIn_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiAsSoftIn_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiAsSoftIn_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpAfiSafiAsSoftIn_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiAsSoftIn_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiAsSoftIn_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiAsSoftIn_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiAsSoftIn_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiAsSoftIn_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiAsSoftIn_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiAsSoftIn_Input) GetParentYangName() string { return "clear-bgp-afi-safi-as-soft-in" }

// ClearBgpAfiSafiAsSoftOut
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpAfiSafiAsSoftOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiAsSoftOut_Input
}

func (clearBgpAfiSafiAsSoftOut *ClearBgpAfiSafiAsSoftOut) GetFilter() yfilter.YFilter { return clearBgpAfiSafiAsSoftOut.YFilter }

func (clearBgpAfiSafiAsSoftOut *ClearBgpAfiSafiAsSoftOut) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiAsSoftOut.YFilter = yf }

func (clearBgpAfiSafiAsSoftOut *ClearBgpAfiSafiAsSoftOut) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiAsSoftOut *ClearBgpAfiSafiAsSoftOut) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft-out"
}

func (clearBgpAfiSafiAsSoftOut *ClearBgpAfiSafiAsSoftOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiAsSoftOut.Input
    }
    return nil
}

func (clearBgpAfiSafiAsSoftOut *ClearBgpAfiSafiAsSoftOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiAsSoftOut.Input
    return children
}

func (clearBgpAfiSafiAsSoftOut *ClearBgpAfiSafiAsSoftOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiAsSoftOut *ClearBgpAfiSafiAsSoftOut) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiAsSoftOut *ClearBgpAfiSafiAsSoftOut) GetYangName() string { return "clear-bgp-afi-safi-as-soft-out" }

func (clearBgpAfiSafiAsSoftOut *ClearBgpAfiSafiAsSoftOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiAsSoftOut *ClearBgpAfiSafiAsSoftOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiAsSoftOut *ClearBgpAfiSafiAsSoftOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiAsSoftOut *ClearBgpAfiSafiAsSoftOut) SetParent(parent types.Entity) { clearBgpAfiSafiAsSoftOut.parent = parent }

func (clearBgpAfiSafiAsSoftOut *ClearBgpAfiSafiAsSoftOut) GetParent() types.Entity { return clearBgpAfiSafiAsSoftOut.parent }

func (clearBgpAfiSafiAsSoftOut *ClearBgpAfiSafiAsSoftOut) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiAsSoftOut_Input
type ClearBgpAfiSafiAsSoftOut_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpAfiSafiAsSoftOut_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiAsSoftOut_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiAsSoftOut_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpAfiSafiAsSoftOut_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiAsSoftOut_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiAsSoftOut_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiAsSoftOut_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpAfiSafiAsSoftOut_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiAsSoftOut_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiAsSoftOut_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiAsSoftOut_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiAsSoftOut_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiAsSoftOut_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiAsSoftOut_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiAsSoftOut_Input) GetParentYangName() string { return "clear-bgp-afi-safi-as-soft-out" }

// ClearBgpAfiSafiAsSoft
// Clear peers in a specific AS.
// Soft reconfig.
// 
type ClearBgpAfiSafiAsSoft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiAsSoft_Input
}

func (clearBgpAfiSafiAsSoft *ClearBgpAfiSafiAsSoft) GetFilter() yfilter.YFilter { return clearBgpAfiSafiAsSoft.YFilter }

func (clearBgpAfiSafiAsSoft *ClearBgpAfiSafiAsSoft) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiAsSoft.YFilter = yf }

func (clearBgpAfiSafiAsSoft *ClearBgpAfiSafiAsSoft) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiAsSoft *ClearBgpAfiSafiAsSoft) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-as-soft"
}

func (clearBgpAfiSafiAsSoft *ClearBgpAfiSafiAsSoft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiAsSoft.Input
    }
    return nil
}

func (clearBgpAfiSafiAsSoft *ClearBgpAfiSafiAsSoft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiAsSoft.Input
    return children
}

func (clearBgpAfiSafiAsSoft *ClearBgpAfiSafiAsSoft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiAsSoft *ClearBgpAfiSafiAsSoft) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiAsSoft *ClearBgpAfiSafiAsSoft) GetYangName() string { return "clear-bgp-afi-safi-as-soft" }

func (clearBgpAfiSafiAsSoft *ClearBgpAfiSafiAsSoft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiAsSoft *ClearBgpAfiSafiAsSoft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiAsSoft *ClearBgpAfiSafiAsSoft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiAsSoft *ClearBgpAfiSafiAsSoft) SetParent(parent types.Entity) { clearBgpAfiSafiAsSoft.parent = parent }

func (clearBgpAfiSafiAsSoft *ClearBgpAfiSafiAsSoft) GetParent() types.Entity { return clearBgpAfiSafiAsSoft.parent }

func (clearBgpAfiSafiAsSoft *ClearBgpAfiSafiAsSoft) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiAsSoft_Input
type ClearBgpAfiSafiAsSoft_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpAfiSafiAsSoft_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiAsSoft_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiAsSoft_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpAfiSafiAsSoft_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiAsSoft_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiAsSoft_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiAsSoft_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpAfiSafiAsSoft_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiAsSoft_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiAsSoft_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiAsSoft_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiAsSoft_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiAsSoft_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiAsSoft_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiAsSoft_Input) GetParentYangName() string { return "clear-bgp-afi-safi-as-soft" }

// ClearBgpAfiSafiDampeningIpPrefix
// Clear route flap dampening information.
// 
type ClearBgpAfiSafiDampeningIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiDampeningIpPrefix_Input
}

func (clearBgpAfiSafiDampeningIpPrefix *ClearBgpAfiSafiDampeningIpPrefix) GetFilter() yfilter.YFilter { return clearBgpAfiSafiDampeningIpPrefix.YFilter }

func (clearBgpAfiSafiDampeningIpPrefix *ClearBgpAfiSafiDampeningIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiDampeningIpPrefix.YFilter = yf }

func (clearBgpAfiSafiDampeningIpPrefix *ClearBgpAfiSafiDampeningIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiDampeningIpPrefix *ClearBgpAfiSafiDampeningIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ip-prefix"
}

func (clearBgpAfiSafiDampeningIpPrefix *ClearBgpAfiSafiDampeningIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiDampeningIpPrefix.Input
    }
    return nil
}

func (clearBgpAfiSafiDampeningIpPrefix *ClearBgpAfiSafiDampeningIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiDampeningIpPrefix.Input
    return children
}

func (clearBgpAfiSafiDampeningIpPrefix *ClearBgpAfiSafiDampeningIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiDampeningIpPrefix *ClearBgpAfiSafiDampeningIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiDampeningIpPrefix *ClearBgpAfiSafiDampeningIpPrefix) GetYangName() string { return "clear-bgp-afi-safi-dampening-ip-prefix" }

func (clearBgpAfiSafiDampeningIpPrefix *ClearBgpAfiSafiDampeningIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiDampeningIpPrefix *ClearBgpAfiSafiDampeningIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiDampeningIpPrefix *ClearBgpAfiSafiDampeningIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiDampeningIpPrefix *ClearBgpAfiSafiDampeningIpPrefix) SetParent(parent types.Entity) { clearBgpAfiSafiDampeningIpPrefix.parent = parent }

func (clearBgpAfiSafiDampeningIpPrefix *ClearBgpAfiSafiDampeningIpPrefix) GetParent() types.Entity { return clearBgpAfiSafiDampeningIpPrefix.parent }

func (clearBgpAfiSafiDampeningIpPrefix *ClearBgpAfiSafiDampeningIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiDampeningIpPrefix_Input
type ClearBgpAfiSafiDampeningIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network and mask or masklength to clear dampening information. The type is
    // one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpAfiSafiDampeningIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiDampeningIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiDampeningIpPrefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpAfiSafiDampeningIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiDampeningIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiDampeningIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiDampeningIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpAfiSafiDampeningIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiDampeningIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiDampeningIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiDampeningIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiDampeningIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiDampeningIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiDampeningIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiDampeningIpPrefix_Input) GetParentYangName() string { return "clear-bgp-afi-safi-dampening-ip-prefix" }

// ClearBgpAfiSafiDampening
// Clear route flap dampening information.
// 
type ClearBgpAfiSafiDampening struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiDampening_Input
}

func (clearBgpAfiSafiDampening *ClearBgpAfiSafiDampening) GetFilter() yfilter.YFilter { return clearBgpAfiSafiDampening.YFilter }

func (clearBgpAfiSafiDampening *ClearBgpAfiSafiDampening) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiDampening.YFilter = yf }

func (clearBgpAfiSafiDampening *ClearBgpAfiSafiDampening) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiDampening *ClearBgpAfiSafiDampening) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening"
}

func (clearBgpAfiSafiDampening *ClearBgpAfiSafiDampening) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiDampening.Input
    }
    return nil
}

func (clearBgpAfiSafiDampening *ClearBgpAfiSafiDampening) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiDampening.Input
    return children
}

func (clearBgpAfiSafiDampening *ClearBgpAfiSafiDampening) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiDampening *ClearBgpAfiSafiDampening) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiDampening *ClearBgpAfiSafiDampening) GetYangName() string { return "clear-bgp-afi-safi-dampening" }

func (clearBgpAfiSafiDampening *ClearBgpAfiSafiDampening) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiDampening *ClearBgpAfiSafiDampening) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiDampening *ClearBgpAfiSafiDampening) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiDampening *ClearBgpAfiSafiDampening) SetParent(parent types.Entity) { clearBgpAfiSafiDampening.parent = parent }

func (clearBgpAfiSafiDampening *ClearBgpAfiSafiDampening) GetParent() types.Entity { return clearBgpAfiSafiDampening.parent }

func (clearBgpAfiSafiDampening *ClearBgpAfiSafiDampening) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiDampening_Input
type ClearBgpAfiSafiDampening_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiDampening_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiDampening_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiDampening_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpAfiSafiDampening_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiDampening_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiDampening_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiDampening_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpAfiSafiDampening_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiDampening_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiDampening_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiDampening_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiDampening_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiDampening_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiDampening_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiDampening_Input) GetParentYangName() string { return "clear-bgp-afi-safi-dampening" }

// ClearBgpAfiSafiExternalSoftInPrefixFilter
// Clear all external peers.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpAfiSafiExternalSoftInPrefixFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiExternalSoftInPrefixFilter_Input
}

func (clearBgpAfiSafiExternalSoftInPrefixFilter *ClearBgpAfiSafiExternalSoftInPrefixFilter) GetFilter() yfilter.YFilter { return clearBgpAfiSafiExternalSoftInPrefixFilter.YFilter }

func (clearBgpAfiSafiExternalSoftInPrefixFilter *ClearBgpAfiSafiExternalSoftInPrefixFilter) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiExternalSoftInPrefixFilter.YFilter = yf }

func (clearBgpAfiSafiExternalSoftInPrefixFilter *ClearBgpAfiSafiExternalSoftInPrefixFilter) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiExternalSoftInPrefixFilter *ClearBgpAfiSafiExternalSoftInPrefixFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in-prefix-filter"
}

func (clearBgpAfiSafiExternalSoftInPrefixFilter *ClearBgpAfiSafiExternalSoftInPrefixFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiExternalSoftInPrefixFilter.Input
    }
    return nil
}

func (clearBgpAfiSafiExternalSoftInPrefixFilter *ClearBgpAfiSafiExternalSoftInPrefixFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiExternalSoftInPrefixFilter.Input
    return children
}

func (clearBgpAfiSafiExternalSoftInPrefixFilter *ClearBgpAfiSafiExternalSoftInPrefixFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiExternalSoftInPrefixFilter *ClearBgpAfiSafiExternalSoftInPrefixFilter) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiExternalSoftInPrefixFilter *ClearBgpAfiSafiExternalSoftInPrefixFilter) GetYangName() string { return "clear-bgp-afi-safi-external-soft-in-prefix-filter" }

func (clearBgpAfiSafiExternalSoftInPrefixFilter *ClearBgpAfiSafiExternalSoftInPrefixFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiExternalSoftInPrefixFilter *ClearBgpAfiSafiExternalSoftInPrefixFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiExternalSoftInPrefixFilter *ClearBgpAfiSafiExternalSoftInPrefixFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiExternalSoftInPrefixFilter *ClearBgpAfiSafiExternalSoftInPrefixFilter) SetParent(parent types.Entity) { clearBgpAfiSafiExternalSoftInPrefixFilter.parent = parent }

func (clearBgpAfiSafiExternalSoftInPrefixFilter *ClearBgpAfiSafiExternalSoftInPrefixFilter) GetParent() types.Entity { return clearBgpAfiSafiExternalSoftInPrefixFilter.parent }

func (clearBgpAfiSafiExternalSoftInPrefixFilter *ClearBgpAfiSafiExternalSoftInPrefixFilter) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiExternalSoftInPrefixFilter_Input
type ClearBgpAfiSafiExternalSoftInPrefixFilter_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiExternalSoftInPrefixFilter_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiExternalSoftInPrefixFilter_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiExternalSoftInPrefixFilter_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpAfiSafiExternalSoftInPrefixFilter_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiExternalSoftInPrefixFilter_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiExternalSoftInPrefixFilter_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiExternalSoftInPrefixFilter_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpAfiSafiExternalSoftInPrefixFilter_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiExternalSoftInPrefixFilter_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiExternalSoftInPrefixFilter_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiExternalSoftInPrefixFilter_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiExternalSoftInPrefixFilter_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiExternalSoftInPrefixFilter_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiExternalSoftInPrefixFilter_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiExternalSoftInPrefixFilter_Input) GetParentYangName() string { return "clear-bgp-afi-safi-external-soft-in-prefix-filter" }

// ClearBgpAfiSafiExternalSoftIn
// Clear all external peers.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpAfiSafiExternalSoftIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiExternalSoftIn_Input
}

func (clearBgpAfiSafiExternalSoftIn *ClearBgpAfiSafiExternalSoftIn) GetFilter() yfilter.YFilter { return clearBgpAfiSafiExternalSoftIn.YFilter }

func (clearBgpAfiSafiExternalSoftIn *ClearBgpAfiSafiExternalSoftIn) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiExternalSoftIn.YFilter = yf }

func (clearBgpAfiSafiExternalSoftIn *ClearBgpAfiSafiExternalSoftIn) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiExternalSoftIn *ClearBgpAfiSafiExternalSoftIn) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-in"
}

func (clearBgpAfiSafiExternalSoftIn *ClearBgpAfiSafiExternalSoftIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiExternalSoftIn.Input
    }
    return nil
}

func (clearBgpAfiSafiExternalSoftIn *ClearBgpAfiSafiExternalSoftIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiExternalSoftIn.Input
    return children
}

func (clearBgpAfiSafiExternalSoftIn *ClearBgpAfiSafiExternalSoftIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiExternalSoftIn *ClearBgpAfiSafiExternalSoftIn) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiExternalSoftIn *ClearBgpAfiSafiExternalSoftIn) GetYangName() string { return "clear-bgp-afi-safi-external-soft-in" }

func (clearBgpAfiSafiExternalSoftIn *ClearBgpAfiSafiExternalSoftIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiExternalSoftIn *ClearBgpAfiSafiExternalSoftIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiExternalSoftIn *ClearBgpAfiSafiExternalSoftIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiExternalSoftIn *ClearBgpAfiSafiExternalSoftIn) SetParent(parent types.Entity) { clearBgpAfiSafiExternalSoftIn.parent = parent }

func (clearBgpAfiSafiExternalSoftIn *ClearBgpAfiSafiExternalSoftIn) GetParent() types.Entity { return clearBgpAfiSafiExternalSoftIn.parent }

func (clearBgpAfiSafiExternalSoftIn *ClearBgpAfiSafiExternalSoftIn) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiExternalSoftIn_Input
type ClearBgpAfiSafiExternalSoftIn_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiExternalSoftIn_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiExternalSoftIn_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiExternalSoftIn_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpAfiSafiExternalSoftIn_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiExternalSoftIn_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiExternalSoftIn_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiExternalSoftIn_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpAfiSafiExternalSoftIn_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiExternalSoftIn_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiExternalSoftIn_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiExternalSoftIn_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiExternalSoftIn_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiExternalSoftIn_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiExternalSoftIn_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiExternalSoftIn_Input) GetParentYangName() string { return "clear-bgp-afi-safi-external-soft-in" }

// ClearBgpAfiSafiExternalSoftOut
// Clear all external peers.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpAfiSafiExternalSoftOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiExternalSoftOut_Input
}

func (clearBgpAfiSafiExternalSoftOut *ClearBgpAfiSafiExternalSoftOut) GetFilter() yfilter.YFilter { return clearBgpAfiSafiExternalSoftOut.YFilter }

func (clearBgpAfiSafiExternalSoftOut *ClearBgpAfiSafiExternalSoftOut) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiExternalSoftOut.YFilter = yf }

func (clearBgpAfiSafiExternalSoftOut *ClearBgpAfiSafiExternalSoftOut) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiExternalSoftOut *ClearBgpAfiSafiExternalSoftOut) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft-out"
}

func (clearBgpAfiSafiExternalSoftOut *ClearBgpAfiSafiExternalSoftOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiExternalSoftOut.Input
    }
    return nil
}

func (clearBgpAfiSafiExternalSoftOut *ClearBgpAfiSafiExternalSoftOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiExternalSoftOut.Input
    return children
}

func (clearBgpAfiSafiExternalSoftOut *ClearBgpAfiSafiExternalSoftOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiExternalSoftOut *ClearBgpAfiSafiExternalSoftOut) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiExternalSoftOut *ClearBgpAfiSafiExternalSoftOut) GetYangName() string { return "clear-bgp-afi-safi-external-soft-out" }

func (clearBgpAfiSafiExternalSoftOut *ClearBgpAfiSafiExternalSoftOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiExternalSoftOut *ClearBgpAfiSafiExternalSoftOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiExternalSoftOut *ClearBgpAfiSafiExternalSoftOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiExternalSoftOut *ClearBgpAfiSafiExternalSoftOut) SetParent(parent types.Entity) { clearBgpAfiSafiExternalSoftOut.parent = parent }

func (clearBgpAfiSafiExternalSoftOut *ClearBgpAfiSafiExternalSoftOut) GetParent() types.Entity { return clearBgpAfiSafiExternalSoftOut.parent }

func (clearBgpAfiSafiExternalSoftOut *ClearBgpAfiSafiExternalSoftOut) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiExternalSoftOut_Input
type ClearBgpAfiSafiExternalSoftOut_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiExternalSoftOut_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiExternalSoftOut_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiExternalSoftOut_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpAfiSafiExternalSoftOut_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiExternalSoftOut_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiExternalSoftOut_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiExternalSoftOut_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpAfiSafiExternalSoftOut_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiExternalSoftOut_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiExternalSoftOut_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiExternalSoftOut_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiExternalSoftOut_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiExternalSoftOut_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiExternalSoftOut_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiExternalSoftOut_Input) GetParentYangName() string { return "clear-bgp-afi-safi-external-soft-out" }

// ClearBgpAfiSafiExternalSoft
// Clear all external peers.
// Soft reconfig.
// 
type ClearBgpAfiSafiExternalSoft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiExternalSoft_Input
}

func (clearBgpAfiSafiExternalSoft *ClearBgpAfiSafiExternalSoft) GetFilter() yfilter.YFilter { return clearBgpAfiSafiExternalSoft.YFilter }

func (clearBgpAfiSafiExternalSoft *ClearBgpAfiSafiExternalSoft) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiExternalSoft.YFilter = yf }

func (clearBgpAfiSafiExternalSoft *ClearBgpAfiSafiExternalSoft) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiExternalSoft *ClearBgpAfiSafiExternalSoft) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-external-soft"
}

func (clearBgpAfiSafiExternalSoft *ClearBgpAfiSafiExternalSoft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiExternalSoft.Input
    }
    return nil
}

func (clearBgpAfiSafiExternalSoft *ClearBgpAfiSafiExternalSoft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiExternalSoft.Input
    return children
}

func (clearBgpAfiSafiExternalSoft *ClearBgpAfiSafiExternalSoft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiExternalSoft *ClearBgpAfiSafiExternalSoft) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiExternalSoft *ClearBgpAfiSafiExternalSoft) GetYangName() string { return "clear-bgp-afi-safi-external-soft" }

func (clearBgpAfiSafiExternalSoft *ClearBgpAfiSafiExternalSoft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiExternalSoft *ClearBgpAfiSafiExternalSoft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiExternalSoft *ClearBgpAfiSafiExternalSoft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiExternalSoft *ClearBgpAfiSafiExternalSoft) SetParent(parent types.Entity) { clearBgpAfiSafiExternalSoft.parent = parent }

func (clearBgpAfiSafiExternalSoft *ClearBgpAfiSafiExternalSoft) GetParent() types.Entity { return clearBgpAfiSafiExternalSoft.parent }

func (clearBgpAfiSafiExternalSoft *ClearBgpAfiSafiExternalSoft) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiExternalSoft_Input
type ClearBgpAfiSafiExternalSoft_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiExternalSoft_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiExternalSoft_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiExternalSoft_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpAfiSafiExternalSoft_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiExternalSoft_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiExternalSoft_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiExternalSoft_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpAfiSafiExternalSoft_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiExternalSoft_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiExternalSoft_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiExternalSoft_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiExternalSoft_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiExternalSoft_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiExternalSoft_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiExternalSoft_Input) GetParentYangName() string { return "clear-bgp-afi-safi-external-soft" }

// ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask
// Clear flap statistics.
// 
type ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input
}

func (clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.YFilter }

func (clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.YFilter = yf }

func (clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask"
}

func (clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.Input
    return children
}

func (clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask) GetYangName() string { return "clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask" }

func (clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask) SetParent(parent types.Entity) { clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.parent = parent }

func (clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask) GetParent() types.Entity { return clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask.parent }

func (clearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input
type ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Network and mask or masklength to clear flap statistics. The type is string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-afi-safi-flap-statistics-ip-addr-ipv4-mask" }

// ClearBgpAfiSafiFlapStatisticsIpAddr
// Clear flap statistics.
// 
type ClearBgpAfiSafiFlapStatisticsIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiFlapStatisticsIpAddr_Input
}

func (clearBgpAfiSafiFlapStatisticsIpAddr *ClearBgpAfiSafiFlapStatisticsIpAddr) GetFilter() yfilter.YFilter { return clearBgpAfiSafiFlapStatisticsIpAddr.YFilter }

func (clearBgpAfiSafiFlapStatisticsIpAddr *ClearBgpAfiSafiFlapStatisticsIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiFlapStatisticsIpAddr.YFilter = yf }

func (clearBgpAfiSafiFlapStatisticsIpAddr *ClearBgpAfiSafiFlapStatisticsIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiFlapStatisticsIpAddr *ClearBgpAfiSafiFlapStatisticsIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-addr"
}

func (clearBgpAfiSafiFlapStatisticsIpAddr *ClearBgpAfiSafiFlapStatisticsIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiFlapStatisticsIpAddr.Input
    }
    return nil
}

func (clearBgpAfiSafiFlapStatisticsIpAddr *ClearBgpAfiSafiFlapStatisticsIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiFlapStatisticsIpAddr.Input
    return children
}

func (clearBgpAfiSafiFlapStatisticsIpAddr *ClearBgpAfiSafiFlapStatisticsIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiFlapStatisticsIpAddr *ClearBgpAfiSafiFlapStatisticsIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiFlapStatisticsIpAddr *ClearBgpAfiSafiFlapStatisticsIpAddr) GetYangName() string { return "clear-bgp-afi-safi-flap-statistics-ip-addr" }

func (clearBgpAfiSafiFlapStatisticsIpAddr *ClearBgpAfiSafiFlapStatisticsIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiFlapStatisticsIpAddr *ClearBgpAfiSafiFlapStatisticsIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiFlapStatisticsIpAddr *ClearBgpAfiSafiFlapStatisticsIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiFlapStatisticsIpAddr *ClearBgpAfiSafiFlapStatisticsIpAddr) SetParent(parent types.Entity) { clearBgpAfiSafiFlapStatisticsIpAddr.parent = parent }

func (clearBgpAfiSafiFlapStatisticsIpAddr *ClearBgpAfiSafiFlapStatisticsIpAddr) GetParent() types.Entity { return clearBgpAfiSafiFlapStatisticsIpAddr.parent }

func (clearBgpAfiSafiFlapStatisticsIpAddr *ClearBgpAfiSafiFlapStatisticsIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiFlapStatisticsIpAddr_Input
type ClearBgpAfiSafiFlapStatisticsIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiFlapStatisticsIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiFlapStatisticsIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiFlapStatisticsIpAddr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpAfiSafiFlapStatisticsIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiFlapStatisticsIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiFlapStatisticsIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiFlapStatisticsIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpAfiSafiFlapStatisticsIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiFlapStatisticsIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiFlapStatisticsIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiFlapStatisticsIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiFlapStatisticsIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiFlapStatisticsIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiFlapStatisticsIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiFlapStatisticsIpAddr_Input) GetParentYangName() string { return "clear-bgp-afi-safi-flap-statistics-ip-addr" }

// ClearBgpAfiSafiFlapStatisticsIpPrefix
// Clear flap statistics.
// 
type ClearBgpAfiSafiFlapStatisticsIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiFlapStatisticsIpPrefix_Input
}

func (clearBgpAfiSafiFlapStatisticsIpPrefix *ClearBgpAfiSafiFlapStatisticsIpPrefix) GetFilter() yfilter.YFilter { return clearBgpAfiSafiFlapStatisticsIpPrefix.YFilter }

func (clearBgpAfiSafiFlapStatisticsIpPrefix *ClearBgpAfiSafiFlapStatisticsIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiFlapStatisticsIpPrefix.YFilter = yf }

func (clearBgpAfiSafiFlapStatisticsIpPrefix *ClearBgpAfiSafiFlapStatisticsIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiFlapStatisticsIpPrefix *ClearBgpAfiSafiFlapStatisticsIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ip-prefix"
}

func (clearBgpAfiSafiFlapStatisticsIpPrefix *ClearBgpAfiSafiFlapStatisticsIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiFlapStatisticsIpPrefix.Input
    }
    return nil
}

func (clearBgpAfiSafiFlapStatisticsIpPrefix *ClearBgpAfiSafiFlapStatisticsIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiFlapStatisticsIpPrefix.Input
    return children
}

func (clearBgpAfiSafiFlapStatisticsIpPrefix *ClearBgpAfiSafiFlapStatisticsIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiFlapStatisticsIpPrefix *ClearBgpAfiSafiFlapStatisticsIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiFlapStatisticsIpPrefix *ClearBgpAfiSafiFlapStatisticsIpPrefix) GetYangName() string { return "clear-bgp-afi-safi-flap-statistics-ip-prefix" }

func (clearBgpAfiSafiFlapStatisticsIpPrefix *ClearBgpAfiSafiFlapStatisticsIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiFlapStatisticsIpPrefix *ClearBgpAfiSafiFlapStatisticsIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiFlapStatisticsIpPrefix *ClearBgpAfiSafiFlapStatisticsIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiFlapStatisticsIpPrefix *ClearBgpAfiSafiFlapStatisticsIpPrefix) SetParent(parent types.Entity) { clearBgpAfiSafiFlapStatisticsIpPrefix.parent = parent }

func (clearBgpAfiSafiFlapStatisticsIpPrefix *ClearBgpAfiSafiFlapStatisticsIpPrefix) GetParent() types.Entity { return clearBgpAfiSafiFlapStatisticsIpPrefix.parent }

func (clearBgpAfiSafiFlapStatisticsIpPrefix *ClearBgpAfiSafiFlapStatisticsIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiFlapStatisticsIpPrefix_Input
type ClearBgpAfiSafiFlapStatisticsIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network and mask or masklength to clear flap statistics. The type is one of
    // the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpAfiSafiFlapStatisticsIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiFlapStatisticsIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiFlapStatisticsIpPrefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpAfiSafiFlapStatisticsIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiFlapStatisticsIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiFlapStatisticsIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiFlapStatisticsIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpAfiSafiFlapStatisticsIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiFlapStatisticsIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiFlapStatisticsIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiFlapStatisticsIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiFlapStatisticsIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiFlapStatisticsIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiFlapStatisticsIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiFlapStatisticsIpPrefix_Input) GetParentYangName() string { return "clear-bgp-afi-safi-flap-statistics-ip-prefix" }

// ClearBgpAfiSafiFlapStatisticsRegexp
// Clear flap statistics.
// Clear flap statistics for routes matching the regular expression.
// 
type ClearBgpAfiSafiFlapStatisticsRegexp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiFlapStatisticsRegexp_Input
}

func (clearBgpAfiSafiFlapStatisticsRegexp *ClearBgpAfiSafiFlapStatisticsRegexp) GetFilter() yfilter.YFilter { return clearBgpAfiSafiFlapStatisticsRegexp.YFilter }

func (clearBgpAfiSafiFlapStatisticsRegexp *ClearBgpAfiSafiFlapStatisticsRegexp) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiFlapStatisticsRegexp.YFilter = yf }

func (clearBgpAfiSafiFlapStatisticsRegexp *ClearBgpAfiSafiFlapStatisticsRegexp) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiFlapStatisticsRegexp *ClearBgpAfiSafiFlapStatisticsRegexp) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-regexp"
}

func (clearBgpAfiSafiFlapStatisticsRegexp *ClearBgpAfiSafiFlapStatisticsRegexp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiFlapStatisticsRegexp.Input
    }
    return nil
}

func (clearBgpAfiSafiFlapStatisticsRegexp *ClearBgpAfiSafiFlapStatisticsRegexp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiFlapStatisticsRegexp.Input
    return children
}

func (clearBgpAfiSafiFlapStatisticsRegexp *ClearBgpAfiSafiFlapStatisticsRegexp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiFlapStatisticsRegexp *ClearBgpAfiSafiFlapStatisticsRegexp) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiFlapStatisticsRegexp *ClearBgpAfiSafiFlapStatisticsRegexp) GetYangName() string { return "clear-bgp-afi-safi-flap-statistics-regexp" }

func (clearBgpAfiSafiFlapStatisticsRegexp *ClearBgpAfiSafiFlapStatisticsRegexp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiFlapStatisticsRegexp *ClearBgpAfiSafiFlapStatisticsRegexp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiFlapStatisticsRegexp *ClearBgpAfiSafiFlapStatisticsRegexp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiFlapStatisticsRegexp *ClearBgpAfiSafiFlapStatisticsRegexp) SetParent(parent types.Entity) { clearBgpAfiSafiFlapStatisticsRegexp.parent = parent }

func (clearBgpAfiSafiFlapStatisticsRegexp *ClearBgpAfiSafiFlapStatisticsRegexp) GetParent() types.Entity { return clearBgpAfiSafiFlapStatisticsRegexp.parent }

func (clearBgpAfiSafiFlapStatisticsRegexp *ClearBgpAfiSafiFlapStatisticsRegexp) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiFlapStatisticsRegexp_Input
type ClearBgpAfiSafiFlapStatisticsRegexp_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // A regular expression to match the BGP AS paths.  Use 'ctrl-v ?' to enter
    // '?'. The type is string. This attribute is mandatory.
    RegexpPattern interface{}
}

func (input *ClearBgpAfiSafiFlapStatisticsRegexp_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiFlapStatisticsRegexp_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiFlapStatisticsRegexp_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "regexp-pattern" { return "RegexpPattern" }
    return ""
}

func (input *ClearBgpAfiSafiFlapStatisticsRegexp_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiFlapStatisticsRegexp_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiFlapStatisticsRegexp_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiFlapStatisticsRegexp_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["regexp-pattern"] = input.RegexpPattern
    return leafs
}

func (input *ClearBgpAfiSafiFlapStatisticsRegexp_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiFlapStatisticsRegexp_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiFlapStatisticsRegexp_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiFlapStatisticsRegexp_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiFlapStatisticsRegexp_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiFlapStatisticsRegexp_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiFlapStatisticsRegexp_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiFlapStatisticsRegexp_Input) GetParentYangName() string { return "clear-bgp-afi-safi-flap-statistics-regexp" }

// ClearBgpAfiSafiFlapStatisticsRoutePolicy
// Clear flap statistics.
// Clear flap statistics for routes matching the route policy.
// 
type ClearBgpAfiSafiFlapStatisticsRoutePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input
}

func (clearBgpAfiSafiFlapStatisticsRoutePolicy *ClearBgpAfiSafiFlapStatisticsRoutePolicy) GetFilter() yfilter.YFilter { return clearBgpAfiSafiFlapStatisticsRoutePolicy.YFilter }

func (clearBgpAfiSafiFlapStatisticsRoutePolicy *ClearBgpAfiSafiFlapStatisticsRoutePolicy) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiFlapStatisticsRoutePolicy.YFilter = yf }

func (clearBgpAfiSafiFlapStatisticsRoutePolicy *ClearBgpAfiSafiFlapStatisticsRoutePolicy) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiFlapStatisticsRoutePolicy *ClearBgpAfiSafiFlapStatisticsRoutePolicy) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-route-policy"
}

func (clearBgpAfiSafiFlapStatisticsRoutePolicy *ClearBgpAfiSafiFlapStatisticsRoutePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiFlapStatisticsRoutePolicy.Input
    }
    return nil
}

func (clearBgpAfiSafiFlapStatisticsRoutePolicy *ClearBgpAfiSafiFlapStatisticsRoutePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiFlapStatisticsRoutePolicy.Input
    return children
}

func (clearBgpAfiSafiFlapStatisticsRoutePolicy *ClearBgpAfiSafiFlapStatisticsRoutePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiFlapStatisticsRoutePolicy *ClearBgpAfiSafiFlapStatisticsRoutePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiFlapStatisticsRoutePolicy *ClearBgpAfiSafiFlapStatisticsRoutePolicy) GetYangName() string { return "clear-bgp-afi-safi-flap-statistics-route-policy" }

func (clearBgpAfiSafiFlapStatisticsRoutePolicy *ClearBgpAfiSafiFlapStatisticsRoutePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiFlapStatisticsRoutePolicy *ClearBgpAfiSafiFlapStatisticsRoutePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiFlapStatisticsRoutePolicy *ClearBgpAfiSafiFlapStatisticsRoutePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiFlapStatisticsRoutePolicy *ClearBgpAfiSafiFlapStatisticsRoutePolicy) SetParent(parent types.Entity) { clearBgpAfiSafiFlapStatisticsRoutePolicy.parent = parent }

func (clearBgpAfiSafiFlapStatisticsRoutePolicy *ClearBgpAfiSafiFlapStatisticsRoutePolicy) GetParent() types.Entity { return clearBgpAfiSafiFlapStatisticsRoutePolicy.parent }

func (clearBgpAfiSafiFlapStatisticsRoutePolicy *ClearBgpAfiSafiFlapStatisticsRoutePolicy) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input
type ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route Policy name. The type is string. This attribute is mandatory.
    RoutePolicyName interface{}
}

func (input *ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (input *ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["route-policy-name"] = input.RoutePolicyName
    return leafs
}

func (input *ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiFlapStatisticsRoutePolicy_Input) GetParentYangName() string { return "clear-bgp-afi-safi-flap-statistics-route-policy" }

// ClearBgpAfiSafiFlapStatistics
// Clear flap statistics.
// 
type ClearBgpAfiSafiFlapStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiFlapStatistics_Input
}

func (clearBgpAfiSafiFlapStatistics *ClearBgpAfiSafiFlapStatistics) GetFilter() yfilter.YFilter { return clearBgpAfiSafiFlapStatistics.YFilter }

func (clearBgpAfiSafiFlapStatistics *ClearBgpAfiSafiFlapStatistics) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiFlapStatistics.YFilter = yf }

func (clearBgpAfiSafiFlapStatistics *ClearBgpAfiSafiFlapStatistics) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiFlapStatistics *ClearBgpAfiSafiFlapStatistics) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics"
}

func (clearBgpAfiSafiFlapStatistics *ClearBgpAfiSafiFlapStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiFlapStatistics.Input
    }
    return nil
}

func (clearBgpAfiSafiFlapStatistics *ClearBgpAfiSafiFlapStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiFlapStatistics.Input
    return children
}

func (clearBgpAfiSafiFlapStatistics *ClearBgpAfiSafiFlapStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiFlapStatistics *ClearBgpAfiSafiFlapStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiFlapStatistics *ClearBgpAfiSafiFlapStatistics) GetYangName() string { return "clear-bgp-afi-safi-flap-statistics" }

func (clearBgpAfiSafiFlapStatistics *ClearBgpAfiSafiFlapStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiFlapStatistics *ClearBgpAfiSafiFlapStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiFlapStatistics *ClearBgpAfiSafiFlapStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiFlapStatistics *ClearBgpAfiSafiFlapStatistics) SetParent(parent types.Entity) { clearBgpAfiSafiFlapStatistics.parent = parent }

func (clearBgpAfiSafiFlapStatistics *ClearBgpAfiSafiFlapStatistics) GetParent() types.Entity { return clearBgpAfiSafiFlapStatistics.parent }

func (clearBgpAfiSafiFlapStatistics *ClearBgpAfiSafiFlapStatistics) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiFlapStatistics_Input
type ClearBgpAfiSafiFlapStatistics_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiFlapStatistics_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiFlapStatistics_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiFlapStatistics_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpAfiSafiFlapStatistics_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiFlapStatistics_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiFlapStatistics_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiFlapStatistics_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpAfiSafiFlapStatistics_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiFlapStatistics_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiFlapStatistics_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiFlapStatistics_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiFlapStatistics_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiFlapStatistics_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiFlapStatistics_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiFlapStatistics_Input) GetParentYangName() string { return "clear-bgp-afi-safi-flap-statistics" }

// ClearBgpAfiSafiNexthopPerformanceStatistics
// Clear nexthop.
// Performance statistics information related to processing.
// 
type ClearBgpAfiSafiNexthopPerformanceStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiNexthopPerformanceStatistics_Input
}

func (clearBgpAfiSafiNexthopPerformanceStatistics *ClearBgpAfiSafiNexthopPerformanceStatistics) GetFilter() yfilter.YFilter { return clearBgpAfiSafiNexthopPerformanceStatistics.YFilter }

func (clearBgpAfiSafiNexthopPerformanceStatistics *ClearBgpAfiSafiNexthopPerformanceStatistics) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiNexthopPerformanceStatistics.YFilter = yf }

func (clearBgpAfiSafiNexthopPerformanceStatistics *ClearBgpAfiSafiNexthopPerformanceStatistics) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiNexthopPerformanceStatistics *ClearBgpAfiSafiNexthopPerformanceStatistics) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-performance-statistics"
}

func (clearBgpAfiSafiNexthopPerformanceStatistics *ClearBgpAfiSafiNexthopPerformanceStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiNexthopPerformanceStatistics.Input
    }
    return nil
}

func (clearBgpAfiSafiNexthopPerformanceStatistics *ClearBgpAfiSafiNexthopPerformanceStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiNexthopPerformanceStatistics.Input
    return children
}

func (clearBgpAfiSafiNexthopPerformanceStatistics *ClearBgpAfiSafiNexthopPerformanceStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiNexthopPerformanceStatistics *ClearBgpAfiSafiNexthopPerformanceStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiNexthopPerformanceStatistics *ClearBgpAfiSafiNexthopPerformanceStatistics) GetYangName() string { return "clear-bgp-afi-safi-nexthop-performance-statistics" }

func (clearBgpAfiSafiNexthopPerformanceStatistics *ClearBgpAfiSafiNexthopPerformanceStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiNexthopPerformanceStatistics *ClearBgpAfiSafiNexthopPerformanceStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiNexthopPerformanceStatistics *ClearBgpAfiSafiNexthopPerformanceStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiNexthopPerformanceStatistics *ClearBgpAfiSafiNexthopPerformanceStatistics) SetParent(parent types.Entity) { clearBgpAfiSafiNexthopPerformanceStatistics.parent = parent }

func (clearBgpAfiSafiNexthopPerformanceStatistics *ClearBgpAfiSafiNexthopPerformanceStatistics) GetParent() types.Entity { return clearBgpAfiSafiNexthopPerformanceStatistics.parent }

func (clearBgpAfiSafiNexthopPerformanceStatistics *ClearBgpAfiSafiNexthopPerformanceStatistics) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiNexthopPerformanceStatistics_Input
type ClearBgpAfiSafiNexthopPerformanceStatistics_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiNexthopPerformanceStatistics_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiNexthopPerformanceStatistics_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiNexthopPerformanceStatistics_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpAfiSafiNexthopPerformanceStatistics_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiNexthopPerformanceStatistics_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiNexthopPerformanceStatistics_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiNexthopPerformanceStatistics_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpAfiSafiNexthopPerformanceStatistics_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiNexthopPerformanceStatistics_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiNexthopPerformanceStatistics_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiNexthopPerformanceStatistics_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiNexthopPerformanceStatistics_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiNexthopPerformanceStatistics_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiNexthopPerformanceStatistics_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiNexthopPerformanceStatistics_Input) GetParentYangName() string { return "clear-bgp-afi-safi-nexthop-performance-statistics" }

// ClearBgpAfiSafiNexthopRegistrationIpAddr
// Clear nexthop.
// Registration with RIB and reregister.
// 
type ClearBgpAfiSafiNexthopRegistrationIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiNexthopRegistrationIpAddr_Input
}

func (clearBgpAfiSafiNexthopRegistrationIpAddr *ClearBgpAfiSafiNexthopRegistrationIpAddr) GetFilter() yfilter.YFilter { return clearBgpAfiSafiNexthopRegistrationIpAddr.YFilter }

func (clearBgpAfiSafiNexthopRegistrationIpAddr *ClearBgpAfiSafiNexthopRegistrationIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiNexthopRegistrationIpAddr.YFilter = yf }

func (clearBgpAfiSafiNexthopRegistrationIpAddr *ClearBgpAfiSafiNexthopRegistrationIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiNexthopRegistrationIpAddr *ClearBgpAfiSafiNexthopRegistrationIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-nexthop-registration-ip-addr"
}

func (clearBgpAfiSafiNexthopRegistrationIpAddr *ClearBgpAfiSafiNexthopRegistrationIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiNexthopRegistrationIpAddr.Input
    }
    return nil
}

func (clearBgpAfiSafiNexthopRegistrationIpAddr *ClearBgpAfiSafiNexthopRegistrationIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiNexthopRegistrationIpAddr.Input
    return children
}

func (clearBgpAfiSafiNexthopRegistrationIpAddr *ClearBgpAfiSafiNexthopRegistrationIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiNexthopRegistrationIpAddr *ClearBgpAfiSafiNexthopRegistrationIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiNexthopRegistrationIpAddr *ClearBgpAfiSafiNexthopRegistrationIpAddr) GetYangName() string { return "clear-bgp-afi-safi-nexthop-registration-ip-addr" }

func (clearBgpAfiSafiNexthopRegistrationIpAddr *ClearBgpAfiSafiNexthopRegistrationIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiNexthopRegistrationIpAddr *ClearBgpAfiSafiNexthopRegistrationIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiNexthopRegistrationIpAddr *ClearBgpAfiSafiNexthopRegistrationIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiNexthopRegistrationIpAddr *ClearBgpAfiSafiNexthopRegistrationIpAddr) SetParent(parent types.Entity) { clearBgpAfiSafiNexthopRegistrationIpAddr.parent = parent }

func (clearBgpAfiSafiNexthopRegistrationIpAddr *ClearBgpAfiSafiNexthopRegistrationIpAddr) GetParent() types.Entity { return clearBgpAfiSafiNexthopRegistrationIpAddr.parent }

func (clearBgpAfiSafiNexthopRegistrationIpAddr *ClearBgpAfiSafiNexthopRegistrationIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiNexthopRegistrationIpAddr_Input
type ClearBgpAfiSafiNexthopRegistrationIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Nexthop address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiNexthopRegistrationIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiNexthopRegistrationIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiNexthopRegistrationIpAddr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpAfiSafiNexthopRegistrationIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiNexthopRegistrationIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiNexthopRegistrationIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiNexthopRegistrationIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpAfiSafiNexthopRegistrationIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiNexthopRegistrationIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiNexthopRegistrationIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiNexthopRegistrationIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiNexthopRegistrationIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiNexthopRegistrationIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiNexthopRegistrationIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiNexthopRegistrationIpAddr_Input) GetParentYangName() string { return "clear-bgp-afi-safi-nexthop-registration-ip-addr" }

// ClearBgpAfiSafiSelfOriginated
// Clear redistributed, network and aggregate routes originated here.
// 
type ClearBgpAfiSafiSelfOriginated struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiSelfOriginated_Input
}

func (clearBgpAfiSafiSelfOriginated *ClearBgpAfiSafiSelfOriginated) GetFilter() yfilter.YFilter { return clearBgpAfiSafiSelfOriginated.YFilter }

func (clearBgpAfiSafiSelfOriginated *ClearBgpAfiSafiSelfOriginated) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiSelfOriginated.YFilter = yf }

func (clearBgpAfiSafiSelfOriginated *ClearBgpAfiSafiSelfOriginated) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiSelfOriginated *ClearBgpAfiSafiSelfOriginated) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-self-originated"
}

func (clearBgpAfiSafiSelfOriginated *ClearBgpAfiSafiSelfOriginated) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiSelfOriginated.Input
    }
    return nil
}

func (clearBgpAfiSafiSelfOriginated *ClearBgpAfiSafiSelfOriginated) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiSelfOriginated.Input
    return children
}

func (clearBgpAfiSafiSelfOriginated *ClearBgpAfiSafiSelfOriginated) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiSelfOriginated *ClearBgpAfiSafiSelfOriginated) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiSelfOriginated *ClearBgpAfiSafiSelfOriginated) GetYangName() string { return "clear-bgp-afi-safi-self-originated" }

func (clearBgpAfiSafiSelfOriginated *ClearBgpAfiSafiSelfOriginated) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiSelfOriginated *ClearBgpAfiSafiSelfOriginated) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiSelfOriginated *ClearBgpAfiSafiSelfOriginated) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiSelfOriginated *ClearBgpAfiSafiSelfOriginated) SetParent(parent types.Entity) { clearBgpAfiSafiSelfOriginated.parent = parent }

func (clearBgpAfiSafiSelfOriginated *ClearBgpAfiSafiSelfOriginated) GetParent() types.Entity { return clearBgpAfiSafiSelfOriginated.parent }

func (clearBgpAfiSafiSelfOriginated *ClearBgpAfiSafiSelfOriginated) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiSelfOriginated_Input
type ClearBgpAfiSafiSelfOriginated_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiSelfOriginated_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiSelfOriginated_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiSelfOriginated_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpAfiSafiSelfOriginated_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiSelfOriginated_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiSelfOriginated_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiSelfOriginated_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpAfiSafiSelfOriginated_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiSelfOriginated_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiSelfOriginated_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiSelfOriginated_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiSelfOriginated_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiSelfOriginated_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiSelfOriginated_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiSelfOriginated_Input) GetParentYangName() string { return "clear-bgp-afi-safi-self-originated" }

// ClearBgpAfiSafiShutdown
// Clear all peers which were shut down due to low memory.
// 
type ClearBgpAfiSafiShutdown struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiShutdown_Input
}

func (clearBgpAfiSafiShutdown *ClearBgpAfiSafiShutdown) GetFilter() yfilter.YFilter { return clearBgpAfiSafiShutdown.YFilter }

func (clearBgpAfiSafiShutdown *ClearBgpAfiSafiShutdown) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiShutdown.YFilter = yf }

func (clearBgpAfiSafiShutdown *ClearBgpAfiSafiShutdown) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiShutdown *ClearBgpAfiSafiShutdown) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-shutdown"
}

func (clearBgpAfiSafiShutdown *ClearBgpAfiSafiShutdown) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiShutdown.Input
    }
    return nil
}

func (clearBgpAfiSafiShutdown *ClearBgpAfiSafiShutdown) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiShutdown.Input
    return children
}

func (clearBgpAfiSafiShutdown *ClearBgpAfiSafiShutdown) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiShutdown *ClearBgpAfiSafiShutdown) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiShutdown *ClearBgpAfiSafiShutdown) GetYangName() string { return "clear-bgp-afi-safi-shutdown" }

func (clearBgpAfiSafiShutdown *ClearBgpAfiSafiShutdown) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiShutdown *ClearBgpAfiSafiShutdown) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiShutdown *ClearBgpAfiSafiShutdown) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiShutdown *ClearBgpAfiSafiShutdown) SetParent(parent types.Entity) { clearBgpAfiSafiShutdown.parent = parent }

func (clearBgpAfiSafiShutdown *ClearBgpAfiSafiShutdown) GetParent() types.Entity { return clearBgpAfiSafiShutdown.parent }

func (clearBgpAfiSafiShutdown *ClearBgpAfiSafiShutdown) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiShutdown_Input
type ClearBgpAfiSafiShutdown_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiShutdown_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiShutdown_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiShutdown_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpAfiSafiShutdown_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiShutdown_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiShutdown_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiShutdown_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpAfiSafiShutdown_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiShutdown_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiShutdown_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiShutdown_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiShutdown_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiShutdown_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiShutdown_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiShutdown_Input) GetParentYangName() string { return "clear-bgp-afi-safi-shutdown" }

// ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// Update parents' OutQ counters too.
// 
type ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input
}

func (clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent) GetFilter() yfilter.YFilter { return clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.YFilter }

func (clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.YFilter = yf }

func (clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family-update-parent"
}

func (clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.Input
    }
    return nil
}

func (clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.Input
    return children
}

func (clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent) GetYangName() string { return "clear-bgp-afi-safi-update-outq-address-family-update-parent" }

func (clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent) SetParent(parent types.Entity) { clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.parent = parent }

func (clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent) GetParent() types.Entity { return clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent.parent }

func (clearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input
type ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetParentYangName() string { return "clear-bgp-afi-safi-update-outq-address-family-update-parent" }

// ClearBgpAfiSafiUpdateOutqAddressFamily
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// 
type ClearBgpAfiSafiUpdateOutqAddressFamily struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqAddressFamily_Input
}

func (clearBgpAfiSafiUpdateOutqAddressFamily *ClearBgpAfiSafiUpdateOutqAddressFamily) GetFilter() yfilter.YFilter { return clearBgpAfiSafiUpdateOutqAddressFamily.YFilter }

func (clearBgpAfiSafiUpdateOutqAddressFamily *ClearBgpAfiSafiUpdateOutqAddressFamily) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiUpdateOutqAddressFamily.YFilter = yf }

func (clearBgpAfiSafiUpdateOutqAddressFamily *ClearBgpAfiSafiUpdateOutqAddressFamily) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiUpdateOutqAddressFamily *ClearBgpAfiSafiUpdateOutqAddressFamily) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-address-family"
}

func (clearBgpAfiSafiUpdateOutqAddressFamily *ClearBgpAfiSafiUpdateOutqAddressFamily) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiUpdateOutqAddressFamily.Input
    }
    return nil
}

func (clearBgpAfiSafiUpdateOutqAddressFamily *ClearBgpAfiSafiUpdateOutqAddressFamily) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiUpdateOutqAddressFamily.Input
    return children
}

func (clearBgpAfiSafiUpdateOutqAddressFamily *ClearBgpAfiSafiUpdateOutqAddressFamily) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiUpdateOutqAddressFamily *ClearBgpAfiSafiUpdateOutqAddressFamily) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiUpdateOutqAddressFamily *ClearBgpAfiSafiUpdateOutqAddressFamily) GetYangName() string { return "clear-bgp-afi-safi-update-outq-address-family" }

func (clearBgpAfiSafiUpdateOutqAddressFamily *ClearBgpAfiSafiUpdateOutqAddressFamily) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiUpdateOutqAddressFamily *ClearBgpAfiSafiUpdateOutqAddressFamily) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiUpdateOutqAddressFamily *ClearBgpAfiSafiUpdateOutqAddressFamily) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiUpdateOutqAddressFamily *ClearBgpAfiSafiUpdateOutqAddressFamily) SetParent(parent types.Entity) { clearBgpAfiSafiUpdateOutqAddressFamily.parent = parent }

func (clearBgpAfiSafiUpdateOutqAddressFamily *ClearBgpAfiSafiUpdateOutqAddressFamily) GetParent() types.Entity { return clearBgpAfiSafiUpdateOutqAddressFamily.parent }

func (clearBgpAfiSafiUpdateOutqAddressFamily *ClearBgpAfiSafiUpdateOutqAddressFamily) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiUpdateOutqAddressFamily_Input
type ClearBgpAfiSafiUpdateOutqAddressFamily_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqAddressFamily_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiUpdateOutqAddressFamily_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiUpdateOutqAddressFamily_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpAfiSafiUpdateOutqAddressFamily_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiUpdateOutqAddressFamily_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiUpdateOutqAddressFamily_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiUpdateOutqAddressFamily_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpAfiSafiUpdateOutqAddressFamily_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiUpdateOutqAddressFamily_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiUpdateOutqAddressFamily_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiUpdateOutqAddressFamily_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiUpdateOutqAddressFamily_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiUpdateOutqAddressFamily_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiUpdateOutqAddressFamily_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiUpdateOutqAddressFamily_Input) GetParentYangName() string { return "clear-bgp-afi-safi-update-outq-address-family" }

// ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// Update parents' OutQ counters too.
// 
type ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetFilter() yfilter.YFilter { return clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter = yf }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input
    }
    return nil
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input
    return children
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetYangName() string { return "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent" }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) SetParent(parent types.Entity) { clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.parent = parent }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetParent() types.Entity { return clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.parent }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
type ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetParentYangName() string { return "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent" }

// ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// 
type ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh) GetFilter() yfilter.YFilter { return clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.YFilter }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.YFilter = yf }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh"
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.Input
    }
    return nil
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.Input
    return children
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh) GetYangName() string { return "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh" }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh) SetParent(parent types.Entity) { clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.parent = parent }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh) GetParent() types.Entity { return clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh.parent }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input
type ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetParentYangName() string { return "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-refresh" }

// ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Update parents' OutQ counters too.
// 
type ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetFilter() yfilter.YFilter { return clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.YFilter }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.YFilter = yf }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent"
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input
    }
    return nil
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input
    return children
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetYangName() string { return "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent" }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent) SetParent(parent types.Entity) { clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.parent = parent }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetParent() types.Entity { return clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent.parent }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input
type ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetParentYangName() string { return "clear-bgp-afi-safi-update-outq-neighbor-ip-addr-update-parent" }

// ClearBgpAfiSafiUpdateOutqNeighborIpAddr
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// 
type ClearBgpAfiSafiUpdateOutqNeighborIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddr *ClearBgpAfiSafiUpdateOutqNeighborIpAddr) GetFilter() yfilter.YFilter { return clearBgpAfiSafiUpdateOutqNeighborIpAddr.YFilter }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddr *ClearBgpAfiSafiUpdateOutqNeighborIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiUpdateOutqNeighborIpAddr.YFilter = yf }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddr *ClearBgpAfiSafiUpdateOutqNeighborIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddr *ClearBgpAfiSafiUpdateOutqNeighborIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-neighbor-ip-addr"
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddr *ClearBgpAfiSafiUpdateOutqNeighborIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiUpdateOutqNeighborIpAddr.Input
    }
    return nil
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddr *ClearBgpAfiSafiUpdateOutqNeighborIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiUpdateOutqNeighborIpAddr.Input
    return children
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddr *ClearBgpAfiSafiUpdateOutqNeighborIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiUpdateOutqNeighborIpAddr *ClearBgpAfiSafiUpdateOutqNeighborIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddr *ClearBgpAfiSafiUpdateOutqNeighborIpAddr) GetYangName() string { return "clear-bgp-afi-safi-update-outq-neighbor-ip-addr" }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddr *ClearBgpAfiSafiUpdateOutqNeighborIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddr *ClearBgpAfiSafiUpdateOutqNeighborIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddr *ClearBgpAfiSafiUpdateOutqNeighborIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddr *ClearBgpAfiSafiUpdateOutqNeighborIpAddr) SetParent(parent types.Entity) { clearBgpAfiSafiUpdateOutqNeighborIpAddr.parent = parent }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddr *ClearBgpAfiSafiUpdateOutqNeighborIpAddr) GetParent() types.Entity { return clearBgpAfiSafiUpdateOutqNeighborIpAddr.parent }

func (clearBgpAfiSafiUpdateOutqNeighborIpAddr *ClearBgpAfiSafiUpdateOutqNeighborIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input
type ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiUpdateOutqNeighborIpAddr_Input) GetParentYangName() string { return "clear-bgp-afi-safi-update-outq-neighbor-ip-addr" }

// ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter = yf }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent"
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input
    return children
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetYangName() string { return "clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent" }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) SetParent(parent types.Entity) { clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.parent = parent }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetParent() types.Entity { return clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.parent }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input
type ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "sub-group" { return "SubGroup" }
    return ""
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    leafs["sub-group"] = input.SubGroup
    return leafs
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-afi-safi-update-outq-update-group-sub-group-update-parent" }

// ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup) GetFilter() yfilter.YFilter { return clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.YFilter }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.YFilter = yf }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group"
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.Input
    }
    return nil
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.Input
    return children
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup) GetYangName() string { return "clear-bgp-afi-safi-update-outq-update-group-sub-group" }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup) SetParent(parent types.Entity) { clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.parent = parent }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup) GetParent() types.Entity { return clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup.parent }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input
type ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "sub-group" { return "SubGroup" }
    return ""
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    leafs["sub-group"] = input.SubGroup
    return leafs
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetParentYangName() string { return "clear-bgp-afi-safi-update-outq-update-group-sub-group" }

// ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter = yf }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input
    return children
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetYangName() string { return "clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent" }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) SetParent(parent types.Entity) { clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.parent = parent }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetParent() types.Entity { return clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.parent }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
type ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "refresh-sub-group" { return "RefreshSubGroup" }
    return ""
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    leafs["refresh-sub-group"] = input.RefreshSubGroup
    return leafs
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent" }

// ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetFilter() yfilter.YFilter { return clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter = yf }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input
    }
    return nil
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input
    return children
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetYangName() string { return "clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group" }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) SetParent(parent types.Entity) { clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.parent = parent }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetParent() types.Entity { return clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.parent }

func (clearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
type ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "refresh-sub-group" { return "RefreshSubGroup" }
    return ""
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    leafs["refresh-sub-group"] = input.RefreshSubGroup
    return leafs
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetParentYangName() string { return "clear-bgp-afi-safi-update-outq-update-group-sub-group-refresh-sub-group" }

// ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Update parents' OutQ counters too.
// 
type ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.YFilter }

func (clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.YFilter = yf }

func (clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group-update-parent"
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.Input
    return children
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent) GetYangName() string { return "clear-bgp-afi-safi-update-outq-update-group-update-parent" }

func (clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent) SetParent(parent types.Entity) { clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.parent = parent }

func (clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent) GetParent() types.Entity { return clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent.parent }

func (clearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input
type ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    return ""
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    return leafs
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-afi-safi-update-outq-update-group-update-parent" }

// ClearBgpAfiSafiUpdateOutqUpdateGroup
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// 
type ClearBgpAfiSafiUpdateOutqUpdateGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiUpdateOutqUpdateGroup_Input
}

func (clearBgpAfiSafiUpdateOutqUpdateGroup *ClearBgpAfiSafiUpdateOutqUpdateGroup) GetFilter() yfilter.YFilter { return clearBgpAfiSafiUpdateOutqUpdateGroup.YFilter }

func (clearBgpAfiSafiUpdateOutqUpdateGroup *ClearBgpAfiSafiUpdateOutqUpdateGroup) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiUpdateOutqUpdateGroup.YFilter = yf }

func (clearBgpAfiSafiUpdateOutqUpdateGroup *ClearBgpAfiSafiUpdateOutqUpdateGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiUpdateOutqUpdateGroup *ClearBgpAfiSafiUpdateOutqUpdateGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-update-outq-update-group"
}

func (clearBgpAfiSafiUpdateOutqUpdateGroup *ClearBgpAfiSafiUpdateOutqUpdateGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiUpdateOutqUpdateGroup.Input
    }
    return nil
}

func (clearBgpAfiSafiUpdateOutqUpdateGroup *ClearBgpAfiSafiUpdateOutqUpdateGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiUpdateOutqUpdateGroup.Input
    return children
}

func (clearBgpAfiSafiUpdateOutqUpdateGroup *ClearBgpAfiSafiUpdateOutqUpdateGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiUpdateOutqUpdateGroup *ClearBgpAfiSafiUpdateOutqUpdateGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiUpdateOutqUpdateGroup *ClearBgpAfiSafiUpdateOutqUpdateGroup) GetYangName() string { return "clear-bgp-afi-safi-update-outq-update-group" }

func (clearBgpAfiSafiUpdateOutqUpdateGroup *ClearBgpAfiSafiUpdateOutqUpdateGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiUpdateOutqUpdateGroup *ClearBgpAfiSafiUpdateOutqUpdateGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiUpdateOutqUpdateGroup *ClearBgpAfiSafiUpdateOutqUpdateGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiUpdateOutqUpdateGroup *ClearBgpAfiSafiUpdateOutqUpdateGroup) SetParent(parent types.Entity) { clearBgpAfiSafiUpdateOutqUpdateGroup.parent = parent }

func (clearBgpAfiSafiUpdateOutqUpdateGroup *ClearBgpAfiSafiUpdateOutqUpdateGroup) GetParent() types.Entity { return clearBgpAfiSafiUpdateOutqUpdateGroup.parent }

func (clearBgpAfiSafiUpdateOutqUpdateGroup *ClearBgpAfiSafiUpdateOutqUpdateGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiUpdateOutqUpdateGroup_Input
type ClearBgpAfiSafiUpdateOutqUpdateGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroup_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    return ""
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    return leafs
}

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiUpdateOutqUpdateGroup_Input) GetParentYangName() string { return "clear-bgp-afi-safi-update-outq-update-group" }

// ClearBgpAsGraceful
// Clear peers in a specific AS.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpAsGraceful struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAsGraceful_Input
}

func (clearBgpAsGraceful *ClearBgpAsGraceful) GetFilter() yfilter.YFilter { return clearBgpAsGraceful.YFilter }

func (clearBgpAsGraceful *ClearBgpAsGraceful) SetFilter(yf yfilter.YFilter) { clearBgpAsGraceful.YFilter = yf }

func (clearBgpAsGraceful *ClearBgpAsGraceful) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAsGraceful *ClearBgpAsGraceful) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as-graceful"
}

func (clearBgpAsGraceful *ClearBgpAsGraceful) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAsGraceful.Input
    }
    return nil
}

func (clearBgpAsGraceful *ClearBgpAsGraceful) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAsGraceful.Input
    return children
}

func (clearBgpAsGraceful *ClearBgpAsGraceful) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAsGraceful *ClearBgpAsGraceful) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAsGraceful *ClearBgpAsGraceful) GetYangName() string { return "clear-bgp-as-graceful" }

func (clearBgpAsGraceful *ClearBgpAsGraceful) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAsGraceful *ClearBgpAsGraceful) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAsGraceful *ClearBgpAsGraceful) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAsGraceful *ClearBgpAsGraceful) SetParent(parent types.Entity) { clearBgpAsGraceful.parent = parent }

func (clearBgpAsGraceful *ClearBgpAsGraceful) GetParent() types.Entity { return clearBgpAsGraceful.parent }

func (clearBgpAsGraceful *ClearBgpAsGraceful) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAsGraceful_Input
type ClearBgpAsGraceful_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpAsGraceful_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAsGraceful_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAsGraceful_Input) GetGoName(yname string) string {
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpAsGraceful_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAsGraceful_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAsGraceful_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAsGraceful_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpAsGraceful_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAsGraceful_Input) GetYangName() string { return "input" }

func (input *ClearBgpAsGraceful_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAsGraceful_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAsGraceful_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAsGraceful_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAsGraceful_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAsGraceful_Input) GetParentYangName() string { return "clear-bgp-as-graceful" }

// ClearBgpAs
// Clear peers in a specific AS.
// 
type ClearBgpAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAs_Input
}

func (clearBgpAs *ClearBgpAs) GetFilter() yfilter.YFilter { return clearBgpAs.YFilter }

func (clearBgpAs *ClearBgpAs) SetFilter(yf yfilter.YFilter) { clearBgpAs.YFilter = yf }

func (clearBgpAs *ClearBgpAs) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAs *ClearBgpAs) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-as"
}

func (clearBgpAs *ClearBgpAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAs.Input
    }
    return nil
}

func (clearBgpAs *ClearBgpAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAs.Input
    return children
}

func (clearBgpAs *ClearBgpAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAs *ClearBgpAs) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAs *ClearBgpAs) GetYangName() string { return "clear-bgp-as" }

func (clearBgpAs *ClearBgpAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAs *ClearBgpAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAs *ClearBgpAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAs *ClearBgpAs) SetParent(parent types.Entity) { clearBgpAs.parent = parent }

func (clearBgpAs *ClearBgpAs) GetParent() types.Entity { return clearBgpAs.parent }

func (clearBgpAs *ClearBgpAs) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAs_Input
type ClearBgpAs_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpAs_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAs_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAs_Input) GetGoName(yname string) string {
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpAs_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAs_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAs_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAs_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpAs_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAs_Input) GetYangName() string { return "input" }

func (input *ClearBgpAs_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAs_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAs_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAs_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAs_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAs_Input) GetParentYangName() string { return "clear-bgp-as" }

// ClearBgpBestpathIpAddrIpNetmask
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathIpAddrIpNetmask_Input
}

func (clearBgpBestpathIpAddrIpNetmask *ClearBgpBestpathIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpBestpathIpAddrIpNetmask.YFilter }

func (clearBgpBestpathIpAddrIpNetmask *ClearBgpBestpathIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpBestpathIpAddrIpNetmask.YFilter = yf }

func (clearBgpBestpathIpAddrIpNetmask *ClearBgpBestpathIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathIpAddrIpNetmask *ClearBgpBestpathIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr-ip-netmask"
}

func (clearBgpBestpathIpAddrIpNetmask *ClearBgpBestpathIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpBestpathIpAddrIpNetmask *ClearBgpBestpathIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathIpAddrIpNetmask.Input
    return children
}

func (clearBgpBestpathIpAddrIpNetmask *ClearBgpBestpathIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathIpAddrIpNetmask *ClearBgpBestpathIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathIpAddrIpNetmask *ClearBgpBestpathIpAddrIpNetmask) GetYangName() string { return "clear-bgp-bestpath-ip-addr-ip-netmask" }

func (clearBgpBestpathIpAddrIpNetmask *ClearBgpBestpathIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathIpAddrIpNetmask *ClearBgpBestpathIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathIpAddrIpNetmask *ClearBgpBestpathIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathIpAddrIpNetmask *ClearBgpBestpathIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpBestpathIpAddrIpNetmask.parent = parent }

func (clearBgpBestpathIpAddrIpNetmask *ClearBgpBestpathIpAddrIpNetmask) GetParent() types.Entity { return clearBgpBestpathIpAddrIpNetmask.parent }

func (clearBgpBestpathIpAddrIpNetmask *ClearBgpBestpathIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathIpAddrIpNetmask_Input
type ClearBgpBestpathIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpBestpathIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpBestpathIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpBestpathIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-bestpath-ip-addr-ip-netmask" }

// ClearBgpBestpathIpAddr
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathIpAddr_Input
}

func (clearBgpBestpathIpAddr *ClearBgpBestpathIpAddr) GetFilter() yfilter.YFilter { return clearBgpBestpathIpAddr.YFilter }

func (clearBgpBestpathIpAddr *ClearBgpBestpathIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpBestpathIpAddr.YFilter = yf }

func (clearBgpBestpathIpAddr *ClearBgpBestpathIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathIpAddr *ClearBgpBestpathIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-addr"
}

func (clearBgpBestpathIpAddr *ClearBgpBestpathIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathIpAddr.Input
    }
    return nil
}

func (clearBgpBestpathIpAddr *ClearBgpBestpathIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathIpAddr.Input
    return children
}

func (clearBgpBestpathIpAddr *ClearBgpBestpathIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathIpAddr *ClearBgpBestpathIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathIpAddr *ClearBgpBestpathIpAddr) GetYangName() string { return "clear-bgp-bestpath-ip-addr" }

func (clearBgpBestpathIpAddr *ClearBgpBestpathIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathIpAddr *ClearBgpBestpathIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathIpAddr *ClearBgpBestpathIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathIpAddr *ClearBgpBestpathIpAddr) SetParent(parent types.Entity) { clearBgpBestpathIpAddr.parent = parent }

func (clearBgpBestpathIpAddr *ClearBgpBestpathIpAddr) GetParent() types.Entity { return clearBgpBestpathIpAddr.parent }

func (clearBgpBestpathIpAddr *ClearBgpBestpathIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathIpAddr_Input
type ClearBgpBestpathIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpBestpathIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathIpAddr_Input) GetGoName(yname string) string {
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpBestpathIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpBestpathIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathIpAddr_Input) GetParentYangName() string { return "clear-bgp-bestpath-ip-addr" }

// ClearBgpBestpathIpPrefix
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathIpPrefix_Input
}

func (clearBgpBestpathIpPrefix *ClearBgpBestpathIpPrefix) GetFilter() yfilter.YFilter { return clearBgpBestpathIpPrefix.YFilter }

func (clearBgpBestpathIpPrefix *ClearBgpBestpathIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpBestpathIpPrefix.YFilter = yf }

func (clearBgpBestpathIpPrefix *ClearBgpBestpathIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathIpPrefix *ClearBgpBestpathIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-ip-prefix"
}

func (clearBgpBestpathIpPrefix *ClearBgpBestpathIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathIpPrefix.Input
    }
    return nil
}

func (clearBgpBestpathIpPrefix *ClearBgpBestpathIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathIpPrefix.Input
    return children
}

func (clearBgpBestpathIpPrefix *ClearBgpBestpathIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathIpPrefix *ClearBgpBestpathIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathIpPrefix *ClearBgpBestpathIpPrefix) GetYangName() string { return "clear-bgp-bestpath-ip-prefix" }

func (clearBgpBestpathIpPrefix *ClearBgpBestpathIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathIpPrefix *ClearBgpBestpathIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathIpPrefix *ClearBgpBestpathIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathIpPrefix *ClearBgpBestpathIpPrefix) SetParent(parent types.Entity) { clearBgpBestpathIpPrefix.parent = parent }

func (clearBgpBestpathIpPrefix *ClearBgpBestpathIpPrefix) GetParent() types.Entity { return clearBgpBestpathIpPrefix.parent }

func (clearBgpBestpathIpPrefix *ClearBgpBestpathIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathIpPrefix_Input
type ClearBgpBestpathIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpBestpathIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathIpPrefix_Input) GetGoName(yname string) string {
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpBestpathIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpBestpathIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathIpPrefix_Input) GetParentYangName() string { return "clear-bgp-bestpath-ip-prefix" }

// ClearBgpBestpathAfiSafiIpAddrIpNetmask
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input
}

func (clearBgpBestpathAfiSafiIpAddrIpNetmask *ClearBgpBestpathAfiSafiIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiIpAddrIpNetmask.YFilter }

func (clearBgpBestpathAfiSafiIpAddrIpNetmask *ClearBgpBestpathAfiSafiIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiIpAddrIpNetmask.YFilter = yf }

func (clearBgpBestpathAfiSafiIpAddrIpNetmask *ClearBgpBestpathAfiSafiIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiIpAddrIpNetmask *ClearBgpBestpathAfiSafiIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask"
}

func (clearBgpBestpathAfiSafiIpAddrIpNetmask *ClearBgpBestpathAfiSafiIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiIpAddrIpNetmask *ClearBgpBestpathAfiSafiIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiIpAddrIpNetmask.Input
    return children
}

func (clearBgpBestpathAfiSafiIpAddrIpNetmask *ClearBgpBestpathAfiSafiIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiIpAddrIpNetmask *ClearBgpBestpathAfiSafiIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiIpAddrIpNetmask *ClearBgpBestpathAfiSafiIpAddrIpNetmask) GetYangName() string { return "clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask" }

func (clearBgpBestpathAfiSafiIpAddrIpNetmask *ClearBgpBestpathAfiSafiIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiIpAddrIpNetmask *ClearBgpBestpathAfiSafiIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiIpAddrIpNetmask *ClearBgpBestpathAfiSafiIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiIpAddrIpNetmask *ClearBgpBestpathAfiSafiIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiIpAddrIpNetmask.parent = parent }

func (clearBgpBestpathAfiSafiIpAddrIpNetmask *ClearBgpBestpathAfiSafiIpAddrIpNetmask) GetParent() types.Entity { return clearBgpBestpathAfiSafiIpAddrIpNetmask.parent }

func (clearBgpBestpathAfiSafiIpAddrIpNetmask *ClearBgpBestpathAfiSafiIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input
type ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-ip-addr-ip-netmask" }

// ClearBgpBestpathAfiSafiIpAddr
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpAddr_Input
}

func (clearBgpBestpathAfiSafiIpAddr *ClearBgpBestpathAfiSafiIpAddr) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiIpAddr.YFilter }

func (clearBgpBestpathAfiSafiIpAddr *ClearBgpBestpathAfiSafiIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiIpAddr.YFilter = yf }

func (clearBgpBestpathAfiSafiIpAddr *ClearBgpBestpathAfiSafiIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiIpAddr *ClearBgpBestpathAfiSafiIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-addr"
}

func (clearBgpBestpathAfiSafiIpAddr *ClearBgpBestpathAfiSafiIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiIpAddr.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiIpAddr *ClearBgpBestpathAfiSafiIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiIpAddr.Input
    return children
}

func (clearBgpBestpathAfiSafiIpAddr *ClearBgpBestpathAfiSafiIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiIpAddr *ClearBgpBestpathAfiSafiIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiIpAddr *ClearBgpBestpathAfiSafiIpAddr) GetYangName() string { return "clear-bgp-bestpath-afi-safi-ip-addr" }

func (clearBgpBestpathAfiSafiIpAddr *ClearBgpBestpathAfiSafiIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiIpAddr *ClearBgpBestpathAfiSafiIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiIpAddr *ClearBgpBestpathAfiSafiIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiIpAddr *ClearBgpBestpathAfiSafiIpAddr) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiIpAddr.parent = parent }

func (clearBgpBestpathAfiSafiIpAddr *ClearBgpBestpathAfiSafiIpAddr) GetParent() types.Entity { return clearBgpBestpathAfiSafiIpAddr.parent }

func (clearBgpBestpathAfiSafiIpAddr *ClearBgpBestpathAfiSafiIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiIpAddr_Input
type ClearBgpBestpathAfiSafiIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpBestpathAfiSafiIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiIpAddr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpBestpathAfiSafiIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiIpAddr_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-ip-addr" }

// ClearBgpBestpathAfiSafiIpPrefix
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpPrefix_Input
}

func (clearBgpBestpathAfiSafiIpPrefix *ClearBgpBestpathAfiSafiIpPrefix) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiIpPrefix.YFilter }

func (clearBgpBestpathAfiSafiIpPrefix *ClearBgpBestpathAfiSafiIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiIpPrefix.YFilter = yf }

func (clearBgpBestpathAfiSafiIpPrefix *ClearBgpBestpathAfiSafiIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiIpPrefix *ClearBgpBestpathAfiSafiIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ip-prefix"
}

func (clearBgpBestpathAfiSafiIpPrefix *ClearBgpBestpathAfiSafiIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiIpPrefix.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiIpPrefix *ClearBgpBestpathAfiSafiIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiIpPrefix.Input
    return children
}

func (clearBgpBestpathAfiSafiIpPrefix *ClearBgpBestpathAfiSafiIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiIpPrefix *ClearBgpBestpathAfiSafiIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiIpPrefix *ClearBgpBestpathAfiSafiIpPrefix) GetYangName() string { return "clear-bgp-bestpath-afi-safi-ip-prefix" }

func (clearBgpBestpathAfiSafiIpPrefix *ClearBgpBestpathAfiSafiIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiIpPrefix *ClearBgpBestpathAfiSafiIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiIpPrefix *ClearBgpBestpathAfiSafiIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiIpPrefix *ClearBgpBestpathAfiSafiIpPrefix) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiIpPrefix.parent = parent }

func (clearBgpBestpathAfiSafiIpPrefix *ClearBgpBestpathAfiSafiIpPrefix) GetParent() types.Entity { return clearBgpBestpathAfiSafiIpPrefix.parent }

func (clearBgpBestpathAfiSafiIpPrefix *ClearBgpBestpathAfiSafiIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiIpPrefix_Input
type ClearBgpBestpathAfiSafiIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpBestpathAfiSafiIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiIpPrefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpBestpathAfiSafiIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiIpPrefix_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-ip-prefix" }

// ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask
// re-run BGP bestpath selection.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input
}

func (clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.YFilter }

func (clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.YFilter = yf }

func (clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"
}

func (clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input
    return children
}

func (clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetYangName() string { return "clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask" }

func (clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.parent = parent }

func (clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetParent() types.Entity { return clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask.parent }

func (clearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input
type ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "bridge-domain-name" { return "BridgeDomainName" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["bridge-domain-name"] = input.BridgeDomainName
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask" }

// ClearBgpBestpathAfiSafiBridgeDomainIpAddr
// re-run BGP bestpath selection.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpBestpathAfiSafiBridgeDomainIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input
}

func (clearBgpBestpathAfiSafiBridgeDomainIpAddr *ClearBgpBestpathAfiSafiBridgeDomainIpAddr) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiBridgeDomainIpAddr.YFilter }

func (clearBgpBestpathAfiSafiBridgeDomainIpAddr *ClearBgpBestpathAfiSafiBridgeDomainIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiBridgeDomainIpAddr.YFilter = yf }

func (clearBgpBestpathAfiSafiBridgeDomainIpAddr *ClearBgpBestpathAfiSafiBridgeDomainIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiBridgeDomainIpAddr *ClearBgpBestpathAfiSafiBridgeDomainIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr"
}

func (clearBgpBestpathAfiSafiBridgeDomainIpAddr *ClearBgpBestpathAfiSafiBridgeDomainIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiBridgeDomainIpAddr.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiBridgeDomainIpAddr *ClearBgpBestpathAfiSafiBridgeDomainIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiBridgeDomainIpAddr.Input
    return children
}

func (clearBgpBestpathAfiSafiBridgeDomainIpAddr *ClearBgpBestpathAfiSafiBridgeDomainIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiBridgeDomainIpAddr *ClearBgpBestpathAfiSafiBridgeDomainIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiBridgeDomainIpAddr *ClearBgpBestpathAfiSafiBridgeDomainIpAddr) GetYangName() string { return "clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr" }

func (clearBgpBestpathAfiSafiBridgeDomainIpAddr *ClearBgpBestpathAfiSafiBridgeDomainIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiBridgeDomainIpAddr *ClearBgpBestpathAfiSafiBridgeDomainIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiBridgeDomainIpAddr *ClearBgpBestpathAfiSafiBridgeDomainIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiBridgeDomainIpAddr *ClearBgpBestpathAfiSafiBridgeDomainIpAddr) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiBridgeDomainIpAddr.parent = parent }

func (clearBgpBestpathAfiSafiBridgeDomainIpAddr *ClearBgpBestpathAfiSafiBridgeDomainIpAddr) GetParent() types.Entity { return clearBgpBestpathAfiSafiBridgeDomainIpAddr.parent }

func (clearBgpBestpathAfiSafiBridgeDomainIpAddr *ClearBgpBestpathAfiSafiBridgeDomainIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input
type ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "bridge-domain-name" { return "BridgeDomainName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["bridge-domain-name"] = input.BridgeDomainName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpAddr_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-bridge-domain-ip-addr" }

// ClearBgpBestpathAfiSafiBridgeDomainIpPrefix
// re-run BGP bestpath selection.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpBestpathAfiSafiBridgeDomainIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input
}

func (clearBgpBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiBridgeDomainIpPrefix.YFilter }

func (clearBgpBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiBridgeDomainIpPrefix.YFilter = yf }

func (clearBgpBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix"
}

func (clearBgpBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiBridgeDomainIpPrefix.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiBridgeDomainIpPrefix.Input
    return children
}

func (clearBgpBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix) GetYangName() string { return "clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix" }

func (clearBgpBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiBridgeDomainIpPrefix.parent = parent }

func (clearBgpBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix) GetParent() types.Entity { return clearBgpBestpathAfiSafiBridgeDomainIpPrefix.parent }

func (clearBgpBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input
type ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "bridge-domain-name" { return "BridgeDomainName" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["bridge-domain-name"] = input.BridgeDomainName
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpPrefix_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-bridge-domain-ip-prefix" }

// ClearBgpBestpathAfiSafiRdIpAddrIpNetmask
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input
}

func (clearBgpBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiRdIpAddrIpNetmask.YFilter }

func (clearBgpBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiRdIpAddrIpNetmask.YFilter = yf }

func (clearBgpBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask"
}

func (clearBgpBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiRdIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiRdIpAddrIpNetmask.Input
    return children
}

func (clearBgpBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask) GetYangName() string { return "clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask" }

func (clearBgpBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiRdIpAddrIpNetmask.parent = parent }

func (clearBgpBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask) GetParent() types.Entity { return clearBgpBestpathAfiSafiRdIpAddrIpNetmask.parent }

func (clearBgpBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input
type ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiRdIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-rd-ip-addr-ip-netmask" }

// ClearBgpBestpathAfiSafiRdIpAddr
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdIpAddr_Input
}

func (clearBgpBestpathAfiSafiRdIpAddr *ClearBgpBestpathAfiSafiRdIpAddr) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiRdIpAddr.YFilter }

func (clearBgpBestpathAfiSafiRdIpAddr *ClearBgpBestpathAfiSafiRdIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiRdIpAddr.YFilter = yf }

func (clearBgpBestpathAfiSafiRdIpAddr *ClearBgpBestpathAfiSafiRdIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiRdIpAddr *ClearBgpBestpathAfiSafiRdIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-addr"
}

func (clearBgpBestpathAfiSafiRdIpAddr *ClearBgpBestpathAfiSafiRdIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiRdIpAddr.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiRdIpAddr *ClearBgpBestpathAfiSafiRdIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiRdIpAddr.Input
    return children
}

func (clearBgpBestpathAfiSafiRdIpAddr *ClearBgpBestpathAfiSafiRdIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiRdIpAddr *ClearBgpBestpathAfiSafiRdIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiRdIpAddr *ClearBgpBestpathAfiSafiRdIpAddr) GetYangName() string { return "clear-bgp-bestpath-afi-safi-rd-ip-addr" }

func (clearBgpBestpathAfiSafiRdIpAddr *ClearBgpBestpathAfiSafiRdIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiRdIpAddr *ClearBgpBestpathAfiSafiRdIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiRdIpAddr *ClearBgpBestpathAfiSafiRdIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiRdIpAddr *ClearBgpBestpathAfiSafiRdIpAddr) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiRdIpAddr.parent = parent }

func (clearBgpBestpathAfiSafiRdIpAddr *ClearBgpBestpathAfiSafiRdIpAddr) GetParent() types.Entity { return clearBgpBestpathAfiSafiRdIpAddr.parent }

func (clearBgpBestpathAfiSafiRdIpAddr *ClearBgpBestpathAfiSafiRdIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiRdIpAddr_Input
type ClearBgpBestpathAfiSafiRdIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpBestpathAfiSafiRdIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiRdIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiRdIpAddr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiRdIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiRdIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiRdIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiRdIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpBestpathAfiSafiRdIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiRdIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiRdIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiRdIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiRdIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiRdIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiRdIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiRdIpAddr_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-rd-ip-addr" }

// ClearBgpBestpathAfiSafiRdIpPrefix
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdIpPrefix_Input
}

func (clearBgpBestpathAfiSafiRdIpPrefix *ClearBgpBestpathAfiSafiRdIpPrefix) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiRdIpPrefix.YFilter }

func (clearBgpBestpathAfiSafiRdIpPrefix *ClearBgpBestpathAfiSafiRdIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiRdIpPrefix.YFilter = yf }

func (clearBgpBestpathAfiSafiRdIpPrefix *ClearBgpBestpathAfiSafiRdIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiRdIpPrefix *ClearBgpBestpathAfiSafiRdIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ip-prefix"
}

func (clearBgpBestpathAfiSafiRdIpPrefix *ClearBgpBestpathAfiSafiRdIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiRdIpPrefix.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiRdIpPrefix *ClearBgpBestpathAfiSafiRdIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiRdIpPrefix.Input
    return children
}

func (clearBgpBestpathAfiSafiRdIpPrefix *ClearBgpBestpathAfiSafiRdIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiRdIpPrefix *ClearBgpBestpathAfiSafiRdIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiRdIpPrefix *ClearBgpBestpathAfiSafiRdIpPrefix) GetYangName() string { return "clear-bgp-bestpath-afi-safi-rd-ip-prefix" }

func (clearBgpBestpathAfiSafiRdIpPrefix *ClearBgpBestpathAfiSafiRdIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiRdIpPrefix *ClearBgpBestpathAfiSafiRdIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiRdIpPrefix *ClearBgpBestpathAfiSafiRdIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiRdIpPrefix *ClearBgpBestpathAfiSafiRdIpPrefix) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiRdIpPrefix.parent = parent }

func (clearBgpBestpathAfiSafiRdIpPrefix *ClearBgpBestpathAfiSafiRdIpPrefix) GetParent() types.Entity { return clearBgpBestpathAfiSafiRdIpPrefix.parent }

func (clearBgpBestpathAfiSafiRdIpPrefix *ClearBgpBestpathAfiSafiRdIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiRdIpPrefix_Input
type ClearBgpBestpathAfiSafiRdIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpBestpathAfiSafiRdIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiRdIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiRdIpPrefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiRdIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiRdIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiRdIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiRdIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpBestpathAfiSafiRdIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiRdIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiRdIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiRdIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiRdIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiRdIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiRdIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiRdIpPrefix_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-rd-ip-prefix" }

// ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input
}

func (clearBgpBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.YFilter }

func (clearBgpBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.YFilter = yf }

func (clearBgpBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask"
}

func (clearBgpBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.Input
    return children
}

func (clearBgpBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask) GetYangName() string { return "clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask" }

func (clearBgpBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.parent = parent }

func (clearBgpBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask) GetParent() types.Entity { return clearBgpBestpathAfiSafiIpv4AddrIpv4Mask.parent }

func (clearBgpBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input
type ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-addr"] = input.Ipv4Addr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-ipv4-addr-ipv4-mask" }

// ClearBgpBestpathAfiSafiIpv4Addr
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpv4Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpv4Addr_Input
}

func (clearBgpBestpathAfiSafiIpv4Addr *ClearBgpBestpathAfiSafiIpv4Addr) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiIpv4Addr.YFilter }

func (clearBgpBestpathAfiSafiIpv4Addr *ClearBgpBestpathAfiSafiIpv4Addr) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiIpv4Addr.YFilter = yf }

func (clearBgpBestpathAfiSafiIpv4Addr *ClearBgpBestpathAfiSafiIpv4Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiIpv4Addr *ClearBgpBestpathAfiSafiIpv4Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-addr"
}

func (clearBgpBestpathAfiSafiIpv4Addr *ClearBgpBestpathAfiSafiIpv4Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiIpv4Addr.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiIpv4Addr *ClearBgpBestpathAfiSafiIpv4Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiIpv4Addr.Input
    return children
}

func (clearBgpBestpathAfiSafiIpv4Addr *ClearBgpBestpathAfiSafiIpv4Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiIpv4Addr *ClearBgpBestpathAfiSafiIpv4Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiIpv4Addr *ClearBgpBestpathAfiSafiIpv4Addr) GetYangName() string { return "clear-bgp-bestpath-afi-safi-ipv4-addr" }

func (clearBgpBestpathAfiSafiIpv4Addr *ClearBgpBestpathAfiSafiIpv4Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiIpv4Addr *ClearBgpBestpathAfiSafiIpv4Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiIpv4Addr *ClearBgpBestpathAfiSafiIpv4Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiIpv4Addr *ClearBgpBestpathAfiSafiIpv4Addr) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiIpv4Addr.parent = parent }

func (clearBgpBestpathAfiSafiIpv4Addr *ClearBgpBestpathAfiSafiIpv4Addr) GetParent() types.Entity { return clearBgpBestpathAfiSafiIpv4Addr.parent }

func (clearBgpBestpathAfiSafiIpv4Addr *ClearBgpBestpathAfiSafiIpv4Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiIpv4Addr_Input
type ClearBgpBestpathAfiSafiIpv4Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpBestpathAfiSafiIpv4Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiIpv4Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiIpv4Addr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiIpv4Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiIpv4Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiIpv4Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiIpv4Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-addr"] = input.Ipv4Addr
    return leafs
}

func (input *ClearBgpBestpathAfiSafiIpv4Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiIpv4Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiIpv4Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiIpv4Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiIpv4Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiIpv4Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiIpv4Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiIpv4Addr_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-ipv4-addr" }

// ClearBgpBestpathAfiSafiIpv4Prefix
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpv4Prefix_Input
}

func (clearBgpBestpathAfiSafiIpv4Prefix *ClearBgpBestpathAfiSafiIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiIpv4Prefix.YFilter }

func (clearBgpBestpathAfiSafiIpv4Prefix *ClearBgpBestpathAfiSafiIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiIpv4Prefix.YFilter = yf }

func (clearBgpBestpathAfiSafiIpv4Prefix *ClearBgpBestpathAfiSafiIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiIpv4Prefix *ClearBgpBestpathAfiSafiIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-prefix"
}

func (clearBgpBestpathAfiSafiIpv4Prefix *ClearBgpBestpathAfiSafiIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiIpv4Prefix.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiIpv4Prefix *ClearBgpBestpathAfiSafiIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiIpv4Prefix.Input
    return children
}

func (clearBgpBestpathAfiSafiIpv4Prefix *ClearBgpBestpathAfiSafiIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiIpv4Prefix *ClearBgpBestpathAfiSafiIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiIpv4Prefix *ClearBgpBestpathAfiSafiIpv4Prefix) GetYangName() string { return "clear-bgp-bestpath-afi-safi-ipv4-prefix" }

func (clearBgpBestpathAfiSafiIpv4Prefix *ClearBgpBestpathAfiSafiIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiIpv4Prefix *ClearBgpBestpathAfiSafiIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiIpv4Prefix *ClearBgpBestpathAfiSafiIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiIpv4Prefix *ClearBgpBestpathAfiSafiIpv4Prefix) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiIpv4Prefix.parent = parent }

func (clearBgpBestpathAfiSafiIpv4Prefix *ClearBgpBestpathAfiSafiIpv4Prefix) GetParent() types.Entity { return clearBgpBestpathAfiSafiIpv4Prefix.parent }

func (clearBgpBestpathAfiSafiIpv4Prefix *ClearBgpBestpathAfiSafiIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiIpv4Prefix_Input
type ClearBgpBestpathAfiSafiIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network and masklength. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpBestpathAfiSafiIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpBestpathAfiSafiIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-ipv4-prefix" }

// ClearBgpBestpathAfiSafiRdIpv4Addr
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdIpv4Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdIpv4Addr_Input
}

func (clearBgpBestpathAfiSafiRdIpv4Addr *ClearBgpBestpathAfiSafiRdIpv4Addr) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiRdIpv4Addr.YFilter }

func (clearBgpBestpathAfiSafiRdIpv4Addr *ClearBgpBestpathAfiSafiRdIpv4Addr) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiRdIpv4Addr.YFilter = yf }

func (clearBgpBestpathAfiSafiRdIpv4Addr *ClearBgpBestpathAfiSafiRdIpv4Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiRdIpv4Addr *ClearBgpBestpathAfiSafiRdIpv4Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr"
}

func (clearBgpBestpathAfiSafiRdIpv4Addr *ClearBgpBestpathAfiSafiRdIpv4Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiRdIpv4Addr.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiRdIpv4Addr *ClearBgpBestpathAfiSafiRdIpv4Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiRdIpv4Addr.Input
    return children
}

func (clearBgpBestpathAfiSafiRdIpv4Addr *ClearBgpBestpathAfiSafiRdIpv4Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiRdIpv4Addr *ClearBgpBestpathAfiSafiRdIpv4Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiRdIpv4Addr *ClearBgpBestpathAfiSafiRdIpv4Addr) GetYangName() string { return "clear-bgp-bestpath-afi-safi-rd-ipv4-addr" }

func (clearBgpBestpathAfiSafiRdIpv4Addr *ClearBgpBestpathAfiSafiRdIpv4Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiRdIpv4Addr *ClearBgpBestpathAfiSafiRdIpv4Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiRdIpv4Addr *ClearBgpBestpathAfiSafiRdIpv4Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiRdIpv4Addr *ClearBgpBestpathAfiSafiRdIpv4Addr) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiRdIpv4Addr.parent = parent }

func (clearBgpBestpathAfiSafiRdIpv4Addr *ClearBgpBestpathAfiSafiRdIpv4Addr) GetParent() types.Entity { return clearBgpBestpathAfiSafiRdIpv4Addr.parent }

func (clearBgpBestpathAfiSafiRdIpv4Addr *ClearBgpBestpathAfiSafiRdIpv4Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiRdIpv4Addr_Input
type ClearBgpBestpathAfiSafiRdIpv4Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv4 MDT network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpBestpathAfiSafiRdIpv4Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiRdIpv4Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiRdIpv4Addr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiRdIpv4Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiRdIpv4Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiRdIpv4Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiRdIpv4Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv4-addr"] = input.Ipv4Addr
    return leafs
}

func (input *ClearBgpBestpathAfiSafiRdIpv4Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiRdIpv4Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiRdIpv4Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiRdIpv4Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiRdIpv4Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiRdIpv4Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiRdIpv4Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiRdIpv4Addr_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-rd-ipv4-addr" }

// ClearBgpBestpathAfiSafiVrfIpv4Addr
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathAfiSafiVrfIpv4Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiVrfIpv4Addr_Input
}

func (clearBgpBestpathAfiSafiVrfIpv4Addr *ClearBgpBestpathAfiSafiVrfIpv4Addr) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiVrfIpv4Addr.YFilter }

func (clearBgpBestpathAfiSafiVrfIpv4Addr *ClearBgpBestpathAfiSafiVrfIpv4Addr) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiVrfIpv4Addr.YFilter = yf }

func (clearBgpBestpathAfiSafiVrfIpv4Addr *ClearBgpBestpathAfiSafiVrfIpv4Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiVrfIpv4Addr *ClearBgpBestpathAfiSafiVrfIpv4Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr"
}

func (clearBgpBestpathAfiSafiVrfIpv4Addr *ClearBgpBestpathAfiSafiVrfIpv4Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiVrfIpv4Addr.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiVrfIpv4Addr *ClearBgpBestpathAfiSafiVrfIpv4Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiVrfIpv4Addr.Input
    return children
}

func (clearBgpBestpathAfiSafiVrfIpv4Addr *ClearBgpBestpathAfiSafiVrfIpv4Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiVrfIpv4Addr *ClearBgpBestpathAfiSafiVrfIpv4Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiVrfIpv4Addr *ClearBgpBestpathAfiSafiVrfIpv4Addr) GetYangName() string { return "clear-bgp-bestpath-afi-safi-vrf-ipv4-addr" }

func (clearBgpBestpathAfiSafiVrfIpv4Addr *ClearBgpBestpathAfiSafiVrfIpv4Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiVrfIpv4Addr *ClearBgpBestpathAfiSafiVrfIpv4Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiVrfIpv4Addr *ClearBgpBestpathAfiSafiVrfIpv4Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiVrfIpv4Addr *ClearBgpBestpathAfiSafiVrfIpv4Addr) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiVrfIpv4Addr.parent = parent }

func (clearBgpBestpathAfiSafiVrfIpv4Addr *ClearBgpBestpathAfiSafiVrfIpv4Addr) GetParent() types.Entity { return clearBgpBestpathAfiSafiVrfIpv4Addr.parent }

func (clearBgpBestpathAfiSafiVrfIpv4Addr *ClearBgpBestpathAfiSafiVrfIpv4Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiVrfIpv4Addr_Input
type ClearBgpBestpathAfiSafiVrfIpv4Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv4 MDT network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiVrfIpv4Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiVrfIpv4Addr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv4-addr"] = input.Ipv4Addr
    return leafs
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiVrfIpv4Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiVrfIpv4Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiVrfIpv4Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiVrfIpv4Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiVrfIpv4Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiVrfIpv4Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiVrfIpv4Addr_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-vrf-ipv4-addr" }

// ClearBgpBestpathAfiSafiNetwork
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiNetwork_Input
}

func (clearBgpBestpathAfiSafiNetwork *ClearBgpBestpathAfiSafiNetwork) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiNetwork.YFilter }

func (clearBgpBestpathAfiSafiNetwork *ClearBgpBestpathAfiSafiNetwork) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiNetwork.YFilter = yf }

func (clearBgpBestpathAfiSafiNetwork *ClearBgpBestpathAfiSafiNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiNetwork *ClearBgpBestpathAfiSafiNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-network"
}

func (clearBgpBestpathAfiSafiNetwork *ClearBgpBestpathAfiSafiNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiNetwork.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiNetwork *ClearBgpBestpathAfiSafiNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiNetwork.Input
    return children
}

func (clearBgpBestpathAfiSafiNetwork *ClearBgpBestpathAfiSafiNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiNetwork *ClearBgpBestpathAfiSafiNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiNetwork *ClearBgpBestpathAfiSafiNetwork) GetYangName() string { return "clear-bgp-bestpath-afi-safi-network" }

func (clearBgpBestpathAfiSafiNetwork *ClearBgpBestpathAfiSafiNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiNetwork *ClearBgpBestpathAfiSafiNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiNetwork *ClearBgpBestpathAfiSafiNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiNetwork *ClearBgpBestpathAfiSafiNetwork) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiNetwork.parent = parent }

func (clearBgpBestpathAfiSafiNetwork *ClearBgpBestpathAfiSafiNetwork) GetParent() types.Entity { return clearBgpBestpathAfiSafiNetwork.parent }

func (clearBgpBestpathAfiSafiNetwork *ClearBgpBestpathAfiSafiNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiNetwork_Input
type ClearBgpBestpathAfiSafiNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpBestpathAfiSafiNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiNetwork_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpBestpathAfiSafiNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiNetwork_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-network" }

// ClearBgpBestpathAfiSafiRdNetwork
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdNetwork_Input
}

func (clearBgpBestpathAfiSafiRdNetwork *ClearBgpBestpathAfiSafiRdNetwork) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiRdNetwork.YFilter }

func (clearBgpBestpathAfiSafiRdNetwork *ClearBgpBestpathAfiSafiRdNetwork) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiRdNetwork.YFilter = yf }

func (clearBgpBestpathAfiSafiRdNetwork *ClearBgpBestpathAfiSafiRdNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiRdNetwork *ClearBgpBestpathAfiSafiRdNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-network"
}

func (clearBgpBestpathAfiSafiRdNetwork *ClearBgpBestpathAfiSafiRdNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiRdNetwork.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiRdNetwork *ClearBgpBestpathAfiSafiRdNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiRdNetwork.Input
    return children
}

func (clearBgpBestpathAfiSafiRdNetwork *ClearBgpBestpathAfiSafiRdNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiRdNetwork *ClearBgpBestpathAfiSafiRdNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiRdNetwork *ClearBgpBestpathAfiSafiRdNetwork) GetYangName() string { return "clear-bgp-bestpath-afi-safi-rd-network" }

func (clearBgpBestpathAfiSafiRdNetwork *ClearBgpBestpathAfiSafiRdNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiRdNetwork *ClearBgpBestpathAfiSafiRdNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiRdNetwork *ClearBgpBestpathAfiSafiRdNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiRdNetwork *ClearBgpBestpathAfiSafiRdNetwork) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiRdNetwork.parent = parent }

func (clearBgpBestpathAfiSafiRdNetwork *ClearBgpBestpathAfiSafiRdNetwork) GetParent() types.Entity { return clearBgpBestpathAfiSafiRdNetwork.parent }

func (clearBgpBestpathAfiSafiRdNetwork *ClearBgpBestpathAfiSafiRdNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiRdNetwork_Input
type ClearBgpBestpathAfiSafiRdNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpBestpathAfiSafiRdNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiRdNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiRdNetwork_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiRdNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiRdNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiRdNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiRdNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpBestpathAfiSafiRdNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiRdNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiRdNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiRdNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiRdNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiRdNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiRdNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiRdNetwork_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-rd-network" }

// ClearBgpBestpathAfiSafiVrfNetwork
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathAfiSafiVrfNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiVrfNetwork_Input
}

func (clearBgpBestpathAfiSafiVrfNetwork *ClearBgpBestpathAfiSafiVrfNetwork) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiVrfNetwork.YFilter }

func (clearBgpBestpathAfiSafiVrfNetwork *ClearBgpBestpathAfiSafiVrfNetwork) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiVrfNetwork.YFilter = yf }

func (clearBgpBestpathAfiSafiVrfNetwork *ClearBgpBestpathAfiSafiVrfNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiVrfNetwork *ClearBgpBestpathAfiSafiVrfNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-network"
}

func (clearBgpBestpathAfiSafiVrfNetwork *ClearBgpBestpathAfiSafiVrfNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiVrfNetwork.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiVrfNetwork *ClearBgpBestpathAfiSafiVrfNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiVrfNetwork.Input
    return children
}

func (clearBgpBestpathAfiSafiVrfNetwork *ClearBgpBestpathAfiSafiVrfNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiVrfNetwork *ClearBgpBestpathAfiSafiVrfNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiVrfNetwork *ClearBgpBestpathAfiSafiVrfNetwork) GetYangName() string { return "clear-bgp-bestpath-afi-safi-vrf-network" }

func (clearBgpBestpathAfiSafiVrfNetwork *ClearBgpBestpathAfiSafiVrfNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiVrfNetwork *ClearBgpBestpathAfiSafiVrfNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiVrfNetwork *ClearBgpBestpathAfiSafiVrfNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiVrfNetwork *ClearBgpBestpathAfiSafiVrfNetwork) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiVrfNetwork.parent = parent }

func (clearBgpBestpathAfiSafiVrfNetwork *ClearBgpBestpathAfiSafiVrfNetwork) GetParent() types.Entity { return clearBgpBestpathAfiSafiVrfNetwork.parent }

func (clearBgpBestpathAfiSafiVrfNetwork *ClearBgpBestpathAfiSafiVrfNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiVrfNetwork_Input
type ClearBgpBestpathAfiSafiVrfNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpBestpathAfiSafiVrfNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiVrfNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiVrfNetwork_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiVrfNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiVrfNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiVrfNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiVrfNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpBestpathAfiSafiVrfNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiVrfNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiVrfNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiVrfNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiVrfNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiVrfNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiVrfNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiVrfNetwork_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-vrf-network" }

// ClearBgpBestpathAfiSafiRtConstraintNetwork
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiRtConstraintNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRtConstraintNetwork_Input
}

func (clearBgpBestpathAfiSafiRtConstraintNetwork *ClearBgpBestpathAfiSafiRtConstraintNetwork) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiRtConstraintNetwork.YFilter }

func (clearBgpBestpathAfiSafiRtConstraintNetwork *ClearBgpBestpathAfiSafiRtConstraintNetwork) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiRtConstraintNetwork.YFilter = yf }

func (clearBgpBestpathAfiSafiRtConstraintNetwork *ClearBgpBestpathAfiSafiRtConstraintNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiRtConstraintNetwork *ClearBgpBestpathAfiSafiRtConstraintNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rt-constraint-network"
}

func (clearBgpBestpathAfiSafiRtConstraintNetwork *ClearBgpBestpathAfiSafiRtConstraintNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiRtConstraintNetwork.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiRtConstraintNetwork *ClearBgpBestpathAfiSafiRtConstraintNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiRtConstraintNetwork.Input
    return children
}

func (clearBgpBestpathAfiSafiRtConstraintNetwork *ClearBgpBestpathAfiSafiRtConstraintNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiRtConstraintNetwork *ClearBgpBestpathAfiSafiRtConstraintNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiRtConstraintNetwork *ClearBgpBestpathAfiSafiRtConstraintNetwork) GetYangName() string { return "clear-bgp-bestpath-afi-safi-rt-constraint-network" }

func (clearBgpBestpathAfiSafiRtConstraintNetwork *ClearBgpBestpathAfiSafiRtConstraintNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiRtConstraintNetwork *ClearBgpBestpathAfiSafiRtConstraintNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiRtConstraintNetwork *ClearBgpBestpathAfiSafiRtConstraintNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiRtConstraintNetwork *ClearBgpBestpathAfiSafiRtConstraintNetwork) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiRtConstraintNetwork.parent = parent }

func (clearBgpBestpathAfiSafiRtConstraintNetwork *ClearBgpBestpathAfiSafiRtConstraintNetwork) GetParent() types.Entity { return clearBgpBestpathAfiSafiRtConstraintNetwork.parent }

func (clearBgpBestpathAfiSafiRtConstraintNetwork *ClearBgpBestpathAfiSafiRtConstraintNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiRtConstraintNetwork_Input
type ClearBgpBestpathAfiSafiRtConstraintNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // RT-Constraint network. The type is string. This attribute is mandatory.
    RtConstraintNetwork interface{}
}

func (input *ClearBgpBestpathAfiSafiRtConstraintNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiRtConstraintNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiRtConstraintNetwork_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rt-constraint-network" { return "RtConstraintNetwork" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiRtConstraintNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiRtConstraintNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiRtConstraintNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiRtConstraintNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rt-constraint-network"] = input.RtConstraintNetwork
    return leafs
}

func (input *ClearBgpBestpathAfiSafiRtConstraintNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiRtConstraintNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiRtConstraintNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiRtConstraintNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiRtConstraintNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiRtConstraintNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiRtConstraintNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiRtConstraintNetwork_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-rt-constraint-network" }

// ClearBgpBestpathAfiSafiIpv4TunnelNetwork
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpv4TunnelNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input
}

func (clearBgpBestpathAfiSafiIpv4TunnelNetwork *ClearBgpBestpathAfiSafiIpv4TunnelNetwork) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiIpv4TunnelNetwork.YFilter }

func (clearBgpBestpathAfiSafiIpv4TunnelNetwork *ClearBgpBestpathAfiSafiIpv4TunnelNetwork) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiIpv4TunnelNetwork.YFilter = yf }

func (clearBgpBestpathAfiSafiIpv4TunnelNetwork *ClearBgpBestpathAfiSafiIpv4TunnelNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiIpv4TunnelNetwork *ClearBgpBestpathAfiSafiIpv4TunnelNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv4-tunnel-network"
}

func (clearBgpBestpathAfiSafiIpv4TunnelNetwork *ClearBgpBestpathAfiSafiIpv4TunnelNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiIpv4TunnelNetwork.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiIpv4TunnelNetwork *ClearBgpBestpathAfiSafiIpv4TunnelNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiIpv4TunnelNetwork.Input
    return children
}

func (clearBgpBestpathAfiSafiIpv4TunnelNetwork *ClearBgpBestpathAfiSafiIpv4TunnelNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiIpv4TunnelNetwork *ClearBgpBestpathAfiSafiIpv4TunnelNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiIpv4TunnelNetwork *ClearBgpBestpathAfiSafiIpv4TunnelNetwork) GetYangName() string { return "clear-bgp-bestpath-afi-safi-ipv4-tunnel-network" }

func (clearBgpBestpathAfiSafiIpv4TunnelNetwork *ClearBgpBestpathAfiSafiIpv4TunnelNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiIpv4TunnelNetwork *ClearBgpBestpathAfiSafiIpv4TunnelNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiIpv4TunnelNetwork *ClearBgpBestpathAfiSafiIpv4TunnelNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiIpv4TunnelNetwork *ClearBgpBestpathAfiSafiIpv4TunnelNetwork) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiIpv4TunnelNetwork.parent = parent }

func (clearBgpBestpathAfiSafiIpv4TunnelNetwork *ClearBgpBestpathAfiSafiIpv4TunnelNetwork) GetParent() types.Entity { return clearBgpBestpathAfiSafiIpv4TunnelNetwork.parent }

func (clearBgpBestpathAfiSafiIpv4TunnelNetwork *ClearBgpBestpathAfiSafiIpv4TunnelNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input
type ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Tunnel network <Tunnel-ID>:<IPv4 Address>. The type is string. This
    // attribute is mandatory.
    Ipv4TunnelNetwork interface{}
}

func (input *ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-tunnel-network" { return "Ipv4TunnelNetwork" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-tunnel-network"] = input.Ipv4TunnelNetwork
    return leafs
}

func (input *ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiIpv4TunnelNetwork_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-ipv4-tunnel-network" }

// ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input
}

func (clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.YFilter }

func (clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.YFilter = yf }

func (clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask"
}

func (clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.Input
    return children
}

func (clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask) GetYangName() string { return "clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask" }

func (clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.parent = parent }

func (clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask) GetParent() types.Entity { return clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask.parent }

func (clearBgpBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input
type ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    if yname == "ipv6-netmask" { return "Ipv6Netmask" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-addr"] = input.Ipv6Addr
    leafs["ipv6-netmask"] = input.Ipv6Netmask
    return leafs
}

func (input *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-ipv6-addr-ipv6-netmask" }

// ClearBgpBestpathAfiSafiIpv6Addr
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpv6Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpv6Addr_Input
}

func (clearBgpBestpathAfiSafiIpv6Addr *ClearBgpBestpathAfiSafiIpv6Addr) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiIpv6Addr.YFilter }

func (clearBgpBestpathAfiSafiIpv6Addr *ClearBgpBestpathAfiSafiIpv6Addr) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiIpv6Addr.YFilter = yf }

func (clearBgpBestpathAfiSafiIpv6Addr *ClearBgpBestpathAfiSafiIpv6Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiIpv6Addr *ClearBgpBestpathAfiSafiIpv6Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-addr"
}

func (clearBgpBestpathAfiSafiIpv6Addr *ClearBgpBestpathAfiSafiIpv6Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiIpv6Addr.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiIpv6Addr *ClearBgpBestpathAfiSafiIpv6Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiIpv6Addr.Input
    return children
}

func (clearBgpBestpathAfiSafiIpv6Addr *ClearBgpBestpathAfiSafiIpv6Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiIpv6Addr *ClearBgpBestpathAfiSafiIpv6Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiIpv6Addr *ClearBgpBestpathAfiSafiIpv6Addr) GetYangName() string { return "clear-bgp-bestpath-afi-safi-ipv6-addr" }

func (clearBgpBestpathAfiSafiIpv6Addr *ClearBgpBestpathAfiSafiIpv6Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiIpv6Addr *ClearBgpBestpathAfiSafiIpv6Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiIpv6Addr *ClearBgpBestpathAfiSafiIpv6Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiIpv6Addr *ClearBgpBestpathAfiSafiIpv6Addr) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiIpv6Addr.parent = parent }

func (clearBgpBestpathAfiSafiIpv6Addr *ClearBgpBestpathAfiSafiIpv6Addr) GetParent() types.Entity { return clearBgpBestpathAfiSafiIpv6Addr.parent }

func (clearBgpBestpathAfiSafiIpv6Addr *ClearBgpBestpathAfiSafiIpv6Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiIpv6Addr_Input
type ClearBgpBestpathAfiSafiIpv6Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpBestpathAfiSafiIpv6Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiIpv6Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiIpv6Addr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiIpv6Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiIpv6Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiIpv6Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiIpv6Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-addr"] = input.Ipv6Addr
    return leafs
}

func (input *ClearBgpBestpathAfiSafiIpv6Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiIpv6Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiIpv6Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiIpv6Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiIpv6Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiIpv6Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiIpv6Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiIpv6Addr_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-ipv6-addr" }

// ClearBgpBestpathAfiSafiIpv6Prefix
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiIpv6Prefix_Input
}

func (clearBgpBestpathAfiSafiIpv6Prefix *ClearBgpBestpathAfiSafiIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiIpv6Prefix.YFilter }

func (clearBgpBestpathAfiSafiIpv6Prefix *ClearBgpBestpathAfiSafiIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiIpv6Prefix.YFilter = yf }

func (clearBgpBestpathAfiSafiIpv6Prefix *ClearBgpBestpathAfiSafiIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiIpv6Prefix *ClearBgpBestpathAfiSafiIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-ipv6-prefix"
}

func (clearBgpBestpathAfiSafiIpv6Prefix *ClearBgpBestpathAfiSafiIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiIpv6Prefix.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiIpv6Prefix *ClearBgpBestpathAfiSafiIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiIpv6Prefix.Input
    return children
}

func (clearBgpBestpathAfiSafiIpv6Prefix *ClearBgpBestpathAfiSafiIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiIpv6Prefix *ClearBgpBestpathAfiSafiIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiIpv6Prefix *ClearBgpBestpathAfiSafiIpv6Prefix) GetYangName() string { return "clear-bgp-bestpath-afi-safi-ipv6-prefix" }

func (clearBgpBestpathAfiSafiIpv6Prefix *ClearBgpBestpathAfiSafiIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiIpv6Prefix *ClearBgpBestpathAfiSafiIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiIpv6Prefix *ClearBgpBestpathAfiSafiIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiIpv6Prefix *ClearBgpBestpathAfiSafiIpv6Prefix) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiIpv6Prefix.parent = parent }

func (clearBgpBestpathAfiSafiIpv6Prefix *ClearBgpBestpathAfiSafiIpv6Prefix) GetParent() types.Entity { return clearBgpBestpathAfiSafiIpv6Prefix.parent }

func (clearBgpBestpathAfiSafiIpv6Prefix *ClearBgpBestpathAfiSafiIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiIpv6Prefix_Input
type ClearBgpBestpathAfiSafiIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpBestpathAfiSafiIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpBestpathAfiSafiIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-ipv6-prefix" }

// ClearBgpBestpathAfiSafiRd
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRd_Input
}

func (clearBgpBestpathAfiSafiRd *ClearBgpBestpathAfiSafiRd) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiRd.YFilter }

func (clearBgpBestpathAfiSafiRd *ClearBgpBestpathAfiSafiRd) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiRd.YFilter = yf }

func (clearBgpBestpathAfiSafiRd *ClearBgpBestpathAfiSafiRd) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiRd *ClearBgpBestpathAfiSafiRd) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd"
}

func (clearBgpBestpathAfiSafiRd *ClearBgpBestpathAfiSafiRd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiRd.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiRd *ClearBgpBestpathAfiSafiRd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiRd.Input
    return children
}

func (clearBgpBestpathAfiSafiRd *ClearBgpBestpathAfiSafiRd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiRd *ClearBgpBestpathAfiSafiRd) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiRd *ClearBgpBestpathAfiSafiRd) GetYangName() string { return "clear-bgp-bestpath-afi-safi-rd" }

func (clearBgpBestpathAfiSafiRd *ClearBgpBestpathAfiSafiRd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiRd *ClearBgpBestpathAfiSafiRd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiRd *ClearBgpBestpathAfiSafiRd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiRd *ClearBgpBestpathAfiSafiRd) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiRd.parent = parent }

func (clearBgpBestpathAfiSafiRd *ClearBgpBestpathAfiSafiRd) GetParent() types.Entity { return clearBgpBestpathAfiSafiRd.parent }

func (clearBgpBestpathAfiSafiRd *ClearBgpBestpathAfiSafiRd) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiRd_Input
type ClearBgpBestpathAfiSafiRd_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}
}

func (input *ClearBgpBestpathAfiSafiRd_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiRd_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiRd_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiRd_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiRd_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiRd_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiRd_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    return leafs
}

func (input *ClearBgpBestpathAfiSafiRd_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiRd_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiRd_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiRd_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiRd_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiRd_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiRd_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiRd_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-rd" }

// ClearBgpBestpathAfiSafiVrf
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathAfiSafiVrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiVrf_Input
}

func (clearBgpBestpathAfiSafiVrf *ClearBgpBestpathAfiSafiVrf) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiVrf.YFilter }

func (clearBgpBestpathAfiSafiVrf *ClearBgpBestpathAfiSafiVrf) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiVrf.YFilter = yf }

func (clearBgpBestpathAfiSafiVrf *ClearBgpBestpathAfiSafiVrf) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiVrf *ClearBgpBestpathAfiSafiVrf) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf"
}

func (clearBgpBestpathAfiSafiVrf *ClearBgpBestpathAfiSafiVrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiVrf.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiVrf *ClearBgpBestpathAfiSafiVrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiVrf.Input
    return children
}

func (clearBgpBestpathAfiSafiVrf *ClearBgpBestpathAfiSafiVrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiVrf *ClearBgpBestpathAfiSafiVrf) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiVrf *ClearBgpBestpathAfiSafiVrf) GetYangName() string { return "clear-bgp-bestpath-afi-safi-vrf" }

func (clearBgpBestpathAfiSafiVrf *ClearBgpBestpathAfiSafiVrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiVrf *ClearBgpBestpathAfiSafiVrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiVrf *ClearBgpBestpathAfiSafiVrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiVrf *ClearBgpBestpathAfiSafiVrf) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiVrf.parent = parent }

func (clearBgpBestpathAfiSafiVrf *ClearBgpBestpathAfiSafiVrf) GetParent() types.Entity { return clearBgpBestpathAfiSafiVrf.parent }

func (clearBgpBestpathAfiSafiVrf *ClearBgpBestpathAfiSafiVrf) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiVrf_Input
type ClearBgpBestpathAfiSafiVrf_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}
}

func (input *ClearBgpBestpathAfiSafiVrf_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiVrf_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiVrf_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiVrf_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiVrf_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiVrf_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiVrf_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    return leafs
}

func (input *ClearBgpBestpathAfiSafiVrf_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiVrf_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiVrf_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiVrf_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiVrf_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiVrf_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiVrf_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiVrf_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-vrf" }

// ClearBgpBestpathAfiSafi
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafi_Input
}

func (clearBgpBestpathAfiSafi *ClearBgpBestpathAfiSafi) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafi.YFilter }

func (clearBgpBestpathAfiSafi *ClearBgpBestpathAfiSafi) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafi.YFilter = yf }

func (clearBgpBestpathAfiSafi *ClearBgpBestpathAfiSafi) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafi *ClearBgpBestpathAfiSafi) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi"
}

func (clearBgpBestpathAfiSafi *ClearBgpBestpathAfiSafi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafi.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafi *ClearBgpBestpathAfiSafi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafi.Input
    return children
}

func (clearBgpBestpathAfiSafi *ClearBgpBestpathAfiSafi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafi *ClearBgpBestpathAfiSafi) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafi *ClearBgpBestpathAfiSafi) GetYangName() string { return "clear-bgp-bestpath-afi-safi" }

func (clearBgpBestpathAfiSafi *ClearBgpBestpathAfiSafi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafi *ClearBgpBestpathAfiSafi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafi *ClearBgpBestpathAfiSafi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafi *ClearBgpBestpathAfiSafi) SetParent(parent types.Entity) { clearBgpBestpathAfiSafi.parent = parent }

func (clearBgpBestpathAfiSafi *ClearBgpBestpathAfiSafi) GetParent() types.Entity { return clearBgpBestpathAfiSafi.parent }

func (clearBgpBestpathAfiSafi *ClearBgpBestpathAfiSafi) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafi_Input
type ClearBgpBestpathAfiSafi_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpBestpathAfiSafi_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafi_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafi_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpBestpathAfiSafi_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafi_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafi_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafi_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpBestpathAfiSafi_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafi_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafi_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafi_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafi_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafi_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafi_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafi_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi" }

// ClearBgpBestpathAfiSafiSrPolicyPrefix
// re-run BGP bestpath selection.
// 
type ClearBgpBestpathAfiSafiSrPolicyPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiSrPolicyPrefix_Input
}

func (clearBgpBestpathAfiSafiSrPolicyPrefix *ClearBgpBestpathAfiSafiSrPolicyPrefix) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiSrPolicyPrefix.YFilter }

func (clearBgpBestpathAfiSafiSrPolicyPrefix *ClearBgpBestpathAfiSafiSrPolicyPrefix) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiSrPolicyPrefix.YFilter = yf }

func (clearBgpBestpathAfiSafiSrPolicyPrefix *ClearBgpBestpathAfiSafiSrPolicyPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiSrPolicyPrefix *ClearBgpBestpathAfiSafiSrPolicyPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-sr-policy-prefix"
}

func (clearBgpBestpathAfiSafiSrPolicyPrefix *ClearBgpBestpathAfiSafiSrPolicyPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiSrPolicyPrefix.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiSrPolicyPrefix *ClearBgpBestpathAfiSafiSrPolicyPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiSrPolicyPrefix.Input
    return children
}

func (clearBgpBestpathAfiSafiSrPolicyPrefix *ClearBgpBestpathAfiSafiSrPolicyPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiSrPolicyPrefix *ClearBgpBestpathAfiSafiSrPolicyPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiSrPolicyPrefix *ClearBgpBestpathAfiSafiSrPolicyPrefix) GetYangName() string { return "clear-bgp-bestpath-afi-safi-sr-policy-prefix" }

func (clearBgpBestpathAfiSafiSrPolicyPrefix *ClearBgpBestpathAfiSafiSrPolicyPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiSrPolicyPrefix *ClearBgpBestpathAfiSafiSrPolicyPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiSrPolicyPrefix *ClearBgpBestpathAfiSafiSrPolicyPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiSrPolicyPrefix *ClearBgpBestpathAfiSafiSrPolicyPrefix) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiSrPolicyPrefix.parent = parent }

func (clearBgpBestpathAfiSafiSrPolicyPrefix *ClearBgpBestpathAfiSafiSrPolicyPrefix) GetParent() types.Entity { return clearBgpBestpathAfiSafiSrPolicyPrefix.parent }

func (clearBgpBestpathAfiSafiSrPolicyPrefix *ClearBgpBestpathAfiSafiSrPolicyPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiSrPolicyPrefix_Input
type ClearBgpBestpathAfiSafiSrPolicyPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // SR Policy prefix. The type is string. This attribute is mandatory.
    SrPolicyPrefix interface{}
}

func (input *ClearBgpBestpathAfiSafiSrPolicyPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiSrPolicyPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiSrPolicyPrefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "sr-policy-prefix" { return "SrPolicyPrefix" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiSrPolicyPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiSrPolicyPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiSrPolicyPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiSrPolicyPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["sr-policy-prefix"] = input.SrPolicyPrefix
    return leafs
}

func (input *ClearBgpBestpathAfiSafiSrPolicyPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiSrPolicyPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiSrPolicyPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiSrPolicyPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiSrPolicyPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiSrPolicyPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiSrPolicyPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiSrPolicyPrefix_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-sr-policy-prefix" }

// ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix
// re-run BGP bestpath selection.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input
}

func (clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.YFilter }

func (clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.YFilter = yf }

func (clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix"
}

func (clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.Input
    return children
}

func (clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix) GetYangName() string { return "clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix" }

func (clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.parent = parent }

func (clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix) GetParent() types.Entity { return clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix.parent }

func (clearBgpBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input
type ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // L2VPN EVPN Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "bridge-domain-name" { return "BridgeDomainName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["bridge-domain-name"] = input.BridgeDomainName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-bridge-domain-ipv4-prefix" }

// ClearBgpBestpathAfiSafiRdIpv4Prefix
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdIpv4Prefix_Input
}

func (clearBgpBestpathAfiSafiRdIpv4Prefix *ClearBgpBestpathAfiSafiRdIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiRdIpv4Prefix.YFilter }

func (clearBgpBestpathAfiSafiRdIpv4Prefix *ClearBgpBestpathAfiSafiRdIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiRdIpv4Prefix.YFilter = yf }

func (clearBgpBestpathAfiSafiRdIpv4Prefix *ClearBgpBestpathAfiSafiRdIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiRdIpv4Prefix *ClearBgpBestpathAfiSafiRdIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-prefix"
}

func (clearBgpBestpathAfiSafiRdIpv4Prefix *ClearBgpBestpathAfiSafiRdIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiRdIpv4Prefix.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiRdIpv4Prefix *ClearBgpBestpathAfiSafiRdIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiRdIpv4Prefix.Input
    return children
}

func (clearBgpBestpathAfiSafiRdIpv4Prefix *ClearBgpBestpathAfiSafiRdIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiRdIpv4Prefix *ClearBgpBestpathAfiSafiRdIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiRdIpv4Prefix *ClearBgpBestpathAfiSafiRdIpv4Prefix) GetYangName() string { return "clear-bgp-bestpath-afi-safi-rd-ipv4-prefix" }

func (clearBgpBestpathAfiSafiRdIpv4Prefix *ClearBgpBestpathAfiSafiRdIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiRdIpv4Prefix *ClearBgpBestpathAfiSafiRdIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiRdIpv4Prefix *ClearBgpBestpathAfiSafiRdIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiRdIpv4Prefix *ClearBgpBestpathAfiSafiRdIpv4Prefix) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiRdIpv4Prefix.parent = parent }

func (clearBgpBestpathAfiSafiRdIpv4Prefix *ClearBgpBestpathAfiSafiRdIpv4Prefix) GetParent() types.Entity { return clearBgpBestpathAfiSafiRdIpv4Prefix.parent }

func (clearBgpBestpathAfiSafiRdIpv4Prefix *ClearBgpBestpathAfiSafiRdIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiRdIpv4Prefix_Input
type ClearBgpBestpathAfiSafiRdIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // L2VPN EVPN Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpBestpathAfiSafiRdIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiRdIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiRdIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiRdIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiRdIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiRdIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiRdIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpBestpathAfiSafiRdIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiRdIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiRdIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiRdIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiRdIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiRdIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiRdIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiRdIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-rd-ipv4-prefix" }

// ClearBgpBestpathAfiSafiMp2MpIpv4Prefix
// re-run BGP bestpath selection.
// Display routes for a specified Xconnect group:MP2MP.
// 
type ClearBgpBestpathAfiSafiMp2MpIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiMp2MpIpv4Prefix_Input
}

func (clearBgpBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiMp2MpIpv4Prefix.YFilter }

func (clearBgpBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiMp2MpIpv4Prefix.YFilter = yf }

func (clearBgpBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix"
}

func (clearBgpBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiMp2MpIpv4Prefix.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiMp2MpIpv4Prefix.Input
    return children
}

func (clearBgpBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix) GetYangName() string { return "clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix" }

func (clearBgpBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiMp2MpIpv4Prefix.parent = parent }

func (clearBgpBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix) GetParent() types.Entity { return clearBgpBestpathAfiSafiMp2MpIpv4Prefix.parent }

func (clearBgpBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiMp2MpIpv4Prefix_Input
type ClearBgpBestpathAfiSafiMp2MpIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Xconnect Group:mp2mp. The type is string. This attribute is mandatory.
    Mp2Mp interface{}

    // L2VPN VPWS Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "mp2mp" { return "Mp2Mp" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["mp2mp"] = input.Mp2Mp
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiMp2MpIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-mp2mp-ipv4-prefix" }

// ClearBgpBestpathAfiSafiVrfIpv4Prefix
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathAfiSafiVrfIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input
}

func (clearBgpBestpathAfiSafiVrfIpv4Prefix *ClearBgpBestpathAfiSafiVrfIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiVrfIpv4Prefix.YFilter }

func (clearBgpBestpathAfiSafiVrfIpv4Prefix *ClearBgpBestpathAfiSafiVrfIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiVrfIpv4Prefix.YFilter = yf }

func (clearBgpBestpathAfiSafiVrfIpv4Prefix *ClearBgpBestpathAfiSafiVrfIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiVrfIpv4Prefix *ClearBgpBestpathAfiSafiVrfIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix"
}

func (clearBgpBestpathAfiSafiVrfIpv4Prefix *ClearBgpBestpathAfiSafiVrfIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiVrfIpv4Prefix.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiVrfIpv4Prefix *ClearBgpBestpathAfiSafiVrfIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiVrfIpv4Prefix.Input
    return children
}

func (clearBgpBestpathAfiSafiVrfIpv4Prefix *ClearBgpBestpathAfiSafiVrfIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiVrfIpv4Prefix *ClearBgpBestpathAfiSafiVrfIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiVrfIpv4Prefix *ClearBgpBestpathAfiSafiVrfIpv4Prefix) GetYangName() string { return "clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix" }

func (clearBgpBestpathAfiSafiVrfIpv4Prefix *ClearBgpBestpathAfiSafiVrfIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiVrfIpv4Prefix *ClearBgpBestpathAfiSafiVrfIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiVrfIpv4Prefix *ClearBgpBestpathAfiSafiVrfIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiVrfIpv4Prefix *ClearBgpBestpathAfiSafiVrfIpv4Prefix) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiVrfIpv4Prefix.parent = parent }

func (clearBgpBestpathAfiSafiVrfIpv4Prefix *ClearBgpBestpathAfiSafiVrfIpv4Prefix) GetParent() types.Entity { return clearBgpBestpathAfiSafiVrfIpv4Prefix.parent }

func (clearBgpBestpathAfiSafiVrfIpv4Prefix *ClearBgpBestpathAfiSafiVrfIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input
type ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // VPN Fspec Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiVrfIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-vrf-ipv4-prefix" }

// ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input
}

func (clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.YFilter }

func (clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.YFilter = yf }

func (clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"
}

func (clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.Input
    return children
}

func (clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask) GetYangName() string { return "clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask" }

func (clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.parent = parent }

func (clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask) GetParent() types.Entity { return clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask.parent }

func (clearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input
type ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv4-addr"] = input.Ipv4Addr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask" }

// ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input
}

func (clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.YFilter }

func (clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.YFilter = yf }

func (clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"
}

func (clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input
    return children
}

func (clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetYangName() string { return "clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask" }

func (clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.parent = parent }

func (clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetParent() types.Entity { return clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask.parent }

func (clearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input
type ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv4-addr"] = input.Ipv4Addr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask" }

// ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input
}

func (clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.YFilter }

func (clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.YFilter = yf }

func (clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"
}

func (clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input
    return children
}

func (clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetYangName() string { return "clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask" }

func (clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.parent = parent }

func (clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetParent() types.Entity { return clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask.parent }

func (clearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input
type ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    if yname == "ipv6-netmask" { return "Ipv6Netmask" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv6-addr"] = input.Ipv6Addr
    leafs["ipv6-netmask"] = input.Ipv6Netmask
    return leafs
}

func (input *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask" }

// ClearBgpBestpathAfiSafiRdIpv6Addr
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdIpv6Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdIpv6Addr_Input
}

func (clearBgpBestpathAfiSafiRdIpv6Addr *ClearBgpBestpathAfiSafiRdIpv6Addr) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiRdIpv6Addr.YFilter }

func (clearBgpBestpathAfiSafiRdIpv6Addr *ClearBgpBestpathAfiSafiRdIpv6Addr) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiRdIpv6Addr.YFilter = yf }

func (clearBgpBestpathAfiSafiRdIpv6Addr *ClearBgpBestpathAfiSafiRdIpv6Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiRdIpv6Addr *ClearBgpBestpathAfiSafiRdIpv6Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-addr"
}

func (clearBgpBestpathAfiSafiRdIpv6Addr *ClearBgpBestpathAfiSafiRdIpv6Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiRdIpv6Addr.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiRdIpv6Addr *ClearBgpBestpathAfiSafiRdIpv6Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiRdIpv6Addr.Input
    return children
}

func (clearBgpBestpathAfiSafiRdIpv6Addr *ClearBgpBestpathAfiSafiRdIpv6Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiRdIpv6Addr *ClearBgpBestpathAfiSafiRdIpv6Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiRdIpv6Addr *ClearBgpBestpathAfiSafiRdIpv6Addr) GetYangName() string { return "clear-bgp-bestpath-afi-safi-rd-ipv6-addr" }

func (clearBgpBestpathAfiSafiRdIpv6Addr *ClearBgpBestpathAfiSafiRdIpv6Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiRdIpv6Addr *ClearBgpBestpathAfiSafiRdIpv6Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiRdIpv6Addr *ClearBgpBestpathAfiSafiRdIpv6Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiRdIpv6Addr *ClearBgpBestpathAfiSafiRdIpv6Addr) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiRdIpv6Addr.parent = parent }

func (clearBgpBestpathAfiSafiRdIpv6Addr *ClearBgpBestpathAfiSafiRdIpv6Addr) GetParent() types.Entity { return clearBgpBestpathAfiSafiRdIpv6Addr.parent }

func (clearBgpBestpathAfiSafiRdIpv6Addr *ClearBgpBestpathAfiSafiRdIpv6Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiRdIpv6Addr_Input
type ClearBgpBestpathAfiSafiRdIpv6Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpBestpathAfiSafiRdIpv6Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiRdIpv6Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiRdIpv6Addr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiRdIpv6Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiRdIpv6Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiRdIpv6Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiRdIpv6Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv6-addr"] = input.Ipv6Addr
    return leafs
}

func (input *ClearBgpBestpathAfiSafiRdIpv6Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiRdIpv6Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiRdIpv6Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiRdIpv6Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiRdIpv6Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiRdIpv6Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiRdIpv6Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiRdIpv6Addr_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-rd-ipv6-addr" }

// ClearBgpBestpathAfiSafiRdIpv6Prefix
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathAfiSafiRdIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiRdIpv6Prefix_Input
}

func (clearBgpBestpathAfiSafiRdIpv6Prefix *ClearBgpBestpathAfiSafiRdIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiRdIpv6Prefix.YFilter }

func (clearBgpBestpathAfiSafiRdIpv6Prefix *ClearBgpBestpathAfiSafiRdIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiRdIpv6Prefix.YFilter = yf }

func (clearBgpBestpathAfiSafiRdIpv6Prefix *ClearBgpBestpathAfiSafiRdIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiRdIpv6Prefix *ClearBgpBestpathAfiSafiRdIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-rd-ipv6-prefix"
}

func (clearBgpBestpathAfiSafiRdIpv6Prefix *ClearBgpBestpathAfiSafiRdIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiRdIpv6Prefix.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiRdIpv6Prefix *ClearBgpBestpathAfiSafiRdIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiRdIpv6Prefix.Input
    return children
}

func (clearBgpBestpathAfiSafiRdIpv6Prefix *ClearBgpBestpathAfiSafiRdIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiRdIpv6Prefix *ClearBgpBestpathAfiSafiRdIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiRdIpv6Prefix *ClearBgpBestpathAfiSafiRdIpv6Prefix) GetYangName() string { return "clear-bgp-bestpath-afi-safi-rd-ipv6-prefix" }

func (clearBgpBestpathAfiSafiRdIpv6Prefix *ClearBgpBestpathAfiSafiRdIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiRdIpv6Prefix *ClearBgpBestpathAfiSafiRdIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiRdIpv6Prefix *ClearBgpBestpathAfiSafiRdIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiRdIpv6Prefix *ClearBgpBestpathAfiSafiRdIpv6Prefix) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiRdIpv6Prefix.parent = parent }

func (clearBgpBestpathAfiSafiRdIpv6Prefix *ClearBgpBestpathAfiSafiRdIpv6Prefix) GetParent() types.Entity { return clearBgpBestpathAfiSafiRdIpv6Prefix.parent }

func (clearBgpBestpathAfiSafiRdIpv6Prefix *ClearBgpBestpathAfiSafiRdIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiRdIpv6Prefix_Input
type ClearBgpBestpathAfiSafiRdIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpBestpathAfiSafiRdIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiRdIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiRdIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiRdIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiRdIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiRdIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiRdIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpBestpathAfiSafiRdIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiRdIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiRdIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiRdIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiRdIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiRdIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiRdIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiRdIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-rd-ipv6-prefix" }

// ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input
}

func (clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.YFilter }

func (clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.YFilter = yf }

func (clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"
}

func (clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input
    return children
}

func (clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetYangName() string { return "clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask" }

func (clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.parent = parent }

func (clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetParent() types.Entity { return clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask.parent }

func (clearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input
type ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    if yname == "ipv6-netmask" { return "Ipv6Netmask" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv6-addr"] = input.Ipv6Addr
    leafs["ipv6-netmask"] = input.Ipv6Netmask
    return leafs
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask" }

// ClearBgpBestpathAfiSafiVrfIpv6Addr
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathAfiSafiVrfIpv6Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiVrfIpv6Addr_Input
}

func (clearBgpBestpathAfiSafiVrfIpv6Addr *ClearBgpBestpathAfiSafiVrfIpv6Addr) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiVrfIpv6Addr.YFilter }

func (clearBgpBestpathAfiSafiVrfIpv6Addr *ClearBgpBestpathAfiSafiVrfIpv6Addr) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiVrfIpv6Addr.YFilter = yf }

func (clearBgpBestpathAfiSafiVrfIpv6Addr *ClearBgpBestpathAfiSafiVrfIpv6Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiVrfIpv6Addr *ClearBgpBestpathAfiSafiVrfIpv6Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-addr"
}

func (clearBgpBestpathAfiSafiVrfIpv6Addr *ClearBgpBestpathAfiSafiVrfIpv6Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiVrfIpv6Addr.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiVrfIpv6Addr *ClearBgpBestpathAfiSafiVrfIpv6Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiVrfIpv6Addr.Input
    return children
}

func (clearBgpBestpathAfiSafiVrfIpv6Addr *ClearBgpBestpathAfiSafiVrfIpv6Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiVrfIpv6Addr *ClearBgpBestpathAfiSafiVrfIpv6Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiVrfIpv6Addr *ClearBgpBestpathAfiSafiVrfIpv6Addr) GetYangName() string { return "clear-bgp-bestpath-afi-safi-vrf-ipv6-addr" }

func (clearBgpBestpathAfiSafiVrfIpv6Addr *ClearBgpBestpathAfiSafiVrfIpv6Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiVrfIpv6Addr *ClearBgpBestpathAfiSafiVrfIpv6Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiVrfIpv6Addr *ClearBgpBestpathAfiSafiVrfIpv6Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiVrfIpv6Addr *ClearBgpBestpathAfiSafiVrfIpv6Addr) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiVrfIpv6Addr.parent = parent }

func (clearBgpBestpathAfiSafiVrfIpv6Addr *ClearBgpBestpathAfiSafiVrfIpv6Addr) GetParent() types.Entity { return clearBgpBestpathAfiSafiVrfIpv6Addr.parent }

func (clearBgpBestpathAfiSafiVrfIpv6Addr *ClearBgpBestpathAfiSafiVrfIpv6Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiVrfIpv6Addr_Input
type ClearBgpBestpathAfiSafiVrfIpv6Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiVrfIpv6Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiVrfIpv6Addr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv6-addr"] = input.Ipv6Addr
    return leafs
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiVrfIpv6Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiVrfIpv6Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiVrfIpv6Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiVrfIpv6Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiVrfIpv6Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiVrfIpv6Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiVrfIpv6Addr_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-vrf-ipv6-addr" }

// ClearBgpBestpathAfiSafiVrfIpv6Prefix
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathAfiSafiVrfIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input
}

func (clearBgpBestpathAfiSafiVrfIpv6Prefix *ClearBgpBestpathAfiSafiVrfIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpBestpathAfiSafiVrfIpv6Prefix.YFilter }

func (clearBgpBestpathAfiSafiVrfIpv6Prefix *ClearBgpBestpathAfiSafiVrfIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpBestpathAfiSafiVrfIpv6Prefix.YFilter = yf }

func (clearBgpBestpathAfiSafiVrfIpv6Prefix *ClearBgpBestpathAfiSafiVrfIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathAfiSafiVrfIpv6Prefix *ClearBgpBestpathAfiSafiVrfIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix"
}

func (clearBgpBestpathAfiSafiVrfIpv6Prefix *ClearBgpBestpathAfiSafiVrfIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathAfiSafiVrfIpv6Prefix.Input
    }
    return nil
}

func (clearBgpBestpathAfiSafiVrfIpv6Prefix *ClearBgpBestpathAfiSafiVrfIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathAfiSafiVrfIpv6Prefix.Input
    return children
}

func (clearBgpBestpathAfiSafiVrfIpv6Prefix *ClearBgpBestpathAfiSafiVrfIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathAfiSafiVrfIpv6Prefix *ClearBgpBestpathAfiSafiVrfIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathAfiSafiVrfIpv6Prefix *ClearBgpBestpathAfiSafiVrfIpv6Prefix) GetYangName() string { return "clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix" }

func (clearBgpBestpathAfiSafiVrfIpv6Prefix *ClearBgpBestpathAfiSafiVrfIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathAfiSafiVrfIpv6Prefix *ClearBgpBestpathAfiSafiVrfIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathAfiSafiVrfIpv6Prefix *ClearBgpBestpathAfiSafiVrfIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathAfiSafiVrfIpv6Prefix *ClearBgpBestpathAfiSafiVrfIpv6Prefix) SetParent(parent types.Entity) { clearBgpBestpathAfiSafiVrfIpv6Prefix.parent = parent }

func (clearBgpBestpathAfiSafiVrfIpv6Prefix *ClearBgpBestpathAfiSafiVrfIpv6Prefix) GetParent() types.Entity { return clearBgpBestpathAfiSafiVrfIpv6Prefix.parent }

func (clearBgpBestpathAfiSafiVrfIpv6Prefix *ClearBgpBestpathAfiSafiVrfIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input
type ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathAfiSafiVrfIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-bestpath-afi-safi-vrf-ipv6-prefix" }

// ClearBgpBestpathVrfIpAddrIpNetmask
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfIpAddrIpNetmask_Input
}

func (clearBgpBestpathVrfIpAddrIpNetmask *ClearBgpBestpathVrfIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpBestpathVrfIpAddrIpNetmask.YFilter }

func (clearBgpBestpathVrfIpAddrIpNetmask *ClearBgpBestpathVrfIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpBestpathVrfIpAddrIpNetmask.YFilter = yf }

func (clearBgpBestpathVrfIpAddrIpNetmask *ClearBgpBestpathVrfIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathVrfIpAddrIpNetmask *ClearBgpBestpathVrfIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr-ip-netmask"
}

func (clearBgpBestpathVrfIpAddrIpNetmask *ClearBgpBestpathVrfIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathVrfIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpBestpathVrfIpAddrIpNetmask *ClearBgpBestpathVrfIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathVrfIpAddrIpNetmask.Input
    return children
}

func (clearBgpBestpathVrfIpAddrIpNetmask *ClearBgpBestpathVrfIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathVrfIpAddrIpNetmask *ClearBgpBestpathVrfIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathVrfIpAddrIpNetmask *ClearBgpBestpathVrfIpAddrIpNetmask) GetYangName() string { return "clear-bgp-bestpath-vrf-ip-addr-ip-netmask" }

func (clearBgpBestpathVrfIpAddrIpNetmask *ClearBgpBestpathVrfIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathVrfIpAddrIpNetmask *ClearBgpBestpathVrfIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathVrfIpAddrIpNetmask *ClearBgpBestpathVrfIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathVrfIpAddrIpNetmask *ClearBgpBestpathVrfIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpBestpathVrfIpAddrIpNetmask.parent = parent }

func (clearBgpBestpathVrfIpAddrIpNetmask *ClearBgpBestpathVrfIpAddrIpNetmask) GetParent() types.Entity { return clearBgpBestpathVrfIpAddrIpNetmask.parent }

func (clearBgpBestpathVrfIpAddrIpNetmask *ClearBgpBestpathVrfIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathVrfIpAddrIpNetmask_Input
type ClearBgpBestpathVrfIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpBestpathVrfIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathVrfIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathVrfIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpBestpathVrfIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathVrfIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathVrfIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathVrfIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpBestpathVrfIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathVrfIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathVrfIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathVrfIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathVrfIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathVrfIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathVrfIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathVrfIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-bestpath-vrf-ip-addr-ip-netmask" }

// ClearBgpBestpathVrfIpAddr
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfIpAddr_Input
}

func (clearBgpBestpathVrfIpAddr *ClearBgpBestpathVrfIpAddr) GetFilter() yfilter.YFilter { return clearBgpBestpathVrfIpAddr.YFilter }

func (clearBgpBestpathVrfIpAddr *ClearBgpBestpathVrfIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpBestpathVrfIpAddr.YFilter = yf }

func (clearBgpBestpathVrfIpAddr *ClearBgpBestpathVrfIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathVrfIpAddr *ClearBgpBestpathVrfIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-addr"
}

func (clearBgpBestpathVrfIpAddr *ClearBgpBestpathVrfIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathVrfIpAddr.Input
    }
    return nil
}

func (clearBgpBestpathVrfIpAddr *ClearBgpBestpathVrfIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathVrfIpAddr.Input
    return children
}

func (clearBgpBestpathVrfIpAddr *ClearBgpBestpathVrfIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathVrfIpAddr *ClearBgpBestpathVrfIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathVrfIpAddr *ClearBgpBestpathVrfIpAddr) GetYangName() string { return "clear-bgp-bestpath-vrf-ip-addr" }

func (clearBgpBestpathVrfIpAddr *ClearBgpBestpathVrfIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathVrfIpAddr *ClearBgpBestpathVrfIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathVrfIpAddr *ClearBgpBestpathVrfIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathVrfIpAddr *ClearBgpBestpathVrfIpAddr) SetParent(parent types.Entity) { clearBgpBestpathVrfIpAddr.parent = parent }

func (clearBgpBestpathVrfIpAddr *ClearBgpBestpathVrfIpAddr) GetParent() types.Entity { return clearBgpBestpathVrfIpAddr.parent }

func (clearBgpBestpathVrfIpAddr *ClearBgpBestpathVrfIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathVrfIpAddr_Input
type ClearBgpBestpathVrfIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpBestpathVrfIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathVrfIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathVrfIpAddr_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpBestpathVrfIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathVrfIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathVrfIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathVrfIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpBestpathVrfIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathVrfIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathVrfIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathVrfIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathVrfIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathVrfIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathVrfIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathVrfIpAddr_Input) GetParentYangName() string { return "clear-bgp-bestpath-vrf-ip-addr" }

// ClearBgpBestpathVrfIpPrefix
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfIpPrefix_Input
}

func (clearBgpBestpathVrfIpPrefix *ClearBgpBestpathVrfIpPrefix) GetFilter() yfilter.YFilter { return clearBgpBestpathVrfIpPrefix.YFilter }

func (clearBgpBestpathVrfIpPrefix *ClearBgpBestpathVrfIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpBestpathVrfIpPrefix.YFilter = yf }

func (clearBgpBestpathVrfIpPrefix *ClearBgpBestpathVrfIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathVrfIpPrefix *ClearBgpBestpathVrfIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-ip-prefix"
}

func (clearBgpBestpathVrfIpPrefix *ClearBgpBestpathVrfIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathVrfIpPrefix.Input
    }
    return nil
}

func (clearBgpBestpathVrfIpPrefix *ClearBgpBestpathVrfIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathVrfIpPrefix.Input
    return children
}

func (clearBgpBestpathVrfIpPrefix *ClearBgpBestpathVrfIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathVrfIpPrefix *ClearBgpBestpathVrfIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathVrfIpPrefix *ClearBgpBestpathVrfIpPrefix) GetYangName() string { return "clear-bgp-bestpath-vrf-ip-prefix" }

func (clearBgpBestpathVrfIpPrefix *ClearBgpBestpathVrfIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathVrfIpPrefix *ClearBgpBestpathVrfIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathVrfIpPrefix *ClearBgpBestpathVrfIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathVrfIpPrefix *ClearBgpBestpathVrfIpPrefix) SetParent(parent types.Entity) { clearBgpBestpathVrfIpPrefix.parent = parent }

func (clearBgpBestpathVrfIpPrefix *ClearBgpBestpathVrfIpPrefix) GetParent() types.Entity { return clearBgpBestpathVrfIpPrefix.parent }

func (clearBgpBestpathVrfIpPrefix *ClearBgpBestpathVrfIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathVrfIpPrefix_Input
type ClearBgpBestpathVrfIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpBestpathVrfIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathVrfIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathVrfIpPrefix_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpBestpathVrfIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathVrfIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathVrfIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathVrfIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpBestpathVrfIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathVrfIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathVrfIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathVrfIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathVrfIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathVrfIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathVrfIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathVrfIpPrefix_Input) GetParentYangName() string { return "clear-bgp-bestpath-vrf-ip-prefix" }

// ClearBgpBestpathVrfAfiSafiIpv4Prefix
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfAfiSafiIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input
}

func (clearBgpBestpathVrfAfiSafiIpv4Prefix *ClearBgpBestpathVrfAfiSafiIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpBestpathVrfAfiSafiIpv4Prefix.YFilter }

func (clearBgpBestpathVrfAfiSafiIpv4Prefix *ClearBgpBestpathVrfAfiSafiIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpBestpathVrfAfiSafiIpv4Prefix.YFilter = yf }

func (clearBgpBestpathVrfAfiSafiIpv4Prefix *ClearBgpBestpathVrfAfiSafiIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathVrfAfiSafiIpv4Prefix *ClearBgpBestpathVrfAfiSafiIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix"
}

func (clearBgpBestpathVrfAfiSafiIpv4Prefix *ClearBgpBestpathVrfAfiSafiIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathVrfAfiSafiIpv4Prefix.Input
    }
    return nil
}

func (clearBgpBestpathVrfAfiSafiIpv4Prefix *ClearBgpBestpathVrfAfiSafiIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathVrfAfiSafiIpv4Prefix.Input
    return children
}

func (clearBgpBestpathVrfAfiSafiIpv4Prefix *ClearBgpBestpathVrfAfiSafiIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathVrfAfiSafiIpv4Prefix *ClearBgpBestpathVrfAfiSafiIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathVrfAfiSafiIpv4Prefix *ClearBgpBestpathVrfAfiSafiIpv4Prefix) GetYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix" }

func (clearBgpBestpathVrfAfiSafiIpv4Prefix *ClearBgpBestpathVrfAfiSafiIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathVrfAfiSafiIpv4Prefix *ClearBgpBestpathVrfAfiSafiIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathVrfAfiSafiIpv4Prefix *ClearBgpBestpathVrfAfiSafiIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathVrfAfiSafiIpv4Prefix *ClearBgpBestpathVrfAfiSafiIpv4Prefix) SetParent(parent types.Entity) { clearBgpBestpathVrfAfiSafiIpv4Prefix.parent = parent }

func (clearBgpBestpathVrfAfiSafiIpv4Prefix *ClearBgpBestpathVrfAfiSafiIpv4Prefix) GetParent() types.Entity { return clearBgpBestpathVrfAfiSafiIpv4Prefix.parent }

func (clearBgpBestpathVrfAfiSafiIpv4Prefix *ClearBgpBestpathVrfAfiSafiIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input
type ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Fspec IPv4 Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathVrfAfiSafiIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-ipv4-prefix" }

// ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input
}

func (clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.YFilter }

func (clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.YFilter = yf }

func (clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"
}

func (clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input
    return children
}

func (clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask" }

func (clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask) SetParent(parent types.Entity) { clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.parent = parent }

func (clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetParent() types.Entity { return clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask.parent }

func (clearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input
type ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-addr"] = input.Ipv4Addr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask" }

// ClearBgpBestpathVrfAfiSafiIpv4Addr
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfAfiSafiIpv4Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiIpv4Addr_Input
}

func (clearBgpBestpathVrfAfiSafiIpv4Addr *ClearBgpBestpathVrfAfiSafiIpv4Addr) GetFilter() yfilter.YFilter { return clearBgpBestpathVrfAfiSafiIpv4Addr.YFilter }

func (clearBgpBestpathVrfAfiSafiIpv4Addr *ClearBgpBestpathVrfAfiSafiIpv4Addr) SetFilter(yf yfilter.YFilter) { clearBgpBestpathVrfAfiSafiIpv4Addr.YFilter = yf }

func (clearBgpBestpathVrfAfiSafiIpv4Addr *ClearBgpBestpathVrfAfiSafiIpv4Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathVrfAfiSafiIpv4Addr *ClearBgpBestpathVrfAfiSafiIpv4Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv4-addr"
}

func (clearBgpBestpathVrfAfiSafiIpv4Addr *ClearBgpBestpathVrfAfiSafiIpv4Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathVrfAfiSafiIpv4Addr.Input
    }
    return nil
}

func (clearBgpBestpathVrfAfiSafiIpv4Addr *ClearBgpBestpathVrfAfiSafiIpv4Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathVrfAfiSafiIpv4Addr.Input
    return children
}

func (clearBgpBestpathVrfAfiSafiIpv4Addr *ClearBgpBestpathVrfAfiSafiIpv4Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathVrfAfiSafiIpv4Addr *ClearBgpBestpathVrfAfiSafiIpv4Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathVrfAfiSafiIpv4Addr *ClearBgpBestpathVrfAfiSafiIpv4Addr) GetYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-ipv4-addr" }

func (clearBgpBestpathVrfAfiSafiIpv4Addr *ClearBgpBestpathVrfAfiSafiIpv4Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathVrfAfiSafiIpv4Addr *ClearBgpBestpathVrfAfiSafiIpv4Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathVrfAfiSafiIpv4Addr *ClearBgpBestpathVrfAfiSafiIpv4Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathVrfAfiSafiIpv4Addr *ClearBgpBestpathVrfAfiSafiIpv4Addr) SetParent(parent types.Entity) { clearBgpBestpathVrfAfiSafiIpv4Addr.parent = parent }

func (clearBgpBestpathVrfAfiSafiIpv4Addr *ClearBgpBestpathVrfAfiSafiIpv4Addr) GetParent() types.Entity { return clearBgpBestpathVrfAfiSafiIpv4Addr.parent }

func (clearBgpBestpathVrfAfiSafiIpv4Addr *ClearBgpBestpathVrfAfiSafiIpv4Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathVrfAfiSafiIpv4Addr_Input
type ClearBgpBestpathVrfAfiSafiIpv4Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathVrfAfiSafiIpv4Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathVrfAfiSafiIpv4Addr_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    return ""
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-addr"] = input.Ipv4Addr
    return leafs
}

func (input *ClearBgpBestpathVrfAfiSafiIpv4Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathVrfAfiSafiIpv4Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathVrfAfiSafiIpv4Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathVrfAfiSafiIpv4Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathVrfAfiSafiIpv4Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathVrfAfiSafiIpv4Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathVrfAfiSafiIpv4Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathVrfAfiSafiIpv4Addr_Input) GetParentYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-ipv4-addr" }

// ClearBgpBestpathVrfAfiSafiNetwork
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfAfiSafiNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiNetwork_Input
}

func (clearBgpBestpathVrfAfiSafiNetwork *ClearBgpBestpathVrfAfiSafiNetwork) GetFilter() yfilter.YFilter { return clearBgpBestpathVrfAfiSafiNetwork.YFilter }

func (clearBgpBestpathVrfAfiSafiNetwork *ClearBgpBestpathVrfAfiSafiNetwork) SetFilter(yf yfilter.YFilter) { clearBgpBestpathVrfAfiSafiNetwork.YFilter = yf }

func (clearBgpBestpathVrfAfiSafiNetwork *ClearBgpBestpathVrfAfiSafiNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathVrfAfiSafiNetwork *ClearBgpBestpathVrfAfiSafiNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-network"
}

func (clearBgpBestpathVrfAfiSafiNetwork *ClearBgpBestpathVrfAfiSafiNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathVrfAfiSafiNetwork.Input
    }
    return nil
}

func (clearBgpBestpathVrfAfiSafiNetwork *ClearBgpBestpathVrfAfiSafiNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathVrfAfiSafiNetwork.Input
    return children
}

func (clearBgpBestpathVrfAfiSafiNetwork *ClearBgpBestpathVrfAfiSafiNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathVrfAfiSafiNetwork *ClearBgpBestpathVrfAfiSafiNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathVrfAfiSafiNetwork *ClearBgpBestpathVrfAfiSafiNetwork) GetYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-network" }

func (clearBgpBestpathVrfAfiSafiNetwork *ClearBgpBestpathVrfAfiSafiNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathVrfAfiSafiNetwork *ClearBgpBestpathVrfAfiSafiNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathVrfAfiSafiNetwork *ClearBgpBestpathVrfAfiSafiNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathVrfAfiSafiNetwork *ClearBgpBestpathVrfAfiSafiNetwork) SetParent(parent types.Entity) { clearBgpBestpathVrfAfiSafiNetwork.parent = parent }

func (clearBgpBestpathVrfAfiSafiNetwork *ClearBgpBestpathVrfAfiSafiNetwork) GetParent() types.Entity { return clearBgpBestpathVrfAfiSafiNetwork.parent }

func (clearBgpBestpathVrfAfiSafiNetwork *ClearBgpBestpathVrfAfiSafiNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathVrfAfiSafiNetwork_Input
type ClearBgpBestpathVrfAfiSafiNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathVrfAfiSafiNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathVrfAfiSafiNetwork_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpBestpathVrfAfiSafiNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathVrfAfiSafiNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathVrfAfiSafiNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathVrfAfiSafiNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpBestpathVrfAfiSafiNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathVrfAfiSafiNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathVrfAfiSafiNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathVrfAfiSafiNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathVrfAfiSafiNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathVrfAfiSafiNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathVrfAfiSafiNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathVrfAfiSafiNetwork_Input) GetParentYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-network" }

// ClearBgpBestpathVrfAfiSafiRdNetwork
// re-run BGP bestpath selection.
// Specify a VRF.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathVrfAfiSafiRdNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiRdNetwork_Input
}

func (clearBgpBestpathVrfAfiSafiRdNetwork *ClearBgpBestpathVrfAfiSafiRdNetwork) GetFilter() yfilter.YFilter { return clearBgpBestpathVrfAfiSafiRdNetwork.YFilter }

func (clearBgpBestpathVrfAfiSafiRdNetwork *ClearBgpBestpathVrfAfiSafiRdNetwork) SetFilter(yf yfilter.YFilter) { clearBgpBestpathVrfAfiSafiRdNetwork.YFilter = yf }

func (clearBgpBestpathVrfAfiSafiRdNetwork *ClearBgpBestpathVrfAfiSafiRdNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathVrfAfiSafiRdNetwork *ClearBgpBestpathVrfAfiSafiRdNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd-network"
}

func (clearBgpBestpathVrfAfiSafiRdNetwork *ClearBgpBestpathVrfAfiSafiRdNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathVrfAfiSafiRdNetwork.Input
    }
    return nil
}

func (clearBgpBestpathVrfAfiSafiRdNetwork *ClearBgpBestpathVrfAfiSafiRdNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathVrfAfiSafiRdNetwork.Input
    return children
}

func (clearBgpBestpathVrfAfiSafiRdNetwork *ClearBgpBestpathVrfAfiSafiRdNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathVrfAfiSafiRdNetwork *ClearBgpBestpathVrfAfiSafiRdNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathVrfAfiSafiRdNetwork *ClearBgpBestpathVrfAfiSafiRdNetwork) GetYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-rd-network" }

func (clearBgpBestpathVrfAfiSafiRdNetwork *ClearBgpBestpathVrfAfiSafiRdNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathVrfAfiSafiRdNetwork *ClearBgpBestpathVrfAfiSafiRdNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathVrfAfiSafiRdNetwork *ClearBgpBestpathVrfAfiSafiRdNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathVrfAfiSafiRdNetwork *ClearBgpBestpathVrfAfiSafiRdNetwork) SetParent(parent types.Entity) { clearBgpBestpathVrfAfiSafiRdNetwork.parent = parent }

func (clearBgpBestpathVrfAfiSafiRdNetwork *ClearBgpBestpathVrfAfiSafiRdNetwork) GetParent() types.Entity { return clearBgpBestpathVrfAfiSafiRdNetwork.parent }

func (clearBgpBestpathVrfAfiSafiRdNetwork *ClearBgpBestpathVrfAfiSafiRdNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathVrfAfiSafiRdNetwork_Input
type ClearBgpBestpathVrfAfiSafiRdNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiRdNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathVrfAfiSafiRdNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathVrfAfiSafiRdNetwork_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpBestpathVrfAfiSafiRdNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathVrfAfiSafiRdNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathVrfAfiSafiRdNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathVrfAfiSafiRdNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpBestpathVrfAfiSafiRdNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathVrfAfiSafiRdNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathVrfAfiSafiRdNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathVrfAfiSafiRdNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathVrfAfiSafiRdNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathVrfAfiSafiRdNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathVrfAfiSafiRdNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathVrfAfiSafiRdNetwork_Input) GetParentYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-rd-network" }

// ClearBgpBestpathVrfAfiSafiVrfNetwork
// re-run BGP bestpath selection.
// Specify a VRF.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathVrfAfiSafiVrfNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiVrfNetwork_Input
}

func (clearBgpBestpathVrfAfiSafiVrfNetwork *ClearBgpBestpathVrfAfiSafiVrfNetwork) GetFilter() yfilter.YFilter { return clearBgpBestpathVrfAfiSafiVrfNetwork.YFilter }

func (clearBgpBestpathVrfAfiSafiVrfNetwork *ClearBgpBestpathVrfAfiSafiVrfNetwork) SetFilter(yf yfilter.YFilter) { clearBgpBestpathVrfAfiSafiVrfNetwork.YFilter = yf }

func (clearBgpBestpathVrfAfiSafiVrfNetwork *ClearBgpBestpathVrfAfiSafiVrfNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathVrfAfiSafiVrfNetwork *ClearBgpBestpathVrfAfiSafiVrfNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf-network"
}

func (clearBgpBestpathVrfAfiSafiVrfNetwork *ClearBgpBestpathVrfAfiSafiVrfNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathVrfAfiSafiVrfNetwork.Input
    }
    return nil
}

func (clearBgpBestpathVrfAfiSafiVrfNetwork *ClearBgpBestpathVrfAfiSafiVrfNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathVrfAfiSafiVrfNetwork.Input
    return children
}

func (clearBgpBestpathVrfAfiSafiVrfNetwork *ClearBgpBestpathVrfAfiSafiVrfNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathVrfAfiSafiVrfNetwork *ClearBgpBestpathVrfAfiSafiVrfNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathVrfAfiSafiVrfNetwork *ClearBgpBestpathVrfAfiSafiVrfNetwork) GetYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-vrf-network" }

func (clearBgpBestpathVrfAfiSafiVrfNetwork *ClearBgpBestpathVrfAfiSafiVrfNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathVrfAfiSafiVrfNetwork *ClearBgpBestpathVrfAfiSafiVrfNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathVrfAfiSafiVrfNetwork *ClearBgpBestpathVrfAfiSafiVrfNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathVrfAfiSafiVrfNetwork *ClearBgpBestpathVrfAfiSafiVrfNetwork) SetParent(parent types.Entity) { clearBgpBestpathVrfAfiSafiVrfNetwork.parent = parent }

func (clearBgpBestpathVrfAfiSafiVrfNetwork *ClearBgpBestpathVrfAfiSafiVrfNetwork) GetParent() types.Entity { return clearBgpBestpathVrfAfiSafiVrfNetwork.parent }

func (clearBgpBestpathVrfAfiSafiVrfNetwork *ClearBgpBestpathVrfAfiSafiVrfNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathVrfAfiSafiVrfNetwork_Input
type ClearBgpBestpathVrfAfiSafiVrfNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiVrfNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathVrfAfiSafiVrfNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathVrfAfiSafiVrfNetwork_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpBestpathVrfAfiSafiVrfNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathVrfAfiSafiVrfNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathVrfAfiSafiVrfNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathVrfAfiSafiVrfNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpBestpathVrfAfiSafiVrfNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathVrfAfiSafiVrfNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathVrfAfiSafiVrfNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathVrfAfiSafiVrfNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathVrfAfiSafiVrfNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathVrfAfiSafiVrfNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathVrfAfiSafiVrfNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathVrfAfiSafiVrfNetwork_Input) GetParentYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-vrf-network" }

// ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input
}

func (clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetFilter() yfilter.YFilter { return clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.YFilter }

func (clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask) SetFilter(yf yfilter.YFilter) { clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.YFilter = yf }

func (clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"
}

func (clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input
    }
    return nil
}

func (clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input
    return children
}

func (clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask" }

func (clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask) SetParent(parent types.Entity) { clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.parent = parent }

func (clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetParent() types.Entity { return clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask.parent }

func (clearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input
type ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    if yname == "ipv6-netmask" { return "Ipv6Netmask" }
    return ""
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-addr"] = input.Ipv6Addr
    leafs["ipv6-netmask"] = input.Ipv6Netmask
    return leafs
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetParentYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask" }

// ClearBgpBestpathVrfAfiSafiIpv6Addr
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfAfiSafiIpv6Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiIpv6Addr_Input
}

func (clearBgpBestpathVrfAfiSafiIpv6Addr *ClearBgpBestpathVrfAfiSafiIpv6Addr) GetFilter() yfilter.YFilter { return clearBgpBestpathVrfAfiSafiIpv6Addr.YFilter }

func (clearBgpBestpathVrfAfiSafiIpv6Addr *ClearBgpBestpathVrfAfiSafiIpv6Addr) SetFilter(yf yfilter.YFilter) { clearBgpBestpathVrfAfiSafiIpv6Addr.YFilter = yf }

func (clearBgpBestpathVrfAfiSafiIpv6Addr *ClearBgpBestpathVrfAfiSafiIpv6Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathVrfAfiSafiIpv6Addr *ClearBgpBestpathVrfAfiSafiIpv6Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-addr"
}

func (clearBgpBestpathVrfAfiSafiIpv6Addr *ClearBgpBestpathVrfAfiSafiIpv6Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathVrfAfiSafiIpv6Addr.Input
    }
    return nil
}

func (clearBgpBestpathVrfAfiSafiIpv6Addr *ClearBgpBestpathVrfAfiSafiIpv6Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathVrfAfiSafiIpv6Addr.Input
    return children
}

func (clearBgpBestpathVrfAfiSafiIpv6Addr *ClearBgpBestpathVrfAfiSafiIpv6Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathVrfAfiSafiIpv6Addr *ClearBgpBestpathVrfAfiSafiIpv6Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathVrfAfiSafiIpv6Addr *ClearBgpBestpathVrfAfiSafiIpv6Addr) GetYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-ipv6-addr" }

func (clearBgpBestpathVrfAfiSafiIpv6Addr *ClearBgpBestpathVrfAfiSafiIpv6Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathVrfAfiSafiIpv6Addr *ClearBgpBestpathVrfAfiSafiIpv6Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathVrfAfiSafiIpv6Addr *ClearBgpBestpathVrfAfiSafiIpv6Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathVrfAfiSafiIpv6Addr *ClearBgpBestpathVrfAfiSafiIpv6Addr) SetParent(parent types.Entity) { clearBgpBestpathVrfAfiSafiIpv6Addr.parent = parent }

func (clearBgpBestpathVrfAfiSafiIpv6Addr *ClearBgpBestpathVrfAfiSafiIpv6Addr) GetParent() types.Entity { return clearBgpBestpathVrfAfiSafiIpv6Addr.parent }

func (clearBgpBestpathVrfAfiSafiIpv6Addr *ClearBgpBestpathVrfAfiSafiIpv6Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathVrfAfiSafiIpv6Addr_Input
type ClearBgpBestpathVrfAfiSafiIpv6Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathVrfAfiSafiIpv6Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathVrfAfiSafiIpv6Addr_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    return ""
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-addr"] = input.Ipv6Addr
    return leafs
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathVrfAfiSafiIpv6Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathVrfAfiSafiIpv6Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathVrfAfiSafiIpv6Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathVrfAfiSafiIpv6Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathVrfAfiSafiIpv6Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathVrfAfiSafiIpv6Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathVrfAfiSafiIpv6Addr_Input) GetParentYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-ipv6-addr" }

// ClearBgpBestpathVrfAfiSafiIpv6Prefix
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfAfiSafiIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input
}

func (clearBgpBestpathVrfAfiSafiIpv6Prefix *ClearBgpBestpathVrfAfiSafiIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpBestpathVrfAfiSafiIpv6Prefix.YFilter }

func (clearBgpBestpathVrfAfiSafiIpv6Prefix *ClearBgpBestpathVrfAfiSafiIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpBestpathVrfAfiSafiIpv6Prefix.YFilter = yf }

func (clearBgpBestpathVrfAfiSafiIpv6Prefix *ClearBgpBestpathVrfAfiSafiIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathVrfAfiSafiIpv6Prefix *ClearBgpBestpathVrfAfiSafiIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix"
}

func (clearBgpBestpathVrfAfiSafiIpv6Prefix *ClearBgpBestpathVrfAfiSafiIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathVrfAfiSafiIpv6Prefix.Input
    }
    return nil
}

func (clearBgpBestpathVrfAfiSafiIpv6Prefix *ClearBgpBestpathVrfAfiSafiIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathVrfAfiSafiIpv6Prefix.Input
    return children
}

func (clearBgpBestpathVrfAfiSafiIpv6Prefix *ClearBgpBestpathVrfAfiSafiIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathVrfAfiSafiIpv6Prefix *ClearBgpBestpathVrfAfiSafiIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathVrfAfiSafiIpv6Prefix *ClearBgpBestpathVrfAfiSafiIpv6Prefix) GetYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix" }

func (clearBgpBestpathVrfAfiSafiIpv6Prefix *ClearBgpBestpathVrfAfiSafiIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathVrfAfiSafiIpv6Prefix *ClearBgpBestpathVrfAfiSafiIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathVrfAfiSafiIpv6Prefix *ClearBgpBestpathVrfAfiSafiIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathVrfAfiSafiIpv6Prefix *ClearBgpBestpathVrfAfiSafiIpv6Prefix) SetParent(parent types.Entity) { clearBgpBestpathVrfAfiSafiIpv6Prefix.parent = parent }

func (clearBgpBestpathVrfAfiSafiIpv6Prefix *ClearBgpBestpathVrfAfiSafiIpv6Prefix) GetParent() types.Entity { return clearBgpBestpathVrfAfiSafiIpv6Prefix.parent }

func (clearBgpBestpathVrfAfiSafiIpv6Prefix *ClearBgpBestpathVrfAfiSafiIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input
type ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathVrfAfiSafiIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-ipv6-prefix" }

// ClearBgpBestpathVrfAfiSafiRd
// re-run BGP bestpath selection.
// Specify a VRF.
// Display routes with a specific route distinguisher.
// 
type ClearBgpBestpathVrfAfiSafiRd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiRd_Input
}

func (clearBgpBestpathVrfAfiSafiRd *ClearBgpBestpathVrfAfiSafiRd) GetFilter() yfilter.YFilter { return clearBgpBestpathVrfAfiSafiRd.YFilter }

func (clearBgpBestpathVrfAfiSafiRd *ClearBgpBestpathVrfAfiSafiRd) SetFilter(yf yfilter.YFilter) { clearBgpBestpathVrfAfiSafiRd.YFilter = yf }

func (clearBgpBestpathVrfAfiSafiRd *ClearBgpBestpathVrfAfiSafiRd) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathVrfAfiSafiRd *ClearBgpBestpathVrfAfiSafiRd) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-rd"
}

func (clearBgpBestpathVrfAfiSafiRd *ClearBgpBestpathVrfAfiSafiRd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathVrfAfiSafiRd.Input
    }
    return nil
}

func (clearBgpBestpathVrfAfiSafiRd *ClearBgpBestpathVrfAfiSafiRd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathVrfAfiSafiRd.Input
    return children
}

func (clearBgpBestpathVrfAfiSafiRd *ClearBgpBestpathVrfAfiSafiRd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathVrfAfiSafiRd *ClearBgpBestpathVrfAfiSafiRd) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathVrfAfiSafiRd *ClearBgpBestpathVrfAfiSafiRd) GetYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-rd" }

func (clearBgpBestpathVrfAfiSafiRd *ClearBgpBestpathVrfAfiSafiRd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathVrfAfiSafiRd *ClearBgpBestpathVrfAfiSafiRd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathVrfAfiSafiRd *ClearBgpBestpathVrfAfiSafiRd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathVrfAfiSafiRd *ClearBgpBestpathVrfAfiSafiRd) SetParent(parent types.Entity) { clearBgpBestpathVrfAfiSafiRd.parent = parent }

func (clearBgpBestpathVrfAfiSafiRd *ClearBgpBestpathVrfAfiSafiRd) GetParent() types.Entity { return clearBgpBestpathVrfAfiSafiRd.parent }

func (clearBgpBestpathVrfAfiSafiRd *ClearBgpBestpathVrfAfiSafiRd) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathVrfAfiSafiRd_Input
type ClearBgpBestpathVrfAfiSafiRd_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiRd_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathVrfAfiSafiRd_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathVrfAfiSafiRd_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    return ""
}

func (input *ClearBgpBestpathVrfAfiSafiRd_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathVrfAfiSafiRd_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathVrfAfiSafiRd_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathVrfAfiSafiRd_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    return leafs
}

func (input *ClearBgpBestpathVrfAfiSafiRd_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathVrfAfiSafiRd_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathVrfAfiSafiRd_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathVrfAfiSafiRd_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathVrfAfiSafiRd_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathVrfAfiSafiRd_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathVrfAfiSafiRd_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathVrfAfiSafiRd_Input) GetParentYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-rd" }

// ClearBgpBestpathVrfAfiSafiVrf
// re-run BGP bestpath selection.
// Specify a VRF.
// Display routes for a specified VRF.
// 
type ClearBgpBestpathVrfAfiSafiVrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafiVrf_Input
}

func (clearBgpBestpathVrfAfiSafiVrf *ClearBgpBestpathVrfAfiSafiVrf) GetFilter() yfilter.YFilter { return clearBgpBestpathVrfAfiSafiVrf.YFilter }

func (clearBgpBestpathVrfAfiSafiVrf *ClearBgpBestpathVrfAfiSafiVrf) SetFilter(yf yfilter.YFilter) { clearBgpBestpathVrfAfiSafiVrf.YFilter = yf }

func (clearBgpBestpathVrfAfiSafiVrf *ClearBgpBestpathVrfAfiSafiVrf) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathVrfAfiSafiVrf *ClearBgpBestpathVrfAfiSafiVrf) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi-vrf"
}

func (clearBgpBestpathVrfAfiSafiVrf *ClearBgpBestpathVrfAfiSafiVrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathVrfAfiSafiVrf.Input
    }
    return nil
}

func (clearBgpBestpathVrfAfiSafiVrf *ClearBgpBestpathVrfAfiSafiVrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathVrfAfiSafiVrf.Input
    return children
}

func (clearBgpBestpathVrfAfiSafiVrf *ClearBgpBestpathVrfAfiSafiVrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathVrfAfiSafiVrf *ClearBgpBestpathVrfAfiSafiVrf) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathVrfAfiSafiVrf *ClearBgpBestpathVrfAfiSafiVrf) GetYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-vrf" }

func (clearBgpBestpathVrfAfiSafiVrf *ClearBgpBestpathVrfAfiSafiVrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathVrfAfiSafiVrf *ClearBgpBestpathVrfAfiSafiVrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathVrfAfiSafiVrf *ClearBgpBestpathVrfAfiSafiVrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathVrfAfiSafiVrf *ClearBgpBestpathVrfAfiSafiVrf) SetParent(parent types.Entity) { clearBgpBestpathVrfAfiSafiVrf.parent = parent }

func (clearBgpBestpathVrfAfiSafiVrf *ClearBgpBestpathVrfAfiSafiVrf) GetParent() types.Entity { return clearBgpBestpathVrfAfiSafiVrf.parent }

func (clearBgpBestpathVrfAfiSafiVrf *ClearBgpBestpathVrfAfiSafiVrf) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathVrfAfiSafiVrf_Input
type ClearBgpBestpathVrfAfiSafiVrf_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}
}

func (input *ClearBgpBestpathVrfAfiSafiVrf_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathVrfAfiSafiVrf_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathVrfAfiSafiVrf_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (input *ClearBgpBestpathVrfAfiSafiVrf_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathVrfAfiSafiVrf_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathVrfAfiSafiVrf_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathVrfAfiSafiVrf_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    return leafs
}

func (input *ClearBgpBestpathVrfAfiSafiVrf_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathVrfAfiSafiVrf_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathVrfAfiSafiVrf_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathVrfAfiSafiVrf_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathVrfAfiSafiVrf_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathVrfAfiSafiVrf_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathVrfAfiSafiVrf_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathVrfAfiSafiVrf_Input) GetParentYangName() string { return "clear-bgp-bestpath-vrf-afi-safi-vrf" }

// ClearBgpBestpathVrfAfiSafi
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpBestpathVrfAfiSafi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpBestpathVrfAfiSafi_Input
}

func (clearBgpBestpathVrfAfiSafi *ClearBgpBestpathVrfAfiSafi) GetFilter() yfilter.YFilter { return clearBgpBestpathVrfAfiSafi.YFilter }

func (clearBgpBestpathVrfAfiSafi *ClearBgpBestpathVrfAfiSafi) SetFilter(yf yfilter.YFilter) { clearBgpBestpathVrfAfiSafi.YFilter = yf }

func (clearBgpBestpathVrfAfiSafi *ClearBgpBestpathVrfAfiSafi) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpBestpathVrfAfiSafi *ClearBgpBestpathVrfAfiSafi) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-bestpath-vrf-afi-safi"
}

func (clearBgpBestpathVrfAfiSafi *ClearBgpBestpathVrfAfiSafi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpBestpathVrfAfiSafi.Input
    }
    return nil
}

func (clearBgpBestpathVrfAfiSafi *ClearBgpBestpathVrfAfiSafi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpBestpathVrfAfiSafi.Input
    return children
}

func (clearBgpBestpathVrfAfiSafi *ClearBgpBestpathVrfAfiSafi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpBestpathVrfAfiSafi *ClearBgpBestpathVrfAfiSafi) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpBestpathVrfAfiSafi *ClearBgpBestpathVrfAfiSafi) GetYangName() string { return "clear-bgp-bestpath-vrf-afi-safi" }

func (clearBgpBestpathVrfAfiSafi *ClearBgpBestpathVrfAfiSafi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpBestpathVrfAfiSafi *ClearBgpBestpathVrfAfiSafi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpBestpathVrfAfiSafi *ClearBgpBestpathVrfAfiSafi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpBestpathVrfAfiSafi *ClearBgpBestpathVrfAfiSafi) SetParent(parent types.Entity) { clearBgpBestpathVrfAfiSafi.parent = parent }

func (clearBgpBestpathVrfAfiSafi *ClearBgpBestpathVrfAfiSafi) GetParent() types.Entity { return clearBgpBestpathVrfAfiSafi.parent }

func (clearBgpBestpathVrfAfiSafi *ClearBgpBestpathVrfAfiSafi) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpBestpathVrfAfiSafi_Input
type ClearBgpBestpathVrfAfiSafi_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpBestpathVrfAfiSafi_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpBestpathVrfAfiSafi_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpBestpathVrfAfiSafi_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpBestpathVrfAfiSafi_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpBestpathVrfAfiSafi_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpBestpathVrfAfiSafi_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpBestpathVrfAfiSafi_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpBestpathVrfAfiSafi_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpBestpathVrfAfiSafi_Input) GetYangName() string { return "input" }

func (input *ClearBgpBestpathVrfAfiSafi_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpBestpathVrfAfiSafi_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpBestpathVrfAfiSafi_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpBestpathVrfAfiSafi_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpBestpathVrfAfiSafi_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpBestpathVrfAfiSafi_Input) GetParentYangName() string { return "clear-bgp-bestpath-vrf-afi-safi" }

// ClearBgpExternalGraceful
// Clear all external peers.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpExternalGraceful struct {
    parent types.Entity
    YFilter yfilter.YFilter
}

func (clearBgpExternalGraceful *ClearBgpExternalGraceful) GetFilter() yfilter.YFilter { return clearBgpExternalGraceful.YFilter }

func (clearBgpExternalGraceful *ClearBgpExternalGraceful) SetFilter(yf yfilter.YFilter) { clearBgpExternalGraceful.YFilter = yf }

func (clearBgpExternalGraceful *ClearBgpExternalGraceful) GetGoName(yname string) string {
    return ""
}

func (clearBgpExternalGraceful *ClearBgpExternalGraceful) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-external-graceful"
}

func (clearBgpExternalGraceful *ClearBgpExternalGraceful) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clearBgpExternalGraceful *ClearBgpExternalGraceful) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clearBgpExternalGraceful *ClearBgpExternalGraceful) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpExternalGraceful *ClearBgpExternalGraceful) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpExternalGraceful *ClearBgpExternalGraceful) GetYangName() string { return "clear-bgp-external-graceful" }

func (clearBgpExternalGraceful *ClearBgpExternalGraceful) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpExternalGraceful *ClearBgpExternalGraceful) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpExternalGraceful *ClearBgpExternalGraceful) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpExternalGraceful *ClearBgpExternalGraceful) SetParent(parent types.Entity) { clearBgpExternalGraceful.parent = parent }

func (clearBgpExternalGraceful *ClearBgpExternalGraceful) GetParent() types.Entity { return clearBgpExternalGraceful.parent }

func (clearBgpExternalGraceful *ClearBgpExternalGraceful) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpExternal
// Clear all external peers.
// 
type ClearBgpExternal struct {
    parent types.Entity
    YFilter yfilter.YFilter
}

func (clearBgpExternal *ClearBgpExternal) GetFilter() yfilter.YFilter { return clearBgpExternal.YFilter }

func (clearBgpExternal *ClearBgpExternal) SetFilter(yf yfilter.YFilter) { clearBgpExternal.YFilter = yf }

func (clearBgpExternal *ClearBgpExternal) GetGoName(yname string) string {
    return ""
}

func (clearBgpExternal *ClearBgpExternal) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-external"
}

func (clearBgpExternal *ClearBgpExternal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clearBgpExternal *ClearBgpExternal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clearBgpExternal *ClearBgpExternal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpExternal *ClearBgpExternal) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpExternal *ClearBgpExternal) GetYangName() string { return "clear-bgp-external" }

func (clearBgpExternal *ClearBgpExternal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpExternal *ClearBgpExternal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpExternal *ClearBgpExternal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpExternal *ClearBgpExternal) SetParent(parent types.Entity) { clearBgpExternal.parent = parent }

func (clearBgpExternal *ClearBgpExternal) GetParent() types.Entity { return clearBgpExternal.parent }

func (clearBgpExternal *ClearBgpExternal) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAllGraceful
// Choose a particular BGP instance.
// Clear all peers and all routes from the BGP table.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpInstanceAllGraceful struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAllGraceful_Input
}

func (clearBgpInstanceAllGraceful *ClearBgpInstanceAllGraceful) GetFilter() yfilter.YFilter { return clearBgpInstanceAllGraceful.YFilter }

func (clearBgpInstanceAllGraceful *ClearBgpInstanceAllGraceful) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAllGraceful.YFilter = yf }

func (clearBgpInstanceAllGraceful *ClearBgpInstanceAllGraceful) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAllGraceful *ClearBgpInstanceAllGraceful) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all-graceful"
}

func (clearBgpInstanceAllGraceful *ClearBgpInstanceAllGraceful) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAllGraceful.Input
    }
    return nil
}

func (clearBgpInstanceAllGraceful *ClearBgpInstanceAllGraceful) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAllGraceful.Input
    return children
}

func (clearBgpInstanceAllGraceful *ClearBgpInstanceAllGraceful) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAllGraceful *ClearBgpInstanceAllGraceful) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAllGraceful *ClearBgpInstanceAllGraceful) GetYangName() string { return "clear-bgp-instance-all-graceful" }

func (clearBgpInstanceAllGraceful *ClearBgpInstanceAllGraceful) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAllGraceful *ClearBgpInstanceAllGraceful) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAllGraceful *ClearBgpInstanceAllGraceful) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAllGraceful *ClearBgpInstanceAllGraceful) SetParent(parent types.Entity) { clearBgpInstanceAllGraceful.parent = parent }

func (clearBgpInstanceAllGraceful *ClearBgpInstanceAllGraceful) GetParent() types.Entity { return clearBgpInstanceAllGraceful.parent }

func (clearBgpInstanceAllGraceful *ClearBgpInstanceAllGraceful) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAllGraceful_Input
type ClearBgpInstanceAllGraceful_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceAllGraceful_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAllGraceful_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAllGraceful_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (input *ClearBgpInstanceAllGraceful_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAllGraceful_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAllGraceful_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAllGraceful_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    return leafs
}

func (input *ClearBgpInstanceAllGraceful_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAllGraceful_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAllGraceful_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAllGraceful_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAllGraceful_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAllGraceful_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAllGraceful_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAllGraceful_Input) GetParentYangName() string { return "clear-bgp-instance-all-graceful" }

// ClearBgpInstanceAll
// Choose a particular BGP instance.
// Clear all peers and all routes from the BGP table.
// 
type ClearBgpInstanceAll struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAll_Input
}

func (clearBgpInstanceAll *ClearBgpInstanceAll) GetFilter() yfilter.YFilter { return clearBgpInstanceAll.YFilter }

func (clearBgpInstanceAll *ClearBgpInstanceAll) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAll.YFilter = yf }

func (clearBgpInstanceAll *ClearBgpInstanceAll) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAll *ClearBgpInstanceAll) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-all"
}

func (clearBgpInstanceAll *ClearBgpInstanceAll) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAll.Input
    }
    return nil
}

func (clearBgpInstanceAll *ClearBgpInstanceAll) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAll.Input
    return children
}

func (clearBgpInstanceAll *ClearBgpInstanceAll) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAll *ClearBgpInstanceAll) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAll *ClearBgpInstanceAll) GetYangName() string { return "clear-bgp-instance-all" }

func (clearBgpInstanceAll *ClearBgpInstanceAll) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAll *ClearBgpInstanceAll) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAll *ClearBgpInstanceAll) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAll *ClearBgpInstanceAll) SetParent(parent types.Entity) { clearBgpInstanceAll.parent = parent }

func (clearBgpInstanceAll *ClearBgpInstanceAll) GetParent() types.Entity { return clearBgpInstanceAll.parent }

func (clearBgpInstanceAll *ClearBgpInstanceAll) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAll_Input
type ClearBgpInstanceAll_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceAll_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAll_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAll_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (input *ClearBgpInstanceAll_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAll_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAll_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAll_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    return leafs
}

func (input *ClearBgpInstanceAll_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAll_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAll_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAll_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAll_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAll_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAll_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAll_Input) GetParentYangName() string { return "clear-bgp-instance-all" }

// ClearBgpInstanceIpAddrGraceful
// Choose a particular BGP instance.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpInstanceIpAddrGraceful struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceIpAddrGraceful_Input
}

func (clearBgpInstanceIpAddrGraceful *ClearBgpInstanceIpAddrGraceful) GetFilter() yfilter.YFilter { return clearBgpInstanceIpAddrGraceful.YFilter }

func (clearBgpInstanceIpAddrGraceful *ClearBgpInstanceIpAddrGraceful) SetFilter(yf yfilter.YFilter) { clearBgpInstanceIpAddrGraceful.YFilter = yf }

func (clearBgpInstanceIpAddrGraceful *ClearBgpInstanceIpAddrGraceful) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceIpAddrGraceful *ClearBgpInstanceIpAddrGraceful) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-graceful"
}

func (clearBgpInstanceIpAddrGraceful *ClearBgpInstanceIpAddrGraceful) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceIpAddrGraceful.Input
    }
    return nil
}

func (clearBgpInstanceIpAddrGraceful *ClearBgpInstanceIpAddrGraceful) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceIpAddrGraceful.Input
    return children
}

func (clearBgpInstanceIpAddrGraceful *ClearBgpInstanceIpAddrGraceful) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceIpAddrGraceful *ClearBgpInstanceIpAddrGraceful) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceIpAddrGraceful *ClearBgpInstanceIpAddrGraceful) GetYangName() string { return "clear-bgp-instance-ip-addr-graceful" }

func (clearBgpInstanceIpAddrGraceful *ClearBgpInstanceIpAddrGraceful) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceIpAddrGraceful *ClearBgpInstanceIpAddrGraceful) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceIpAddrGraceful *ClearBgpInstanceIpAddrGraceful) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceIpAddrGraceful *ClearBgpInstanceIpAddrGraceful) SetParent(parent types.Entity) { clearBgpInstanceIpAddrGraceful.parent = parent }

func (clearBgpInstanceIpAddrGraceful *ClearBgpInstanceIpAddrGraceful) GetParent() types.Entity { return clearBgpInstanceIpAddrGraceful.parent }

func (clearBgpInstanceIpAddrGraceful *ClearBgpInstanceIpAddrGraceful) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceIpAddrGraceful_Input
type ClearBgpInstanceIpAddrGraceful_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceIpAddrGraceful_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceIpAddrGraceful_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceIpAddrGraceful_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceIpAddrGraceful_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceIpAddrGraceful_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceIpAddrGraceful_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceIpAddrGraceful_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceIpAddrGraceful_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceIpAddrGraceful_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceIpAddrGraceful_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceIpAddrGraceful_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceIpAddrGraceful_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceIpAddrGraceful_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceIpAddrGraceful_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceIpAddrGraceful_Input) GetParentYangName() string { return "clear-bgp-instance-ip-addr-graceful" }

// ClearBgpInstanceIpAddrLongLivedStale
// Choose a particular BGP instance.
// Clear long-lived-stale routes.
// 
type ClearBgpInstanceIpAddrLongLivedStale struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceIpAddrLongLivedStale_Input
}

func (clearBgpInstanceIpAddrLongLivedStale *ClearBgpInstanceIpAddrLongLivedStale) GetFilter() yfilter.YFilter { return clearBgpInstanceIpAddrLongLivedStale.YFilter }

func (clearBgpInstanceIpAddrLongLivedStale *ClearBgpInstanceIpAddrLongLivedStale) SetFilter(yf yfilter.YFilter) { clearBgpInstanceIpAddrLongLivedStale.YFilter = yf }

func (clearBgpInstanceIpAddrLongLivedStale *ClearBgpInstanceIpAddrLongLivedStale) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceIpAddrLongLivedStale *ClearBgpInstanceIpAddrLongLivedStale) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr-long-lived-stale"
}

func (clearBgpInstanceIpAddrLongLivedStale *ClearBgpInstanceIpAddrLongLivedStale) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceIpAddrLongLivedStale.Input
    }
    return nil
}

func (clearBgpInstanceIpAddrLongLivedStale *ClearBgpInstanceIpAddrLongLivedStale) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceIpAddrLongLivedStale.Input
    return children
}

func (clearBgpInstanceIpAddrLongLivedStale *ClearBgpInstanceIpAddrLongLivedStale) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceIpAddrLongLivedStale *ClearBgpInstanceIpAddrLongLivedStale) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceIpAddrLongLivedStale *ClearBgpInstanceIpAddrLongLivedStale) GetYangName() string { return "clear-bgp-instance-ip-addr-long-lived-stale" }

func (clearBgpInstanceIpAddrLongLivedStale *ClearBgpInstanceIpAddrLongLivedStale) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceIpAddrLongLivedStale *ClearBgpInstanceIpAddrLongLivedStale) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceIpAddrLongLivedStale *ClearBgpInstanceIpAddrLongLivedStale) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceIpAddrLongLivedStale *ClearBgpInstanceIpAddrLongLivedStale) SetParent(parent types.Entity) { clearBgpInstanceIpAddrLongLivedStale.parent = parent }

func (clearBgpInstanceIpAddrLongLivedStale *ClearBgpInstanceIpAddrLongLivedStale) GetParent() types.Entity { return clearBgpInstanceIpAddrLongLivedStale.parent }

func (clearBgpInstanceIpAddrLongLivedStale *ClearBgpInstanceIpAddrLongLivedStale) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceIpAddrLongLivedStale_Input
type ClearBgpInstanceIpAddrLongLivedStale_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceIpAddrLongLivedStale_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceIpAddrLongLivedStale_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceIpAddrLongLivedStale_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceIpAddrLongLivedStale_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceIpAddrLongLivedStale_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceIpAddrLongLivedStale_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceIpAddrLongLivedStale_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceIpAddrLongLivedStale_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceIpAddrLongLivedStale_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceIpAddrLongLivedStale_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceIpAddrLongLivedStale_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceIpAddrLongLivedStale_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceIpAddrLongLivedStale_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceIpAddrLongLivedStale_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceIpAddrLongLivedStale_Input) GetParentYangName() string { return "clear-bgp-instance-ip-addr-long-lived-stale" }

// ClearBgpInstanceIpAddr
// Choose a particular BGP instance.
// 
type ClearBgpInstanceIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceIpAddr_Input
}

func (clearBgpInstanceIpAddr *ClearBgpInstanceIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceIpAddr.YFilter }

func (clearBgpInstanceIpAddr *ClearBgpInstanceIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceIpAddr.YFilter = yf }

func (clearBgpInstanceIpAddr *ClearBgpInstanceIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceIpAddr *ClearBgpInstanceIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-ip-addr"
}

func (clearBgpInstanceIpAddr *ClearBgpInstanceIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceIpAddr *ClearBgpInstanceIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceIpAddr.Input
    return children
}

func (clearBgpInstanceIpAddr *ClearBgpInstanceIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceIpAddr *ClearBgpInstanceIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceIpAddr *ClearBgpInstanceIpAddr) GetYangName() string { return "clear-bgp-instance-ip-addr" }

func (clearBgpInstanceIpAddr *ClearBgpInstanceIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceIpAddr *ClearBgpInstanceIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceIpAddr *ClearBgpInstanceIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceIpAddr *ClearBgpInstanceIpAddr) SetParent(parent types.Entity) { clearBgpInstanceIpAddr.parent = parent }

func (clearBgpInstanceIpAddr *ClearBgpInstanceIpAddr) GetParent() types.Entity { return clearBgpInstanceIpAddr.parent }

func (clearBgpInstanceIpAddr *ClearBgpInstanceIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceIpAddr_Input
type ClearBgpInstanceIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-ip-addr" }

// ClearBgpInstanceAfiSafiAllSoftInPrefixFilter
// Choose a particular BGP instance.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpInstanceAfiSafiAllSoftInPrefixFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input
}

func (clearBgpInstanceAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiAllSoftInPrefixFilter.YFilter }

func (clearBgpInstanceAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiAllSoftInPrefixFilter.YFilter = yf }

func (clearBgpInstanceAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in-prefix-filter"
}

func (clearBgpInstanceAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiAllSoftInPrefixFilter.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiAllSoftInPrefixFilter.Input
    return children
}

func (clearBgpInstanceAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter) GetYangName() string { return "clear-bgp-instance-afi-safi-all-soft-in-prefix-filter" }

func (clearBgpInstanceAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiAllSoftInPrefixFilter.parent = parent }

func (clearBgpInstanceAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter) GetParent() types.Entity { return clearBgpInstanceAfiSafiAllSoftInPrefixFilter.parent }

func (clearBgpInstanceAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input
type ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiAllSoftInPrefixFilter_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-all-soft-in-prefix-filter" }

// ClearBgpInstanceAfiSafiAllSoftIn
// Choose a particular BGP instance.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpInstanceAfiSafiAllSoftIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiAllSoftIn_Input
}

func (clearBgpInstanceAfiSafiAllSoftIn *ClearBgpInstanceAfiSafiAllSoftIn) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiAllSoftIn.YFilter }

func (clearBgpInstanceAfiSafiAllSoftIn *ClearBgpInstanceAfiSafiAllSoftIn) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiAllSoftIn.YFilter = yf }

func (clearBgpInstanceAfiSafiAllSoftIn *ClearBgpInstanceAfiSafiAllSoftIn) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiAllSoftIn *ClearBgpInstanceAfiSafiAllSoftIn) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-in"
}

func (clearBgpInstanceAfiSafiAllSoftIn *ClearBgpInstanceAfiSafiAllSoftIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiAllSoftIn.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiAllSoftIn *ClearBgpInstanceAfiSafiAllSoftIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiAllSoftIn.Input
    return children
}

func (clearBgpInstanceAfiSafiAllSoftIn *ClearBgpInstanceAfiSafiAllSoftIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiAllSoftIn *ClearBgpInstanceAfiSafiAllSoftIn) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiAllSoftIn *ClearBgpInstanceAfiSafiAllSoftIn) GetYangName() string { return "clear-bgp-instance-afi-safi-all-soft-in" }

func (clearBgpInstanceAfiSafiAllSoftIn *ClearBgpInstanceAfiSafiAllSoftIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiAllSoftIn *ClearBgpInstanceAfiSafiAllSoftIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiAllSoftIn *ClearBgpInstanceAfiSafiAllSoftIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiAllSoftIn *ClearBgpInstanceAfiSafiAllSoftIn) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiAllSoftIn.parent = parent }

func (clearBgpInstanceAfiSafiAllSoftIn *ClearBgpInstanceAfiSafiAllSoftIn) GetParent() types.Entity { return clearBgpInstanceAfiSafiAllSoftIn.parent }

func (clearBgpInstanceAfiSafiAllSoftIn *ClearBgpInstanceAfiSafiAllSoftIn) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiAllSoftIn_Input
type ClearBgpInstanceAfiSafiAllSoftIn_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiAllSoftIn_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiAllSoftIn_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiAllSoftIn_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiAllSoftIn_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiAllSoftIn_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiAllSoftIn_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiAllSoftIn_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceAfiSafiAllSoftIn_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiAllSoftIn_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiAllSoftIn_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiAllSoftIn_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiAllSoftIn_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiAllSoftIn_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiAllSoftIn_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiAllSoftIn_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-all-soft-in" }

// ClearBgpInstanceAfiSafiAllSoftOut
// Choose a particular BGP instance.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpInstanceAfiSafiAllSoftOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiAllSoftOut_Input
}

func (clearBgpInstanceAfiSafiAllSoftOut *ClearBgpInstanceAfiSafiAllSoftOut) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiAllSoftOut.YFilter }

func (clearBgpInstanceAfiSafiAllSoftOut *ClearBgpInstanceAfiSafiAllSoftOut) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiAllSoftOut.YFilter = yf }

func (clearBgpInstanceAfiSafiAllSoftOut *ClearBgpInstanceAfiSafiAllSoftOut) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiAllSoftOut *ClearBgpInstanceAfiSafiAllSoftOut) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft-out"
}

func (clearBgpInstanceAfiSafiAllSoftOut *ClearBgpInstanceAfiSafiAllSoftOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiAllSoftOut.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiAllSoftOut *ClearBgpInstanceAfiSafiAllSoftOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiAllSoftOut.Input
    return children
}

func (clearBgpInstanceAfiSafiAllSoftOut *ClearBgpInstanceAfiSafiAllSoftOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiAllSoftOut *ClearBgpInstanceAfiSafiAllSoftOut) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiAllSoftOut *ClearBgpInstanceAfiSafiAllSoftOut) GetYangName() string { return "clear-bgp-instance-afi-safi-all-soft-out" }

func (clearBgpInstanceAfiSafiAllSoftOut *ClearBgpInstanceAfiSafiAllSoftOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiAllSoftOut *ClearBgpInstanceAfiSafiAllSoftOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiAllSoftOut *ClearBgpInstanceAfiSafiAllSoftOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiAllSoftOut *ClearBgpInstanceAfiSafiAllSoftOut) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiAllSoftOut.parent = parent }

func (clearBgpInstanceAfiSafiAllSoftOut *ClearBgpInstanceAfiSafiAllSoftOut) GetParent() types.Entity { return clearBgpInstanceAfiSafiAllSoftOut.parent }

func (clearBgpInstanceAfiSafiAllSoftOut *ClearBgpInstanceAfiSafiAllSoftOut) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiAllSoftOut_Input
type ClearBgpInstanceAfiSafiAllSoftOut_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiAllSoftOut_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiAllSoftOut_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiAllSoftOut_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiAllSoftOut_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiAllSoftOut_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiAllSoftOut_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiAllSoftOut_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceAfiSafiAllSoftOut_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiAllSoftOut_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiAllSoftOut_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiAllSoftOut_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiAllSoftOut_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiAllSoftOut_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiAllSoftOut_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiAllSoftOut_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-all-soft-out" }

// ClearBgpInstanceAfiSafiAllSoft
// Choose a particular BGP instance.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// 
type ClearBgpInstanceAfiSafiAllSoft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiAllSoft_Input
}

func (clearBgpInstanceAfiSafiAllSoft *ClearBgpInstanceAfiSafiAllSoft) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiAllSoft.YFilter }

func (clearBgpInstanceAfiSafiAllSoft *ClearBgpInstanceAfiSafiAllSoft) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiAllSoft.YFilter = yf }

func (clearBgpInstanceAfiSafiAllSoft *ClearBgpInstanceAfiSafiAllSoft) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiAllSoft *ClearBgpInstanceAfiSafiAllSoft) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-all-soft"
}

func (clearBgpInstanceAfiSafiAllSoft *ClearBgpInstanceAfiSafiAllSoft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiAllSoft.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiAllSoft *ClearBgpInstanceAfiSafiAllSoft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiAllSoft.Input
    return children
}

func (clearBgpInstanceAfiSafiAllSoft *ClearBgpInstanceAfiSafiAllSoft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiAllSoft *ClearBgpInstanceAfiSafiAllSoft) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiAllSoft *ClearBgpInstanceAfiSafiAllSoft) GetYangName() string { return "clear-bgp-instance-afi-safi-all-soft" }

func (clearBgpInstanceAfiSafiAllSoft *ClearBgpInstanceAfiSafiAllSoft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiAllSoft *ClearBgpInstanceAfiSafiAllSoft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiAllSoft *ClearBgpInstanceAfiSafiAllSoft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiAllSoft *ClearBgpInstanceAfiSafiAllSoft) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiAllSoft.parent = parent }

func (clearBgpInstanceAfiSafiAllSoft *ClearBgpInstanceAfiSafiAllSoft) GetParent() types.Entity { return clearBgpInstanceAfiSafiAllSoft.parent }

func (clearBgpInstanceAfiSafiAllSoft *ClearBgpInstanceAfiSafiAllSoft) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiAllSoft_Input
type ClearBgpInstanceAfiSafiAllSoft_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiAllSoft_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiAllSoft_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiAllSoft_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiAllSoft_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiAllSoft_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiAllSoft_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiAllSoft_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceAfiSafiAllSoft_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiAllSoft_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiAllSoft_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiAllSoft_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiAllSoft_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiAllSoft_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiAllSoft_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiAllSoft_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-all-soft" }

// ClearBgpInstanceAfiSafiIpAddrLongLivedStale
// Choose a particular BGP instance.
// Clear long-lived-stale routes.
// 
type ClearBgpInstanceAfiSafiIpAddrLongLivedStale struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input
}

func (clearBgpInstanceAfiSafiIpAddrLongLivedStale *ClearBgpInstanceAfiSafiIpAddrLongLivedStale) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiIpAddrLongLivedStale.YFilter }

func (clearBgpInstanceAfiSafiIpAddrLongLivedStale *ClearBgpInstanceAfiSafiIpAddrLongLivedStale) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiIpAddrLongLivedStale.YFilter = yf }

func (clearBgpInstanceAfiSafiIpAddrLongLivedStale *ClearBgpInstanceAfiSafiIpAddrLongLivedStale) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiIpAddrLongLivedStale *ClearBgpInstanceAfiSafiIpAddrLongLivedStale) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-long-lived-stale"
}

func (clearBgpInstanceAfiSafiIpAddrLongLivedStale *ClearBgpInstanceAfiSafiIpAddrLongLivedStale) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiIpAddrLongLivedStale.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiIpAddrLongLivedStale *ClearBgpInstanceAfiSafiIpAddrLongLivedStale) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiIpAddrLongLivedStale.Input
    return children
}

func (clearBgpInstanceAfiSafiIpAddrLongLivedStale *ClearBgpInstanceAfiSafiIpAddrLongLivedStale) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiIpAddrLongLivedStale *ClearBgpInstanceAfiSafiIpAddrLongLivedStale) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiIpAddrLongLivedStale *ClearBgpInstanceAfiSafiIpAddrLongLivedStale) GetYangName() string { return "clear-bgp-instance-afi-safi-ip-addr-long-lived-stale" }

func (clearBgpInstanceAfiSafiIpAddrLongLivedStale *ClearBgpInstanceAfiSafiIpAddrLongLivedStale) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiIpAddrLongLivedStale *ClearBgpInstanceAfiSafiIpAddrLongLivedStale) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiIpAddrLongLivedStale *ClearBgpInstanceAfiSafiIpAddrLongLivedStale) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiIpAddrLongLivedStale *ClearBgpInstanceAfiSafiIpAddrLongLivedStale) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiIpAddrLongLivedStale.parent = parent }

func (clearBgpInstanceAfiSafiIpAddrLongLivedStale *ClearBgpInstanceAfiSafiIpAddrLongLivedStale) GetParent() types.Entity { return clearBgpInstanceAfiSafiIpAddrLongLivedStale.parent }

func (clearBgpInstanceAfiSafiIpAddrLongLivedStale *ClearBgpInstanceAfiSafiIpAddrLongLivedStale) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input
type ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiIpAddrLongLivedStale_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-ip-addr-long-lived-stale" }

// ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter
// Choose a particular BGP instance.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input
}

func (clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.YFilter }

func (clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.YFilter = yf }

func (clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter"
}

func (clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.Input
    return children
}

func (clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter) GetYangName() string { return "clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter" }

func (clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.parent = parent }

func (clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter) GetParent() types.Entity { return clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter.parent }

func (clearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input
type ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftInPrefixFilter_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-ip-addr-soft-in-prefix-filter" }

// ClearBgpInstanceAfiSafiIpAddrSoftIn
// Choose a particular BGP instance.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpInstanceAfiSafiIpAddrSoftIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiIpAddrSoftIn_Input
}

func (clearBgpInstanceAfiSafiIpAddrSoftIn *ClearBgpInstanceAfiSafiIpAddrSoftIn) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiIpAddrSoftIn.YFilter }

func (clearBgpInstanceAfiSafiIpAddrSoftIn *ClearBgpInstanceAfiSafiIpAddrSoftIn) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiIpAddrSoftIn.YFilter = yf }

func (clearBgpInstanceAfiSafiIpAddrSoftIn *ClearBgpInstanceAfiSafiIpAddrSoftIn) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiIpAddrSoftIn *ClearBgpInstanceAfiSafiIpAddrSoftIn) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-in"
}

func (clearBgpInstanceAfiSafiIpAddrSoftIn *ClearBgpInstanceAfiSafiIpAddrSoftIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiIpAddrSoftIn.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiIpAddrSoftIn *ClearBgpInstanceAfiSafiIpAddrSoftIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiIpAddrSoftIn.Input
    return children
}

func (clearBgpInstanceAfiSafiIpAddrSoftIn *ClearBgpInstanceAfiSafiIpAddrSoftIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiIpAddrSoftIn *ClearBgpInstanceAfiSafiIpAddrSoftIn) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiIpAddrSoftIn *ClearBgpInstanceAfiSafiIpAddrSoftIn) GetYangName() string { return "clear-bgp-instance-afi-safi-ip-addr-soft-in" }

func (clearBgpInstanceAfiSafiIpAddrSoftIn *ClearBgpInstanceAfiSafiIpAddrSoftIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiIpAddrSoftIn *ClearBgpInstanceAfiSafiIpAddrSoftIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiIpAddrSoftIn *ClearBgpInstanceAfiSafiIpAddrSoftIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiIpAddrSoftIn *ClearBgpInstanceAfiSafiIpAddrSoftIn) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiIpAddrSoftIn.parent = parent }

func (clearBgpInstanceAfiSafiIpAddrSoftIn *ClearBgpInstanceAfiSafiIpAddrSoftIn) GetParent() types.Entity { return clearBgpInstanceAfiSafiIpAddrSoftIn.parent }

func (clearBgpInstanceAfiSafiIpAddrSoftIn *ClearBgpInstanceAfiSafiIpAddrSoftIn) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiIpAddrSoftIn_Input
type ClearBgpInstanceAfiSafiIpAddrSoftIn_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftIn_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftIn_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftIn_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftIn_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftIn_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftIn_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftIn_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftIn_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftIn_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftIn_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftIn_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftIn_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftIn_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftIn_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftIn_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-ip-addr-soft-in" }

// ClearBgpInstanceAfiSafiIpAddrSoftOut
// Choose a particular BGP instance.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpInstanceAfiSafiIpAddrSoftOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiIpAddrSoftOut_Input
}

func (clearBgpInstanceAfiSafiIpAddrSoftOut *ClearBgpInstanceAfiSafiIpAddrSoftOut) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiIpAddrSoftOut.YFilter }

func (clearBgpInstanceAfiSafiIpAddrSoftOut *ClearBgpInstanceAfiSafiIpAddrSoftOut) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiIpAddrSoftOut.YFilter = yf }

func (clearBgpInstanceAfiSafiIpAddrSoftOut *ClearBgpInstanceAfiSafiIpAddrSoftOut) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiIpAddrSoftOut *ClearBgpInstanceAfiSafiIpAddrSoftOut) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft-out"
}

func (clearBgpInstanceAfiSafiIpAddrSoftOut *ClearBgpInstanceAfiSafiIpAddrSoftOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiIpAddrSoftOut.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiIpAddrSoftOut *ClearBgpInstanceAfiSafiIpAddrSoftOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiIpAddrSoftOut.Input
    return children
}

func (clearBgpInstanceAfiSafiIpAddrSoftOut *ClearBgpInstanceAfiSafiIpAddrSoftOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiIpAddrSoftOut *ClearBgpInstanceAfiSafiIpAddrSoftOut) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiIpAddrSoftOut *ClearBgpInstanceAfiSafiIpAddrSoftOut) GetYangName() string { return "clear-bgp-instance-afi-safi-ip-addr-soft-out" }

func (clearBgpInstanceAfiSafiIpAddrSoftOut *ClearBgpInstanceAfiSafiIpAddrSoftOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiIpAddrSoftOut *ClearBgpInstanceAfiSafiIpAddrSoftOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiIpAddrSoftOut *ClearBgpInstanceAfiSafiIpAddrSoftOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiIpAddrSoftOut *ClearBgpInstanceAfiSafiIpAddrSoftOut) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiIpAddrSoftOut.parent = parent }

func (clearBgpInstanceAfiSafiIpAddrSoftOut *ClearBgpInstanceAfiSafiIpAddrSoftOut) GetParent() types.Entity { return clearBgpInstanceAfiSafiIpAddrSoftOut.parent }

func (clearBgpInstanceAfiSafiIpAddrSoftOut *ClearBgpInstanceAfiSafiIpAddrSoftOut) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiIpAddrSoftOut_Input
type ClearBgpInstanceAfiSafiIpAddrSoftOut_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftOut_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftOut_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftOut_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftOut_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftOut_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftOut_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftOut_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoftOut_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftOut_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftOut_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftOut_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftOut_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftOut_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftOut_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiIpAddrSoftOut_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-ip-addr-soft-out" }

// ClearBgpInstanceAfiSafiIpAddrSoft
// Choose a particular BGP instance.
// Soft reconfig.
// 
type ClearBgpInstanceAfiSafiIpAddrSoft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiIpAddrSoft_Input
}

func (clearBgpInstanceAfiSafiIpAddrSoft *ClearBgpInstanceAfiSafiIpAddrSoft) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiIpAddrSoft.YFilter }

func (clearBgpInstanceAfiSafiIpAddrSoft *ClearBgpInstanceAfiSafiIpAddrSoft) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiIpAddrSoft.YFilter = yf }

func (clearBgpInstanceAfiSafiIpAddrSoft *ClearBgpInstanceAfiSafiIpAddrSoft) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiIpAddrSoft *ClearBgpInstanceAfiSafiIpAddrSoft) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-ip-addr-soft"
}

func (clearBgpInstanceAfiSafiIpAddrSoft *ClearBgpInstanceAfiSafiIpAddrSoft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiIpAddrSoft.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiIpAddrSoft *ClearBgpInstanceAfiSafiIpAddrSoft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiIpAddrSoft.Input
    return children
}

func (clearBgpInstanceAfiSafiIpAddrSoft *ClearBgpInstanceAfiSafiIpAddrSoft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiIpAddrSoft *ClearBgpInstanceAfiSafiIpAddrSoft) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiIpAddrSoft *ClearBgpInstanceAfiSafiIpAddrSoft) GetYangName() string { return "clear-bgp-instance-afi-safi-ip-addr-soft" }

func (clearBgpInstanceAfiSafiIpAddrSoft *ClearBgpInstanceAfiSafiIpAddrSoft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiIpAddrSoft *ClearBgpInstanceAfiSafiIpAddrSoft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiIpAddrSoft *ClearBgpInstanceAfiSafiIpAddrSoft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiIpAddrSoft *ClearBgpInstanceAfiSafiIpAddrSoft) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiIpAddrSoft.parent = parent }

func (clearBgpInstanceAfiSafiIpAddrSoft *ClearBgpInstanceAfiSafiIpAddrSoft) GetParent() types.Entity { return clearBgpInstanceAfiSafiIpAddrSoft.parent }

func (clearBgpInstanceAfiSafiIpAddrSoft *ClearBgpInstanceAfiSafiIpAddrSoft) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiIpAddrSoft_Input
type ClearBgpInstanceAfiSafiIpAddrSoft_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoft_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiIpAddrSoft_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiIpAddrSoft_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoft_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoft_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoft_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoft_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceAfiSafiIpAddrSoft_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiIpAddrSoft_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiIpAddrSoft_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiIpAddrSoft_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiIpAddrSoft_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiIpAddrSoft_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiIpAddrSoft_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiIpAddrSoft_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-ip-addr-soft" }

// ClearBgpInstanceAfiSafiAsSoftInPrefixFilter
// Choose a particular BGP instance.
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpInstanceAfiSafiAsSoftInPrefixFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input
}

func (clearBgpInstanceAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiAsSoftInPrefixFilter.YFilter }

func (clearBgpInstanceAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiAsSoftInPrefixFilter.YFilter = yf }

func (clearBgpInstanceAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in-prefix-filter"
}

func (clearBgpInstanceAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiAsSoftInPrefixFilter.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiAsSoftInPrefixFilter.Input
    return children
}

func (clearBgpInstanceAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter) GetYangName() string { return "clear-bgp-instance-afi-safi-as-soft-in-prefix-filter" }

func (clearBgpInstanceAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiAsSoftInPrefixFilter.parent = parent }

func (clearBgpInstanceAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter) GetParent() types.Entity { return clearBgpInstanceAfiSafiAsSoftInPrefixFilter.parent }

func (clearBgpInstanceAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input
type ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiAsSoftInPrefixFilter_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-as-soft-in-prefix-filter" }

// ClearBgpInstanceAfiSafiAsSoftIn
// Choose a particular BGP instance.
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpInstanceAfiSafiAsSoftIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiAsSoftIn_Input
}

func (clearBgpInstanceAfiSafiAsSoftIn *ClearBgpInstanceAfiSafiAsSoftIn) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiAsSoftIn.YFilter }

func (clearBgpInstanceAfiSafiAsSoftIn *ClearBgpInstanceAfiSafiAsSoftIn) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiAsSoftIn.YFilter = yf }

func (clearBgpInstanceAfiSafiAsSoftIn *ClearBgpInstanceAfiSafiAsSoftIn) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiAsSoftIn *ClearBgpInstanceAfiSafiAsSoftIn) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-in"
}

func (clearBgpInstanceAfiSafiAsSoftIn *ClearBgpInstanceAfiSafiAsSoftIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiAsSoftIn.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiAsSoftIn *ClearBgpInstanceAfiSafiAsSoftIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiAsSoftIn.Input
    return children
}

func (clearBgpInstanceAfiSafiAsSoftIn *ClearBgpInstanceAfiSafiAsSoftIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiAsSoftIn *ClearBgpInstanceAfiSafiAsSoftIn) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiAsSoftIn *ClearBgpInstanceAfiSafiAsSoftIn) GetYangName() string { return "clear-bgp-instance-afi-safi-as-soft-in" }

func (clearBgpInstanceAfiSafiAsSoftIn *ClearBgpInstanceAfiSafiAsSoftIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiAsSoftIn *ClearBgpInstanceAfiSafiAsSoftIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiAsSoftIn *ClearBgpInstanceAfiSafiAsSoftIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiAsSoftIn *ClearBgpInstanceAfiSafiAsSoftIn) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiAsSoftIn.parent = parent }

func (clearBgpInstanceAfiSafiAsSoftIn *ClearBgpInstanceAfiSafiAsSoftIn) GetParent() types.Entity { return clearBgpInstanceAfiSafiAsSoftIn.parent }

func (clearBgpInstanceAfiSafiAsSoftIn *ClearBgpInstanceAfiSafiAsSoftIn) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiAsSoftIn_Input
type ClearBgpInstanceAfiSafiAsSoftIn_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceAfiSafiAsSoftIn_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiAsSoftIn_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiAsSoftIn_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiAsSoftIn_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiAsSoftIn_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiAsSoftIn_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiAsSoftIn_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpInstanceAfiSafiAsSoftIn_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiAsSoftIn_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiAsSoftIn_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiAsSoftIn_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiAsSoftIn_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiAsSoftIn_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiAsSoftIn_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiAsSoftIn_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-as-soft-in" }

// ClearBgpInstanceAfiSafiAsSoftOut
// Choose a particular BGP instance.
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpInstanceAfiSafiAsSoftOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiAsSoftOut_Input
}

func (clearBgpInstanceAfiSafiAsSoftOut *ClearBgpInstanceAfiSafiAsSoftOut) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiAsSoftOut.YFilter }

func (clearBgpInstanceAfiSafiAsSoftOut *ClearBgpInstanceAfiSafiAsSoftOut) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiAsSoftOut.YFilter = yf }

func (clearBgpInstanceAfiSafiAsSoftOut *ClearBgpInstanceAfiSafiAsSoftOut) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiAsSoftOut *ClearBgpInstanceAfiSafiAsSoftOut) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft-out"
}

func (clearBgpInstanceAfiSafiAsSoftOut *ClearBgpInstanceAfiSafiAsSoftOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiAsSoftOut.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiAsSoftOut *ClearBgpInstanceAfiSafiAsSoftOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiAsSoftOut.Input
    return children
}

func (clearBgpInstanceAfiSafiAsSoftOut *ClearBgpInstanceAfiSafiAsSoftOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiAsSoftOut *ClearBgpInstanceAfiSafiAsSoftOut) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiAsSoftOut *ClearBgpInstanceAfiSafiAsSoftOut) GetYangName() string { return "clear-bgp-instance-afi-safi-as-soft-out" }

func (clearBgpInstanceAfiSafiAsSoftOut *ClearBgpInstanceAfiSafiAsSoftOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiAsSoftOut *ClearBgpInstanceAfiSafiAsSoftOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiAsSoftOut *ClearBgpInstanceAfiSafiAsSoftOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiAsSoftOut *ClearBgpInstanceAfiSafiAsSoftOut) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiAsSoftOut.parent = parent }

func (clearBgpInstanceAfiSafiAsSoftOut *ClearBgpInstanceAfiSafiAsSoftOut) GetParent() types.Entity { return clearBgpInstanceAfiSafiAsSoftOut.parent }

func (clearBgpInstanceAfiSafiAsSoftOut *ClearBgpInstanceAfiSafiAsSoftOut) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiAsSoftOut_Input
type ClearBgpInstanceAfiSafiAsSoftOut_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceAfiSafiAsSoftOut_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiAsSoftOut_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiAsSoftOut_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiAsSoftOut_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiAsSoftOut_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiAsSoftOut_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiAsSoftOut_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpInstanceAfiSafiAsSoftOut_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiAsSoftOut_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiAsSoftOut_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiAsSoftOut_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiAsSoftOut_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiAsSoftOut_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiAsSoftOut_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiAsSoftOut_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-as-soft-out" }

// ClearBgpInstanceAfiSafiAsSoft
// Choose a particular BGP instance.
// Clear peers in a specific AS.
// Soft reconfig.
// 
type ClearBgpInstanceAfiSafiAsSoft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiAsSoft_Input
}

func (clearBgpInstanceAfiSafiAsSoft *ClearBgpInstanceAfiSafiAsSoft) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiAsSoft.YFilter }

func (clearBgpInstanceAfiSafiAsSoft *ClearBgpInstanceAfiSafiAsSoft) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiAsSoft.YFilter = yf }

func (clearBgpInstanceAfiSafiAsSoft *ClearBgpInstanceAfiSafiAsSoft) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiAsSoft *ClearBgpInstanceAfiSafiAsSoft) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-as-soft"
}

func (clearBgpInstanceAfiSafiAsSoft *ClearBgpInstanceAfiSafiAsSoft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiAsSoft.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiAsSoft *ClearBgpInstanceAfiSafiAsSoft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiAsSoft.Input
    return children
}

func (clearBgpInstanceAfiSafiAsSoft *ClearBgpInstanceAfiSafiAsSoft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiAsSoft *ClearBgpInstanceAfiSafiAsSoft) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiAsSoft *ClearBgpInstanceAfiSafiAsSoft) GetYangName() string { return "clear-bgp-instance-afi-safi-as-soft" }

func (clearBgpInstanceAfiSafiAsSoft *ClearBgpInstanceAfiSafiAsSoft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiAsSoft *ClearBgpInstanceAfiSafiAsSoft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiAsSoft *ClearBgpInstanceAfiSafiAsSoft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiAsSoft *ClearBgpInstanceAfiSafiAsSoft) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiAsSoft.parent = parent }

func (clearBgpInstanceAfiSafiAsSoft *ClearBgpInstanceAfiSafiAsSoft) GetParent() types.Entity { return clearBgpInstanceAfiSafiAsSoft.parent }

func (clearBgpInstanceAfiSafiAsSoft *ClearBgpInstanceAfiSafiAsSoft) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiAsSoft_Input
type ClearBgpInstanceAfiSafiAsSoft_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceAfiSafiAsSoft_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiAsSoft_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiAsSoft_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiAsSoft_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiAsSoft_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiAsSoft_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiAsSoft_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpInstanceAfiSafiAsSoft_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiAsSoft_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiAsSoft_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiAsSoft_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiAsSoft_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiAsSoft_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiAsSoft_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiAsSoft_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-as-soft" }

// ClearBgpInstanceAfiSafiDampeningIpPrefix
// Choose a particular BGP instance.
// Clear route flap dampening information.
// 
type ClearBgpInstanceAfiSafiDampeningIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiDampeningIpPrefix_Input
}

func (clearBgpInstanceAfiSafiDampeningIpPrefix *ClearBgpInstanceAfiSafiDampeningIpPrefix) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiDampeningIpPrefix.YFilter }

func (clearBgpInstanceAfiSafiDampeningIpPrefix *ClearBgpInstanceAfiSafiDampeningIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiDampeningIpPrefix.YFilter = yf }

func (clearBgpInstanceAfiSafiDampeningIpPrefix *ClearBgpInstanceAfiSafiDampeningIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiDampeningIpPrefix *ClearBgpInstanceAfiSafiDampeningIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ip-prefix"
}

func (clearBgpInstanceAfiSafiDampeningIpPrefix *ClearBgpInstanceAfiSafiDampeningIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiDampeningIpPrefix.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiDampeningIpPrefix *ClearBgpInstanceAfiSafiDampeningIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiDampeningIpPrefix.Input
    return children
}

func (clearBgpInstanceAfiSafiDampeningIpPrefix *ClearBgpInstanceAfiSafiDampeningIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiDampeningIpPrefix *ClearBgpInstanceAfiSafiDampeningIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiDampeningIpPrefix *ClearBgpInstanceAfiSafiDampeningIpPrefix) GetYangName() string { return "clear-bgp-instance-afi-safi-dampening-ip-prefix" }

func (clearBgpInstanceAfiSafiDampeningIpPrefix *ClearBgpInstanceAfiSafiDampeningIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiDampeningIpPrefix *ClearBgpInstanceAfiSafiDampeningIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiDampeningIpPrefix *ClearBgpInstanceAfiSafiDampeningIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiDampeningIpPrefix *ClearBgpInstanceAfiSafiDampeningIpPrefix) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiDampeningIpPrefix.parent = parent }

func (clearBgpInstanceAfiSafiDampeningIpPrefix *ClearBgpInstanceAfiSafiDampeningIpPrefix) GetParent() types.Entity { return clearBgpInstanceAfiSafiDampeningIpPrefix.parent }

func (clearBgpInstanceAfiSafiDampeningIpPrefix *ClearBgpInstanceAfiSafiDampeningIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiDampeningIpPrefix_Input
type ClearBgpInstanceAfiSafiDampeningIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network and mask or masklength to clear dampening information. The type is
    // one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceAfiSafiDampeningIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiDampeningIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiDampeningIpPrefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiDampeningIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiDampeningIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiDampeningIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiDampeningIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpInstanceAfiSafiDampeningIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiDampeningIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiDampeningIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiDampeningIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiDampeningIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiDampeningIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiDampeningIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiDampeningIpPrefix_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-dampening-ip-prefix" }

// ClearBgpInstanceAfiSafiDampening
// Choose a particular BGP instance.
// Clear route flap dampening information.
// 
type ClearBgpInstanceAfiSafiDampening struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiDampening_Input
}

func (clearBgpInstanceAfiSafiDampening *ClearBgpInstanceAfiSafiDampening) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiDampening.YFilter }

func (clearBgpInstanceAfiSafiDampening *ClearBgpInstanceAfiSafiDampening) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiDampening.YFilter = yf }

func (clearBgpInstanceAfiSafiDampening *ClearBgpInstanceAfiSafiDampening) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiDampening *ClearBgpInstanceAfiSafiDampening) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening"
}

func (clearBgpInstanceAfiSafiDampening *ClearBgpInstanceAfiSafiDampening) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiDampening.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiDampening *ClearBgpInstanceAfiSafiDampening) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiDampening.Input
    return children
}

func (clearBgpInstanceAfiSafiDampening *ClearBgpInstanceAfiSafiDampening) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiDampening *ClearBgpInstanceAfiSafiDampening) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiDampening *ClearBgpInstanceAfiSafiDampening) GetYangName() string { return "clear-bgp-instance-afi-safi-dampening" }

func (clearBgpInstanceAfiSafiDampening *ClearBgpInstanceAfiSafiDampening) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiDampening *ClearBgpInstanceAfiSafiDampening) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiDampening *ClearBgpInstanceAfiSafiDampening) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiDampening *ClearBgpInstanceAfiSafiDampening) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiDampening.parent = parent }

func (clearBgpInstanceAfiSafiDampening *ClearBgpInstanceAfiSafiDampening) GetParent() types.Entity { return clearBgpInstanceAfiSafiDampening.parent }

func (clearBgpInstanceAfiSafiDampening *ClearBgpInstanceAfiSafiDampening) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiDampening_Input
type ClearBgpInstanceAfiSafiDampening_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiDampening_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiDampening_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiDampening_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiDampening_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiDampening_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiDampening_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiDampening_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceAfiSafiDampening_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiDampening_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiDampening_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiDampening_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiDampening_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiDampening_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiDampening_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiDampening_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-dampening" }

// ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter
// Choose a particular BGP instance.
// Clear all external peers.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input
}

func (clearBgpInstanceAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.YFilter }

func (clearBgpInstanceAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.YFilter = yf }

func (clearBgpInstanceAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in-prefix-filter"
}

func (clearBgpInstanceAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.Input
    return children
}

func (clearBgpInstanceAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter) GetYangName() string { return "clear-bgp-instance-afi-safi-external-soft-in-prefix-filter" }

func (clearBgpInstanceAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.parent = parent }

func (clearBgpInstanceAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter) GetParent() types.Entity { return clearBgpInstanceAfiSafiExternalSoftInPrefixFilter.parent }

func (clearBgpInstanceAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input
type ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiExternalSoftInPrefixFilter_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-external-soft-in-prefix-filter" }

// ClearBgpInstanceAfiSafiExternalSoftIn
// Choose a particular BGP instance.
// Clear all external peers.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpInstanceAfiSafiExternalSoftIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiExternalSoftIn_Input
}

func (clearBgpInstanceAfiSafiExternalSoftIn *ClearBgpInstanceAfiSafiExternalSoftIn) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiExternalSoftIn.YFilter }

func (clearBgpInstanceAfiSafiExternalSoftIn *ClearBgpInstanceAfiSafiExternalSoftIn) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiExternalSoftIn.YFilter = yf }

func (clearBgpInstanceAfiSafiExternalSoftIn *ClearBgpInstanceAfiSafiExternalSoftIn) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiExternalSoftIn *ClearBgpInstanceAfiSafiExternalSoftIn) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-in"
}

func (clearBgpInstanceAfiSafiExternalSoftIn *ClearBgpInstanceAfiSafiExternalSoftIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiExternalSoftIn.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiExternalSoftIn *ClearBgpInstanceAfiSafiExternalSoftIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiExternalSoftIn.Input
    return children
}

func (clearBgpInstanceAfiSafiExternalSoftIn *ClearBgpInstanceAfiSafiExternalSoftIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiExternalSoftIn *ClearBgpInstanceAfiSafiExternalSoftIn) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiExternalSoftIn *ClearBgpInstanceAfiSafiExternalSoftIn) GetYangName() string { return "clear-bgp-instance-afi-safi-external-soft-in" }

func (clearBgpInstanceAfiSafiExternalSoftIn *ClearBgpInstanceAfiSafiExternalSoftIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiExternalSoftIn *ClearBgpInstanceAfiSafiExternalSoftIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiExternalSoftIn *ClearBgpInstanceAfiSafiExternalSoftIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiExternalSoftIn *ClearBgpInstanceAfiSafiExternalSoftIn) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiExternalSoftIn.parent = parent }

func (clearBgpInstanceAfiSafiExternalSoftIn *ClearBgpInstanceAfiSafiExternalSoftIn) GetParent() types.Entity { return clearBgpInstanceAfiSafiExternalSoftIn.parent }

func (clearBgpInstanceAfiSafiExternalSoftIn *ClearBgpInstanceAfiSafiExternalSoftIn) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiExternalSoftIn_Input
type ClearBgpInstanceAfiSafiExternalSoftIn_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiExternalSoftIn_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiExternalSoftIn_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiExternalSoftIn_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiExternalSoftIn_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiExternalSoftIn_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiExternalSoftIn_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiExternalSoftIn_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceAfiSafiExternalSoftIn_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiExternalSoftIn_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiExternalSoftIn_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiExternalSoftIn_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiExternalSoftIn_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiExternalSoftIn_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiExternalSoftIn_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiExternalSoftIn_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-external-soft-in" }

// ClearBgpInstanceAfiSafiExternalSoftOut
// Choose a particular BGP instance.
// Clear all external peers.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpInstanceAfiSafiExternalSoftOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiExternalSoftOut_Input
}

func (clearBgpInstanceAfiSafiExternalSoftOut *ClearBgpInstanceAfiSafiExternalSoftOut) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiExternalSoftOut.YFilter }

func (clearBgpInstanceAfiSafiExternalSoftOut *ClearBgpInstanceAfiSafiExternalSoftOut) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiExternalSoftOut.YFilter = yf }

func (clearBgpInstanceAfiSafiExternalSoftOut *ClearBgpInstanceAfiSafiExternalSoftOut) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiExternalSoftOut *ClearBgpInstanceAfiSafiExternalSoftOut) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft-out"
}

func (clearBgpInstanceAfiSafiExternalSoftOut *ClearBgpInstanceAfiSafiExternalSoftOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiExternalSoftOut.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiExternalSoftOut *ClearBgpInstanceAfiSafiExternalSoftOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiExternalSoftOut.Input
    return children
}

func (clearBgpInstanceAfiSafiExternalSoftOut *ClearBgpInstanceAfiSafiExternalSoftOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiExternalSoftOut *ClearBgpInstanceAfiSafiExternalSoftOut) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiExternalSoftOut *ClearBgpInstanceAfiSafiExternalSoftOut) GetYangName() string { return "clear-bgp-instance-afi-safi-external-soft-out" }

func (clearBgpInstanceAfiSafiExternalSoftOut *ClearBgpInstanceAfiSafiExternalSoftOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiExternalSoftOut *ClearBgpInstanceAfiSafiExternalSoftOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiExternalSoftOut *ClearBgpInstanceAfiSafiExternalSoftOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiExternalSoftOut *ClearBgpInstanceAfiSafiExternalSoftOut) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiExternalSoftOut.parent = parent }

func (clearBgpInstanceAfiSafiExternalSoftOut *ClearBgpInstanceAfiSafiExternalSoftOut) GetParent() types.Entity { return clearBgpInstanceAfiSafiExternalSoftOut.parent }

func (clearBgpInstanceAfiSafiExternalSoftOut *ClearBgpInstanceAfiSafiExternalSoftOut) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiExternalSoftOut_Input
type ClearBgpInstanceAfiSafiExternalSoftOut_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiExternalSoftOut_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiExternalSoftOut_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiExternalSoftOut_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiExternalSoftOut_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiExternalSoftOut_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiExternalSoftOut_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiExternalSoftOut_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceAfiSafiExternalSoftOut_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiExternalSoftOut_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiExternalSoftOut_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiExternalSoftOut_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiExternalSoftOut_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiExternalSoftOut_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiExternalSoftOut_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiExternalSoftOut_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-external-soft-out" }

// ClearBgpInstanceAfiSafiExternalSoft
// Choose a particular BGP instance.
// Clear all external peers.
// Soft reconfig.
// 
type ClearBgpInstanceAfiSafiExternalSoft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiExternalSoft_Input
}

func (clearBgpInstanceAfiSafiExternalSoft *ClearBgpInstanceAfiSafiExternalSoft) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiExternalSoft.YFilter }

func (clearBgpInstanceAfiSafiExternalSoft *ClearBgpInstanceAfiSafiExternalSoft) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiExternalSoft.YFilter = yf }

func (clearBgpInstanceAfiSafiExternalSoft *ClearBgpInstanceAfiSafiExternalSoft) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiExternalSoft *ClearBgpInstanceAfiSafiExternalSoft) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-external-soft"
}

func (clearBgpInstanceAfiSafiExternalSoft *ClearBgpInstanceAfiSafiExternalSoft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiExternalSoft.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiExternalSoft *ClearBgpInstanceAfiSafiExternalSoft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiExternalSoft.Input
    return children
}

func (clearBgpInstanceAfiSafiExternalSoft *ClearBgpInstanceAfiSafiExternalSoft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiExternalSoft *ClearBgpInstanceAfiSafiExternalSoft) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiExternalSoft *ClearBgpInstanceAfiSafiExternalSoft) GetYangName() string { return "clear-bgp-instance-afi-safi-external-soft" }

func (clearBgpInstanceAfiSafiExternalSoft *ClearBgpInstanceAfiSafiExternalSoft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiExternalSoft *ClearBgpInstanceAfiSafiExternalSoft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiExternalSoft *ClearBgpInstanceAfiSafiExternalSoft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiExternalSoft *ClearBgpInstanceAfiSafiExternalSoft) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiExternalSoft.parent = parent }

func (clearBgpInstanceAfiSafiExternalSoft *ClearBgpInstanceAfiSafiExternalSoft) GetParent() types.Entity { return clearBgpInstanceAfiSafiExternalSoft.parent }

func (clearBgpInstanceAfiSafiExternalSoft *ClearBgpInstanceAfiSafiExternalSoft) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiExternalSoft_Input
type ClearBgpInstanceAfiSafiExternalSoft_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiExternalSoft_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiExternalSoft_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiExternalSoft_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiExternalSoft_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiExternalSoft_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiExternalSoft_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiExternalSoft_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceAfiSafiExternalSoft_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiExternalSoft_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiExternalSoft_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiExternalSoft_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiExternalSoft_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiExternalSoft_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiExternalSoft_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiExternalSoft_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-external-soft" }

// ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask
// Choose a particular BGP instance.
// Clear flap statistics.
// 
type ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.YFilter }

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.YFilter = yf }

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask"
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.Input
    return children
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask) GetYangName() string { return "clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask" }

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.parent = parent }

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask) GetParent() types.Entity { return clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask.parent }

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input
type ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Network and mask or masklength to clear flap statistics. The type is string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-flap-statistics-ip-addr-ipv4-mask" }

// ClearBgpInstanceAfiSafiFlapStatisticsIpAddr
// Choose a particular BGP instance.
// Clear flap statistics.
// 
type ClearBgpInstanceAfiSafiFlapStatisticsIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiFlapStatisticsIpAddr.YFilter }

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiFlapStatisticsIpAddr.YFilter = yf }

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-addr"
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiFlapStatisticsIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiFlapStatisticsIpAddr.Input
    return children
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr) GetYangName() string { return "clear-bgp-instance-afi-safi-flap-statistics-ip-addr" }

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiFlapStatisticsIpAddr.parent = parent }

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr) GetParent() types.Entity { return clearBgpInstanceAfiSafiFlapStatisticsIpAddr.parent }

func (clearBgpInstanceAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input
type ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-flap-statistics-ip-addr" }

// ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix
// Choose a particular BGP instance.
// Clear flap statistics.
// 
type ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpPrefix *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.YFilter }

func (clearBgpInstanceAfiSafiFlapStatisticsIpPrefix *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.YFilter = yf }

func (clearBgpInstanceAfiSafiFlapStatisticsIpPrefix *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpPrefix *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ip-prefix"
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpPrefix *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpPrefix *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.Input
    return children
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpPrefix *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpPrefix *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiFlapStatisticsIpPrefix *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix) GetYangName() string { return "clear-bgp-instance-afi-safi-flap-statistics-ip-prefix" }

func (clearBgpInstanceAfiSafiFlapStatisticsIpPrefix *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiFlapStatisticsIpPrefix *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiFlapStatisticsIpPrefix *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiFlapStatisticsIpPrefix *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.parent = parent }

func (clearBgpInstanceAfiSafiFlapStatisticsIpPrefix *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix) GetParent() types.Entity { return clearBgpInstanceAfiSafiFlapStatisticsIpPrefix.parent }

func (clearBgpInstanceAfiSafiFlapStatisticsIpPrefix *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input
type ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network and mask or masklength to clear flap statistics. The type is one of
    // the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpPrefix_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-flap-statistics-ip-prefix" }

// ClearBgpInstanceAfiSafiFlapStatisticsRegexp
// Choose a particular BGP instance.
// Clear flap statistics.
// Clear flap statistics for routes matching the regular expression.
// 
type ClearBgpInstanceAfiSafiFlapStatisticsRegexp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input
}

func (clearBgpInstanceAfiSafiFlapStatisticsRegexp *ClearBgpInstanceAfiSafiFlapStatisticsRegexp) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiFlapStatisticsRegexp.YFilter }

func (clearBgpInstanceAfiSafiFlapStatisticsRegexp *ClearBgpInstanceAfiSafiFlapStatisticsRegexp) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiFlapStatisticsRegexp.YFilter = yf }

func (clearBgpInstanceAfiSafiFlapStatisticsRegexp *ClearBgpInstanceAfiSafiFlapStatisticsRegexp) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiFlapStatisticsRegexp *ClearBgpInstanceAfiSafiFlapStatisticsRegexp) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-regexp"
}

func (clearBgpInstanceAfiSafiFlapStatisticsRegexp *ClearBgpInstanceAfiSafiFlapStatisticsRegexp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiFlapStatisticsRegexp.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiFlapStatisticsRegexp *ClearBgpInstanceAfiSafiFlapStatisticsRegexp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiFlapStatisticsRegexp.Input
    return children
}

func (clearBgpInstanceAfiSafiFlapStatisticsRegexp *ClearBgpInstanceAfiSafiFlapStatisticsRegexp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiFlapStatisticsRegexp *ClearBgpInstanceAfiSafiFlapStatisticsRegexp) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiFlapStatisticsRegexp *ClearBgpInstanceAfiSafiFlapStatisticsRegexp) GetYangName() string { return "clear-bgp-instance-afi-safi-flap-statistics-regexp" }

func (clearBgpInstanceAfiSafiFlapStatisticsRegexp *ClearBgpInstanceAfiSafiFlapStatisticsRegexp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiFlapStatisticsRegexp *ClearBgpInstanceAfiSafiFlapStatisticsRegexp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiFlapStatisticsRegexp *ClearBgpInstanceAfiSafiFlapStatisticsRegexp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiFlapStatisticsRegexp *ClearBgpInstanceAfiSafiFlapStatisticsRegexp) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiFlapStatisticsRegexp.parent = parent }

func (clearBgpInstanceAfiSafiFlapStatisticsRegexp *ClearBgpInstanceAfiSafiFlapStatisticsRegexp) GetParent() types.Entity { return clearBgpInstanceAfiSafiFlapStatisticsRegexp.parent }

func (clearBgpInstanceAfiSafiFlapStatisticsRegexp *ClearBgpInstanceAfiSafiFlapStatisticsRegexp) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input
type ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // A regular expression to match the BGP AS paths.  Use 'ctrl-v ?' to enter
    // '?'. The type is string. This attribute is mandatory.
    RegexpPattern interface{}
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "regexp-pattern" { return "RegexpPattern" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["regexp-pattern"] = input.RegexpPattern
    return leafs
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRegexp_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-flap-statistics-regexp" }

// ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy
// Choose a particular BGP instance.
// Clear flap statistics.
// Clear flap statistics for routes matching the route policy.
// 
type ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input
}

func (clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.YFilter }

func (clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.YFilter = yf }

func (clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-route-policy"
}

func (clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.Input
    return children
}

func (clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy) GetYangName() string { return "clear-bgp-instance-afi-safi-flap-statistics-route-policy" }

func (clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.parent = parent }

func (clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy) GetParent() types.Entity { return clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy.parent }

func (clearBgpInstanceAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input
type ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route Policy name. The type is string. This attribute is mandatory.
    RoutePolicyName interface{}
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["route-policy-name"] = input.RoutePolicyName
    return leafs
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsRoutePolicy_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-flap-statistics-route-policy" }

// ClearBgpInstanceAfiSafiFlapStatistics
// Choose a particular BGP instance.
// Clear flap statistics.
// 
type ClearBgpInstanceAfiSafiFlapStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiFlapStatistics_Input
}

func (clearBgpInstanceAfiSafiFlapStatistics *ClearBgpInstanceAfiSafiFlapStatistics) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiFlapStatistics.YFilter }

func (clearBgpInstanceAfiSafiFlapStatistics *ClearBgpInstanceAfiSafiFlapStatistics) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiFlapStatistics.YFilter = yf }

func (clearBgpInstanceAfiSafiFlapStatistics *ClearBgpInstanceAfiSafiFlapStatistics) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiFlapStatistics *ClearBgpInstanceAfiSafiFlapStatistics) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics"
}

func (clearBgpInstanceAfiSafiFlapStatistics *ClearBgpInstanceAfiSafiFlapStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiFlapStatistics.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiFlapStatistics *ClearBgpInstanceAfiSafiFlapStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiFlapStatistics.Input
    return children
}

func (clearBgpInstanceAfiSafiFlapStatistics *ClearBgpInstanceAfiSafiFlapStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiFlapStatistics *ClearBgpInstanceAfiSafiFlapStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiFlapStatistics *ClearBgpInstanceAfiSafiFlapStatistics) GetYangName() string { return "clear-bgp-instance-afi-safi-flap-statistics" }

func (clearBgpInstanceAfiSafiFlapStatistics *ClearBgpInstanceAfiSafiFlapStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiFlapStatistics *ClearBgpInstanceAfiSafiFlapStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiFlapStatistics *ClearBgpInstanceAfiSafiFlapStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiFlapStatistics *ClearBgpInstanceAfiSafiFlapStatistics) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiFlapStatistics.parent = parent }

func (clearBgpInstanceAfiSafiFlapStatistics *ClearBgpInstanceAfiSafiFlapStatistics) GetParent() types.Entity { return clearBgpInstanceAfiSafiFlapStatistics.parent }

func (clearBgpInstanceAfiSafiFlapStatistics *ClearBgpInstanceAfiSafiFlapStatistics) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiFlapStatistics_Input
type ClearBgpInstanceAfiSafiFlapStatistics_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiFlapStatistics_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiFlapStatistics_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiFlapStatistics_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiFlapStatistics_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiFlapStatistics_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiFlapStatistics_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiFlapStatistics_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceAfiSafiFlapStatistics_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiFlapStatistics_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiFlapStatistics_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiFlapStatistics_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiFlapStatistics_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiFlapStatistics_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiFlapStatistics_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiFlapStatistics_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-flap-statistics" }

// ClearBgpInstanceAfiSafiNexthopPerformanceStatistics
// Choose a particular BGP instance.
// Clear nexthop.
// Performance statistics information related to processing.
// 
type ClearBgpInstanceAfiSafiNexthopPerformanceStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input
}

func (clearBgpInstanceAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiNexthopPerformanceStatistics.YFilter }

func (clearBgpInstanceAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiNexthopPerformanceStatistics.YFilter = yf }

func (clearBgpInstanceAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-performance-statistics"
}

func (clearBgpInstanceAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiNexthopPerformanceStatistics.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiNexthopPerformanceStatistics.Input
    return children
}

func (clearBgpInstanceAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics) GetYangName() string { return "clear-bgp-instance-afi-safi-nexthop-performance-statistics" }

func (clearBgpInstanceAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiNexthopPerformanceStatistics.parent = parent }

func (clearBgpInstanceAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics) GetParent() types.Entity { return clearBgpInstanceAfiSafiNexthopPerformanceStatistics.parent }

func (clearBgpInstanceAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input
type ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiNexthopPerformanceStatistics_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-nexthop-performance-statistics" }

// ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr
// Choose a particular BGP instance.
// Clear nexthop.
// Registration with RIB and reregister.
// 
type ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input
}

func (clearBgpInstanceAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.YFilter }

func (clearBgpInstanceAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.YFilter = yf }

func (clearBgpInstanceAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-nexthop-registration-ip-addr"
}

func (clearBgpInstanceAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.Input
    return children
}

func (clearBgpInstanceAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr) GetYangName() string { return "clear-bgp-instance-afi-safi-nexthop-registration-ip-addr" }

func (clearBgpInstanceAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.parent = parent }

func (clearBgpInstanceAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr) GetParent() types.Entity { return clearBgpInstanceAfiSafiNexthopRegistrationIpAddr.parent }

func (clearBgpInstanceAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input
type ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Nexthop address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiNexthopRegistrationIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-nexthop-registration-ip-addr" }

// ClearBgpInstanceAfiSafiSelfOriginated
// Choose a particular BGP instance.
// Clear redistributed, network and aggregate routes originated here.
// 
type ClearBgpInstanceAfiSafiSelfOriginated struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiSelfOriginated_Input
}

func (clearBgpInstanceAfiSafiSelfOriginated *ClearBgpInstanceAfiSafiSelfOriginated) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiSelfOriginated.YFilter }

func (clearBgpInstanceAfiSafiSelfOriginated *ClearBgpInstanceAfiSafiSelfOriginated) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiSelfOriginated.YFilter = yf }

func (clearBgpInstanceAfiSafiSelfOriginated *ClearBgpInstanceAfiSafiSelfOriginated) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiSelfOriginated *ClearBgpInstanceAfiSafiSelfOriginated) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-self-originated"
}

func (clearBgpInstanceAfiSafiSelfOriginated *ClearBgpInstanceAfiSafiSelfOriginated) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiSelfOriginated.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiSelfOriginated *ClearBgpInstanceAfiSafiSelfOriginated) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiSelfOriginated.Input
    return children
}

func (clearBgpInstanceAfiSafiSelfOriginated *ClearBgpInstanceAfiSafiSelfOriginated) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiSelfOriginated *ClearBgpInstanceAfiSafiSelfOriginated) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiSelfOriginated *ClearBgpInstanceAfiSafiSelfOriginated) GetYangName() string { return "clear-bgp-instance-afi-safi-self-originated" }

func (clearBgpInstanceAfiSafiSelfOriginated *ClearBgpInstanceAfiSafiSelfOriginated) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiSelfOriginated *ClearBgpInstanceAfiSafiSelfOriginated) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiSelfOriginated *ClearBgpInstanceAfiSafiSelfOriginated) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiSelfOriginated *ClearBgpInstanceAfiSafiSelfOriginated) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiSelfOriginated.parent = parent }

func (clearBgpInstanceAfiSafiSelfOriginated *ClearBgpInstanceAfiSafiSelfOriginated) GetParent() types.Entity { return clearBgpInstanceAfiSafiSelfOriginated.parent }

func (clearBgpInstanceAfiSafiSelfOriginated *ClearBgpInstanceAfiSafiSelfOriginated) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiSelfOriginated_Input
type ClearBgpInstanceAfiSafiSelfOriginated_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiSelfOriginated_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiSelfOriginated_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiSelfOriginated_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiSelfOriginated_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiSelfOriginated_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiSelfOriginated_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiSelfOriginated_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceAfiSafiSelfOriginated_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiSelfOriginated_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiSelfOriginated_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiSelfOriginated_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiSelfOriginated_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiSelfOriginated_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiSelfOriginated_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiSelfOriginated_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-self-originated" }

// ClearBgpInstanceAfiSafiShutdown
// Choose a particular BGP instance.
// Clear all peers which were shut down due to low memory.
// 
type ClearBgpInstanceAfiSafiShutdown struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiShutdown_Input
}

func (clearBgpInstanceAfiSafiShutdown *ClearBgpInstanceAfiSafiShutdown) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiShutdown.YFilter }

func (clearBgpInstanceAfiSafiShutdown *ClearBgpInstanceAfiSafiShutdown) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiShutdown.YFilter = yf }

func (clearBgpInstanceAfiSafiShutdown *ClearBgpInstanceAfiSafiShutdown) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiShutdown *ClearBgpInstanceAfiSafiShutdown) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-shutdown"
}

func (clearBgpInstanceAfiSafiShutdown *ClearBgpInstanceAfiSafiShutdown) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiShutdown.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiShutdown *ClearBgpInstanceAfiSafiShutdown) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiShutdown.Input
    return children
}

func (clearBgpInstanceAfiSafiShutdown *ClearBgpInstanceAfiSafiShutdown) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiShutdown *ClearBgpInstanceAfiSafiShutdown) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiShutdown *ClearBgpInstanceAfiSafiShutdown) GetYangName() string { return "clear-bgp-instance-afi-safi-shutdown" }

func (clearBgpInstanceAfiSafiShutdown *ClearBgpInstanceAfiSafiShutdown) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiShutdown *ClearBgpInstanceAfiSafiShutdown) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiShutdown *ClearBgpInstanceAfiSafiShutdown) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiShutdown *ClearBgpInstanceAfiSafiShutdown) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiShutdown.parent = parent }

func (clearBgpInstanceAfiSafiShutdown *ClearBgpInstanceAfiSafiShutdown) GetParent() types.Entity { return clearBgpInstanceAfiSafiShutdown.parent }

func (clearBgpInstanceAfiSafiShutdown *ClearBgpInstanceAfiSafiShutdown) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiShutdown_Input
type ClearBgpInstanceAfiSafiShutdown_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiShutdown_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiShutdown_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiShutdown_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiShutdown_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiShutdown_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiShutdown_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiShutdown_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceAfiSafiShutdown_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiShutdown_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiShutdown_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiShutdown_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiShutdown_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiShutdown_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiShutdown_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiShutdown_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-shutdown" }

// ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.YFilter }

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.YFilter = yf }

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family-update-parent"
}

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.Input
    return children
}

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent) GetYangName() string { return "clear-bgp-instance-afi-safi-update-outq-address-family-update-parent" }

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.parent = parent }

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent) GetParent() types.Entity { return clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent.parent }

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input
type ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-update-outq-address-family-update-parent" }

// ClearBgpInstanceAfiSafiUpdateOutqAddressFamily
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// 
type ClearBgpInstanceAfiSafiUpdateOutqAddressFamily struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiUpdateOutqAddressFamily.YFilter }

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiUpdateOutqAddressFamily.YFilter = yf }

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-address-family"
}

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiUpdateOutqAddressFamily.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiUpdateOutqAddressFamily.Input
    return children
}

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily) GetYangName() string { return "clear-bgp-instance-afi-safi-update-outq-address-family" }

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiUpdateOutqAddressFamily.parent = parent }

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily) GetParent() types.Entity { return clearBgpInstanceAfiSafiUpdateOutqAddressFamily.parent }

func (clearBgpInstanceAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input
type ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqAddressFamily_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-update-outq-address-family" }

// ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter = yf }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input
    return children
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetYangName() string { return "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent" }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.parent = parent }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetParent() types.Entity { return clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.parent }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
type ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent" }

// ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// 
type ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.YFilter }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.YFilter = yf }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh"
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.Input
    return children
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh) GetYangName() string { return "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh" }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.parent = parent }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh) GetParent() types.Entity { return clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh.parent }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input
type ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-refresh" }

// ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.YFilter }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.YFilter = yf }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent"
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input
    return children
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetYangName() string { return "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent" }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.parent = parent }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetParent() types.Entity { return clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent.parent }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input
type ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr-update-parent" }

// ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// 
type ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.YFilter }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.YFilter = yf }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr"
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.Input
    return children
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr) GetYangName() string { return "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr" }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.parent = parent }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr) GetParent() types.Entity { return clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr.parent }

func (clearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input
type ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqNeighborIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-update-outq-neighbor-ip-addr" }

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter = yf }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent"
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input
    return children
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetYangName() string { return "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent" }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.parent = parent }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetParent() types.Entity { return clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.parent }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "sub-group" { return "SubGroup" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    leafs["sub-group"] = input.SubGroup
    return leafs
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-update-parent" }

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.YFilter }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.YFilter = yf }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group"
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.Input
    return children
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup) GetYangName() string { return "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group" }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.parent = parent }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup) GetParent() types.Entity { return clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup.parent }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "sub-group" { return "SubGroup" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    leafs["sub-group"] = input.SubGroup
    return leafs
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group" }

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter = yf }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input
    return children
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetYangName() string { return "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent" }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.parent = parent }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetParent() types.Entity { return clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.parent }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "refresh-sub-group" { return "RefreshSubGroup" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    leafs["refresh-sub-group"] = input.RefreshSubGroup
    return leafs
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent" }

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter = yf }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input
    return children
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetYangName() string { return "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group" }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.parent = parent }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetParent() types.Entity { return clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.parent }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "refresh-sub-group" { return "RefreshSubGroup" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    leafs["refresh-sub-group"] = input.RefreshSubGroup
    return leafs
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-update-outq-update-group-sub-group-refresh-sub-group" }

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.YFilter }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.YFilter = yf }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group-update-parent"
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.Input
    return children
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent) GetYangName() string { return "clear-bgp-instance-afi-safi-update-outq-update-group-update-parent" }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.parent = parent }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent) GetParent() types.Entity { return clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent.parent }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    return leafs
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-update-outq-update-group-update-parent" }

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// 
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.YFilter }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.YFilter = yf }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-update-outq-update-group"
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.Input
    return children
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup) GetYangName() string { return "clear-bgp-instance-afi-safi-update-outq-update-group" }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.parent = parent }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup) GetParent() types.Entity { return clearBgpInstanceAfiSafiUpdateOutqUpdateGroup.parent }

func (clearBgpInstanceAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input
type ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    return leafs
}

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiUpdateOutqUpdateGroup_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-update-outq-update-group" }

// ClearBgpInstanceAsGraceful
// Choose a particular BGP instance.
// Clear peers in a specific AS.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpInstanceAsGraceful struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAsGraceful_Input
}

func (clearBgpInstanceAsGraceful *ClearBgpInstanceAsGraceful) GetFilter() yfilter.YFilter { return clearBgpInstanceAsGraceful.YFilter }

func (clearBgpInstanceAsGraceful *ClearBgpInstanceAsGraceful) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAsGraceful.YFilter = yf }

func (clearBgpInstanceAsGraceful *ClearBgpInstanceAsGraceful) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAsGraceful *ClearBgpInstanceAsGraceful) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as-graceful"
}

func (clearBgpInstanceAsGraceful *ClearBgpInstanceAsGraceful) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAsGraceful.Input
    }
    return nil
}

func (clearBgpInstanceAsGraceful *ClearBgpInstanceAsGraceful) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAsGraceful.Input
    return children
}

func (clearBgpInstanceAsGraceful *ClearBgpInstanceAsGraceful) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAsGraceful *ClearBgpInstanceAsGraceful) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAsGraceful *ClearBgpInstanceAsGraceful) GetYangName() string { return "clear-bgp-instance-as-graceful" }

func (clearBgpInstanceAsGraceful *ClearBgpInstanceAsGraceful) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAsGraceful *ClearBgpInstanceAsGraceful) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAsGraceful *ClearBgpInstanceAsGraceful) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAsGraceful *ClearBgpInstanceAsGraceful) SetParent(parent types.Entity) { clearBgpInstanceAsGraceful.parent = parent }

func (clearBgpInstanceAsGraceful *ClearBgpInstanceAsGraceful) GetParent() types.Entity { return clearBgpInstanceAsGraceful.parent }

func (clearBgpInstanceAsGraceful *ClearBgpInstanceAsGraceful) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAsGraceful_Input
type ClearBgpInstanceAsGraceful_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceAsGraceful_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAsGraceful_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAsGraceful_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpInstanceAsGraceful_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAsGraceful_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAsGraceful_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAsGraceful_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpInstanceAsGraceful_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAsGraceful_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAsGraceful_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAsGraceful_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAsGraceful_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAsGraceful_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAsGraceful_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAsGraceful_Input) GetParentYangName() string { return "clear-bgp-instance-as-graceful" }

// ClearBgpInstanceAs
// Choose a particular BGP instance.
// Clear peers in a specific AS.
// 
type ClearBgpInstanceAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAs_Input
}

func (clearBgpInstanceAs *ClearBgpInstanceAs) GetFilter() yfilter.YFilter { return clearBgpInstanceAs.YFilter }

func (clearBgpInstanceAs *ClearBgpInstanceAs) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAs.YFilter = yf }

func (clearBgpInstanceAs *ClearBgpInstanceAs) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAs *ClearBgpInstanceAs) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-as"
}

func (clearBgpInstanceAs *ClearBgpInstanceAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAs.Input
    }
    return nil
}

func (clearBgpInstanceAs *ClearBgpInstanceAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAs.Input
    return children
}

func (clearBgpInstanceAs *ClearBgpInstanceAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAs *ClearBgpInstanceAs) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAs *ClearBgpInstanceAs) GetYangName() string { return "clear-bgp-instance-as" }

func (clearBgpInstanceAs *ClearBgpInstanceAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAs *ClearBgpInstanceAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAs *ClearBgpInstanceAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAs *ClearBgpInstanceAs) SetParent(parent types.Entity) { clearBgpInstanceAs.parent = parent }

func (clearBgpInstanceAs *ClearBgpInstanceAs) GetParent() types.Entity { return clearBgpInstanceAs.parent }

func (clearBgpInstanceAs *ClearBgpInstanceAs) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAs_Input
type ClearBgpInstanceAs_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceAs_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAs_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAs_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpInstanceAs_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAs_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAs_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAs_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpInstanceAs_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAs_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAs_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAs_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAs_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAs_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAs_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAs_Input) GetParentYangName() string { return "clear-bgp-instance-as" }

// ClearBgpInstanceBestpathIpAddrIpNetmask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathIpAddrIpNetmask_Input
}

func (clearBgpInstanceBestpathIpAddrIpNetmask *ClearBgpInstanceBestpathIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathIpAddrIpNetmask.YFilter }

func (clearBgpInstanceBestpathIpAddrIpNetmask *ClearBgpInstanceBestpathIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathIpAddrIpNetmask.YFilter = yf }

func (clearBgpInstanceBestpathIpAddrIpNetmask *ClearBgpInstanceBestpathIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathIpAddrIpNetmask *ClearBgpInstanceBestpathIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr-ip-netmask"
}

func (clearBgpInstanceBestpathIpAddrIpNetmask *ClearBgpInstanceBestpathIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpInstanceBestpathIpAddrIpNetmask *ClearBgpInstanceBestpathIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathIpAddrIpNetmask.Input
    return children
}

func (clearBgpInstanceBestpathIpAddrIpNetmask *ClearBgpInstanceBestpathIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathIpAddrIpNetmask *ClearBgpInstanceBestpathIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathIpAddrIpNetmask *ClearBgpInstanceBestpathIpAddrIpNetmask) GetYangName() string { return "clear-bgp-instance-bestpath-ip-addr-ip-netmask" }

func (clearBgpInstanceBestpathIpAddrIpNetmask *ClearBgpInstanceBestpathIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathIpAddrIpNetmask *ClearBgpInstanceBestpathIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathIpAddrIpNetmask *ClearBgpInstanceBestpathIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathIpAddrIpNetmask *ClearBgpInstanceBestpathIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpInstanceBestpathIpAddrIpNetmask.parent = parent }

func (clearBgpInstanceBestpathIpAddrIpNetmask *ClearBgpInstanceBestpathIpAddrIpNetmask) GetParent() types.Entity { return clearBgpInstanceBestpathIpAddrIpNetmask.parent }

func (clearBgpInstanceBestpathIpAddrIpNetmask *ClearBgpInstanceBestpathIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathIpAddrIpNetmask_Input
type ClearBgpInstanceBestpathIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceBestpathIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpInstanceBestpathIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpInstanceBestpathIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-ip-addr-ip-netmask" }

// ClearBgpInstanceBestpathIpAddr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathIpAddr_Input
}

func (clearBgpInstanceBestpathIpAddr *ClearBgpInstanceBestpathIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathIpAddr.YFilter }

func (clearBgpInstanceBestpathIpAddr *ClearBgpInstanceBestpathIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathIpAddr.YFilter = yf }

func (clearBgpInstanceBestpathIpAddr *ClearBgpInstanceBestpathIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathIpAddr *ClearBgpInstanceBestpathIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-addr"
}

func (clearBgpInstanceBestpathIpAddr *ClearBgpInstanceBestpathIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceBestpathIpAddr *ClearBgpInstanceBestpathIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathIpAddr.Input
    return children
}

func (clearBgpInstanceBestpathIpAddr *ClearBgpInstanceBestpathIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathIpAddr *ClearBgpInstanceBestpathIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathIpAddr *ClearBgpInstanceBestpathIpAddr) GetYangName() string { return "clear-bgp-instance-bestpath-ip-addr" }

func (clearBgpInstanceBestpathIpAddr *ClearBgpInstanceBestpathIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathIpAddr *ClearBgpInstanceBestpathIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathIpAddr *ClearBgpInstanceBestpathIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathIpAddr *ClearBgpInstanceBestpathIpAddr) SetParent(parent types.Entity) { clearBgpInstanceBestpathIpAddr.parent = parent }

func (clearBgpInstanceBestpathIpAddr *ClearBgpInstanceBestpathIpAddr) GetParent() types.Entity { return clearBgpInstanceBestpathIpAddr.parent }

func (clearBgpInstanceBestpathIpAddr *ClearBgpInstanceBestpathIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathIpAddr_Input
type ClearBgpInstanceBestpathIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceBestpathIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceBestpathIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceBestpathIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-ip-addr" }

// ClearBgpInstanceBestpathIpPrefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathIpPrefix_Input
}

func (clearBgpInstanceBestpathIpPrefix *ClearBgpInstanceBestpathIpPrefix) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathIpPrefix.YFilter }

func (clearBgpInstanceBestpathIpPrefix *ClearBgpInstanceBestpathIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathIpPrefix.YFilter = yf }

func (clearBgpInstanceBestpathIpPrefix *ClearBgpInstanceBestpathIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathIpPrefix *ClearBgpInstanceBestpathIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-ip-prefix"
}

func (clearBgpInstanceBestpathIpPrefix *ClearBgpInstanceBestpathIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathIpPrefix.Input
    }
    return nil
}

func (clearBgpInstanceBestpathIpPrefix *ClearBgpInstanceBestpathIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathIpPrefix.Input
    return children
}

func (clearBgpInstanceBestpathIpPrefix *ClearBgpInstanceBestpathIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathIpPrefix *ClearBgpInstanceBestpathIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathIpPrefix *ClearBgpInstanceBestpathIpPrefix) GetYangName() string { return "clear-bgp-instance-bestpath-ip-prefix" }

func (clearBgpInstanceBestpathIpPrefix *ClearBgpInstanceBestpathIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathIpPrefix *ClearBgpInstanceBestpathIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathIpPrefix *ClearBgpInstanceBestpathIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathIpPrefix *ClearBgpInstanceBestpathIpPrefix) SetParent(parent types.Entity) { clearBgpInstanceBestpathIpPrefix.parent = parent }

func (clearBgpInstanceBestpathIpPrefix *ClearBgpInstanceBestpathIpPrefix) GetParent() types.Entity { return clearBgpInstanceBestpathIpPrefix.parent }

func (clearBgpInstanceBestpathIpPrefix *ClearBgpInstanceBestpathIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathIpPrefix_Input
type ClearBgpInstanceBestpathIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceBestpathIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathIpPrefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpInstanceBestpathIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpInstanceBestpathIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathIpPrefix_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-ip-prefix" }

// ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input
}

func (clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.YFilter }

func (clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask"
}

func (clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask" }

func (clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.parent = parent }

func (clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask.parent }

func (clearBgpInstanceBestpathAfiSafiIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input
type ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ip-addr-ip-netmask" }

// ClearBgpInstanceBestpathAfiSafiIpAddr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpAddr_Input
}

func (clearBgpInstanceBestpathAfiSafiIpAddr *ClearBgpInstanceBestpathAfiSafiIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiIpAddr.YFilter }

func (clearBgpInstanceBestpathAfiSafiIpAddr *ClearBgpInstanceBestpathAfiSafiIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiIpAddr.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiIpAddr *ClearBgpInstanceBestpathAfiSafiIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiIpAddr *ClearBgpInstanceBestpathAfiSafiIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-addr"
}

func (clearBgpInstanceBestpathAfiSafiIpAddr *ClearBgpInstanceBestpathAfiSafiIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiIpAddr *ClearBgpInstanceBestpathAfiSafiIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiIpAddr.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiIpAddr *ClearBgpInstanceBestpathAfiSafiIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiIpAddr *ClearBgpInstanceBestpathAfiSafiIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiIpAddr *ClearBgpInstanceBestpathAfiSafiIpAddr) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ip-addr" }

func (clearBgpInstanceBestpathAfiSafiIpAddr *ClearBgpInstanceBestpathAfiSafiIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiIpAddr *ClearBgpInstanceBestpathAfiSafiIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiIpAddr *ClearBgpInstanceBestpathAfiSafiIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiIpAddr *ClearBgpInstanceBestpathAfiSafiIpAddr) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiIpAddr.parent = parent }

func (clearBgpInstanceBestpathAfiSafiIpAddr *ClearBgpInstanceBestpathAfiSafiIpAddr) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiIpAddr.parent }

func (clearBgpInstanceBestpathAfiSafiIpAddr *ClearBgpInstanceBestpathAfiSafiIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiIpAddr_Input
type ClearBgpInstanceBestpathAfiSafiIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ip-addr" }

// ClearBgpInstanceBestpathAfiSafiIpPrefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpPrefix_Input
}

func (clearBgpInstanceBestpathAfiSafiIpPrefix *ClearBgpInstanceBestpathAfiSafiIpPrefix) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiIpPrefix.YFilter }

func (clearBgpInstanceBestpathAfiSafiIpPrefix *ClearBgpInstanceBestpathAfiSafiIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiIpPrefix.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiIpPrefix *ClearBgpInstanceBestpathAfiSafiIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiIpPrefix *ClearBgpInstanceBestpathAfiSafiIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ip-prefix"
}

func (clearBgpInstanceBestpathAfiSafiIpPrefix *ClearBgpInstanceBestpathAfiSafiIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiIpPrefix.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiIpPrefix *ClearBgpInstanceBestpathAfiSafiIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiIpPrefix.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiIpPrefix *ClearBgpInstanceBestpathAfiSafiIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiIpPrefix *ClearBgpInstanceBestpathAfiSafiIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiIpPrefix *ClearBgpInstanceBestpathAfiSafiIpPrefix) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ip-prefix" }

func (clearBgpInstanceBestpathAfiSafiIpPrefix *ClearBgpInstanceBestpathAfiSafiIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiIpPrefix *ClearBgpInstanceBestpathAfiSafiIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiIpPrefix *ClearBgpInstanceBestpathAfiSafiIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiIpPrefix *ClearBgpInstanceBestpathAfiSafiIpPrefix) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiIpPrefix.parent = parent }

func (clearBgpInstanceBestpathAfiSafiIpPrefix *ClearBgpInstanceBestpathAfiSafiIpPrefix) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiIpPrefix.parent }

func (clearBgpInstanceBestpathAfiSafiIpPrefix *ClearBgpInstanceBestpathAfiSafiIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiIpPrefix_Input
type ClearBgpInstanceBestpathAfiSafiIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiIpPrefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpPrefix_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ip-prefix" }

// ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.YFilter }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask"
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask" }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.parent = parent }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask.parent }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input
type ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "bridge-domain-name" { return "BridgeDomainName" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["bridge-domain-name"] = input.BridgeDomainName
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr-ip-netmask" }

// ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.YFilter }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr"
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr" }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.parent = parent }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr.parent }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input
type ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "bridge-domain-name" { return "BridgeDomainName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["bridge-domain-name"] = input.BridgeDomainName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-addr" }

// ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.YFilter }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix"
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix" }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.parent = parent }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix.parent }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input
type ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "bridge-domain-name" { return "BridgeDomainName" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["bridge-domain-name"] = input.BridgeDomainName
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpPrefix_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ip-prefix" }

// ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input
}

func (clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.YFilter }

func (clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask"
}

func (clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask" }

func (clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.parent = parent }

func (clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask.parent }

func (clearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input
type ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-ip-addr-ip-netmask" }

// ClearBgpInstanceBestpathAfiSafiRdIpAddr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input
}

func (clearBgpInstanceBestpathAfiSafiRdIpAddr *ClearBgpInstanceBestpathAfiSafiRdIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiRdIpAddr.YFilter }

func (clearBgpInstanceBestpathAfiSafiRdIpAddr *ClearBgpInstanceBestpathAfiSafiRdIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiRdIpAddr.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiRdIpAddr *ClearBgpInstanceBestpathAfiSafiRdIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiRdIpAddr *ClearBgpInstanceBestpathAfiSafiRdIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-addr"
}

func (clearBgpInstanceBestpathAfiSafiRdIpAddr *ClearBgpInstanceBestpathAfiSafiRdIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiRdIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiRdIpAddr *ClearBgpInstanceBestpathAfiSafiRdIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiRdIpAddr.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiRdIpAddr *ClearBgpInstanceBestpathAfiSafiRdIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiRdIpAddr *ClearBgpInstanceBestpathAfiSafiRdIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiRdIpAddr *ClearBgpInstanceBestpathAfiSafiRdIpAddr) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-ip-addr" }

func (clearBgpInstanceBestpathAfiSafiRdIpAddr *ClearBgpInstanceBestpathAfiSafiRdIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiRdIpAddr *ClearBgpInstanceBestpathAfiSafiRdIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiRdIpAddr *ClearBgpInstanceBestpathAfiSafiRdIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiRdIpAddr *ClearBgpInstanceBestpathAfiSafiRdIpAddr) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiRdIpAddr.parent = parent }

func (clearBgpInstanceBestpathAfiSafiRdIpAddr *ClearBgpInstanceBestpathAfiSafiRdIpAddr) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiRdIpAddr.parent }

func (clearBgpInstanceBestpathAfiSafiRdIpAddr *ClearBgpInstanceBestpathAfiSafiRdIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input
type ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-ip-addr" }

// ClearBgpInstanceBestpathAfiSafiRdIpPrefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input
}

func (clearBgpInstanceBestpathAfiSafiRdIpPrefix *ClearBgpInstanceBestpathAfiSafiRdIpPrefix) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiRdIpPrefix.YFilter }

func (clearBgpInstanceBestpathAfiSafiRdIpPrefix *ClearBgpInstanceBestpathAfiSafiRdIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiRdIpPrefix.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiRdIpPrefix *ClearBgpInstanceBestpathAfiSafiRdIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiRdIpPrefix *ClearBgpInstanceBestpathAfiSafiRdIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix"
}

func (clearBgpInstanceBestpathAfiSafiRdIpPrefix *ClearBgpInstanceBestpathAfiSafiRdIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiRdIpPrefix.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiRdIpPrefix *ClearBgpInstanceBestpathAfiSafiRdIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiRdIpPrefix.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiRdIpPrefix *ClearBgpInstanceBestpathAfiSafiRdIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiRdIpPrefix *ClearBgpInstanceBestpathAfiSafiRdIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiRdIpPrefix *ClearBgpInstanceBestpathAfiSafiRdIpPrefix) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix" }

func (clearBgpInstanceBestpathAfiSafiRdIpPrefix *ClearBgpInstanceBestpathAfiSafiRdIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiRdIpPrefix *ClearBgpInstanceBestpathAfiSafiRdIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiRdIpPrefix *ClearBgpInstanceBestpathAfiSafiRdIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiRdIpPrefix *ClearBgpInstanceBestpathAfiSafiRdIpPrefix) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiRdIpPrefix.parent = parent }

func (clearBgpInstanceBestpathAfiSafiRdIpPrefix *ClearBgpInstanceBestpathAfiSafiRdIpPrefix) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiRdIpPrefix.parent }

func (clearBgpInstanceBestpathAfiSafiRdIpPrefix *ClearBgpInstanceBestpathAfiSafiRdIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input
type ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpPrefix_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-ip-prefix" }

// ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input
}

func (clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.YFilter }

func (clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask"
}

func (clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask" }

func (clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.parent = parent }

func (clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask.parent }

func (clearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input
type ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-addr"] = input.Ipv4Addr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4AddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ipv4-addr-ipv4-mask" }

// ClearBgpInstanceBestpathAfiSafiIpv4Addr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpv4Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input
}

func (clearBgpInstanceBestpathAfiSafiIpv4Addr *ClearBgpInstanceBestpathAfiSafiIpv4Addr) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiIpv4Addr.YFilter }

func (clearBgpInstanceBestpathAfiSafiIpv4Addr *ClearBgpInstanceBestpathAfiSafiIpv4Addr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiIpv4Addr.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiIpv4Addr *ClearBgpInstanceBestpathAfiSafiIpv4Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiIpv4Addr *ClearBgpInstanceBestpathAfiSafiIpv4Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-addr"
}

func (clearBgpInstanceBestpathAfiSafiIpv4Addr *ClearBgpInstanceBestpathAfiSafiIpv4Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiIpv4Addr.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiIpv4Addr *ClearBgpInstanceBestpathAfiSafiIpv4Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiIpv4Addr.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiIpv4Addr *ClearBgpInstanceBestpathAfiSafiIpv4Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiIpv4Addr *ClearBgpInstanceBestpathAfiSafiIpv4Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiIpv4Addr *ClearBgpInstanceBestpathAfiSafiIpv4Addr) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ipv4-addr" }

func (clearBgpInstanceBestpathAfiSafiIpv4Addr *ClearBgpInstanceBestpathAfiSafiIpv4Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiIpv4Addr *ClearBgpInstanceBestpathAfiSafiIpv4Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiIpv4Addr *ClearBgpInstanceBestpathAfiSafiIpv4Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiIpv4Addr *ClearBgpInstanceBestpathAfiSafiIpv4Addr) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiIpv4Addr.parent = parent }

func (clearBgpInstanceBestpathAfiSafiIpv4Addr *ClearBgpInstanceBestpathAfiSafiIpv4Addr) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiIpv4Addr.parent }

func (clearBgpInstanceBestpathAfiSafiIpv4Addr *ClearBgpInstanceBestpathAfiSafiIpv4Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input
type ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-addr"] = input.Ipv4Addr
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Addr_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ipv4-addr" }

// ClearBgpInstanceBestpathAfiSafiIpv4Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input
}

func (clearBgpInstanceBestpathAfiSafiIpv4Prefix *ClearBgpInstanceBestpathAfiSafiIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiIpv4Prefix.YFilter }

func (clearBgpInstanceBestpathAfiSafiIpv4Prefix *ClearBgpInstanceBestpathAfiSafiIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiIpv4Prefix.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiIpv4Prefix *ClearBgpInstanceBestpathAfiSafiIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiIpv4Prefix *ClearBgpInstanceBestpathAfiSafiIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-prefix"
}

func (clearBgpInstanceBestpathAfiSafiIpv4Prefix *ClearBgpInstanceBestpathAfiSafiIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiIpv4Prefix.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiIpv4Prefix *ClearBgpInstanceBestpathAfiSafiIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiIpv4Prefix.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiIpv4Prefix *ClearBgpInstanceBestpathAfiSafiIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiIpv4Prefix *ClearBgpInstanceBestpathAfiSafiIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiIpv4Prefix *ClearBgpInstanceBestpathAfiSafiIpv4Prefix) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ipv4-prefix" }

func (clearBgpInstanceBestpathAfiSafiIpv4Prefix *ClearBgpInstanceBestpathAfiSafiIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiIpv4Prefix *ClearBgpInstanceBestpathAfiSafiIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiIpv4Prefix *ClearBgpInstanceBestpathAfiSafiIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiIpv4Prefix *ClearBgpInstanceBestpathAfiSafiIpv4Prefix) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiIpv4Prefix.parent = parent }

func (clearBgpInstanceBestpathAfiSafiIpv4Prefix *ClearBgpInstanceBestpathAfiSafiIpv4Prefix) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiIpv4Prefix.parent }

func (clearBgpInstanceBestpathAfiSafiIpv4Prefix *ClearBgpInstanceBestpathAfiSafiIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input
type ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network and masklength. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ipv4-prefix" }

// ClearBgpInstanceBestpathAfiSafiRdIpv4Addr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdIpv4Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4Addr *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiRdIpv4Addr.YFilter }

func (clearBgpInstanceBestpathAfiSafiRdIpv4Addr *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiRdIpv4Addr.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiRdIpv4Addr *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4Addr *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr"
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4Addr *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiRdIpv4Addr.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4Addr *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiRdIpv4Addr.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4Addr *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4Addr *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiRdIpv4Addr *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr" }

func (clearBgpInstanceBestpathAfiSafiRdIpv4Addr *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiRdIpv4Addr *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiRdIpv4Addr *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiRdIpv4Addr *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiRdIpv4Addr.parent = parent }

func (clearBgpInstanceBestpathAfiSafiRdIpv4Addr *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiRdIpv4Addr.parent }

func (clearBgpInstanceBestpathAfiSafiRdIpv4Addr *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input
type ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv4 MDT network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv4-addr"] = input.Ipv4Addr
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Addr_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr" }

// ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.YFilter }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr"
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr" }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.parent = parent }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiVrfIpv4Addr.parent }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input
type ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv4 MDT network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv4-addr"] = input.Ipv4Addr
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Addr_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr" }

// ClearBgpInstanceBestpathAfiSafiNetwork
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiNetwork_Input
}

func (clearBgpInstanceBestpathAfiSafiNetwork *ClearBgpInstanceBestpathAfiSafiNetwork) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiNetwork.YFilter }

func (clearBgpInstanceBestpathAfiSafiNetwork *ClearBgpInstanceBestpathAfiSafiNetwork) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiNetwork.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiNetwork *ClearBgpInstanceBestpathAfiSafiNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiNetwork *ClearBgpInstanceBestpathAfiSafiNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-network"
}

func (clearBgpInstanceBestpathAfiSafiNetwork *ClearBgpInstanceBestpathAfiSafiNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiNetwork.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiNetwork *ClearBgpInstanceBestpathAfiSafiNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiNetwork.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiNetwork *ClearBgpInstanceBestpathAfiSafiNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiNetwork *ClearBgpInstanceBestpathAfiSafiNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiNetwork *ClearBgpInstanceBestpathAfiSafiNetwork) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-network" }

func (clearBgpInstanceBestpathAfiSafiNetwork *ClearBgpInstanceBestpathAfiSafiNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiNetwork *ClearBgpInstanceBestpathAfiSafiNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiNetwork *ClearBgpInstanceBestpathAfiSafiNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiNetwork *ClearBgpInstanceBestpathAfiSafiNetwork) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiNetwork.parent = parent }

func (clearBgpInstanceBestpathAfiSafiNetwork *ClearBgpInstanceBestpathAfiSafiNetwork) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiNetwork.parent }

func (clearBgpInstanceBestpathAfiSafiNetwork *ClearBgpInstanceBestpathAfiSafiNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiNetwork_Input
type ClearBgpInstanceBestpathAfiSafiNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiNetwork_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiNetwork_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-network" }

// ClearBgpInstanceBestpathAfiSafiRdNetwork
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdNetwork_Input
}

func (clearBgpInstanceBestpathAfiSafiRdNetwork *ClearBgpInstanceBestpathAfiSafiRdNetwork) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiRdNetwork.YFilter }

func (clearBgpInstanceBestpathAfiSafiRdNetwork *ClearBgpInstanceBestpathAfiSafiRdNetwork) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiRdNetwork.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiRdNetwork *ClearBgpInstanceBestpathAfiSafiRdNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiRdNetwork *ClearBgpInstanceBestpathAfiSafiRdNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-network"
}

func (clearBgpInstanceBestpathAfiSafiRdNetwork *ClearBgpInstanceBestpathAfiSafiRdNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiRdNetwork.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiRdNetwork *ClearBgpInstanceBestpathAfiSafiRdNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiRdNetwork.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiRdNetwork *ClearBgpInstanceBestpathAfiSafiRdNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiRdNetwork *ClearBgpInstanceBestpathAfiSafiRdNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiRdNetwork *ClearBgpInstanceBestpathAfiSafiRdNetwork) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-network" }

func (clearBgpInstanceBestpathAfiSafiRdNetwork *ClearBgpInstanceBestpathAfiSafiRdNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiRdNetwork *ClearBgpInstanceBestpathAfiSafiRdNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiRdNetwork *ClearBgpInstanceBestpathAfiSafiRdNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiRdNetwork *ClearBgpInstanceBestpathAfiSafiRdNetwork) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiRdNetwork.parent = parent }

func (clearBgpInstanceBestpathAfiSafiRdNetwork *ClearBgpInstanceBestpathAfiSafiRdNetwork) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiRdNetwork.parent }

func (clearBgpInstanceBestpathAfiSafiRdNetwork *ClearBgpInstanceBestpathAfiSafiRdNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiRdNetwork_Input
type ClearBgpInstanceBestpathAfiSafiRdNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiRdNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiRdNetwork_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiRdNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiRdNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiRdNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiRdNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiRdNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiRdNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiRdNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiRdNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiRdNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiRdNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdNetwork_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-network" }

// ClearBgpInstanceBestpathAfiSafiVrfNetwork
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathAfiSafiVrfNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input
}

func (clearBgpInstanceBestpathAfiSafiVrfNetwork *ClearBgpInstanceBestpathAfiSafiVrfNetwork) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiVrfNetwork.YFilter }

func (clearBgpInstanceBestpathAfiSafiVrfNetwork *ClearBgpInstanceBestpathAfiSafiVrfNetwork) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiVrfNetwork.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiVrfNetwork *ClearBgpInstanceBestpathAfiSafiVrfNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiVrfNetwork *ClearBgpInstanceBestpathAfiSafiVrfNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-network"
}

func (clearBgpInstanceBestpathAfiSafiVrfNetwork *ClearBgpInstanceBestpathAfiSafiVrfNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiVrfNetwork.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiVrfNetwork *ClearBgpInstanceBestpathAfiSafiVrfNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiVrfNetwork.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiVrfNetwork *ClearBgpInstanceBestpathAfiSafiVrfNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiVrfNetwork *ClearBgpInstanceBestpathAfiSafiVrfNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiVrfNetwork *ClearBgpInstanceBestpathAfiSafiVrfNetwork) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-vrf-network" }

func (clearBgpInstanceBestpathAfiSafiVrfNetwork *ClearBgpInstanceBestpathAfiSafiVrfNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiVrfNetwork *ClearBgpInstanceBestpathAfiSafiVrfNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiVrfNetwork *ClearBgpInstanceBestpathAfiSafiVrfNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiVrfNetwork *ClearBgpInstanceBestpathAfiSafiVrfNetwork) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiVrfNetwork.parent = parent }

func (clearBgpInstanceBestpathAfiSafiVrfNetwork *ClearBgpInstanceBestpathAfiSafiVrfNetwork) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiVrfNetwork.parent }

func (clearBgpInstanceBestpathAfiSafiVrfNetwork *ClearBgpInstanceBestpathAfiSafiVrfNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input
type ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiVrfNetwork_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-vrf-network" }

// ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input
}

func (clearBgpInstanceBestpathAfiSafiRtConstraintNetwork *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.YFilter }

func (clearBgpInstanceBestpathAfiSafiRtConstraintNetwork *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiRtConstraintNetwork *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiRtConstraintNetwork *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rt-constraint-network"
}

func (clearBgpInstanceBestpathAfiSafiRtConstraintNetwork *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiRtConstraintNetwork *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiRtConstraintNetwork *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiRtConstraintNetwork *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiRtConstraintNetwork *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rt-constraint-network" }

func (clearBgpInstanceBestpathAfiSafiRtConstraintNetwork *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiRtConstraintNetwork *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiRtConstraintNetwork *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiRtConstraintNetwork *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.parent = parent }

func (clearBgpInstanceBestpathAfiSafiRtConstraintNetwork *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiRtConstraintNetwork.parent }

func (clearBgpInstanceBestpathAfiSafiRtConstraintNetwork *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input
type ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // RT-Constraint network. The type is string. This attribute is mandatory.
    RtConstraintNetwork interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rt-constraint-network" { return "RtConstraintNetwork" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rt-constraint-network"] = input.RtConstraintNetwork
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiRtConstraintNetwork_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rt-constraint-network" }

// ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input
}

func (clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.YFilter }

func (clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network"
}

func (clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network" }

func (clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.parent = parent }

func (clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork.parent }

func (clearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input
type ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Tunnel network <Tunnel-ID>:<IPv4 Address>. The type is string. This
    // attribute is mandatory.
    Ipv4TunnelNetwork interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-tunnel-network" { return "Ipv4TunnelNetwork" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-tunnel-network"] = input.Ipv4TunnelNetwork
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpv4TunnelNetwork_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ipv4-tunnel-network" }

// ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input
}

func (clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.YFilter }

func (clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask"
}

func (clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask" }

func (clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.parent = parent }

func (clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask.parent }

func (clearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input
type ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    if yname == "ipv6-netmask" { return "Ipv6Netmask" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-addr"] = input.Ipv6Addr
    leafs["ipv6-netmask"] = input.Ipv6Netmask
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6AddrIpv6Netmask_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ipv6-addr-ipv6-netmask" }

// ClearBgpInstanceBestpathAfiSafiIpv6Addr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpv6Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input
}

func (clearBgpInstanceBestpathAfiSafiIpv6Addr *ClearBgpInstanceBestpathAfiSafiIpv6Addr) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiIpv6Addr.YFilter }

func (clearBgpInstanceBestpathAfiSafiIpv6Addr *ClearBgpInstanceBestpathAfiSafiIpv6Addr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiIpv6Addr.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiIpv6Addr *ClearBgpInstanceBestpathAfiSafiIpv6Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiIpv6Addr *ClearBgpInstanceBestpathAfiSafiIpv6Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-addr"
}

func (clearBgpInstanceBestpathAfiSafiIpv6Addr *ClearBgpInstanceBestpathAfiSafiIpv6Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiIpv6Addr.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiIpv6Addr *ClearBgpInstanceBestpathAfiSafiIpv6Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiIpv6Addr.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiIpv6Addr *ClearBgpInstanceBestpathAfiSafiIpv6Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiIpv6Addr *ClearBgpInstanceBestpathAfiSafiIpv6Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiIpv6Addr *ClearBgpInstanceBestpathAfiSafiIpv6Addr) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ipv6-addr" }

func (clearBgpInstanceBestpathAfiSafiIpv6Addr *ClearBgpInstanceBestpathAfiSafiIpv6Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiIpv6Addr *ClearBgpInstanceBestpathAfiSafiIpv6Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiIpv6Addr *ClearBgpInstanceBestpathAfiSafiIpv6Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiIpv6Addr *ClearBgpInstanceBestpathAfiSafiIpv6Addr) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiIpv6Addr.parent = parent }

func (clearBgpInstanceBestpathAfiSafiIpv6Addr *ClearBgpInstanceBestpathAfiSafiIpv6Addr) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiIpv6Addr.parent }

func (clearBgpInstanceBestpathAfiSafiIpv6Addr *ClearBgpInstanceBestpathAfiSafiIpv6Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input
type ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-addr"] = input.Ipv6Addr
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Addr_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ipv6-addr" }

// ClearBgpInstanceBestpathAfiSafiIpv6Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input
}

func (clearBgpInstanceBestpathAfiSafiIpv6Prefix *ClearBgpInstanceBestpathAfiSafiIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiIpv6Prefix.YFilter }

func (clearBgpInstanceBestpathAfiSafiIpv6Prefix *ClearBgpInstanceBestpathAfiSafiIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiIpv6Prefix.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiIpv6Prefix *ClearBgpInstanceBestpathAfiSafiIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiIpv6Prefix *ClearBgpInstanceBestpathAfiSafiIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-ipv6-prefix"
}

func (clearBgpInstanceBestpathAfiSafiIpv6Prefix *ClearBgpInstanceBestpathAfiSafiIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiIpv6Prefix.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiIpv6Prefix *ClearBgpInstanceBestpathAfiSafiIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiIpv6Prefix.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiIpv6Prefix *ClearBgpInstanceBestpathAfiSafiIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiIpv6Prefix *ClearBgpInstanceBestpathAfiSafiIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiIpv6Prefix *ClearBgpInstanceBestpathAfiSafiIpv6Prefix) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ipv6-prefix" }

func (clearBgpInstanceBestpathAfiSafiIpv6Prefix *ClearBgpInstanceBestpathAfiSafiIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiIpv6Prefix *ClearBgpInstanceBestpathAfiSafiIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiIpv6Prefix *ClearBgpInstanceBestpathAfiSafiIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiIpv6Prefix *ClearBgpInstanceBestpathAfiSafiIpv6Prefix) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiIpv6Prefix.parent = parent }

func (clearBgpInstanceBestpathAfiSafiIpv6Prefix *ClearBgpInstanceBestpathAfiSafiIpv6Prefix) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiIpv6Prefix.parent }

func (clearBgpInstanceBestpathAfiSafiIpv6Prefix *ClearBgpInstanceBestpathAfiSafiIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input
type ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-ipv6-prefix" }

// ClearBgpInstanceBestpathAfiSafiRd
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRd_Input
}

func (clearBgpInstanceBestpathAfiSafiRd *ClearBgpInstanceBestpathAfiSafiRd) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiRd.YFilter }

func (clearBgpInstanceBestpathAfiSafiRd *ClearBgpInstanceBestpathAfiSafiRd) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiRd.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiRd *ClearBgpInstanceBestpathAfiSafiRd) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiRd *ClearBgpInstanceBestpathAfiSafiRd) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd"
}

func (clearBgpInstanceBestpathAfiSafiRd *ClearBgpInstanceBestpathAfiSafiRd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiRd.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiRd *ClearBgpInstanceBestpathAfiSafiRd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiRd.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiRd *ClearBgpInstanceBestpathAfiSafiRd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiRd *ClearBgpInstanceBestpathAfiSafiRd) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiRd *ClearBgpInstanceBestpathAfiSafiRd) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd" }

func (clearBgpInstanceBestpathAfiSafiRd *ClearBgpInstanceBestpathAfiSafiRd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiRd *ClearBgpInstanceBestpathAfiSafiRd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiRd *ClearBgpInstanceBestpathAfiSafiRd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiRd *ClearBgpInstanceBestpathAfiSafiRd) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiRd.parent = parent }

func (clearBgpInstanceBestpathAfiSafiRd *ClearBgpInstanceBestpathAfiSafiRd) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiRd.parent }

func (clearBgpInstanceBestpathAfiSafiRd *ClearBgpInstanceBestpathAfiSafiRd) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiRd_Input
type ClearBgpInstanceBestpathAfiSafiRd_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRd_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiRd_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiRd_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiRd_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiRd_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiRd_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiRd_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiRd_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiRd_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiRd_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiRd_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiRd_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiRd_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiRd_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiRd_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd" }

// ClearBgpInstanceBestpathAfiSafiVrf
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathAfiSafiVrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiVrf_Input
}

func (clearBgpInstanceBestpathAfiSafiVrf *ClearBgpInstanceBestpathAfiSafiVrf) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiVrf.YFilter }

func (clearBgpInstanceBestpathAfiSafiVrf *ClearBgpInstanceBestpathAfiSafiVrf) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiVrf.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiVrf *ClearBgpInstanceBestpathAfiSafiVrf) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiVrf *ClearBgpInstanceBestpathAfiSafiVrf) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf"
}

func (clearBgpInstanceBestpathAfiSafiVrf *ClearBgpInstanceBestpathAfiSafiVrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiVrf.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiVrf *ClearBgpInstanceBestpathAfiSafiVrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiVrf.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiVrf *ClearBgpInstanceBestpathAfiSafiVrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiVrf *ClearBgpInstanceBestpathAfiSafiVrf) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiVrf *ClearBgpInstanceBestpathAfiSafiVrf) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-vrf" }

func (clearBgpInstanceBestpathAfiSafiVrf *ClearBgpInstanceBestpathAfiSafiVrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiVrf *ClearBgpInstanceBestpathAfiSafiVrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiVrf *ClearBgpInstanceBestpathAfiSafiVrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiVrf *ClearBgpInstanceBestpathAfiSafiVrf) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiVrf.parent = parent }

func (clearBgpInstanceBestpathAfiSafiVrf *ClearBgpInstanceBestpathAfiSafiVrf) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiVrf.parent }

func (clearBgpInstanceBestpathAfiSafiVrf *ClearBgpInstanceBestpathAfiSafiVrf) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiVrf_Input
type ClearBgpInstanceBestpathAfiSafiVrf_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiVrf_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiVrf_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiVrf_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiVrf_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiVrf_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiVrf_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiVrf_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiVrf_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiVrf_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiVrf_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiVrf_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiVrf_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiVrf_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiVrf_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiVrf_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-vrf" }

// ClearBgpInstanceBestpathAfiSafi
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafi_Input
}

func (clearBgpInstanceBestpathAfiSafi *ClearBgpInstanceBestpathAfiSafi) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafi.YFilter }

func (clearBgpInstanceBestpathAfiSafi *ClearBgpInstanceBestpathAfiSafi) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafi.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafi *ClearBgpInstanceBestpathAfiSafi) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafi *ClearBgpInstanceBestpathAfiSafi) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi"
}

func (clearBgpInstanceBestpathAfiSafi *ClearBgpInstanceBestpathAfiSafi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafi.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafi *ClearBgpInstanceBestpathAfiSafi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafi.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafi *ClearBgpInstanceBestpathAfiSafi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafi *ClearBgpInstanceBestpathAfiSafi) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafi *ClearBgpInstanceBestpathAfiSafi) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi" }

func (clearBgpInstanceBestpathAfiSafi *ClearBgpInstanceBestpathAfiSafi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafi *ClearBgpInstanceBestpathAfiSafi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafi *ClearBgpInstanceBestpathAfiSafi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafi *ClearBgpInstanceBestpathAfiSafi) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafi.parent = parent }

func (clearBgpInstanceBestpathAfiSafi *ClearBgpInstanceBestpathAfiSafi) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafi.parent }

func (clearBgpInstanceBestpathAfiSafi *ClearBgpInstanceBestpathAfiSafi) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafi_Input
type ClearBgpInstanceBestpathAfiSafi_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafi_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafi_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafi_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafi_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafi_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafi_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafi_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafi_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafi_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafi_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafi_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafi_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafi_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafi_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafi_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi" }

// ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// 
type ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input
}

func (clearBgpInstanceBestpathAfiSafiSrPolicyPrefix *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.YFilter }

func (clearBgpInstanceBestpathAfiSafiSrPolicyPrefix *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiSrPolicyPrefix *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiSrPolicyPrefix *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix"
}

func (clearBgpInstanceBestpathAfiSafiSrPolicyPrefix *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiSrPolicyPrefix *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiSrPolicyPrefix *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiSrPolicyPrefix *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiSrPolicyPrefix *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix" }

func (clearBgpInstanceBestpathAfiSafiSrPolicyPrefix *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiSrPolicyPrefix *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiSrPolicyPrefix *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiSrPolicyPrefix *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.parent = parent }

func (clearBgpInstanceBestpathAfiSafiSrPolicyPrefix *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiSrPolicyPrefix.parent }

func (clearBgpInstanceBestpathAfiSafiSrPolicyPrefix *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input
type ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // SR Policy prefix. The type is string. This attribute is mandatory.
    SrPolicyPrefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "sr-policy-prefix" { return "SrPolicyPrefix" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["sr-policy-prefix"] = input.SrPolicyPrefix
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiSrPolicyPrefix_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-sr-policy-prefix" }

// ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.YFilter }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix"
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix" }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.parent = parent }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix.parent }

func (clearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input
type ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // L2VPN EVPN Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "bridge-domain-name" { return "BridgeDomainName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["bridge-domain-name"] = input.BridgeDomainName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiBridgeDomainIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-bridge-domain-ipv4-prefix" }

// ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.YFilter }

func (clearBgpInstanceBestpathAfiSafiRdIpv4Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiRdIpv4Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix"
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiRdIpv4Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix" }

func (clearBgpInstanceBestpathAfiSafiRdIpv4Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiRdIpv4Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiRdIpv4Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiRdIpv4Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.parent = parent }

func (clearBgpInstanceBestpathAfiSafiRdIpv4Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiRdIpv4Prefix.parent }

func (clearBgpInstanceBestpathAfiSafiRdIpv4Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input
type ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // L2VPN EVPN Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-prefix" }

// ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified Xconnect group:MP2MP.
// 
type ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix_Input
}

func (clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix.YFilter }

func (clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix"
}

func (clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix" }

func (clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix.parent = parent }

func (clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix.parent }

func (clearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix_Input
type ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Xconnect Group:mp2mp. The type is string. This attribute is mandatory.
    Mp2Mp interface{}

    // L2VPN VPWS Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "mp2mp" { return "Mp2Mp" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["mp2mp"] = input.Mp2Mp
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiMp2MpIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-mp2mp-ipv4-prefix" }

// ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.YFilter }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix"
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix" }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.parent = parent }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix.parent }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input
type ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // VPN Fspec Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-prefix" }

// ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.YFilter }

func (clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask"
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask" }

func (clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.parent = parent }

func (clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask.parent }

func (clearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input
type ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv4-addr"] = input.Ipv4Addr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv4AddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-ipv4-addr-ipv4-mask" }

// ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.YFilter }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask"
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask" }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.parent = parent }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask.parent }

func (clearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input
type ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv4-addr"] = input.Ipv4Addr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv4AddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-vrf-ipv4-addr-ipv4-mask" }

// ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.YFilter }

func (clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask"
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask" }

func (clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.parent = parent }

func (clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask.parent }

func (clearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input
type ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    if yname == "ipv6-netmask" { return "Ipv6Netmask" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv6-addr"] = input.Ipv6Addr
    leafs["ipv6-netmask"] = input.Ipv6Netmask
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6AddrIpv6Netmask_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr-ipv6-netmask" }

// ClearBgpInstanceBestpathAfiSafiRdIpv6Addr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdIpv6Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6Addr *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiRdIpv6Addr.YFilter }

func (clearBgpInstanceBestpathAfiSafiRdIpv6Addr *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiRdIpv6Addr.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiRdIpv6Addr *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6Addr *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr"
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6Addr *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiRdIpv6Addr.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6Addr *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiRdIpv6Addr.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6Addr *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6Addr *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiRdIpv6Addr *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr" }

func (clearBgpInstanceBestpathAfiSafiRdIpv6Addr *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiRdIpv6Addr *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiRdIpv6Addr *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiRdIpv6Addr *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiRdIpv6Addr.parent = parent }

func (clearBgpInstanceBestpathAfiSafiRdIpv6Addr *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiRdIpv6Addr.parent }

func (clearBgpInstanceBestpathAfiSafiRdIpv6Addr *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input
type ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv6-addr"] = input.Ipv6Addr
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Addr_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-addr" }

// ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.YFilter }

func (clearBgpInstanceBestpathAfiSafiRdIpv6Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiRdIpv6Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix"
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiRdIpv6Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiRdIpv6Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix" }

func (clearBgpInstanceBestpathAfiSafiRdIpv6Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiRdIpv6Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiRdIpv6Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiRdIpv6Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.parent = parent }

func (clearBgpInstanceBestpathAfiSafiRdIpv6Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiRdIpv6Prefix.parent }

func (clearBgpInstanceBestpathAfiSafiRdIpv6Prefix *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input
type ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiRdIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-rd-ipv6-prefix" }

// ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.YFilter }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask"
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask" }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.parent = parent }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask.parent }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input
type ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    if yname == "ipv6-netmask" { return "Ipv6Netmask" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv6-addr"] = input.Ipv6Addr
    leafs["ipv6-netmask"] = input.Ipv6Netmask
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr-ipv6-netmask" }

// ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.YFilter }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr"
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr" }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.parent = parent }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiVrfIpv6Addr.parent }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Addr *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input
type ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv6-addr"] = input.Ipv6Addr
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Addr_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-addr" }

// ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.YFilter }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.YFilter = yf }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix"
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.Input
    }
    return nil
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.Input
    return children
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix) GetYangName() string { return "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix" }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix) SetParent(parent types.Entity) { clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.parent = parent }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix) GetParent() types.Entity { return clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix.parent }

func (clearBgpInstanceBestpathAfiSafiVrfIpv6Prefix *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input
type ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathAfiSafiVrfIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-afi-safi-vrf-ipv6-prefix" }

// ClearBgpInstanceBestpathVrfIpAddrIpNetmask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input
}

func (clearBgpInstanceBestpathVrfIpAddrIpNetmask *ClearBgpInstanceBestpathVrfIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathVrfIpAddrIpNetmask.YFilter }

func (clearBgpInstanceBestpathVrfIpAddrIpNetmask *ClearBgpInstanceBestpathVrfIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathVrfIpAddrIpNetmask.YFilter = yf }

func (clearBgpInstanceBestpathVrfIpAddrIpNetmask *ClearBgpInstanceBestpathVrfIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathVrfIpAddrIpNetmask *ClearBgpInstanceBestpathVrfIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask"
}

func (clearBgpInstanceBestpathVrfIpAddrIpNetmask *ClearBgpInstanceBestpathVrfIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathVrfIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpInstanceBestpathVrfIpAddrIpNetmask *ClearBgpInstanceBestpathVrfIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathVrfIpAddrIpNetmask.Input
    return children
}

func (clearBgpInstanceBestpathVrfIpAddrIpNetmask *ClearBgpInstanceBestpathVrfIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathVrfIpAddrIpNetmask *ClearBgpInstanceBestpathVrfIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathVrfIpAddrIpNetmask *ClearBgpInstanceBestpathVrfIpAddrIpNetmask) GetYangName() string { return "clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask" }

func (clearBgpInstanceBestpathVrfIpAddrIpNetmask *ClearBgpInstanceBestpathVrfIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathVrfIpAddrIpNetmask *ClearBgpInstanceBestpathVrfIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathVrfIpAddrIpNetmask *ClearBgpInstanceBestpathVrfIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathVrfIpAddrIpNetmask *ClearBgpInstanceBestpathVrfIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpInstanceBestpathVrfIpAddrIpNetmask.parent = parent }

func (clearBgpInstanceBestpathVrfIpAddrIpNetmask *ClearBgpInstanceBestpathVrfIpAddrIpNetmask) GetParent() types.Entity { return clearBgpInstanceBestpathVrfIpAddrIpNetmask.parent }

func (clearBgpInstanceBestpathVrfIpAddrIpNetmask *ClearBgpInstanceBestpathVrfIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input
type ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathVrfIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-vrf-ip-addr-ip-netmask" }

// ClearBgpInstanceBestpathVrfIpAddr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfIpAddr_Input
}

func (clearBgpInstanceBestpathVrfIpAddr *ClearBgpInstanceBestpathVrfIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathVrfIpAddr.YFilter }

func (clearBgpInstanceBestpathVrfIpAddr *ClearBgpInstanceBestpathVrfIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathVrfIpAddr.YFilter = yf }

func (clearBgpInstanceBestpathVrfIpAddr *ClearBgpInstanceBestpathVrfIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathVrfIpAddr *ClearBgpInstanceBestpathVrfIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-addr"
}

func (clearBgpInstanceBestpathVrfIpAddr *ClearBgpInstanceBestpathVrfIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathVrfIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceBestpathVrfIpAddr *ClearBgpInstanceBestpathVrfIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathVrfIpAddr.Input
    return children
}

func (clearBgpInstanceBestpathVrfIpAddr *ClearBgpInstanceBestpathVrfIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathVrfIpAddr *ClearBgpInstanceBestpathVrfIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathVrfIpAddr *ClearBgpInstanceBestpathVrfIpAddr) GetYangName() string { return "clear-bgp-instance-bestpath-vrf-ip-addr" }

func (clearBgpInstanceBestpathVrfIpAddr *ClearBgpInstanceBestpathVrfIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathVrfIpAddr *ClearBgpInstanceBestpathVrfIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathVrfIpAddr *ClearBgpInstanceBestpathVrfIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathVrfIpAddr *ClearBgpInstanceBestpathVrfIpAddr) SetParent(parent types.Entity) { clearBgpInstanceBestpathVrfIpAddr.parent = parent }

func (clearBgpInstanceBestpathVrfIpAddr *ClearBgpInstanceBestpathVrfIpAddr) GetParent() types.Entity { return clearBgpInstanceBestpathVrfIpAddr.parent }

func (clearBgpInstanceBestpathVrfIpAddr *ClearBgpInstanceBestpathVrfIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathVrfIpAddr_Input
type ClearBgpInstanceBestpathVrfIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceBestpathVrfIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathVrfIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathVrfIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceBestpathVrfIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathVrfIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathVrfIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathVrfIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceBestpathVrfIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathVrfIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathVrfIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathVrfIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathVrfIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathVrfIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathVrfIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathVrfIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-vrf-ip-addr" }

// ClearBgpInstanceBestpathVrfIpPrefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfIpPrefix_Input
}

func (clearBgpInstanceBestpathVrfIpPrefix *ClearBgpInstanceBestpathVrfIpPrefix) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathVrfIpPrefix.YFilter }

func (clearBgpInstanceBestpathVrfIpPrefix *ClearBgpInstanceBestpathVrfIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathVrfIpPrefix.YFilter = yf }

func (clearBgpInstanceBestpathVrfIpPrefix *ClearBgpInstanceBestpathVrfIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathVrfIpPrefix *ClearBgpInstanceBestpathVrfIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-ip-prefix"
}

func (clearBgpInstanceBestpathVrfIpPrefix *ClearBgpInstanceBestpathVrfIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathVrfIpPrefix.Input
    }
    return nil
}

func (clearBgpInstanceBestpathVrfIpPrefix *ClearBgpInstanceBestpathVrfIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathVrfIpPrefix.Input
    return children
}

func (clearBgpInstanceBestpathVrfIpPrefix *ClearBgpInstanceBestpathVrfIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathVrfIpPrefix *ClearBgpInstanceBestpathVrfIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathVrfIpPrefix *ClearBgpInstanceBestpathVrfIpPrefix) GetYangName() string { return "clear-bgp-instance-bestpath-vrf-ip-prefix" }

func (clearBgpInstanceBestpathVrfIpPrefix *ClearBgpInstanceBestpathVrfIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathVrfIpPrefix *ClearBgpInstanceBestpathVrfIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathVrfIpPrefix *ClearBgpInstanceBestpathVrfIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathVrfIpPrefix *ClearBgpInstanceBestpathVrfIpPrefix) SetParent(parent types.Entity) { clearBgpInstanceBestpathVrfIpPrefix.parent = parent }

func (clearBgpInstanceBestpathVrfIpPrefix *ClearBgpInstanceBestpathVrfIpPrefix) GetParent() types.Entity { return clearBgpInstanceBestpathVrfIpPrefix.parent }

func (clearBgpInstanceBestpathVrfIpPrefix *ClearBgpInstanceBestpathVrfIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathVrfIpPrefix_Input
type ClearBgpInstanceBestpathVrfIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceBestpathVrfIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathVrfIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathVrfIpPrefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpInstanceBestpathVrfIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathVrfIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathVrfIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathVrfIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpInstanceBestpathVrfIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathVrfIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathVrfIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathVrfIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathVrfIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathVrfIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathVrfIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathVrfIpPrefix_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-vrf-ip-prefix" }

// ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.YFilter }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.YFilter = yf }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix"
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.Input
    }
    return nil
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.Input
    return children
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix) GetYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix" }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix) SetParent(parent types.Entity) { clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.parent = parent }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix) GetParent() types.Entity { return clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix.parent }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input
type ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Fspec IPv4 Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-prefix" }

// ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.YFilter }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.YFilter = yf }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask"
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.Input
    return children
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask" }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask) SetParent(parent types.Entity) { clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.parent = parent }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetParent() types.Entity { return clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask.parent }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input
type ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-addr"] = input.Ipv4Addr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4AddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr-ipv4-mask" }

// ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.YFilter }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.YFilter = yf }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr"
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.Input
    }
    return nil
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.Input
    return children
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr) GetYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr" }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr) SetParent(parent types.Entity) { clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.parent = parent }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr) GetParent() types.Entity { return clearBgpInstanceBestpathVrfAfiSafiIpv4Addr.parent }

func (clearBgpInstanceBestpathVrfAfiSafiIpv4Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input
type ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    return ""
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-addr"] = input.Ipv4Addr
    return leafs
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv4Addr_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-ipv4-addr" }

// ClearBgpInstanceBestpathVrfAfiSafiNetwork
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafiNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiNetwork *ClearBgpInstanceBestpathVrfAfiSafiNetwork) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathVrfAfiSafiNetwork.YFilter }

func (clearBgpInstanceBestpathVrfAfiSafiNetwork *ClearBgpInstanceBestpathVrfAfiSafiNetwork) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathVrfAfiSafiNetwork.YFilter = yf }

func (clearBgpInstanceBestpathVrfAfiSafiNetwork *ClearBgpInstanceBestpathVrfAfiSafiNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathVrfAfiSafiNetwork *ClearBgpInstanceBestpathVrfAfiSafiNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-network"
}

func (clearBgpInstanceBestpathVrfAfiSafiNetwork *ClearBgpInstanceBestpathVrfAfiSafiNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathVrfAfiSafiNetwork.Input
    }
    return nil
}

func (clearBgpInstanceBestpathVrfAfiSafiNetwork *ClearBgpInstanceBestpathVrfAfiSafiNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathVrfAfiSafiNetwork.Input
    return children
}

func (clearBgpInstanceBestpathVrfAfiSafiNetwork *ClearBgpInstanceBestpathVrfAfiSafiNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathVrfAfiSafiNetwork *ClearBgpInstanceBestpathVrfAfiSafiNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathVrfAfiSafiNetwork *ClearBgpInstanceBestpathVrfAfiSafiNetwork) GetYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-network" }

func (clearBgpInstanceBestpathVrfAfiSafiNetwork *ClearBgpInstanceBestpathVrfAfiSafiNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathVrfAfiSafiNetwork *ClearBgpInstanceBestpathVrfAfiSafiNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathVrfAfiSafiNetwork *ClearBgpInstanceBestpathVrfAfiSafiNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathVrfAfiSafiNetwork *ClearBgpInstanceBestpathVrfAfiSafiNetwork) SetParent(parent types.Entity) { clearBgpInstanceBestpathVrfAfiSafiNetwork.parent = parent }

func (clearBgpInstanceBestpathVrfAfiSafiNetwork *ClearBgpInstanceBestpathVrfAfiSafiNetwork) GetParent() types.Entity { return clearBgpInstanceBestpathVrfAfiSafiNetwork.parent }

func (clearBgpInstanceBestpathVrfAfiSafiNetwork *ClearBgpInstanceBestpathVrfAfiSafiNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input
type ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiNetwork_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-network" }

// ClearBgpInstanceBestpathVrfAfiSafiRdNetwork
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathVrfAfiSafiRdNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiRdNetwork *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathVrfAfiSafiRdNetwork.YFilter }

func (clearBgpInstanceBestpathVrfAfiSafiRdNetwork *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathVrfAfiSafiRdNetwork.YFilter = yf }

func (clearBgpInstanceBestpathVrfAfiSafiRdNetwork *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathVrfAfiSafiRdNetwork *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd-network"
}

func (clearBgpInstanceBestpathVrfAfiSafiRdNetwork *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathVrfAfiSafiRdNetwork.Input
    }
    return nil
}

func (clearBgpInstanceBestpathVrfAfiSafiRdNetwork *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathVrfAfiSafiRdNetwork.Input
    return children
}

func (clearBgpInstanceBestpathVrfAfiSafiRdNetwork *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathVrfAfiSafiRdNetwork *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathVrfAfiSafiRdNetwork *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork) GetYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-rd-network" }

func (clearBgpInstanceBestpathVrfAfiSafiRdNetwork *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathVrfAfiSafiRdNetwork *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathVrfAfiSafiRdNetwork *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathVrfAfiSafiRdNetwork *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork) SetParent(parent types.Entity) { clearBgpInstanceBestpathVrfAfiSafiRdNetwork.parent = parent }

func (clearBgpInstanceBestpathVrfAfiSafiRdNetwork *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork) GetParent() types.Entity { return clearBgpInstanceBestpathVrfAfiSafiRdNetwork.parent }

func (clearBgpInstanceBestpathVrfAfiSafiRdNetwork *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input
type ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiRdNetwork_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-rd-network" }

// ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiVrfNetwork *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.YFilter }

func (clearBgpInstanceBestpathVrfAfiSafiVrfNetwork *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.YFilter = yf }

func (clearBgpInstanceBestpathVrfAfiSafiVrfNetwork *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathVrfAfiSafiVrfNetwork *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network"
}

func (clearBgpInstanceBestpathVrfAfiSafiVrfNetwork *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.Input
    }
    return nil
}

func (clearBgpInstanceBestpathVrfAfiSafiVrfNetwork *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.Input
    return children
}

func (clearBgpInstanceBestpathVrfAfiSafiVrfNetwork *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathVrfAfiSafiVrfNetwork *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathVrfAfiSafiVrfNetwork *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork) GetYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network" }

func (clearBgpInstanceBestpathVrfAfiSafiVrfNetwork *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathVrfAfiSafiVrfNetwork *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathVrfAfiSafiVrfNetwork *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathVrfAfiSafiVrfNetwork *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork) SetParent(parent types.Entity) { clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.parent = parent }

func (clearBgpInstanceBestpathVrfAfiSafiVrfNetwork *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork) GetParent() types.Entity { return clearBgpInstanceBestpathVrfAfiSafiVrfNetwork.parent }

func (clearBgpInstanceBestpathVrfAfiSafiVrfNetwork *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input
type ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrfNetwork_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-vrf-network" }

// ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.YFilter }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.YFilter = yf }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask"
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input
    }
    return nil
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.Input
    return children
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask" }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask) SetParent(parent types.Entity) { clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.parent = parent }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetParent() types.Entity { return clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask.parent }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input
type ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    if yname == "ipv6-netmask" { return "Ipv6Netmask" }
    return ""
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-addr"] = input.Ipv6Addr
    leafs["ipv6-netmask"] = input.Ipv6Netmask
    return leafs
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr-ipv6-netmask" }

// ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.YFilter }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.YFilter = yf }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr"
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.Input
    }
    return nil
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.Input
    return children
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr) GetYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr" }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr) SetParent(parent types.Entity) { clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.parent = parent }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr) GetParent() types.Entity { return clearBgpInstanceBestpathVrfAfiSafiIpv6Addr.parent }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Addr *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input
type ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    return ""
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-addr"] = input.Ipv6Addr
    return leafs
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Addr_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-addr" }

// ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.YFilter }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.YFilter = yf }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix"
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.Input
    }
    return nil
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.Input
    return children
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix) GetYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix" }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix) SetParent(parent types.Entity) { clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.parent = parent }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix) GetParent() types.Entity { return clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix.parent }

func (clearBgpInstanceBestpathVrfAfiSafiIpv6Prefix *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input
type ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-ipv6-prefix" }

// ClearBgpInstanceBestpathVrfAfiSafiRd
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceBestpathVrfAfiSafiRd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiRd_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiRd *ClearBgpInstanceBestpathVrfAfiSafiRd) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathVrfAfiSafiRd.YFilter }

func (clearBgpInstanceBestpathVrfAfiSafiRd *ClearBgpInstanceBestpathVrfAfiSafiRd) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathVrfAfiSafiRd.YFilter = yf }

func (clearBgpInstanceBestpathVrfAfiSafiRd *ClearBgpInstanceBestpathVrfAfiSafiRd) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathVrfAfiSafiRd *ClearBgpInstanceBestpathVrfAfiSafiRd) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-rd"
}

func (clearBgpInstanceBestpathVrfAfiSafiRd *ClearBgpInstanceBestpathVrfAfiSafiRd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathVrfAfiSafiRd.Input
    }
    return nil
}

func (clearBgpInstanceBestpathVrfAfiSafiRd *ClearBgpInstanceBestpathVrfAfiSafiRd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathVrfAfiSafiRd.Input
    return children
}

func (clearBgpInstanceBestpathVrfAfiSafiRd *ClearBgpInstanceBestpathVrfAfiSafiRd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathVrfAfiSafiRd *ClearBgpInstanceBestpathVrfAfiSafiRd) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathVrfAfiSafiRd *ClearBgpInstanceBestpathVrfAfiSafiRd) GetYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-rd" }

func (clearBgpInstanceBestpathVrfAfiSafiRd *ClearBgpInstanceBestpathVrfAfiSafiRd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathVrfAfiSafiRd *ClearBgpInstanceBestpathVrfAfiSafiRd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathVrfAfiSafiRd *ClearBgpInstanceBestpathVrfAfiSafiRd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathVrfAfiSafiRd *ClearBgpInstanceBestpathVrfAfiSafiRd) SetParent(parent types.Entity) { clearBgpInstanceBestpathVrfAfiSafiRd.parent = parent }

func (clearBgpInstanceBestpathVrfAfiSafiRd *ClearBgpInstanceBestpathVrfAfiSafiRd) GetParent() types.Entity { return clearBgpInstanceBestpathVrfAfiSafiRd.parent }

func (clearBgpInstanceBestpathVrfAfiSafiRd *ClearBgpInstanceBestpathVrfAfiSafiRd) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathVrfAfiSafiRd_Input
type ClearBgpInstanceBestpathVrfAfiSafiRd_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiRd_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathVrfAfiSafiRd_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathVrfAfiSafiRd_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    return ""
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiRd_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiRd_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiRd_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiRd_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    return leafs
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiRd_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiRd_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiRd_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiRd_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiRd_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiRd_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiRd_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiRd_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-rd" }

// ClearBgpInstanceBestpathVrfAfiSafiVrf
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafiVrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafiVrf_Input
}

func (clearBgpInstanceBestpathVrfAfiSafiVrf *ClearBgpInstanceBestpathVrfAfiSafiVrf) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathVrfAfiSafiVrf.YFilter }

func (clearBgpInstanceBestpathVrfAfiSafiVrf *ClearBgpInstanceBestpathVrfAfiSafiVrf) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathVrfAfiSafiVrf.YFilter = yf }

func (clearBgpInstanceBestpathVrfAfiSafiVrf *ClearBgpInstanceBestpathVrfAfiSafiVrf) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathVrfAfiSafiVrf *ClearBgpInstanceBestpathVrfAfiSafiVrf) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi-vrf"
}

func (clearBgpInstanceBestpathVrfAfiSafiVrf *ClearBgpInstanceBestpathVrfAfiSafiVrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathVrfAfiSafiVrf.Input
    }
    return nil
}

func (clearBgpInstanceBestpathVrfAfiSafiVrf *ClearBgpInstanceBestpathVrfAfiSafiVrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathVrfAfiSafiVrf.Input
    return children
}

func (clearBgpInstanceBestpathVrfAfiSafiVrf *ClearBgpInstanceBestpathVrfAfiSafiVrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathVrfAfiSafiVrf *ClearBgpInstanceBestpathVrfAfiSafiVrf) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathVrfAfiSafiVrf *ClearBgpInstanceBestpathVrfAfiSafiVrf) GetYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-vrf" }

func (clearBgpInstanceBestpathVrfAfiSafiVrf *ClearBgpInstanceBestpathVrfAfiSafiVrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathVrfAfiSafiVrf *ClearBgpInstanceBestpathVrfAfiSafiVrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathVrfAfiSafiVrf *ClearBgpInstanceBestpathVrfAfiSafiVrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathVrfAfiSafiVrf *ClearBgpInstanceBestpathVrfAfiSafiVrf) SetParent(parent types.Entity) { clearBgpInstanceBestpathVrfAfiSafiVrf.parent = parent }

func (clearBgpInstanceBestpathVrfAfiSafiVrf *ClearBgpInstanceBestpathVrfAfiSafiVrf) GetParent() types.Entity { return clearBgpInstanceBestpathVrfAfiSafiVrf.parent }

func (clearBgpInstanceBestpathVrfAfiSafiVrf *ClearBgpInstanceBestpathVrfAfiSafiVrf) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathVrfAfiSafiVrf_Input
type ClearBgpInstanceBestpathVrfAfiSafiVrf_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrf_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrf_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrf_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrf_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrf_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrf_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrf_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    return leafs
}

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrf_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrf_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrf_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrf_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrf_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrf_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrf_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafiVrf_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi-vrf" }

// ClearBgpInstanceBestpathVrfAfiSafi
// Choose a particular BGP instance.
// re-run BGP bestpath selection.
// Specify a VRF.
// 
type ClearBgpInstanceBestpathVrfAfiSafi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceBestpathVrfAfiSafi_Input
}

func (clearBgpInstanceBestpathVrfAfiSafi *ClearBgpInstanceBestpathVrfAfiSafi) GetFilter() yfilter.YFilter { return clearBgpInstanceBestpathVrfAfiSafi.YFilter }

func (clearBgpInstanceBestpathVrfAfiSafi *ClearBgpInstanceBestpathVrfAfiSafi) SetFilter(yf yfilter.YFilter) { clearBgpInstanceBestpathVrfAfiSafi.YFilter = yf }

func (clearBgpInstanceBestpathVrfAfiSafi *ClearBgpInstanceBestpathVrfAfiSafi) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceBestpathVrfAfiSafi *ClearBgpInstanceBestpathVrfAfiSafi) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-bestpath-vrf-afi-safi"
}

func (clearBgpInstanceBestpathVrfAfiSafi *ClearBgpInstanceBestpathVrfAfiSafi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceBestpathVrfAfiSafi.Input
    }
    return nil
}

func (clearBgpInstanceBestpathVrfAfiSafi *ClearBgpInstanceBestpathVrfAfiSafi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceBestpathVrfAfiSafi.Input
    return children
}

func (clearBgpInstanceBestpathVrfAfiSafi *ClearBgpInstanceBestpathVrfAfiSafi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceBestpathVrfAfiSafi *ClearBgpInstanceBestpathVrfAfiSafi) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceBestpathVrfAfiSafi *ClearBgpInstanceBestpathVrfAfiSafi) GetYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi" }

func (clearBgpInstanceBestpathVrfAfiSafi *ClearBgpInstanceBestpathVrfAfiSafi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceBestpathVrfAfiSafi *ClearBgpInstanceBestpathVrfAfiSafi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceBestpathVrfAfiSafi *ClearBgpInstanceBestpathVrfAfiSafi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceBestpathVrfAfiSafi *ClearBgpInstanceBestpathVrfAfiSafi) SetParent(parent types.Entity) { clearBgpInstanceBestpathVrfAfiSafi.parent = parent }

func (clearBgpInstanceBestpathVrfAfiSafi *ClearBgpInstanceBestpathVrfAfiSafi) GetParent() types.Entity { return clearBgpInstanceBestpathVrfAfiSafi.parent }

func (clearBgpInstanceBestpathVrfAfiSafi *ClearBgpInstanceBestpathVrfAfiSafi) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceBestpathVrfAfiSafi_Input
type ClearBgpInstanceBestpathVrfAfiSafi_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceBestpathVrfAfiSafi_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceBestpathVrfAfiSafi_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceBestpathVrfAfiSafi_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceBestpathVrfAfiSafi_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceBestpathVrfAfiSafi_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceBestpathVrfAfiSafi_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceBestpathVrfAfiSafi_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceBestpathVrfAfiSafi_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceBestpathVrfAfiSafi_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceBestpathVrfAfiSafi_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceBestpathVrfAfiSafi_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceBestpathVrfAfiSafi_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceBestpathVrfAfiSafi_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafi_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceBestpathVrfAfiSafi_Input) GetParentYangName() string { return "clear-bgp-instance-bestpath-vrf-afi-safi" }

// ClearBgpInstanceExternalGraceful
// Choose a particular BGP instance.
// Clear all external peers.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpInstanceExternalGraceful struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceExternalGraceful_Input
}

func (clearBgpInstanceExternalGraceful *ClearBgpInstanceExternalGraceful) GetFilter() yfilter.YFilter { return clearBgpInstanceExternalGraceful.YFilter }

func (clearBgpInstanceExternalGraceful *ClearBgpInstanceExternalGraceful) SetFilter(yf yfilter.YFilter) { clearBgpInstanceExternalGraceful.YFilter = yf }

func (clearBgpInstanceExternalGraceful *ClearBgpInstanceExternalGraceful) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceExternalGraceful *ClearBgpInstanceExternalGraceful) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external-graceful"
}

func (clearBgpInstanceExternalGraceful *ClearBgpInstanceExternalGraceful) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceExternalGraceful.Input
    }
    return nil
}

func (clearBgpInstanceExternalGraceful *ClearBgpInstanceExternalGraceful) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceExternalGraceful.Input
    return children
}

func (clearBgpInstanceExternalGraceful *ClearBgpInstanceExternalGraceful) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceExternalGraceful *ClearBgpInstanceExternalGraceful) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceExternalGraceful *ClearBgpInstanceExternalGraceful) GetYangName() string { return "clear-bgp-instance-external-graceful" }

func (clearBgpInstanceExternalGraceful *ClearBgpInstanceExternalGraceful) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceExternalGraceful *ClearBgpInstanceExternalGraceful) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceExternalGraceful *ClearBgpInstanceExternalGraceful) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceExternalGraceful *ClearBgpInstanceExternalGraceful) SetParent(parent types.Entity) { clearBgpInstanceExternalGraceful.parent = parent }

func (clearBgpInstanceExternalGraceful *ClearBgpInstanceExternalGraceful) GetParent() types.Entity { return clearBgpInstanceExternalGraceful.parent }

func (clearBgpInstanceExternalGraceful *ClearBgpInstanceExternalGraceful) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceExternalGraceful_Input
type ClearBgpInstanceExternalGraceful_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceExternalGraceful_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceExternalGraceful_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceExternalGraceful_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (input *ClearBgpInstanceExternalGraceful_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceExternalGraceful_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceExternalGraceful_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceExternalGraceful_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    return leafs
}

func (input *ClearBgpInstanceExternalGraceful_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceExternalGraceful_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceExternalGraceful_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceExternalGraceful_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceExternalGraceful_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceExternalGraceful_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceExternalGraceful_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceExternalGraceful_Input) GetParentYangName() string { return "clear-bgp-instance-external-graceful" }

// ClearBgpInstanceExternal
// Choose a particular BGP instance.
// Clear all external peers.
// 
type ClearBgpInstanceExternal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceExternal_Input
}

func (clearBgpInstanceExternal *ClearBgpInstanceExternal) GetFilter() yfilter.YFilter { return clearBgpInstanceExternal.YFilter }

func (clearBgpInstanceExternal *ClearBgpInstanceExternal) SetFilter(yf yfilter.YFilter) { clearBgpInstanceExternal.YFilter = yf }

func (clearBgpInstanceExternal *ClearBgpInstanceExternal) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceExternal *ClearBgpInstanceExternal) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-external"
}

func (clearBgpInstanceExternal *ClearBgpInstanceExternal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceExternal.Input
    }
    return nil
}

func (clearBgpInstanceExternal *ClearBgpInstanceExternal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceExternal.Input
    return children
}

func (clearBgpInstanceExternal *ClearBgpInstanceExternal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceExternal *ClearBgpInstanceExternal) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceExternal *ClearBgpInstanceExternal) GetYangName() string { return "clear-bgp-instance-external" }

func (clearBgpInstanceExternal *ClearBgpInstanceExternal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceExternal *ClearBgpInstanceExternal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceExternal *ClearBgpInstanceExternal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceExternal *ClearBgpInstanceExternal) SetParent(parent types.Entity) { clearBgpInstanceExternal.parent = parent }

func (clearBgpInstanceExternal *ClearBgpInstanceExternal) GetParent() types.Entity { return clearBgpInstanceExternal.parent }

func (clearBgpInstanceExternal *ClearBgpInstanceExternal) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceExternal_Input
type ClearBgpInstanceExternal_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceExternal_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceExternal_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceExternal_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (input *ClearBgpInstanceExternal_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceExternal_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceExternal_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceExternal_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    return leafs
}

func (input *ClearBgpInstanceExternal_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceExternal_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceExternal_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceExternal_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceExternal_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceExternal_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceExternal_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceExternal_Input) GetParentYangName() string { return "clear-bgp-instance-external" }

// ClearBgpInstanceAfiSafiDampeningIpv4Prefix
// Choose a particular BGP instance.
// Clear route flap dampening information.
// 
type ClearBgpInstanceAfiSafiDampeningIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input
}

func (clearBgpInstanceAfiSafiDampeningIpv4Prefix *ClearBgpInstanceAfiSafiDampeningIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiDampeningIpv4Prefix.YFilter }

func (clearBgpInstanceAfiSafiDampeningIpv4Prefix *ClearBgpInstanceAfiSafiDampeningIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiDampeningIpv4Prefix.YFilter = yf }

func (clearBgpInstanceAfiSafiDampeningIpv4Prefix *ClearBgpInstanceAfiSafiDampeningIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiDampeningIpv4Prefix *ClearBgpInstanceAfiSafiDampeningIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv4-prefix"
}

func (clearBgpInstanceAfiSafiDampeningIpv4Prefix *ClearBgpInstanceAfiSafiDampeningIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiDampeningIpv4Prefix.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiDampeningIpv4Prefix *ClearBgpInstanceAfiSafiDampeningIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiDampeningIpv4Prefix.Input
    return children
}

func (clearBgpInstanceAfiSafiDampeningIpv4Prefix *ClearBgpInstanceAfiSafiDampeningIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiDampeningIpv4Prefix *ClearBgpInstanceAfiSafiDampeningIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiDampeningIpv4Prefix *ClearBgpInstanceAfiSafiDampeningIpv4Prefix) GetYangName() string { return "clear-bgp-instance-afi-safi-dampening-ipv4-prefix" }

func (clearBgpInstanceAfiSafiDampeningIpv4Prefix *ClearBgpInstanceAfiSafiDampeningIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiDampeningIpv4Prefix *ClearBgpInstanceAfiSafiDampeningIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiDampeningIpv4Prefix *ClearBgpInstanceAfiSafiDampeningIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiDampeningIpv4Prefix *ClearBgpInstanceAfiSafiDampeningIpv4Prefix) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiDampeningIpv4Prefix.parent = parent }

func (clearBgpInstanceAfiSafiDampeningIpv4Prefix *ClearBgpInstanceAfiSafiDampeningIpv4Prefix) GetParent() types.Entity { return clearBgpInstanceAfiSafiDampeningIpv4Prefix.parent }

func (clearBgpInstanceAfiSafiDampeningIpv4Prefix *ClearBgpInstanceAfiSafiDampeningIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input
type ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Network and mask or masklength to clear dampening information. The
    // type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiDampeningIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-dampening-ipv4-prefix" }

// ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix
// Choose a particular BGP instance.
// Clear flap statistics.
// 
type ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.YFilter }

func (clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.YFilter = yf }

func (clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix"
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.Input
    return children
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix) GetYangName() string { return "clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix" }

func (clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.parent = parent }

func (clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix) GetParent() types.Entity { return clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix.parent }

func (clearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input
type ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-flap-statistics-ipv4-prefix" }

// ClearBgpInstanceAfiSafiDampeningIpv6Prefix
// Choose a particular BGP instance.
// Clear route flap dampening information.
// 
type ClearBgpInstanceAfiSafiDampeningIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input
}

func (clearBgpInstanceAfiSafiDampeningIpv6Prefix *ClearBgpInstanceAfiSafiDampeningIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiDampeningIpv6Prefix.YFilter }

func (clearBgpInstanceAfiSafiDampeningIpv6Prefix *ClearBgpInstanceAfiSafiDampeningIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiDampeningIpv6Prefix.YFilter = yf }

func (clearBgpInstanceAfiSafiDampeningIpv6Prefix *ClearBgpInstanceAfiSafiDampeningIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiDampeningIpv6Prefix *ClearBgpInstanceAfiSafiDampeningIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-dampening-ipv6-prefix"
}

func (clearBgpInstanceAfiSafiDampeningIpv6Prefix *ClearBgpInstanceAfiSafiDampeningIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiDampeningIpv6Prefix.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiDampeningIpv6Prefix *ClearBgpInstanceAfiSafiDampeningIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiDampeningIpv6Prefix.Input
    return children
}

func (clearBgpInstanceAfiSafiDampeningIpv6Prefix *ClearBgpInstanceAfiSafiDampeningIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiDampeningIpv6Prefix *ClearBgpInstanceAfiSafiDampeningIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiDampeningIpv6Prefix *ClearBgpInstanceAfiSafiDampeningIpv6Prefix) GetYangName() string { return "clear-bgp-instance-afi-safi-dampening-ipv6-prefix" }

func (clearBgpInstanceAfiSafiDampeningIpv6Prefix *ClearBgpInstanceAfiSafiDampeningIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiDampeningIpv6Prefix *ClearBgpInstanceAfiSafiDampeningIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiDampeningIpv6Prefix *ClearBgpInstanceAfiSafiDampeningIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiDampeningIpv6Prefix *ClearBgpInstanceAfiSafiDampeningIpv6Prefix) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiDampeningIpv6Prefix.parent = parent }

func (clearBgpInstanceAfiSafiDampeningIpv6Prefix *ClearBgpInstanceAfiSafiDampeningIpv6Prefix) GetParent() types.Entity { return clearBgpInstanceAfiSafiDampeningIpv6Prefix.parent }

func (clearBgpInstanceAfiSafiDampeningIpv6Prefix *ClearBgpInstanceAfiSafiDampeningIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input
type ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 Network and mask or masklength to clear dampening information. The
    // type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiDampeningIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-dampening-ipv6-prefix" }

// ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix
// Choose a particular BGP instance.
// Clear flap statistics.
// 
type ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.YFilter }

func (clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.YFilter = yf }

func (clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix"
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.Input
    }
    return nil
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.Input
    return children
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix) GetYangName() string { return "clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix" }

func (clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix) SetParent(parent types.Entity) { clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.parent = parent }

func (clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix) GetParent() types.Entity { return clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix.parent }

func (clearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input
type ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceAfiSafiFlapStatisticsIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-afi-safi-flap-statistics-ipv6-prefix" }

// ClearBgpInstanceNexthopPerformanceStatistics
// Choose a particular BGP instance.
// Clear nexthop.
// Performance statistics information related to processing.
// 
type ClearBgpInstanceNexthopPerformanceStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceNexthopPerformanceStatistics_Input
}

func (clearBgpInstanceNexthopPerformanceStatistics *ClearBgpInstanceNexthopPerformanceStatistics) GetFilter() yfilter.YFilter { return clearBgpInstanceNexthopPerformanceStatistics.YFilter }

func (clearBgpInstanceNexthopPerformanceStatistics *ClearBgpInstanceNexthopPerformanceStatistics) SetFilter(yf yfilter.YFilter) { clearBgpInstanceNexthopPerformanceStatistics.YFilter = yf }

func (clearBgpInstanceNexthopPerformanceStatistics *ClearBgpInstanceNexthopPerformanceStatistics) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceNexthopPerformanceStatistics *ClearBgpInstanceNexthopPerformanceStatistics) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-performance-statistics"
}

func (clearBgpInstanceNexthopPerformanceStatistics *ClearBgpInstanceNexthopPerformanceStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceNexthopPerformanceStatistics.Input
    }
    return nil
}

func (clearBgpInstanceNexthopPerformanceStatistics *ClearBgpInstanceNexthopPerformanceStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceNexthopPerformanceStatistics.Input
    return children
}

func (clearBgpInstanceNexthopPerformanceStatistics *ClearBgpInstanceNexthopPerformanceStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceNexthopPerformanceStatistics *ClearBgpInstanceNexthopPerformanceStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceNexthopPerformanceStatistics *ClearBgpInstanceNexthopPerformanceStatistics) GetYangName() string { return "clear-bgp-instance-nexthop-performance-statistics" }

func (clearBgpInstanceNexthopPerformanceStatistics *ClearBgpInstanceNexthopPerformanceStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceNexthopPerformanceStatistics *ClearBgpInstanceNexthopPerformanceStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceNexthopPerformanceStatistics *ClearBgpInstanceNexthopPerformanceStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceNexthopPerformanceStatistics *ClearBgpInstanceNexthopPerformanceStatistics) SetParent(parent types.Entity) { clearBgpInstanceNexthopPerformanceStatistics.parent = parent }

func (clearBgpInstanceNexthopPerformanceStatistics *ClearBgpInstanceNexthopPerformanceStatistics) GetParent() types.Entity { return clearBgpInstanceNexthopPerformanceStatistics.parent }

func (clearBgpInstanceNexthopPerformanceStatistics *ClearBgpInstanceNexthopPerformanceStatistics) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceNexthopPerformanceStatistics_Input
type ClearBgpInstanceNexthopPerformanceStatistics_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceNexthopPerformanceStatistics_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceNexthopPerformanceStatistics_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceNexthopPerformanceStatistics_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (input *ClearBgpInstanceNexthopPerformanceStatistics_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceNexthopPerformanceStatistics_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceNexthopPerformanceStatistics_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceNexthopPerformanceStatistics_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    return leafs
}

func (input *ClearBgpInstanceNexthopPerformanceStatistics_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceNexthopPerformanceStatistics_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceNexthopPerformanceStatistics_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceNexthopPerformanceStatistics_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceNexthopPerformanceStatistics_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceNexthopPerformanceStatistics_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceNexthopPerformanceStatistics_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceNexthopPerformanceStatistics_Input) GetParentYangName() string { return "clear-bgp-instance-nexthop-performance-statistics" }

// ClearBgpInstanceNexthopRegistrationIpAddr
// Choose a particular BGP instance.
// Clear nexthop.
// Registration with RIB and reregister.
// 
type ClearBgpInstanceNexthopRegistrationIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceNexthopRegistrationIpAddr_Input
}

func (clearBgpInstanceNexthopRegistrationIpAddr *ClearBgpInstanceNexthopRegistrationIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceNexthopRegistrationIpAddr.YFilter }

func (clearBgpInstanceNexthopRegistrationIpAddr *ClearBgpInstanceNexthopRegistrationIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceNexthopRegistrationIpAddr.YFilter = yf }

func (clearBgpInstanceNexthopRegistrationIpAddr *ClearBgpInstanceNexthopRegistrationIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceNexthopRegistrationIpAddr *ClearBgpInstanceNexthopRegistrationIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-nexthop-registration-ip-addr"
}

func (clearBgpInstanceNexthopRegistrationIpAddr *ClearBgpInstanceNexthopRegistrationIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceNexthopRegistrationIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceNexthopRegistrationIpAddr *ClearBgpInstanceNexthopRegistrationIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceNexthopRegistrationIpAddr.Input
    return children
}

func (clearBgpInstanceNexthopRegistrationIpAddr *ClearBgpInstanceNexthopRegistrationIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceNexthopRegistrationIpAddr *ClearBgpInstanceNexthopRegistrationIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceNexthopRegistrationIpAddr *ClearBgpInstanceNexthopRegistrationIpAddr) GetYangName() string { return "clear-bgp-instance-nexthop-registration-ip-addr" }

func (clearBgpInstanceNexthopRegistrationIpAddr *ClearBgpInstanceNexthopRegistrationIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceNexthopRegistrationIpAddr *ClearBgpInstanceNexthopRegistrationIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceNexthopRegistrationIpAddr *ClearBgpInstanceNexthopRegistrationIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceNexthopRegistrationIpAddr *ClearBgpInstanceNexthopRegistrationIpAddr) SetParent(parent types.Entity) { clearBgpInstanceNexthopRegistrationIpAddr.parent = parent }

func (clearBgpInstanceNexthopRegistrationIpAddr *ClearBgpInstanceNexthopRegistrationIpAddr) GetParent() types.Entity { return clearBgpInstanceNexthopRegistrationIpAddr.parent }

func (clearBgpInstanceNexthopRegistrationIpAddr *ClearBgpInstanceNexthopRegistrationIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceNexthopRegistrationIpAddr_Input
type ClearBgpInstanceNexthopRegistrationIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Nexthop address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceNexthopRegistrationIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceNexthopRegistrationIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceNexthopRegistrationIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceNexthopRegistrationIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceNexthopRegistrationIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceNexthopRegistrationIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceNexthopRegistrationIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceNexthopRegistrationIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceNexthopRegistrationIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceNexthopRegistrationIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceNexthopRegistrationIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceNexthopRegistrationIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceNexthopRegistrationIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceNexthopRegistrationIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceNexthopRegistrationIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-nexthop-registration-ip-addr" }

// ClearBgpInstancePeerDropsAll
// Choose a particular BGP instance.
// Clear established/dropped counters for a peer.
// All Neighbors.
// 
type ClearBgpInstancePeerDropsAll struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstancePeerDropsAll_Input
}

func (clearBgpInstancePeerDropsAll *ClearBgpInstancePeerDropsAll) GetFilter() yfilter.YFilter { return clearBgpInstancePeerDropsAll.YFilter }

func (clearBgpInstancePeerDropsAll *ClearBgpInstancePeerDropsAll) SetFilter(yf yfilter.YFilter) { clearBgpInstancePeerDropsAll.YFilter = yf }

func (clearBgpInstancePeerDropsAll *ClearBgpInstancePeerDropsAll) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstancePeerDropsAll *ClearBgpInstancePeerDropsAll) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-all"
}

func (clearBgpInstancePeerDropsAll *ClearBgpInstancePeerDropsAll) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstancePeerDropsAll.Input
    }
    return nil
}

func (clearBgpInstancePeerDropsAll *ClearBgpInstancePeerDropsAll) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstancePeerDropsAll.Input
    return children
}

func (clearBgpInstancePeerDropsAll *ClearBgpInstancePeerDropsAll) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstancePeerDropsAll *ClearBgpInstancePeerDropsAll) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstancePeerDropsAll *ClearBgpInstancePeerDropsAll) GetYangName() string { return "clear-bgp-instance-peer-drops-all" }

func (clearBgpInstancePeerDropsAll *ClearBgpInstancePeerDropsAll) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstancePeerDropsAll *ClearBgpInstancePeerDropsAll) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstancePeerDropsAll *ClearBgpInstancePeerDropsAll) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstancePeerDropsAll *ClearBgpInstancePeerDropsAll) SetParent(parent types.Entity) { clearBgpInstancePeerDropsAll.parent = parent }

func (clearBgpInstancePeerDropsAll *ClearBgpInstancePeerDropsAll) GetParent() types.Entity { return clearBgpInstancePeerDropsAll.parent }

func (clearBgpInstancePeerDropsAll *ClearBgpInstancePeerDropsAll) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstancePeerDropsAll_Input
type ClearBgpInstancePeerDropsAll_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstancePeerDropsAll_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstancePeerDropsAll_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstancePeerDropsAll_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (input *ClearBgpInstancePeerDropsAll_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstancePeerDropsAll_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstancePeerDropsAll_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstancePeerDropsAll_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    return leafs
}

func (input *ClearBgpInstancePeerDropsAll_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstancePeerDropsAll_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstancePeerDropsAll_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstancePeerDropsAll_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstancePeerDropsAll_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstancePeerDropsAll_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstancePeerDropsAll_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstancePeerDropsAll_Input) GetParentYangName() string { return "clear-bgp-instance-peer-drops-all" }

// ClearBgpInstancePeerDropsIpAddr
// Choose a particular BGP instance.
// Clear established/dropped counters for a peer.
// 
type ClearBgpInstancePeerDropsIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstancePeerDropsIpAddr_Input
}

func (clearBgpInstancePeerDropsIpAddr *ClearBgpInstancePeerDropsIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstancePeerDropsIpAddr.YFilter }

func (clearBgpInstancePeerDropsIpAddr *ClearBgpInstancePeerDropsIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstancePeerDropsIpAddr.YFilter = yf }

func (clearBgpInstancePeerDropsIpAddr *ClearBgpInstancePeerDropsIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstancePeerDropsIpAddr *ClearBgpInstancePeerDropsIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-peer-drops-ip-addr"
}

func (clearBgpInstancePeerDropsIpAddr *ClearBgpInstancePeerDropsIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstancePeerDropsIpAddr.Input
    }
    return nil
}

func (clearBgpInstancePeerDropsIpAddr *ClearBgpInstancePeerDropsIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstancePeerDropsIpAddr.Input
    return children
}

func (clearBgpInstancePeerDropsIpAddr *ClearBgpInstancePeerDropsIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstancePeerDropsIpAddr *ClearBgpInstancePeerDropsIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstancePeerDropsIpAddr *ClearBgpInstancePeerDropsIpAddr) GetYangName() string { return "clear-bgp-instance-peer-drops-ip-addr" }

func (clearBgpInstancePeerDropsIpAddr *ClearBgpInstancePeerDropsIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstancePeerDropsIpAddr *ClearBgpInstancePeerDropsIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstancePeerDropsIpAddr *ClearBgpInstancePeerDropsIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstancePeerDropsIpAddr *ClearBgpInstancePeerDropsIpAddr) SetParent(parent types.Entity) { clearBgpInstancePeerDropsIpAddr.parent = parent }

func (clearBgpInstancePeerDropsIpAddr *ClearBgpInstancePeerDropsIpAddr) GetParent() types.Entity { return clearBgpInstancePeerDropsIpAddr.parent }

func (clearBgpInstancePeerDropsIpAddr *ClearBgpInstancePeerDropsIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstancePeerDropsIpAddr_Input
type ClearBgpInstancePeerDropsIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // BGP neighbor IP address. The type is one of the following types: string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstancePeerDropsIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstancePeerDropsIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstancePeerDropsIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstancePeerDropsIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstancePeerDropsIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstancePeerDropsIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstancePeerDropsIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstancePeerDropsIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstancePeerDropsIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstancePeerDropsIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstancePeerDropsIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstancePeerDropsIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstancePeerDropsIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstancePeerDropsIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstancePeerDropsIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-peer-drops-ip-addr" }

// ClearBgpInstancePerformanceStatistics
// Choose a particular BGP instance.
// Clear performance statistics.
// 
type ClearBgpInstancePerformanceStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstancePerformanceStatistics_Input
}

func (clearBgpInstancePerformanceStatistics *ClearBgpInstancePerformanceStatistics) GetFilter() yfilter.YFilter { return clearBgpInstancePerformanceStatistics.YFilter }

func (clearBgpInstancePerformanceStatistics *ClearBgpInstancePerformanceStatistics) SetFilter(yf yfilter.YFilter) { clearBgpInstancePerformanceStatistics.YFilter = yf }

func (clearBgpInstancePerformanceStatistics *ClearBgpInstancePerformanceStatistics) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstancePerformanceStatistics *ClearBgpInstancePerformanceStatistics) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-performance-statistics"
}

func (clearBgpInstancePerformanceStatistics *ClearBgpInstancePerformanceStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstancePerformanceStatistics.Input
    }
    return nil
}

func (clearBgpInstancePerformanceStatistics *ClearBgpInstancePerformanceStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstancePerformanceStatistics.Input
    return children
}

func (clearBgpInstancePerformanceStatistics *ClearBgpInstancePerformanceStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstancePerformanceStatistics *ClearBgpInstancePerformanceStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstancePerformanceStatistics *ClearBgpInstancePerformanceStatistics) GetYangName() string { return "clear-bgp-instance-performance-statistics" }

func (clearBgpInstancePerformanceStatistics *ClearBgpInstancePerformanceStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstancePerformanceStatistics *ClearBgpInstancePerformanceStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstancePerformanceStatistics *ClearBgpInstancePerformanceStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstancePerformanceStatistics *ClearBgpInstancePerformanceStatistics) SetParent(parent types.Entity) { clearBgpInstancePerformanceStatistics.parent = parent }

func (clearBgpInstancePerformanceStatistics *ClearBgpInstancePerformanceStatistics) GetParent() types.Entity { return clearBgpInstancePerformanceStatistics.parent }

func (clearBgpInstancePerformanceStatistics *ClearBgpInstancePerformanceStatistics) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstancePerformanceStatistics_Input
type ClearBgpInstancePerformanceStatistics_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstancePerformanceStatistics_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstancePerformanceStatistics_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstancePerformanceStatistics_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (input *ClearBgpInstancePerformanceStatistics_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstancePerformanceStatistics_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstancePerformanceStatistics_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstancePerformanceStatistics_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    return leafs
}

func (input *ClearBgpInstancePerformanceStatistics_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstancePerformanceStatistics_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstancePerformanceStatistics_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstancePerformanceStatistics_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstancePerformanceStatistics_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstancePerformanceStatistics_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstancePerformanceStatistics_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstancePerformanceStatistics_Input) GetParentYangName() string { return "clear-bgp-instance-performance-statistics" }

// ClearBgpInstanceRpkiServerAllSerialQuery
// Choose a particular BGP instance.
// RPKI clear command.
// clear RPKI cache-server.
// clear all RPKI cache-servers.
// send serial-queries to all cache-servers (with latest serial numbers).
// 
type ClearBgpInstanceRpkiServerAllSerialQuery struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceRpkiServerAllSerialQuery_Input
}

func (clearBgpInstanceRpkiServerAllSerialQuery *ClearBgpInstanceRpkiServerAllSerialQuery) GetFilter() yfilter.YFilter { return clearBgpInstanceRpkiServerAllSerialQuery.YFilter }

func (clearBgpInstanceRpkiServerAllSerialQuery *ClearBgpInstanceRpkiServerAllSerialQuery) SetFilter(yf yfilter.YFilter) { clearBgpInstanceRpkiServerAllSerialQuery.YFilter = yf }

func (clearBgpInstanceRpkiServerAllSerialQuery *ClearBgpInstanceRpkiServerAllSerialQuery) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceRpkiServerAllSerialQuery *ClearBgpInstanceRpkiServerAllSerialQuery) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all-serial-query"
}

func (clearBgpInstanceRpkiServerAllSerialQuery *ClearBgpInstanceRpkiServerAllSerialQuery) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceRpkiServerAllSerialQuery.Input
    }
    return nil
}

func (clearBgpInstanceRpkiServerAllSerialQuery *ClearBgpInstanceRpkiServerAllSerialQuery) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceRpkiServerAllSerialQuery.Input
    return children
}

func (clearBgpInstanceRpkiServerAllSerialQuery *ClearBgpInstanceRpkiServerAllSerialQuery) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceRpkiServerAllSerialQuery *ClearBgpInstanceRpkiServerAllSerialQuery) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceRpkiServerAllSerialQuery *ClearBgpInstanceRpkiServerAllSerialQuery) GetYangName() string { return "clear-bgp-instance-rpki-server-all-serial-query" }

func (clearBgpInstanceRpkiServerAllSerialQuery *ClearBgpInstanceRpkiServerAllSerialQuery) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceRpkiServerAllSerialQuery *ClearBgpInstanceRpkiServerAllSerialQuery) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceRpkiServerAllSerialQuery *ClearBgpInstanceRpkiServerAllSerialQuery) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceRpkiServerAllSerialQuery *ClearBgpInstanceRpkiServerAllSerialQuery) SetParent(parent types.Entity) { clearBgpInstanceRpkiServerAllSerialQuery.parent = parent }

func (clearBgpInstanceRpkiServerAllSerialQuery *ClearBgpInstanceRpkiServerAllSerialQuery) GetParent() types.Entity { return clearBgpInstanceRpkiServerAllSerialQuery.parent }

func (clearBgpInstanceRpkiServerAllSerialQuery *ClearBgpInstanceRpkiServerAllSerialQuery) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceRpkiServerAllSerialQuery_Input
type ClearBgpInstanceRpkiServerAllSerialQuery_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceRpkiServerAllSerialQuery_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceRpkiServerAllSerialQuery_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceRpkiServerAllSerialQuery_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (input *ClearBgpInstanceRpkiServerAllSerialQuery_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceRpkiServerAllSerialQuery_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceRpkiServerAllSerialQuery_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceRpkiServerAllSerialQuery_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    return leafs
}

func (input *ClearBgpInstanceRpkiServerAllSerialQuery_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceRpkiServerAllSerialQuery_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceRpkiServerAllSerialQuery_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceRpkiServerAllSerialQuery_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceRpkiServerAllSerialQuery_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceRpkiServerAllSerialQuery_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceRpkiServerAllSerialQuery_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceRpkiServerAllSerialQuery_Input) GetParentYangName() string { return "clear-bgp-instance-rpki-server-all-serial-query" }

// ClearBgpInstanceRpkiServerAll
// Choose a particular BGP instance.
// RPKI clear command.
// clear RPKI cache-server.
// clear all RPKI cache-servers.
// 
type ClearBgpInstanceRpkiServerAll struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceRpkiServerAll_Input
}

func (clearBgpInstanceRpkiServerAll *ClearBgpInstanceRpkiServerAll) GetFilter() yfilter.YFilter { return clearBgpInstanceRpkiServerAll.YFilter }

func (clearBgpInstanceRpkiServerAll *ClearBgpInstanceRpkiServerAll) SetFilter(yf yfilter.YFilter) { clearBgpInstanceRpkiServerAll.YFilter = yf }

func (clearBgpInstanceRpkiServerAll *ClearBgpInstanceRpkiServerAll) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceRpkiServerAll *ClearBgpInstanceRpkiServerAll) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-all"
}

func (clearBgpInstanceRpkiServerAll *ClearBgpInstanceRpkiServerAll) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceRpkiServerAll.Input
    }
    return nil
}

func (clearBgpInstanceRpkiServerAll *ClearBgpInstanceRpkiServerAll) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceRpkiServerAll.Input
    return children
}

func (clearBgpInstanceRpkiServerAll *ClearBgpInstanceRpkiServerAll) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceRpkiServerAll *ClearBgpInstanceRpkiServerAll) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceRpkiServerAll *ClearBgpInstanceRpkiServerAll) GetYangName() string { return "clear-bgp-instance-rpki-server-all" }

func (clearBgpInstanceRpkiServerAll *ClearBgpInstanceRpkiServerAll) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceRpkiServerAll *ClearBgpInstanceRpkiServerAll) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceRpkiServerAll *ClearBgpInstanceRpkiServerAll) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceRpkiServerAll *ClearBgpInstanceRpkiServerAll) SetParent(parent types.Entity) { clearBgpInstanceRpkiServerAll.parent = parent }

func (clearBgpInstanceRpkiServerAll *ClearBgpInstanceRpkiServerAll) GetParent() types.Entity { return clearBgpInstanceRpkiServerAll.parent }

func (clearBgpInstanceRpkiServerAll *ClearBgpInstanceRpkiServerAll) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceRpkiServerAll_Input
type ClearBgpInstanceRpkiServerAll_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceRpkiServerAll_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceRpkiServerAll_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceRpkiServerAll_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (input *ClearBgpInstanceRpkiServerAll_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceRpkiServerAll_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceRpkiServerAll_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceRpkiServerAll_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    return leafs
}

func (input *ClearBgpInstanceRpkiServerAll_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceRpkiServerAll_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceRpkiServerAll_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceRpkiServerAll_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceRpkiServerAll_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceRpkiServerAll_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceRpkiServerAll_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceRpkiServerAll_Input) GetParentYangName() string { return "clear-bgp-instance-rpki-server-all" }

// ClearBgpInstanceRpkiServerRpkiServer
// Choose a particular BGP instance.
// RPKI clear command.
// clear RPKI cache-server.
// 
type ClearBgpInstanceRpkiServerRpkiServer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceRpkiServerRpkiServer_Input
}

func (clearBgpInstanceRpkiServerRpkiServer *ClearBgpInstanceRpkiServerRpkiServer) GetFilter() yfilter.YFilter { return clearBgpInstanceRpkiServerRpkiServer.YFilter }

func (clearBgpInstanceRpkiServerRpkiServer *ClearBgpInstanceRpkiServerRpkiServer) SetFilter(yf yfilter.YFilter) { clearBgpInstanceRpkiServerRpkiServer.YFilter = yf }

func (clearBgpInstanceRpkiServerRpkiServer *ClearBgpInstanceRpkiServerRpkiServer) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceRpkiServerRpkiServer *ClearBgpInstanceRpkiServerRpkiServer) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-server-rpki-server"
}

func (clearBgpInstanceRpkiServerRpkiServer *ClearBgpInstanceRpkiServerRpkiServer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceRpkiServerRpkiServer.Input
    }
    return nil
}

func (clearBgpInstanceRpkiServerRpkiServer *ClearBgpInstanceRpkiServerRpkiServer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceRpkiServerRpkiServer.Input
    return children
}

func (clearBgpInstanceRpkiServerRpkiServer *ClearBgpInstanceRpkiServerRpkiServer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceRpkiServerRpkiServer *ClearBgpInstanceRpkiServerRpkiServer) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceRpkiServerRpkiServer *ClearBgpInstanceRpkiServerRpkiServer) GetYangName() string { return "clear-bgp-instance-rpki-server-rpki-server" }

func (clearBgpInstanceRpkiServerRpkiServer *ClearBgpInstanceRpkiServerRpkiServer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceRpkiServerRpkiServer *ClearBgpInstanceRpkiServerRpkiServer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceRpkiServerRpkiServer *ClearBgpInstanceRpkiServerRpkiServer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceRpkiServerRpkiServer *ClearBgpInstanceRpkiServerRpkiServer) SetParent(parent types.Entity) { clearBgpInstanceRpkiServerRpkiServer.parent = parent }

func (clearBgpInstanceRpkiServerRpkiServer *ClearBgpInstanceRpkiServerRpkiServer) GetParent() types.Entity { return clearBgpInstanceRpkiServerRpkiServer.parent }

func (clearBgpInstanceRpkiServerRpkiServer *ClearBgpInstanceRpkiServerRpkiServer) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceRpkiServerRpkiServer_Input
type ClearBgpInstanceRpkiServerRpkiServer_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // clear a specific RPKI cache-server (hostname or IP address). The type is
    // string. This attribute is mandatory.
    RpkiServer interface{}
}

func (input *ClearBgpInstanceRpkiServerRpkiServer_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceRpkiServerRpkiServer_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceRpkiServerRpkiServer_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "rpki-server" { return "RpkiServer" }
    return ""
}

func (input *ClearBgpInstanceRpkiServerRpkiServer_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceRpkiServerRpkiServer_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceRpkiServerRpkiServer_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceRpkiServerRpkiServer_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["rpki-server"] = input.RpkiServer
    return leafs
}

func (input *ClearBgpInstanceRpkiServerRpkiServer_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceRpkiServerRpkiServer_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceRpkiServerRpkiServer_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceRpkiServerRpkiServer_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceRpkiServerRpkiServer_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceRpkiServerRpkiServer_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceRpkiServerRpkiServer_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceRpkiServerRpkiServer_Input) GetParentYangName() string { return "clear-bgp-instance-rpki-server-rpki-server" }

// ClearBgpInstanceRpkiValidationIpv4
// Choose a particular BGP instance.
// RPKI clear command.
// clear RPKI origin-validation (trigger origin validation).
// trigger origin validation walk for the IPv4 table.
// 
type ClearBgpInstanceRpkiValidationIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceRpkiValidationIpv4_Input
}

func (clearBgpInstanceRpkiValidationIpv4 *ClearBgpInstanceRpkiValidationIpv4) GetFilter() yfilter.YFilter { return clearBgpInstanceRpkiValidationIpv4.YFilter }

func (clearBgpInstanceRpkiValidationIpv4 *ClearBgpInstanceRpkiValidationIpv4) SetFilter(yf yfilter.YFilter) { clearBgpInstanceRpkiValidationIpv4.YFilter = yf }

func (clearBgpInstanceRpkiValidationIpv4 *ClearBgpInstanceRpkiValidationIpv4) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceRpkiValidationIpv4 *ClearBgpInstanceRpkiValidationIpv4) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv4"
}

func (clearBgpInstanceRpkiValidationIpv4 *ClearBgpInstanceRpkiValidationIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceRpkiValidationIpv4.Input
    }
    return nil
}

func (clearBgpInstanceRpkiValidationIpv4 *ClearBgpInstanceRpkiValidationIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceRpkiValidationIpv4.Input
    return children
}

func (clearBgpInstanceRpkiValidationIpv4 *ClearBgpInstanceRpkiValidationIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceRpkiValidationIpv4 *ClearBgpInstanceRpkiValidationIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceRpkiValidationIpv4 *ClearBgpInstanceRpkiValidationIpv4) GetYangName() string { return "clear-bgp-instance-rpki-validation-ipv4" }

func (clearBgpInstanceRpkiValidationIpv4 *ClearBgpInstanceRpkiValidationIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceRpkiValidationIpv4 *ClearBgpInstanceRpkiValidationIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceRpkiValidationIpv4 *ClearBgpInstanceRpkiValidationIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceRpkiValidationIpv4 *ClearBgpInstanceRpkiValidationIpv4) SetParent(parent types.Entity) { clearBgpInstanceRpkiValidationIpv4.parent = parent }

func (clearBgpInstanceRpkiValidationIpv4 *ClearBgpInstanceRpkiValidationIpv4) GetParent() types.Entity { return clearBgpInstanceRpkiValidationIpv4.parent }

func (clearBgpInstanceRpkiValidationIpv4 *ClearBgpInstanceRpkiValidationIpv4) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceRpkiValidationIpv4_Input
type ClearBgpInstanceRpkiValidationIpv4_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceRpkiValidationIpv4_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceRpkiValidationIpv4_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceRpkiValidationIpv4_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (input *ClearBgpInstanceRpkiValidationIpv4_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceRpkiValidationIpv4_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceRpkiValidationIpv4_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceRpkiValidationIpv4_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    return leafs
}

func (input *ClearBgpInstanceRpkiValidationIpv4_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceRpkiValidationIpv4_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceRpkiValidationIpv4_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceRpkiValidationIpv4_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceRpkiValidationIpv4_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceRpkiValidationIpv4_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceRpkiValidationIpv4_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceRpkiValidationIpv4_Input) GetParentYangName() string { return "clear-bgp-instance-rpki-validation-ipv4" }

// ClearBgpInstanceRpkiValidationIpv6
// Choose a particular BGP instance.
// RPKI clear command.
// clear RPKI origin-validation (trigger origin validation).
// trigger origin validation walk for the IPv6 table.
// 
type ClearBgpInstanceRpkiValidationIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceRpkiValidationIpv6_Input
}

func (clearBgpInstanceRpkiValidationIpv6 *ClearBgpInstanceRpkiValidationIpv6) GetFilter() yfilter.YFilter { return clearBgpInstanceRpkiValidationIpv6.YFilter }

func (clearBgpInstanceRpkiValidationIpv6 *ClearBgpInstanceRpkiValidationIpv6) SetFilter(yf yfilter.YFilter) { clearBgpInstanceRpkiValidationIpv6.YFilter = yf }

func (clearBgpInstanceRpkiValidationIpv6 *ClearBgpInstanceRpkiValidationIpv6) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceRpkiValidationIpv6 *ClearBgpInstanceRpkiValidationIpv6) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation-ipv6"
}

func (clearBgpInstanceRpkiValidationIpv6 *ClearBgpInstanceRpkiValidationIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceRpkiValidationIpv6.Input
    }
    return nil
}

func (clearBgpInstanceRpkiValidationIpv6 *ClearBgpInstanceRpkiValidationIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceRpkiValidationIpv6.Input
    return children
}

func (clearBgpInstanceRpkiValidationIpv6 *ClearBgpInstanceRpkiValidationIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceRpkiValidationIpv6 *ClearBgpInstanceRpkiValidationIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceRpkiValidationIpv6 *ClearBgpInstanceRpkiValidationIpv6) GetYangName() string { return "clear-bgp-instance-rpki-validation-ipv6" }

func (clearBgpInstanceRpkiValidationIpv6 *ClearBgpInstanceRpkiValidationIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceRpkiValidationIpv6 *ClearBgpInstanceRpkiValidationIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceRpkiValidationIpv6 *ClearBgpInstanceRpkiValidationIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceRpkiValidationIpv6 *ClearBgpInstanceRpkiValidationIpv6) SetParent(parent types.Entity) { clearBgpInstanceRpkiValidationIpv6.parent = parent }

func (clearBgpInstanceRpkiValidationIpv6 *ClearBgpInstanceRpkiValidationIpv6) GetParent() types.Entity { return clearBgpInstanceRpkiValidationIpv6.parent }

func (clearBgpInstanceRpkiValidationIpv6 *ClearBgpInstanceRpkiValidationIpv6) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceRpkiValidationIpv6_Input
type ClearBgpInstanceRpkiValidationIpv6_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceRpkiValidationIpv6_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceRpkiValidationIpv6_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceRpkiValidationIpv6_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (input *ClearBgpInstanceRpkiValidationIpv6_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceRpkiValidationIpv6_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceRpkiValidationIpv6_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceRpkiValidationIpv6_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    return leafs
}

func (input *ClearBgpInstanceRpkiValidationIpv6_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceRpkiValidationIpv6_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceRpkiValidationIpv6_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceRpkiValidationIpv6_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceRpkiValidationIpv6_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceRpkiValidationIpv6_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceRpkiValidationIpv6_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceRpkiValidationIpv6_Input) GetParentYangName() string { return "clear-bgp-instance-rpki-validation-ipv6" }

// ClearBgpInstanceRpkiValidation
// Choose a particular BGP instance.
// RPKI clear command.
// clear RPKI origin-validation (trigger origin validation).
// 
type ClearBgpInstanceRpkiValidation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceRpkiValidation_Input
}

func (clearBgpInstanceRpkiValidation *ClearBgpInstanceRpkiValidation) GetFilter() yfilter.YFilter { return clearBgpInstanceRpkiValidation.YFilter }

func (clearBgpInstanceRpkiValidation *ClearBgpInstanceRpkiValidation) SetFilter(yf yfilter.YFilter) { clearBgpInstanceRpkiValidation.YFilter = yf }

func (clearBgpInstanceRpkiValidation *ClearBgpInstanceRpkiValidation) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceRpkiValidation *ClearBgpInstanceRpkiValidation) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-rpki-validation"
}

func (clearBgpInstanceRpkiValidation *ClearBgpInstanceRpkiValidation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceRpkiValidation.Input
    }
    return nil
}

func (clearBgpInstanceRpkiValidation *ClearBgpInstanceRpkiValidation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceRpkiValidation.Input
    return children
}

func (clearBgpInstanceRpkiValidation *ClearBgpInstanceRpkiValidation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceRpkiValidation *ClearBgpInstanceRpkiValidation) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceRpkiValidation *ClearBgpInstanceRpkiValidation) GetYangName() string { return "clear-bgp-instance-rpki-validation" }

func (clearBgpInstanceRpkiValidation *ClearBgpInstanceRpkiValidation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceRpkiValidation *ClearBgpInstanceRpkiValidation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceRpkiValidation *ClearBgpInstanceRpkiValidation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceRpkiValidation *ClearBgpInstanceRpkiValidation) SetParent(parent types.Entity) { clearBgpInstanceRpkiValidation.parent = parent }

func (clearBgpInstanceRpkiValidation *ClearBgpInstanceRpkiValidation) GetParent() types.Entity { return clearBgpInstanceRpkiValidation.parent }

func (clearBgpInstanceRpkiValidation *ClearBgpInstanceRpkiValidation) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceRpkiValidation_Input
type ClearBgpInstanceRpkiValidation_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceRpkiValidation_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceRpkiValidation_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceRpkiValidation_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (input *ClearBgpInstanceRpkiValidation_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceRpkiValidation_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceRpkiValidation_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceRpkiValidation_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    return leafs
}

func (input *ClearBgpInstanceRpkiValidation_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceRpkiValidation_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceRpkiValidation_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceRpkiValidation_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceRpkiValidation_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceRpkiValidation_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceRpkiValidation_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceRpkiValidation_Input) GetParentYangName() string { return "clear-bgp-instance-rpki-validation" }

// ClearBgpInstanceShutdown
// Choose a particular BGP instance.
// Clear all peers which were shut down due to low memory.
// 
type ClearBgpInstanceShutdown struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceShutdown_Input
}

func (clearBgpInstanceShutdown *ClearBgpInstanceShutdown) GetFilter() yfilter.YFilter { return clearBgpInstanceShutdown.YFilter }

func (clearBgpInstanceShutdown *ClearBgpInstanceShutdown) SetFilter(yf yfilter.YFilter) { clearBgpInstanceShutdown.YFilter = yf }

func (clearBgpInstanceShutdown *ClearBgpInstanceShutdown) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceShutdown *ClearBgpInstanceShutdown) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-shutdown"
}

func (clearBgpInstanceShutdown *ClearBgpInstanceShutdown) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceShutdown.Input
    }
    return nil
}

func (clearBgpInstanceShutdown *ClearBgpInstanceShutdown) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceShutdown.Input
    return children
}

func (clearBgpInstanceShutdown *ClearBgpInstanceShutdown) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceShutdown *ClearBgpInstanceShutdown) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceShutdown *ClearBgpInstanceShutdown) GetYangName() string { return "clear-bgp-instance-shutdown" }

func (clearBgpInstanceShutdown *ClearBgpInstanceShutdown) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceShutdown *ClearBgpInstanceShutdown) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceShutdown *ClearBgpInstanceShutdown) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceShutdown *ClearBgpInstanceShutdown) SetParent(parent types.Entity) { clearBgpInstanceShutdown.parent = parent }

func (clearBgpInstanceShutdown *ClearBgpInstanceShutdown) GetParent() types.Entity { return clearBgpInstanceShutdown.parent }

func (clearBgpInstanceShutdown *ClearBgpInstanceShutdown) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceShutdown_Input
type ClearBgpInstanceShutdown_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceShutdown_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceShutdown_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceShutdown_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (input *ClearBgpInstanceShutdown_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceShutdown_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceShutdown_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceShutdown_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    return leafs
}

func (input *ClearBgpInstanceShutdown_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceShutdown_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceShutdown_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceShutdown_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceShutdown_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceShutdown_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceShutdown_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceShutdown_Input) GetParentYangName() string { return "clear-bgp-instance-shutdown" }

// ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input
}

func (clearBgpInstanceUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.YFilter }

func (clearBgpInstanceUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.YFilter = yf }

func (clearBgpInstanceUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family-update-parent"
}

func (clearBgpInstanceUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.Input
    return children
}

func (clearBgpInstanceUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent) GetYangName() string { return "clear-bgp-instance-update-outq-address-family-update-parent" }

func (clearBgpInstanceUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.parent = parent }

func (clearBgpInstanceUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent) GetParent() types.Entity { return clearBgpInstanceUpdateOutqAddressFamilyUpdateParent.parent }

func (clearBgpInstanceUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input
type ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (input *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    return leafs
}

func (input *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceUpdateOutqAddressFamilyUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-update-outq-address-family-update-parent" }

// ClearBgpInstanceUpdateOutqAddressFamily
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// 
type ClearBgpInstanceUpdateOutqAddressFamily struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqAddressFamily_Input
}

func (clearBgpInstanceUpdateOutqAddressFamily *ClearBgpInstanceUpdateOutqAddressFamily) GetFilter() yfilter.YFilter { return clearBgpInstanceUpdateOutqAddressFamily.YFilter }

func (clearBgpInstanceUpdateOutqAddressFamily *ClearBgpInstanceUpdateOutqAddressFamily) SetFilter(yf yfilter.YFilter) { clearBgpInstanceUpdateOutqAddressFamily.YFilter = yf }

func (clearBgpInstanceUpdateOutqAddressFamily *ClearBgpInstanceUpdateOutqAddressFamily) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceUpdateOutqAddressFamily *ClearBgpInstanceUpdateOutqAddressFamily) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-address-family"
}

func (clearBgpInstanceUpdateOutqAddressFamily *ClearBgpInstanceUpdateOutqAddressFamily) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceUpdateOutqAddressFamily.Input
    }
    return nil
}

func (clearBgpInstanceUpdateOutqAddressFamily *ClearBgpInstanceUpdateOutqAddressFamily) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceUpdateOutqAddressFamily.Input
    return children
}

func (clearBgpInstanceUpdateOutqAddressFamily *ClearBgpInstanceUpdateOutqAddressFamily) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceUpdateOutqAddressFamily *ClearBgpInstanceUpdateOutqAddressFamily) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceUpdateOutqAddressFamily *ClearBgpInstanceUpdateOutqAddressFamily) GetYangName() string { return "clear-bgp-instance-update-outq-address-family" }

func (clearBgpInstanceUpdateOutqAddressFamily *ClearBgpInstanceUpdateOutqAddressFamily) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceUpdateOutqAddressFamily *ClearBgpInstanceUpdateOutqAddressFamily) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceUpdateOutqAddressFamily *ClearBgpInstanceUpdateOutqAddressFamily) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceUpdateOutqAddressFamily *ClearBgpInstanceUpdateOutqAddressFamily) SetParent(parent types.Entity) { clearBgpInstanceUpdateOutqAddressFamily.parent = parent }

func (clearBgpInstanceUpdateOutqAddressFamily *ClearBgpInstanceUpdateOutqAddressFamily) GetParent() types.Entity { return clearBgpInstanceUpdateOutqAddressFamily.parent }

func (clearBgpInstanceUpdateOutqAddressFamily *ClearBgpInstanceUpdateOutqAddressFamily) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceUpdateOutqAddressFamily_Input
type ClearBgpInstanceUpdateOutqAddressFamily_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceUpdateOutqAddressFamily_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceUpdateOutqAddressFamily_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceUpdateOutqAddressFamily_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (input *ClearBgpInstanceUpdateOutqAddressFamily_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceUpdateOutqAddressFamily_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceUpdateOutqAddressFamily_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceUpdateOutqAddressFamily_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    return leafs
}

func (input *ClearBgpInstanceUpdateOutqAddressFamily_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceUpdateOutqAddressFamily_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceUpdateOutqAddressFamily_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceUpdateOutqAddressFamily_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceUpdateOutqAddressFamily_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceUpdateOutqAddressFamily_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceUpdateOutqAddressFamily_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceUpdateOutqAddressFamily_Input) GetParentYangName() string { return "clear-bgp-instance-update-outq-address-family" }

// ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter }

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter = yf }

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent"
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.Input
    return children
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent) GetYangName() string { return "clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent" }

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.parent = parent }

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent) GetParent() types.Entity { return clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent.parent }

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
type ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-update-outq-neighbor-ip-addr-refresh-update-parent" }

// ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// 
type ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh) GetFilter() yfilter.YFilter { return clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.YFilter }

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh) SetFilter(yf yfilter.YFilter) { clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.YFilter = yf }

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-refresh"
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.Input
    }
    return nil
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.Input
    return children
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh) GetYangName() string { return "clear-bgp-instance-update-outq-neighbor-ip-addr-refresh" }

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh) SetParent(parent types.Entity) { clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.parent = parent }

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh) GetParent() types.Entity { return clearBgpInstanceUpdateOutqNeighborIpAddrRefresh.parent }

func (clearBgpInstanceUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input
type ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrRefresh_Input) GetParentYangName() string { return "clear-bgp-instance-update-outq-neighbor-ip-addr-refresh" }

// ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.YFilter }

func (clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.YFilter = yf }

func (clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent"
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.Input
    return children
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent) GetYangName() string { return "clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent" }

func (clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.parent = parent }

func (clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent) GetParent() types.Entity { return clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent.parent }

func (clearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input
type ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddrUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-update-outq-neighbor-ip-addr-update-parent" }

// ClearBgpInstanceUpdateOutqNeighborIpAddr
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// 
type ClearBgpInstanceUpdateOutqNeighborIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqNeighborIpAddr_Input
}

func (clearBgpInstanceUpdateOutqNeighborIpAddr *ClearBgpInstanceUpdateOutqNeighborIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceUpdateOutqNeighborIpAddr.YFilter }

func (clearBgpInstanceUpdateOutqNeighborIpAddr *ClearBgpInstanceUpdateOutqNeighborIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceUpdateOutqNeighborIpAddr.YFilter = yf }

func (clearBgpInstanceUpdateOutqNeighborIpAddr *ClearBgpInstanceUpdateOutqNeighborIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceUpdateOutqNeighborIpAddr *ClearBgpInstanceUpdateOutqNeighborIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-neighbor-ip-addr"
}

func (clearBgpInstanceUpdateOutqNeighborIpAddr *ClearBgpInstanceUpdateOutqNeighborIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceUpdateOutqNeighborIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceUpdateOutqNeighborIpAddr *ClearBgpInstanceUpdateOutqNeighborIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceUpdateOutqNeighborIpAddr.Input
    return children
}

func (clearBgpInstanceUpdateOutqNeighborIpAddr *ClearBgpInstanceUpdateOutqNeighborIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceUpdateOutqNeighborIpAddr *ClearBgpInstanceUpdateOutqNeighborIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceUpdateOutqNeighborIpAddr *ClearBgpInstanceUpdateOutqNeighborIpAddr) GetYangName() string { return "clear-bgp-instance-update-outq-neighbor-ip-addr" }

func (clearBgpInstanceUpdateOutqNeighborIpAddr *ClearBgpInstanceUpdateOutqNeighborIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceUpdateOutqNeighborIpAddr *ClearBgpInstanceUpdateOutqNeighborIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceUpdateOutqNeighborIpAddr *ClearBgpInstanceUpdateOutqNeighborIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceUpdateOutqNeighborIpAddr *ClearBgpInstanceUpdateOutqNeighborIpAddr) SetParent(parent types.Entity) { clearBgpInstanceUpdateOutqNeighborIpAddr.parent = parent }

func (clearBgpInstanceUpdateOutqNeighborIpAddr *ClearBgpInstanceUpdateOutqNeighborIpAddr) GetParent() types.Entity { return clearBgpInstanceUpdateOutqNeighborIpAddr.parent }

func (clearBgpInstanceUpdateOutqNeighborIpAddr *ClearBgpInstanceUpdateOutqNeighborIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceUpdateOutqNeighborIpAddr_Input
type ClearBgpInstanceUpdateOutqNeighborIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceUpdateOutqNeighborIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-update-outq-neighbor-ip-addr" }

// ClearBgpInstanceUpdateOutqProcess
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Process.
// 
type ClearBgpInstanceUpdateOutqProcess struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqProcess_Input
}

func (clearBgpInstanceUpdateOutqProcess *ClearBgpInstanceUpdateOutqProcess) GetFilter() yfilter.YFilter { return clearBgpInstanceUpdateOutqProcess.YFilter }

func (clearBgpInstanceUpdateOutqProcess *ClearBgpInstanceUpdateOutqProcess) SetFilter(yf yfilter.YFilter) { clearBgpInstanceUpdateOutqProcess.YFilter = yf }

func (clearBgpInstanceUpdateOutqProcess *ClearBgpInstanceUpdateOutqProcess) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceUpdateOutqProcess *ClearBgpInstanceUpdateOutqProcess) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-process"
}

func (clearBgpInstanceUpdateOutqProcess *ClearBgpInstanceUpdateOutqProcess) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceUpdateOutqProcess.Input
    }
    return nil
}

func (clearBgpInstanceUpdateOutqProcess *ClearBgpInstanceUpdateOutqProcess) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceUpdateOutqProcess.Input
    return children
}

func (clearBgpInstanceUpdateOutqProcess *ClearBgpInstanceUpdateOutqProcess) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceUpdateOutqProcess *ClearBgpInstanceUpdateOutqProcess) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceUpdateOutqProcess *ClearBgpInstanceUpdateOutqProcess) GetYangName() string { return "clear-bgp-instance-update-outq-process" }

func (clearBgpInstanceUpdateOutqProcess *ClearBgpInstanceUpdateOutqProcess) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceUpdateOutqProcess *ClearBgpInstanceUpdateOutqProcess) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceUpdateOutqProcess *ClearBgpInstanceUpdateOutqProcess) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceUpdateOutqProcess *ClearBgpInstanceUpdateOutqProcess) SetParent(parent types.Entity) { clearBgpInstanceUpdateOutqProcess.parent = parent }

func (clearBgpInstanceUpdateOutqProcess *ClearBgpInstanceUpdateOutqProcess) GetParent() types.Entity { return clearBgpInstanceUpdateOutqProcess.parent }

func (clearBgpInstanceUpdateOutqProcess *ClearBgpInstanceUpdateOutqProcess) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceUpdateOutqProcess_Input
type ClearBgpInstanceUpdateOutqProcess_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}
}

func (input *ClearBgpInstanceUpdateOutqProcess_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceUpdateOutqProcess_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceUpdateOutqProcess_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (input *ClearBgpInstanceUpdateOutqProcess_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceUpdateOutqProcess_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceUpdateOutqProcess_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceUpdateOutqProcess_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    return leafs
}

func (input *ClearBgpInstanceUpdateOutqProcess_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceUpdateOutqProcess_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceUpdateOutqProcess_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceUpdateOutqProcess_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceUpdateOutqProcess_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceUpdateOutqProcess_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceUpdateOutqProcess_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceUpdateOutqProcess_Input) GetParentYangName() string { return "clear-bgp-instance-update-outq-process" }

// ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter = yf }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-update-parent"
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.Input
    return children
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent) GetYangName() string { return "clear-bgp-instance-update-outq-update-group-sub-group-update-parent" }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.parent = parent }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent) GetParent() types.Entity { return clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent.parent }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input
type ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "sub-group" { return "SubGroup" }
    return ""
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["update-group"] = input.UpdateGroup
    leafs["sub-group"] = input.SubGroup
    return leafs
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-update-outq-update-group-sub-group-update-parent" }

// ClearBgpInstanceUpdateOutqUpdateGroupSubGroup
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpInstanceUpdateOutqUpdateGroupSubGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup) GetFilter() yfilter.YFilter { return clearBgpInstanceUpdateOutqUpdateGroupSubGroup.YFilter }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup) SetFilter(yf yfilter.YFilter) { clearBgpInstanceUpdateOutqUpdateGroupSubGroup.YFilter = yf }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group"
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceUpdateOutqUpdateGroupSubGroup.Input
    }
    return nil
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceUpdateOutqUpdateGroupSubGroup.Input
    return children
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup) GetYangName() string { return "clear-bgp-instance-update-outq-update-group-sub-group" }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup) SetParent(parent types.Entity) { clearBgpInstanceUpdateOutqUpdateGroupSubGroup.parent = parent }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup) GetParent() types.Entity { return clearBgpInstanceUpdateOutqUpdateGroupSubGroup.parent }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input
type ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "sub-group" { return "SubGroup" }
    return ""
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["update-group"] = input.UpdateGroup
    leafs["sub-group"] = input.SubGroup
    return leafs
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroup_Input) GetParentYangName() string { return "clear-bgp-instance-update-outq-update-group-sub-group" }

// ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter = yf }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input
    return children
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetYangName() string { return "clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent" }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.parent = parent }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetParent() types.Entity { return clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.parent }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
type ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "refresh-sub-group" { return "RefreshSubGroup" }
    return ""
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["update-group"] = input.UpdateGroup
    leafs["refresh-sub-group"] = input.RefreshSubGroup
    return leafs
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group-update-parent" }

// ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetFilter() yfilter.YFilter { return clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup) SetFilter(yf yfilter.YFilter) { clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter = yf }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group"
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input
    }
    return nil
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input
    return children
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetYangName() string { return "clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group" }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup) SetParent(parent types.Entity) { clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.parent = parent }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetParent() types.Entity { return clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup.parent }

func (clearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
type ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "refresh-sub-group" { return "RefreshSubGroup" }
    return ""
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["update-group"] = input.UpdateGroup
    leafs["refresh-sub-group"] = input.RefreshSubGroup
    return leafs
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetParentYangName() string { return "clear-bgp-instance-update-outq-update-group-sub-group-refresh-sub-group" }

// ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input
}

func (clearBgpInstanceUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.YFilter }

func (clearBgpInstanceUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.YFilter = yf }

func (clearBgpInstanceUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group-update-parent"
}

func (clearBgpInstanceUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.Input
    return children
}

func (clearBgpInstanceUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent) GetYangName() string { return "clear-bgp-instance-update-outq-update-group-update-parent" }

func (clearBgpInstanceUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.parent = parent }

func (clearBgpInstanceUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent) GetParent() types.Entity { return clearBgpInstanceUpdateOutqUpdateGroupUpdateParent.parent }

func (clearBgpInstanceUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input
type ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "update-group" { return "UpdateGroup" }
    return ""
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["update-group"] = input.UpdateGroup
    return leafs
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceUpdateOutqUpdateGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-update-outq-update-group-update-parent" }

// ClearBgpInstanceUpdateOutqUpdateGroup
// Choose a particular BGP instance.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// 
type ClearBgpInstanceUpdateOutqUpdateGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceUpdateOutqUpdateGroup_Input
}

func (clearBgpInstanceUpdateOutqUpdateGroup *ClearBgpInstanceUpdateOutqUpdateGroup) GetFilter() yfilter.YFilter { return clearBgpInstanceUpdateOutqUpdateGroup.YFilter }

func (clearBgpInstanceUpdateOutqUpdateGroup *ClearBgpInstanceUpdateOutqUpdateGroup) SetFilter(yf yfilter.YFilter) { clearBgpInstanceUpdateOutqUpdateGroup.YFilter = yf }

func (clearBgpInstanceUpdateOutqUpdateGroup *ClearBgpInstanceUpdateOutqUpdateGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceUpdateOutqUpdateGroup *ClearBgpInstanceUpdateOutqUpdateGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-update-outq-update-group"
}

func (clearBgpInstanceUpdateOutqUpdateGroup *ClearBgpInstanceUpdateOutqUpdateGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceUpdateOutqUpdateGroup.Input
    }
    return nil
}

func (clearBgpInstanceUpdateOutqUpdateGroup *ClearBgpInstanceUpdateOutqUpdateGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceUpdateOutqUpdateGroup.Input
    return children
}

func (clearBgpInstanceUpdateOutqUpdateGroup *ClearBgpInstanceUpdateOutqUpdateGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceUpdateOutqUpdateGroup *ClearBgpInstanceUpdateOutqUpdateGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceUpdateOutqUpdateGroup *ClearBgpInstanceUpdateOutqUpdateGroup) GetYangName() string { return "clear-bgp-instance-update-outq-update-group" }

func (clearBgpInstanceUpdateOutqUpdateGroup *ClearBgpInstanceUpdateOutqUpdateGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceUpdateOutqUpdateGroup *ClearBgpInstanceUpdateOutqUpdateGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceUpdateOutqUpdateGroup *ClearBgpInstanceUpdateOutqUpdateGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceUpdateOutqUpdateGroup *ClearBgpInstanceUpdateOutqUpdateGroup) SetParent(parent types.Entity) { clearBgpInstanceUpdateOutqUpdateGroup.parent = parent }

func (clearBgpInstanceUpdateOutqUpdateGroup *ClearBgpInstanceUpdateOutqUpdateGroup) GetParent() types.Entity { return clearBgpInstanceUpdateOutqUpdateGroup.parent }

func (clearBgpInstanceUpdateOutqUpdateGroup *ClearBgpInstanceUpdateOutqUpdateGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceUpdateOutqUpdateGroup_Input
type ClearBgpInstanceUpdateOutqUpdateGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceUpdateOutqUpdateGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceUpdateOutqUpdateGroup_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "update-group" { return "UpdateGroup" }
    return ""
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["update-group"] = input.UpdateGroup
    return leafs
}

func (input *ClearBgpInstanceUpdateOutqUpdateGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceUpdateOutqUpdateGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceUpdateOutqUpdateGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceUpdateOutqUpdateGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceUpdateOutqUpdateGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceUpdateOutqUpdateGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceUpdateOutqUpdateGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceUpdateOutqUpdateGroup_Input) GetParentYangName() string { return "clear-bgp-instance-update-outq-update-group" }

// ClearBgpInstanceVersionIpAddrIpNetmask
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionIpAddrIpNetmask_Input
}

func (clearBgpInstanceVersionIpAddrIpNetmask *ClearBgpInstanceVersionIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionIpAddrIpNetmask.YFilter }

func (clearBgpInstanceVersionIpAddrIpNetmask *ClearBgpInstanceVersionIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionIpAddrIpNetmask.YFilter = yf }

func (clearBgpInstanceVersionIpAddrIpNetmask *ClearBgpInstanceVersionIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionIpAddrIpNetmask *ClearBgpInstanceVersionIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr-ip-netmask"
}

func (clearBgpInstanceVersionIpAddrIpNetmask *ClearBgpInstanceVersionIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpInstanceVersionIpAddrIpNetmask *ClearBgpInstanceVersionIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionIpAddrIpNetmask.Input
    return children
}

func (clearBgpInstanceVersionIpAddrIpNetmask *ClearBgpInstanceVersionIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionIpAddrIpNetmask *ClearBgpInstanceVersionIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionIpAddrIpNetmask *ClearBgpInstanceVersionIpAddrIpNetmask) GetYangName() string { return "clear-bgp-instance-version-ip-addr-ip-netmask" }

func (clearBgpInstanceVersionIpAddrIpNetmask *ClearBgpInstanceVersionIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionIpAddrIpNetmask *ClearBgpInstanceVersionIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionIpAddrIpNetmask *ClearBgpInstanceVersionIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionIpAddrIpNetmask *ClearBgpInstanceVersionIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpInstanceVersionIpAddrIpNetmask.parent = parent }

func (clearBgpInstanceVersionIpAddrIpNetmask *ClearBgpInstanceVersionIpAddrIpNetmask) GetParent() types.Entity { return clearBgpInstanceVersionIpAddrIpNetmask.parent }

func (clearBgpInstanceVersionIpAddrIpNetmask *ClearBgpInstanceVersionIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionIpAddrIpNetmask_Input
type ClearBgpInstanceVersionIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceVersionIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpInstanceVersionIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpInstanceVersionIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-instance-version-ip-addr-ip-netmask" }

// ClearBgpInstanceVersionIpAddr
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionIpAddr_Input
}

func (clearBgpInstanceVersionIpAddr *ClearBgpInstanceVersionIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionIpAddr.YFilter }

func (clearBgpInstanceVersionIpAddr *ClearBgpInstanceVersionIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionIpAddr.YFilter = yf }

func (clearBgpInstanceVersionIpAddr *ClearBgpInstanceVersionIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionIpAddr *ClearBgpInstanceVersionIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-addr"
}

func (clearBgpInstanceVersionIpAddr *ClearBgpInstanceVersionIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceVersionIpAddr *ClearBgpInstanceVersionIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionIpAddr.Input
    return children
}

func (clearBgpInstanceVersionIpAddr *ClearBgpInstanceVersionIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionIpAddr *ClearBgpInstanceVersionIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionIpAddr *ClearBgpInstanceVersionIpAddr) GetYangName() string { return "clear-bgp-instance-version-ip-addr" }

func (clearBgpInstanceVersionIpAddr *ClearBgpInstanceVersionIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionIpAddr *ClearBgpInstanceVersionIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionIpAddr *ClearBgpInstanceVersionIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionIpAddr *ClearBgpInstanceVersionIpAddr) SetParent(parent types.Entity) { clearBgpInstanceVersionIpAddr.parent = parent }

func (clearBgpInstanceVersionIpAddr *ClearBgpInstanceVersionIpAddr) GetParent() types.Entity { return clearBgpInstanceVersionIpAddr.parent }

func (clearBgpInstanceVersionIpAddr *ClearBgpInstanceVersionIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionIpAddr_Input
type ClearBgpInstanceVersionIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVersionIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVersionIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVersionIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-version-ip-addr" }

// ClearBgpInstanceVersionIpPrefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionIpPrefix_Input
}

func (clearBgpInstanceVersionIpPrefix *ClearBgpInstanceVersionIpPrefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionIpPrefix.YFilter }

func (clearBgpInstanceVersionIpPrefix *ClearBgpInstanceVersionIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionIpPrefix.YFilter = yf }

func (clearBgpInstanceVersionIpPrefix *ClearBgpInstanceVersionIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionIpPrefix *ClearBgpInstanceVersionIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-ip-prefix"
}

func (clearBgpInstanceVersionIpPrefix *ClearBgpInstanceVersionIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionIpPrefix.Input
    }
    return nil
}

func (clearBgpInstanceVersionIpPrefix *ClearBgpInstanceVersionIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionIpPrefix.Input
    return children
}

func (clearBgpInstanceVersionIpPrefix *ClearBgpInstanceVersionIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionIpPrefix *ClearBgpInstanceVersionIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionIpPrefix *ClearBgpInstanceVersionIpPrefix) GetYangName() string { return "clear-bgp-instance-version-ip-prefix" }

func (clearBgpInstanceVersionIpPrefix *ClearBgpInstanceVersionIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionIpPrefix *ClearBgpInstanceVersionIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionIpPrefix *ClearBgpInstanceVersionIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionIpPrefix *ClearBgpInstanceVersionIpPrefix) SetParent(parent types.Entity) { clearBgpInstanceVersionIpPrefix.parent = parent }

func (clearBgpInstanceVersionIpPrefix *ClearBgpInstanceVersionIpPrefix) GetParent() types.Entity { return clearBgpInstanceVersionIpPrefix.parent }

func (clearBgpInstanceVersionIpPrefix *ClearBgpInstanceVersionIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionIpPrefix_Input
type ClearBgpInstanceVersionIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceVersionIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionIpPrefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpInstanceVersionIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpInstanceVersionIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionIpPrefix_Input) GetParentYangName() string { return "clear-bgp-instance-version-ip-prefix" }

// ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input
}

func (clearBgpInstanceVersionAfiSafiIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.YFilter }

func (clearBgpInstanceVersionAfiSafiIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask"
}

func (clearBgpInstanceVersionAfiSafiIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask) GetYangName() string { return "clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask" }

func (clearBgpInstanceVersionAfiSafiIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.parent = parent }

func (clearBgpInstanceVersionAfiSafiIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiIpAddrIpNetmask.parent }

func (clearBgpInstanceVersionAfiSafiIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input
type ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-ip-addr-ip-netmask" }

// ClearBgpInstanceVersionAfiSafiIpAddr
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpAddr_Input
}

func (clearBgpInstanceVersionAfiSafiIpAddr *ClearBgpInstanceVersionAfiSafiIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiIpAddr.YFilter }

func (clearBgpInstanceVersionAfiSafiIpAddr *ClearBgpInstanceVersionAfiSafiIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiIpAddr.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiIpAddr *ClearBgpInstanceVersionAfiSafiIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiIpAddr *ClearBgpInstanceVersionAfiSafiIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-addr"
}

func (clearBgpInstanceVersionAfiSafiIpAddr *ClearBgpInstanceVersionAfiSafiIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiIpAddr *ClearBgpInstanceVersionAfiSafiIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiIpAddr.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiIpAddr *ClearBgpInstanceVersionAfiSafiIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiIpAddr *ClearBgpInstanceVersionAfiSafiIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiIpAddr *ClearBgpInstanceVersionAfiSafiIpAddr) GetYangName() string { return "clear-bgp-instance-version-afi-safi-ip-addr" }

func (clearBgpInstanceVersionAfiSafiIpAddr *ClearBgpInstanceVersionAfiSafiIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiIpAddr *ClearBgpInstanceVersionAfiSafiIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiIpAddr *ClearBgpInstanceVersionAfiSafiIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiIpAddr *ClearBgpInstanceVersionAfiSafiIpAddr) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiIpAddr.parent = parent }

func (clearBgpInstanceVersionAfiSafiIpAddr *ClearBgpInstanceVersionAfiSafiIpAddr) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiIpAddr.parent }

func (clearBgpInstanceVersionAfiSafiIpAddr *ClearBgpInstanceVersionAfiSafiIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiIpAddr_Input
type ClearBgpInstanceVersionAfiSafiIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-ip-addr" }

// ClearBgpInstanceVersionAfiSafiIpPrefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpPrefix_Input
}

func (clearBgpInstanceVersionAfiSafiIpPrefix *ClearBgpInstanceVersionAfiSafiIpPrefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiIpPrefix.YFilter }

func (clearBgpInstanceVersionAfiSafiIpPrefix *ClearBgpInstanceVersionAfiSafiIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiIpPrefix.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiIpPrefix *ClearBgpInstanceVersionAfiSafiIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiIpPrefix *ClearBgpInstanceVersionAfiSafiIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ip-prefix"
}

func (clearBgpInstanceVersionAfiSafiIpPrefix *ClearBgpInstanceVersionAfiSafiIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiIpPrefix.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiIpPrefix *ClearBgpInstanceVersionAfiSafiIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiIpPrefix.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiIpPrefix *ClearBgpInstanceVersionAfiSafiIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiIpPrefix *ClearBgpInstanceVersionAfiSafiIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiIpPrefix *ClearBgpInstanceVersionAfiSafiIpPrefix) GetYangName() string { return "clear-bgp-instance-version-afi-safi-ip-prefix" }

func (clearBgpInstanceVersionAfiSafiIpPrefix *ClearBgpInstanceVersionAfiSafiIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiIpPrefix *ClearBgpInstanceVersionAfiSafiIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiIpPrefix *ClearBgpInstanceVersionAfiSafiIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiIpPrefix *ClearBgpInstanceVersionAfiSafiIpPrefix) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiIpPrefix.parent = parent }

func (clearBgpInstanceVersionAfiSafiIpPrefix *ClearBgpInstanceVersionAfiSafiIpPrefix) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiIpPrefix.parent }

func (clearBgpInstanceVersionAfiSafiIpPrefix *ClearBgpInstanceVersionAfiSafiIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiIpPrefix_Input
type ClearBgpInstanceVersionAfiSafiIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiIpPrefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiIpPrefix_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-ip-prefix" }

// ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.YFilter }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask"
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetYangName() string { return "clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask" }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.parent = parent }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask.parent }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input
type ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "bridge-domain-name" { return "BridgeDomainName" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["bridge-domain-name"] = input.BridgeDomainName
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr-ip-netmask" }

// ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.YFilter }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr"
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr) GetYangName() string { return "clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr" }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.parent = parent }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr.parent }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpAddr *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input
type ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "bridge-domain-name" { return "BridgeDomainName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["bridge-domain-name"] = input.BridgeDomainName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-bridge-domain-ip-addr" }

// ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.YFilter }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix"
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix) GetYangName() string { return "clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix" }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.parent = parent }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix.parent }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input
type ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "bridge-domain-name" { return "BridgeDomainName" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["bridge-domain-name"] = input.BridgeDomainName
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpPrefix_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-bridge-domain-ip-prefix" }

// ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input
}

func (clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.YFilter }

func (clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask"
}

func (clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask) GetYangName() string { return "clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask" }

func (clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.parent = parent }

func (clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask.parent }

func (clearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input
type ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-rd-ip-addr-ip-netmask" }

// ClearBgpInstanceVersionAfiSafiRdIpAddr
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdIpAddr_Input
}

func (clearBgpInstanceVersionAfiSafiRdIpAddr *ClearBgpInstanceVersionAfiSafiRdIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiRdIpAddr.YFilter }

func (clearBgpInstanceVersionAfiSafiRdIpAddr *ClearBgpInstanceVersionAfiSafiRdIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiRdIpAddr.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiRdIpAddr *ClearBgpInstanceVersionAfiSafiRdIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiRdIpAddr *ClearBgpInstanceVersionAfiSafiRdIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-addr"
}

func (clearBgpInstanceVersionAfiSafiRdIpAddr *ClearBgpInstanceVersionAfiSafiRdIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiRdIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiRdIpAddr *ClearBgpInstanceVersionAfiSafiRdIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiRdIpAddr.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiRdIpAddr *ClearBgpInstanceVersionAfiSafiRdIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiRdIpAddr *ClearBgpInstanceVersionAfiSafiRdIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiRdIpAddr *ClearBgpInstanceVersionAfiSafiRdIpAddr) GetYangName() string { return "clear-bgp-instance-version-afi-safi-rd-ip-addr" }

func (clearBgpInstanceVersionAfiSafiRdIpAddr *ClearBgpInstanceVersionAfiSafiRdIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiRdIpAddr *ClearBgpInstanceVersionAfiSafiRdIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiRdIpAddr *ClearBgpInstanceVersionAfiSafiRdIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiRdIpAddr *ClearBgpInstanceVersionAfiSafiRdIpAddr) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiRdIpAddr.parent = parent }

func (clearBgpInstanceVersionAfiSafiRdIpAddr *ClearBgpInstanceVersionAfiSafiRdIpAddr) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiRdIpAddr.parent }

func (clearBgpInstanceVersionAfiSafiRdIpAddr *ClearBgpInstanceVersionAfiSafiRdIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiRdIpAddr_Input
type ClearBgpInstanceVersionAfiSafiRdIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiRdIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-rd-ip-addr" }

// ClearBgpInstanceVersionAfiSafiRdIpPrefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input
}

func (clearBgpInstanceVersionAfiSafiRdIpPrefix *ClearBgpInstanceVersionAfiSafiRdIpPrefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiRdIpPrefix.YFilter }

func (clearBgpInstanceVersionAfiSafiRdIpPrefix *ClearBgpInstanceVersionAfiSafiRdIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiRdIpPrefix.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiRdIpPrefix *ClearBgpInstanceVersionAfiSafiRdIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiRdIpPrefix *ClearBgpInstanceVersionAfiSafiRdIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ip-prefix"
}

func (clearBgpInstanceVersionAfiSafiRdIpPrefix *ClearBgpInstanceVersionAfiSafiRdIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiRdIpPrefix.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiRdIpPrefix *ClearBgpInstanceVersionAfiSafiRdIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiRdIpPrefix.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiRdIpPrefix *ClearBgpInstanceVersionAfiSafiRdIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiRdIpPrefix *ClearBgpInstanceVersionAfiSafiRdIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiRdIpPrefix *ClearBgpInstanceVersionAfiSafiRdIpPrefix) GetYangName() string { return "clear-bgp-instance-version-afi-safi-rd-ip-prefix" }

func (clearBgpInstanceVersionAfiSafiRdIpPrefix *ClearBgpInstanceVersionAfiSafiRdIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiRdIpPrefix *ClearBgpInstanceVersionAfiSafiRdIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiRdIpPrefix *ClearBgpInstanceVersionAfiSafiRdIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiRdIpPrefix *ClearBgpInstanceVersionAfiSafiRdIpPrefix) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiRdIpPrefix.parent = parent }

func (clearBgpInstanceVersionAfiSafiRdIpPrefix *ClearBgpInstanceVersionAfiSafiRdIpPrefix) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiRdIpPrefix.parent }

func (clearBgpInstanceVersionAfiSafiRdIpPrefix *ClearBgpInstanceVersionAfiSafiRdIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input
type ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiRdIpPrefix_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-rd-ip-prefix" }

// ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input
}

func (clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.YFilter }

func (clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask"
}

func (clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask) GetYangName() string { return "clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask" }

func (clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.parent = parent }

func (clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask.parent }

func (clearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input
type ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-addr"] = input.Ipv4Addr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiIpv4AddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-ipv4-addr-ipv4-mask" }

// ClearBgpInstanceVersionAfiSafiIpv4Addr
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpv4Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpv4Addr_Input
}

func (clearBgpInstanceVersionAfiSafiIpv4Addr *ClearBgpInstanceVersionAfiSafiIpv4Addr) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiIpv4Addr.YFilter }

func (clearBgpInstanceVersionAfiSafiIpv4Addr *ClearBgpInstanceVersionAfiSafiIpv4Addr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiIpv4Addr.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiIpv4Addr *ClearBgpInstanceVersionAfiSafiIpv4Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiIpv4Addr *ClearBgpInstanceVersionAfiSafiIpv4Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-addr"
}

func (clearBgpInstanceVersionAfiSafiIpv4Addr *ClearBgpInstanceVersionAfiSafiIpv4Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiIpv4Addr.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiIpv4Addr *ClearBgpInstanceVersionAfiSafiIpv4Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiIpv4Addr.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiIpv4Addr *ClearBgpInstanceVersionAfiSafiIpv4Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiIpv4Addr *ClearBgpInstanceVersionAfiSafiIpv4Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiIpv4Addr *ClearBgpInstanceVersionAfiSafiIpv4Addr) GetYangName() string { return "clear-bgp-instance-version-afi-safi-ipv4-addr" }

func (clearBgpInstanceVersionAfiSafiIpv4Addr *ClearBgpInstanceVersionAfiSafiIpv4Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiIpv4Addr *ClearBgpInstanceVersionAfiSafiIpv4Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiIpv4Addr *ClearBgpInstanceVersionAfiSafiIpv4Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiIpv4Addr *ClearBgpInstanceVersionAfiSafiIpv4Addr) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiIpv4Addr.parent = parent }

func (clearBgpInstanceVersionAfiSafiIpv4Addr *ClearBgpInstanceVersionAfiSafiIpv4Addr) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiIpv4Addr.parent }

func (clearBgpInstanceVersionAfiSafiIpv4Addr *ClearBgpInstanceVersionAfiSafiIpv4Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiIpv4Addr_Input
type ClearBgpInstanceVersionAfiSafiIpv4Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiIpv4Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiIpv4Addr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-addr"] = input.Ipv4Addr
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiIpv4Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiIpv4Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiIpv4Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiIpv4Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiIpv4Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiIpv4Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiIpv4Addr_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-ipv4-addr" }

// ClearBgpInstanceVersionAfiSafiIpv4Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input
}

func (clearBgpInstanceVersionAfiSafiIpv4Prefix *ClearBgpInstanceVersionAfiSafiIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiIpv4Prefix.YFilter }

func (clearBgpInstanceVersionAfiSafiIpv4Prefix *ClearBgpInstanceVersionAfiSafiIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiIpv4Prefix.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiIpv4Prefix *ClearBgpInstanceVersionAfiSafiIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiIpv4Prefix *ClearBgpInstanceVersionAfiSafiIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-prefix"
}

func (clearBgpInstanceVersionAfiSafiIpv4Prefix *ClearBgpInstanceVersionAfiSafiIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiIpv4Prefix.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiIpv4Prefix *ClearBgpInstanceVersionAfiSafiIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiIpv4Prefix.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiIpv4Prefix *ClearBgpInstanceVersionAfiSafiIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiIpv4Prefix *ClearBgpInstanceVersionAfiSafiIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiIpv4Prefix *ClearBgpInstanceVersionAfiSafiIpv4Prefix) GetYangName() string { return "clear-bgp-instance-version-afi-safi-ipv4-prefix" }

func (clearBgpInstanceVersionAfiSafiIpv4Prefix *ClearBgpInstanceVersionAfiSafiIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiIpv4Prefix *ClearBgpInstanceVersionAfiSafiIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiIpv4Prefix *ClearBgpInstanceVersionAfiSafiIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiIpv4Prefix *ClearBgpInstanceVersionAfiSafiIpv4Prefix) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiIpv4Prefix.parent = parent }

func (clearBgpInstanceVersionAfiSafiIpv4Prefix *ClearBgpInstanceVersionAfiSafiIpv4Prefix) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiIpv4Prefix.parent }

func (clearBgpInstanceVersionAfiSafiIpv4Prefix *ClearBgpInstanceVersionAfiSafiIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input
type ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network and masklength. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-ipv4-prefix" }

// ClearBgpInstanceVersionAfiSafiRdIpv4Addr
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdIpv4Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input
}

func (clearBgpInstanceVersionAfiSafiRdIpv4Addr *ClearBgpInstanceVersionAfiSafiRdIpv4Addr) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiRdIpv4Addr.YFilter }

func (clearBgpInstanceVersionAfiSafiRdIpv4Addr *ClearBgpInstanceVersionAfiSafiRdIpv4Addr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiRdIpv4Addr.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiRdIpv4Addr *ClearBgpInstanceVersionAfiSafiRdIpv4Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiRdIpv4Addr *ClearBgpInstanceVersionAfiSafiRdIpv4Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr"
}

func (clearBgpInstanceVersionAfiSafiRdIpv4Addr *ClearBgpInstanceVersionAfiSafiRdIpv4Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiRdIpv4Addr.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiRdIpv4Addr *ClearBgpInstanceVersionAfiSafiRdIpv4Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiRdIpv4Addr.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiRdIpv4Addr *ClearBgpInstanceVersionAfiSafiRdIpv4Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiRdIpv4Addr *ClearBgpInstanceVersionAfiSafiRdIpv4Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiRdIpv4Addr *ClearBgpInstanceVersionAfiSafiRdIpv4Addr) GetYangName() string { return "clear-bgp-instance-version-afi-safi-rd-ipv4-addr" }

func (clearBgpInstanceVersionAfiSafiRdIpv4Addr *ClearBgpInstanceVersionAfiSafiRdIpv4Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiRdIpv4Addr *ClearBgpInstanceVersionAfiSafiRdIpv4Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiRdIpv4Addr *ClearBgpInstanceVersionAfiSafiRdIpv4Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiRdIpv4Addr *ClearBgpInstanceVersionAfiSafiRdIpv4Addr) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiRdIpv4Addr.parent = parent }

func (clearBgpInstanceVersionAfiSafiRdIpv4Addr *ClearBgpInstanceVersionAfiSafiRdIpv4Addr) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiRdIpv4Addr.parent }

func (clearBgpInstanceVersionAfiSafiRdIpv4Addr *ClearBgpInstanceVersionAfiSafiRdIpv4Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input
type ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv4 MDT network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv4-addr"] = input.Ipv4Addr
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Addr_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-rd-ipv4-addr" }

// ClearBgpInstanceVersionAfiSafiVrfIpv4Addr
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionAfiSafiVrfIpv4Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4Addr *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiVrfIpv4Addr.YFilter }

func (clearBgpInstanceVersionAfiSafiVrfIpv4Addr *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiVrfIpv4Addr.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiVrfIpv4Addr *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4Addr *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr"
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4Addr *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiVrfIpv4Addr.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4Addr *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiVrfIpv4Addr.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4Addr *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4Addr *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiVrfIpv4Addr *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr) GetYangName() string { return "clear-bgp-instance-version-afi-safi-vrf-ipv4-addr" }

func (clearBgpInstanceVersionAfiSafiVrfIpv4Addr *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiVrfIpv4Addr *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiVrfIpv4Addr *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiVrfIpv4Addr *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiVrfIpv4Addr.parent = parent }

func (clearBgpInstanceVersionAfiSafiVrfIpv4Addr *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiVrfIpv4Addr.parent }

func (clearBgpInstanceVersionAfiSafiVrfIpv4Addr *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input
type ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv4 MDT network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv4-addr"] = input.Ipv4Addr
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Addr_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-vrf-ipv4-addr" }

// ClearBgpInstanceVersionAfiSafiNetwork
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiNetwork_Input
}

func (clearBgpInstanceVersionAfiSafiNetwork *ClearBgpInstanceVersionAfiSafiNetwork) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiNetwork.YFilter }

func (clearBgpInstanceVersionAfiSafiNetwork *ClearBgpInstanceVersionAfiSafiNetwork) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiNetwork.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiNetwork *ClearBgpInstanceVersionAfiSafiNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiNetwork *ClearBgpInstanceVersionAfiSafiNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-network"
}

func (clearBgpInstanceVersionAfiSafiNetwork *ClearBgpInstanceVersionAfiSafiNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiNetwork.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiNetwork *ClearBgpInstanceVersionAfiSafiNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiNetwork.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiNetwork *ClearBgpInstanceVersionAfiSafiNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiNetwork *ClearBgpInstanceVersionAfiSafiNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiNetwork *ClearBgpInstanceVersionAfiSafiNetwork) GetYangName() string { return "clear-bgp-instance-version-afi-safi-network" }

func (clearBgpInstanceVersionAfiSafiNetwork *ClearBgpInstanceVersionAfiSafiNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiNetwork *ClearBgpInstanceVersionAfiSafiNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiNetwork *ClearBgpInstanceVersionAfiSafiNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiNetwork *ClearBgpInstanceVersionAfiSafiNetwork) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiNetwork.parent = parent }

func (clearBgpInstanceVersionAfiSafiNetwork *ClearBgpInstanceVersionAfiSafiNetwork) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiNetwork.parent }

func (clearBgpInstanceVersionAfiSafiNetwork *ClearBgpInstanceVersionAfiSafiNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiNetwork_Input
type ClearBgpInstanceVersionAfiSafiNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiNetwork_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiNetwork_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-network" }

// ClearBgpInstanceVersionAfiSafiRdNetwork
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdNetwork_Input
}

func (clearBgpInstanceVersionAfiSafiRdNetwork *ClearBgpInstanceVersionAfiSafiRdNetwork) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiRdNetwork.YFilter }

func (clearBgpInstanceVersionAfiSafiRdNetwork *ClearBgpInstanceVersionAfiSafiRdNetwork) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiRdNetwork.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiRdNetwork *ClearBgpInstanceVersionAfiSafiRdNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiRdNetwork *ClearBgpInstanceVersionAfiSafiRdNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-network"
}

func (clearBgpInstanceVersionAfiSafiRdNetwork *ClearBgpInstanceVersionAfiSafiRdNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiRdNetwork.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiRdNetwork *ClearBgpInstanceVersionAfiSafiRdNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiRdNetwork.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiRdNetwork *ClearBgpInstanceVersionAfiSafiRdNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiRdNetwork *ClearBgpInstanceVersionAfiSafiRdNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiRdNetwork *ClearBgpInstanceVersionAfiSafiRdNetwork) GetYangName() string { return "clear-bgp-instance-version-afi-safi-rd-network" }

func (clearBgpInstanceVersionAfiSafiRdNetwork *ClearBgpInstanceVersionAfiSafiRdNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiRdNetwork *ClearBgpInstanceVersionAfiSafiRdNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiRdNetwork *ClearBgpInstanceVersionAfiSafiRdNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiRdNetwork *ClearBgpInstanceVersionAfiSafiRdNetwork) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiRdNetwork.parent = parent }

func (clearBgpInstanceVersionAfiSafiRdNetwork *ClearBgpInstanceVersionAfiSafiRdNetwork) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiRdNetwork.parent }

func (clearBgpInstanceVersionAfiSafiRdNetwork *ClearBgpInstanceVersionAfiSafiRdNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiRdNetwork_Input
type ClearBgpInstanceVersionAfiSafiRdNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiRdNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiRdNetwork_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiRdNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiRdNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiRdNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiRdNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiRdNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiRdNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiRdNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiRdNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiRdNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiRdNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiRdNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiRdNetwork_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-rd-network" }

// ClearBgpInstanceVersionAfiSafiVrfNetwork
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionAfiSafiVrfNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiVrfNetwork_Input
}

func (clearBgpInstanceVersionAfiSafiVrfNetwork *ClearBgpInstanceVersionAfiSafiVrfNetwork) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiVrfNetwork.YFilter }

func (clearBgpInstanceVersionAfiSafiVrfNetwork *ClearBgpInstanceVersionAfiSafiVrfNetwork) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiVrfNetwork.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiVrfNetwork *ClearBgpInstanceVersionAfiSafiVrfNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiVrfNetwork *ClearBgpInstanceVersionAfiSafiVrfNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-network"
}

func (clearBgpInstanceVersionAfiSafiVrfNetwork *ClearBgpInstanceVersionAfiSafiVrfNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiVrfNetwork.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiVrfNetwork *ClearBgpInstanceVersionAfiSafiVrfNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiVrfNetwork.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiVrfNetwork *ClearBgpInstanceVersionAfiSafiVrfNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiVrfNetwork *ClearBgpInstanceVersionAfiSafiVrfNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiVrfNetwork *ClearBgpInstanceVersionAfiSafiVrfNetwork) GetYangName() string { return "clear-bgp-instance-version-afi-safi-vrf-network" }

func (clearBgpInstanceVersionAfiSafiVrfNetwork *ClearBgpInstanceVersionAfiSafiVrfNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiVrfNetwork *ClearBgpInstanceVersionAfiSafiVrfNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiVrfNetwork *ClearBgpInstanceVersionAfiSafiVrfNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiVrfNetwork *ClearBgpInstanceVersionAfiSafiVrfNetwork) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiVrfNetwork.parent = parent }

func (clearBgpInstanceVersionAfiSafiVrfNetwork *ClearBgpInstanceVersionAfiSafiVrfNetwork) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiVrfNetwork.parent }

func (clearBgpInstanceVersionAfiSafiVrfNetwork *ClearBgpInstanceVersionAfiSafiVrfNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiVrfNetwork_Input
type ClearBgpInstanceVersionAfiSafiVrfNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiVrfNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiVrfNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiVrfNetwork_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiVrfNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiVrfNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiVrfNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiVrfNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiVrfNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiVrfNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiVrfNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiVrfNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiVrfNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiVrfNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiVrfNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiVrfNetwork_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-vrf-network" }

// ClearBgpInstanceVersionAfiSafiRtConstraintNetwork
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiRtConstraintNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input
}

func (clearBgpInstanceVersionAfiSafiRtConstraintNetwork *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiRtConstraintNetwork.YFilter }

func (clearBgpInstanceVersionAfiSafiRtConstraintNetwork *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiRtConstraintNetwork.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiRtConstraintNetwork *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiRtConstraintNetwork *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rt-constraint-network"
}

func (clearBgpInstanceVersionAfiSafiRtConstraintNetwork *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiRtConstraintNetwork.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiRtConstraintNetwork *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiRtConstraintNetwork.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiRtConstraintNetwork *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiRtConstraintNetwork *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiRtConstraintNetwork *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork) GetYangName() string { return "clear-bgp-instance-version-afi-safi-rt-constraint-network" }

func (clearBgpInstanceVersionAfiSafiRtConstraintNetwork *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiRtConstraintNetwork *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiRtConstraintNetwork *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiRtConstraintNetwork *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiRtConstraintNetwork.parent = parent }

func (clearBgpInstanceVersionAfiSafiRtConstraintNetwork *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiRtConstraintNetwork.parent }

func (clearBgpInstanceVersionAfiSafiRtConstraintNetwork *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input
type ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // RT-Constraint network. The type is string. This attribute is mandatory.
    RtConstraintNetwork interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rt-constraint-network" { return "RtConstraintNetwork" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rt-constraint-network"] = input.RtConstraintNetwork
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiRtConstraintNetwork_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-rt-constraint-network" }

// ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input
}

func (clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.YFilter }

func (clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv4-tunnel-network"
}

func (clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork) GetYangName() string { return "clear-bgp-instance-version-afi-safi-ipv4-tunnel-network" }

func (clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.parent = parent }

func (clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork.parent }

func (clearBgpInstanceVersionAfiSafiIpv4TunnelNetwork *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input
type ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Tunnel network <Tunnel-ID>:<IPv4 Address>. The type is string. This
    // attribute is mandatory.
    Ipv4TunnelNetwork interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-tunnel-network" { return "Ipv4TunnelNetwork" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-tunnel-network"] = input.Ipv4TunnelNetwork
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiIpv4TunnelNetwork_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-ipv4-tunnel-network" }

// ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input
}

func (clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.YFilter }

func (clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask"
}

func (clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask) GetYangName() string { return "clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask" }

func (clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.parent = parent }

func (clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask.parent }

func (clearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input
type ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    if yname == "ipv6-netmask" { return "Ipv6Netmask" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-addr"] = input.Ipv6Addr
    leafs["ipv6-netmask"] = input.Ipv6Netmask
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-ipv6-addr-ipv6-netmask" }

// ClearBgpInstanceVersionAfiSafiIpv6Addr
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpv6Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpv6Addr_Input
}

func (clearBgpInstanceVersionAfiSafiIpv6Addr *ClearBgpInstanceVersionAfiSafiIpv6Addr) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiIpv6Addr.YFilter }

func (clearBgpInstanceVersionAfiSafiIpv6Addr *ClearBgpInstanceVersionAfiSafiIpv6Addr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiIpv6Addr.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiIpv6Addr *ClearBgpInstanceVersionAfiSafiIpv6Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiIpv6Addr *ClearBgpInstanceVersionAfiSafiIpv6Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-addr"
}

func (clearBgpInstanceVersionAfiSafiIpv6Addr *ClearBgpInstanceVersionAfiSafiIpv6Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiIpv6Addr.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiIpv6Addr *ClearBgpInstanceVersionAfiSafiIpv6Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiIpv6Addr.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiIpv6Addr *ClearBgpInstanceVersionAfiSafiIpv6Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiIpv6Addr *ClearBgpInstanceVersionAfiSafiIpv6Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiIpv6Addr *ClearBgpInstanceVersionAfiSafiIpv6Addr) GetYangName() string { return "clear-bgp-instance-version-afi-safi-ipv6-addr" }

func (clearBgpInstanceVersionAfiSafiIpv6Addr *ClearBgpInstanceVersionAfiSafiIpv6Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiIpv6Addr *ClearBgpInstanceVersionAfiSafiIpv6Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiIpv6Addr *ClearBgpInstanceVersionAfiSafiIpv6Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiIpv6Addr *ClearBgpInstanceVersionAfiSafiIpv6Addr) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiIpv6Addr.parent = parent }

func (clearBgpInstanceVersionAfiSafiIpv6Addr *ClearBgpInstanceVersionAfiSafiIpv6Addr) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiIpv6Addr.parent }

func (clearBgpInstanceVersionAfiSafiIpv6Addr *ClearBgpInstanceVersionAfiSafiIpv6Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiIpv6Addr_Input
type ClearBgpInstanceVersionAfiSafiIpv6Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiIpv6Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiIpv6Addr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-addr"] = input.Ipv6Addr
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiIpv6Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiIpv6Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiIpv6Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiIpv6Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiIpv6Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiIpv6Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiIpv6Addr_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-ipv6-addr" }

// ClearBgpInstanceVersionAfiSafiIpv6Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input
}

func (clearBgpInstanceVersionAfiSafiIpv6Prefix *ClearBgpInstanceVersionAfiSafiIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiIpv6Prefix.YFilter }

func (clearBgpInstanceVersionAfiSafiIpv6Prefix *ClearBgpInstanceVersionAfiSafiIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiIpv6Prefix.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiIpv6Prefix *ClearBgpInstanceVersionAfiSafiIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiIpv6Prefix *ClearBgpInstanceVersionAfiSafiIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-ipv6-prefix"
}

func (clearBgpInstanceVersionAfiSafiIpv6Prefix *ClearBgpInstanceVersionAfiSafiIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiIpv6Prefix.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiIpv6Prefix *ClearBgpInstanceVersionAfiSafiIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiIpv6Prefix.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiIpv6Prefix *ClearBgpInstanceVersionAfiSafiIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiIpv6Prefix *ClearBgpInstanceVersionAfiSafiIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiIpv6Prefix *ClearBgpInstanceVersionAfiSafiIpv6Prefix) GetYangName() string { return "clear-bgp-instance-version-afi-safi-ipv6-prefix" }

func (clearBgpInstanceVersionAfiSafiIpv6Prefix *ClearBgpInstanceVersionAfiSafiIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiIpv6Prefix *ClearBgpInstanceVersionAfiSafiIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiIpv6Prefix *ClearBgpInstanceVersionAfiSafiIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiIpv6Prefix *ClearBgpInstanceVersionAfiSafiIpv6Prefix) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiIpv6Prefix.parent = parent }

func (clearBgpInstanceVersionAfiSafiIpv6Prefix *ClearBgpInstanceVersionAfiSafiIpv6Prefix) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiIpv6Prefix.parent }

func (clearBgpInstanceVersionAfiSafiIpv6Prefix *ClearBgpInstanceVersionAfiSafiIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input
type ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-ipv6-prefix" }

// ClearBgpInstanceVersionAfiSafiRd
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRd_Input
}

func (clearBgpInstanceVersionAfiSafiRd *ClearBgpInstanceVersionAfiSafiRd) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiRd.YFilter }

func (clearBgpInstanceVersionAfiSafiRd *ClearBgpInstanceVersionAfiSafiRd) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiRd.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiRd *ClearBgpInstanceVersionAfiSafiRd) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiRd *ClearBgpInstanceVersionAfiSafiRd) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd"
}

func (clearBgpInstanceVersionAfiSafiRd *ClearBgpInstanceVersionAfiSafiRd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiRd.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiRd *ClearBgpInstanceVersionAfiSafiRd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiRd.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiRd *ClearBgpInstanceVersionAfiSafiRd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiRd *ClearBgpInstanceVersionAfiSafiRd) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiRd *ClearBgpInstanceVersionAfiSafiRd) GetYangName() string { return "clear-bgp-instance-version-afi-safi-rd" }

func (clearBgpInstanceVersionAfiSafiRd *ClearBgpInstanceVersionAfiSafiRd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiRd *ClearBgpInstanceVersionAfiSafiRd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiRd *ClearBgpInstanceVersionAfiSafiRd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiRd *ClearBgpInstanceVersionAfiSafiRd) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiRd.parent = parent }

func (clearBgpInstanceVersionAfiSafiRd *ClearBgpInstanceVersionAfiSafiRd) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiRd.parent }

func (clearBgpInstanceVersionAfiSafiRd *ClearBgpInstanceVersionAfiSafiRd) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiRd_Input
type ClearBgpInstanceVersionAfiSafiRd_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRd_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiRd_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiRd_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiRd_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiRd_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiRd_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiRd_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiRd_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiRd_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiRd_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiRd_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiRd_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiRd_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiRd_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiRd_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-rd" }

// ClearBgpInstanceVersionAfiSafiVrf
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionAfiSafiVrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiVrf_Input
}

func (clearBgpInstanceVersionAfiSafiVrf *ClearBgpInstanceVersionAfiSafiVrf) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiVrf.YFilter }

func (clearBgpInstanceVersionAfiSafiVrf *ClearBgpInstanceVersionAfiSafiVrf) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiVrf.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiVrf *ClearBgpInstanceVersionAfiSafiVrf) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiVrf *ClearBgpInstanceVersionAfiSafiVrf) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf"
}

func (clearBgpInstanceVersionAfiSafiVrf *ClearBgpInstanceVersionAfiSafiVrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiVrf.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiVrf *ClearBgpInstanceVersionAfiSafiVrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiVrf.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiVrf *ClearBgpInstanceVersionAfiSafiVrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiVrf *ClearBgpInstanceVersionAfiSafiVrf) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiVrf *ClearBgpInstanceVersionAfiSafiVrf) GetYangName() string { return "clear-bgp-instance-version-afi-safi-vrf" }

func (clearBgpInstanceVersionAfiSafiVrf *ClearBgpInstanceVersionAfiSafiVrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiVrf *ClearBgpInstanceVersionAfiSafiVrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiVrf *ClearBgpInstanceVersionAfiSafiVrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiVrf *ClearBgpInstanceVersionAfiSafiVrf) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiVrf.parent = parent }

func (clearBgpInstanceVersionAfiSafiVrf *ClearBgpInstanceVersionAfiSafiVrf) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiVrf.parent }

func (clearBgpInstanceVersionAfiSafiVrf *ClearBgpInstanceVersionAfiSafiVrf) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiVrf_Input
type ClearBgpInstanceVersionAfiSafiVrf_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiVrf_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiVrf_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiVrf_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiVrf_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiVrf_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiVrf_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiVrf_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiVrf_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiVrf_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiVrf_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiVrf_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiVrf_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiVrf_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiVrf_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiVrf_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-vrf" }

// ClearBgpInstanceVersionAfiSafi
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafi_Input
}

func (clearBgpInstanceVersionAfiSafi *ClearBgpInstanceVersionAfiSafi) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafi.YFilter }

func (clearBgpInstanceVersionAfiSafi *ClearBgpInstanceVersionAfiSafi) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafi.YFilter = yf }

func (clearBgpInstanceVersionAfiSafi *ClearBgpInstanceVersionAfiSafi) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafi *ClearBgpInstanceVersionAfiSafi) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi"
}

func (clearBgpInstanceVersionAfiSafi *ClearBgpInstanceVersionAfiSafi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafi.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafi *ClearBgpInstanceVersionAfiSafi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafi.Input
    return children
}

func (clearBgpInstanceVersionAfiSafi *ClearBgpInstanceVersionAfiSafi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafi *ClearBgpInstanceVersionAfiSafi) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafi *ClearBgpInstanceVersionAfiSafi) GetYangName() string { return "clear-bgp-instance-version-afi-safi" }

func (clearBgpInstanceVersionAfiSafi *ClearBgpInstanceVersionAfiSafi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafi *ClearBgpInstanceVersionAfiSafi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafi *ClearBgpInstanceVersionAfiSafi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafi *ClearBgpInstanceVersionAfiSafi) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafi.parent = parent }

func (clearBgpInstanceVersionAfiSafi *ClearBgpInstanceVersionAfiSafi) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafi.parent }

func (clearBgpInstanceVersionAfiSafi *ClearBgpInstanceVersionAfiSafi) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafi_Input
type ClearBgpInstanceVersionAfiSafi_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVersionAfiSafi_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafi_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafi_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafi_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafi_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafi_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafi_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafi_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafi_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafi_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafi_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafi_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafi_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafi_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafi_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi" }

// ClearBgpInstanceVersionAfiSafiSrPolicyPrefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// 
type ClearBgpInstanceVersionAfiSafiSrPolicyPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input
}

func (clearBgpInstanceVersionAfiSafiSrPolicyPrefix *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiSrPolicyPrefix.YFilter }

func (clearBgpInstanceVersionAfiSafiSrPolicyPrefix *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiSrPolicyPrefix.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiSrPolicyPrefix *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiSrPolicyPrefix *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-sr-policy-prefix"
}

func (clearBgpInstanceVersionAfiSafiSrPolicyPrefix *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiSrPolicyPrefix.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiSrPolicyPrefix *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiSrPolicyPrefix.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiSrPolicyPrefix *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiSrPolicyPrefix *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiSrPolicyPrefix *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix) GetYangName() string { return "clear-bgp-instance-version-afi-safi-sr-policy-prefix" }

func (clearBgpInstanceVersionAfiSafiSrPolicyPrefix *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiSrPolicyPrefix *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiSrPolicyPrefix *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiSrPolicyPrefix *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiSrPolicyPrefix.parent = parent }

func (clearBgpInstanceVersionAfiSafiSrPolicyPrefix *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiSrPolicyPrefix.parent }

func (clearBgpInstanceVersionAfiSafiSrPolicyPrefix *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input
type ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // SR Policy prefix. The type is string. This attribute is mandatory.
    SrPolicyPrefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "sr-policy-prefix" { return "SrPolicyPrefix" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["sr-policy-prefix"] = input.SrPolicyPrefix
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiSrPolicyPrefix_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-sr-policy-prefix" }

// ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.YFilter }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix"
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix) GetYangName() string { return "clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix" }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.parent = parent }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix.parent }

func (clearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input
type ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // L2VPN EVPN Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "bridge-domain-name" { return "BridgeDomainName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["bridge-domain-name"] = input.BridgeDomainName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-bridge-domain-ipv4-prefix" }

// ClearBgpInstanceVersionAfiSafiRdIpv4Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input
}

func (clearBgpInstanceVersionAfiSafiRdIpv4Prefix *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiRdIpv4Prefix.YFilter }

func (clearBgpInstanceVersionAfiSafiRdIpv4Prefix *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiRdIpv4Prefix.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiRdIpv4Prefix *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiRdIpv4Prefix *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-prefix"
}

func (clearBgpInstanceVersionAfiSafiRdIpv4Prefix *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiRdIpv4Prefix.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiRdIpv4Prefix *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiRdIpv4Prefix.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiRdIpv4Prefix *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiRdIpv4Prefix *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiRdIpv4Prefix *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix) GetYangName() string { return "clear-bgp-instance-version-afi-safi-rd-ipv4-prefix" }

func (clearBgpInstanceVersionAfiSafiRdIpv4Prefix *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiRdIpv4Prefix *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiRdIpv4Prefix *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiRdIpv4Prefix *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiRdIpv4Prefix.parent = parent }

func (clearBgpInstanceVersionAfiSafiRdIpv4Prefix *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiRdIpv4Prefix.parent }

func (clearBgpInstanceVersionAfiSafiRdIpv4Prefix *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input
type ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // L2VPN EVPN Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-rd-ipv4-prefix" }

// ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified Xconnect group:MP2MP.
// 
type ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix_Input
}

func (clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix.YFilter }

func (clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix"
}

func (clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix) GetYangName() string { return "clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix" }

func (clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix.parent = parent }

func (clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix.parent }

func (clearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix_Input
type ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Xconnect Group:mp2mp. The type is string. This attribute is mandatory.
    Mp2Mp interface{}

    // L2VPN VPWS Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "mp2mp" { return "Mp2Mp" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["mp2mp"] = input.Mp2Mp
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiMp2MpIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-mp2mp-ipv4-prefix" }

// ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.YFilter }

func (clearBgpInstanceVersionAfiSafiVrfIpv4Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiVrfIpv4Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix"
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiVrfIpv4Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix) GetYangName() string { return "clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix" }

func (clearBgpInstanceVersionAfiSafiVrfIpv4Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiVrfIpv4Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiVrfIpv4Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiVrfIpv4Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.parent = parent }

func (clearBgpInstanceVersionAfiSafiVrfIpv4Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiVrfIpv4Prefix.parent }

func (clearBgpInstanceVersionAfiSafiVrfIpv4Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input
type ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // VPN Fspec Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-vrf-ipv4-prefix" }

// ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input
}

func (clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.YFilter }

func (clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask"
}

func (clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask) GetYangName() string { return "clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask" }

func (clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.parent = parent }

func (clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask.parent }

func (clearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input
type ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv4-addr"] = input.Ipv4Addr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-rd-ipv4-addr-ipv4-mask" }

// ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.YFilter }

func (clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask"
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask) GetYangName() string { return "clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask" }

func (clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.parent = parent }

func (clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask.parent }

func (clearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input
type ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv4-addr"] = input.Ipv4Addr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-vrf-ipv4-addr-ipv4-mask" }

// ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input
}

func (clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.YFilter }

func (clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask"
}

func (clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask) GetYangName() string { return "clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask" }

func (clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.parent = parent }

func (clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask.parent }

func (clearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input
type ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    if yname == "ipv6-netmask" { return "Ipv6Netmask" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv6-addr"] = input.Ipv6Addr
    leafs["ipv6-netmask"] = input.Ipv6Netmask
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-rd-ipv6-addr-ipv6-netmask" }

// ClearBgpInstanceVersionAfiSafiRdIpv6Addr
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdIpv6Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input
}

func (clearBgpInstanceVersionAfiSafiRdIpv6Addr *ClearBgpInstanceVersionAfiSafiRdIpv6Addr) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiRdIpv6Addr.YFilter }

func (clearBgpInstanceVersionAfiSafiRdIpv6Addr *ClearBgpInstanceVersionAfiSafiRdIpv6Addr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiRdIpv6Addr.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiRdIpv6Addr *ClearBgpInstanceVersionAfiSafiRdIpv6Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiRdIpv6Addr *ClearBgpInstanceVersionAfiSafiRdIpv6Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-addr"
}

func (clearBgpInstanceVersionAfiSafiRdIpv6Addr *ClearBgpInstanceVersionAfiSafiRdIpv6Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiRdIpv6Addr.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiRdIpv6Addr *ClearBgpInstanceVersionAfiSafiRdIpv6Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiRdIpv6Addr.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiRdIpv6Addr *ClearBgpInstanceVersionAfiSafiRdIpv6Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiRdIpv6Addr *ClearBgpInstanceVersionAfiSafiRdIpv6Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiRdIpv6Addr *ClearBgpInstanceVersionAfiSafiRdIpv6Addr) GetYangName() string { return "clear-bgp-instance-version-afi-safi-rd-ipv6-addr" }

func (clearBgpInstanceVersionAfiSafiRdIpv6Addr *ClearBgpInstanceVersionAfiSafiRdIpv6Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiRdIpv6Addr *ClearBgpInstanceVersionAfiSafiRdIpv6Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiRdIpv6Addr *ClearBgpInstanceVersionAfiSafiRdIpv6Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiRdIpv6Addr *ClearBgpInstanceVersionAfiSafiRdIpv6Addr) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiRdIpv6Addr.parent = parent }

func (clearBgpInstanceVersionAfiSafiRdIpv6Addr *ClearBgpInstanceVersionAfiSafiRdIpv6Addr) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiRdIpv6Addr.parent }

func (clearBgpInstanceVersionAfiSafiRdIpv6Addr *ClearBgpInstanceVersionAfiSafiRdIpv6Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input
type ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv6-addr"] = input.Ipv6Addr
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Addr_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-rd-ipv6-addr" }

// ClearBgpInstanceVersionAfiSafiRdIpv6Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionAfiSafiRdIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input
}

func (clearBgpInstanceVersionAfiSafiRdIpv6Prefix *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiRdIpv6Prefix.YFilter }

func (clearBgpInstanceVersionAfiSafiRdIpv6Prefix *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiRdIpv6Prefix.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiRdIpv6Prefix *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiRdIpv6Prefix *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-rd-ipv6-prefix"
}

func (clearBgpInstanceVersionAfiSafiRdIpv6Prefix *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiRdIpv6Prefix.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiRdIpv6Prefix *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiRdIpv6Prefix.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiRdIpv6Prefix *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiRdIpv6Prefix *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiRdIpv6Prefix *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix) GetYangName() string { return "clear-bgp-instance-version-afi-safi-rd-ipv6-prefix" }

func (clearBgpInstanceVersionAfiSafiRdIpv6Prefix *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiRdIpv6Prefix *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiRdIpv6Prefix *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiRdIpv6Prefix *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiRdIpv6Prefix.parent = parent }

func (clearBgpInstanceVersionAfiSafiRdIpv6Prefix *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiRdIpv6Prefix.parent }

func (clearBgpInstanceVersionAfiSafiRdIpv6Prefix *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input
type ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiRdIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-rd-ipv6-prefix" }

// ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.YFilter }

func (clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetYangName() string { return "clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask" }

func (clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.parent = parent }

func (clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask.parent }

func (clearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input
type ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    if yname == "ipv6-netmask" { return "Ipv6Netmask" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv6-addr"] = input.Ipv6Addr
    leafs["ipv6-netmask"] = input.Ipv6Netmask
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-vrf-ipv6-addr-ipv6-netmask" }

// ClearBgpInstanceVersionAfiSafiVrfIpv6Addr
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionAfiSafiVrfIpv6Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6Addr *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiVrfIpv6Addr.YFilter }

func (clearBgpInstanceVersionAfiSafiVrfIpv6Addr *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiVrfIpv6Addr.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiVrfIpv6Addr *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6Addr *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-addr"
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6Addr *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiVrfIpv6Addr.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6Addr *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiVrfIpv6Addr.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6Addr *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6Addr *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiVrfIpv6Addr *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr) GetYangName() string { return "clear-bgp-instance-version-afi-safi-vrf-ipv6-addr" }

func (clearBgpInstanceVersionAfiSafiVrfIpv6Addr *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiVrfIpv6Addr *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiVrfIpv6Addr *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiVrfIpv6Addr *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiVrfIpv6Addr.parent = parent }

func (clearBgpInstanceVersionAfiSafiVrfIpv6Addr *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiVrfIpv6Addr.parent }

func (clearBgpInstanceVersionAfiSafiVrfIpv6Addr *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input
type ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv6-addr"] = input.Ipv6Addr
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Addr_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-vrf-ipv6-addr" }

// ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.YFilter }

func (clearBgpInstanceVersionAfiSafiVrfIpv6Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.YFilter = yf }

func (clearBgpInstanceVersionAfiSafiVrfIpv6Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix"
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.Input
    }
    return nil
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.Input
    return children
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionAfiSafiVrfIpv6Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionAfiSafiVrfIpv6Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix) GetYangName() string { return "clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix" }

func (clearBgpInstanceVersionAfiSafiVrfIpv6Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionAfiSafiVrfIpv6Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionAfiSafiVrfIpv6Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionAfiSafiVrfIpv6Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix) SetParent(parent types.Entity) { clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.parent = parent }

func (clearBgpInstanceVersionAfiSafiVrfIpv6Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix) GetParent() types.Entity { return clearBgpInstanceVersionAfiSafiVrfIpv6Prefix.parent }

func (clearBgpInstanceVersionAfiSafiVrfIpv6Prefix *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input
type ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionAfiSafiVrfIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-version-afi-safi-vrf-ipv6-prefix" }

// ClearBgpInstanceVersionVrfIpAddrIpNetmask
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input
}

func (clearBgpInstanceVersionVrfIpAddrIpNetmask *ClearBgpInstanceVersionVrfIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionVrfIpAddrIpNetmask.YFilter }

func (clearBgpInstanceVersionVrfIpAddrIpNetmask *ClearBgpInstanceVersionVrfIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionVrfIpAddrIpNetmask.YFilter = yf }

func (clearBgpInstanceVersionVrfIpAddrIpNetmask *ClearBgpInstanceVersionVrfIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionVrfIpAddrIpNetmask *ClearBgpInstanceVersionVrfIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr-ip-netmask"
}

func (clearBgpInstanceVersionVrfIpAddrIpNetmask *ClearBgpInstanceVersionVrfIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionVrfIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpInstanceVersionVrfIpAddrIpNetmask *ClearBgpInstanceVersionVrfIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionVrfIpAddrIpNetmask.Input
    return children
}

func (clearBgpInstanceVersionVrfIpAddrIpNetmask *ClearBgpInstanceVersionVrfIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionVrfIpAddrIpNetmask *ClearBgpInstanceVersionVrfIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionVrfIpAddrIpNetmask *ClearBgpInstanceVersionVrfIpAddrIpNetmask) GetYangName() string { return "clear-bgp-instance-version-vrf-ip-addr-ip-netmask" }

func (clearBgpInstanceVersionVrfIpAddrIpNetmask *ClearBgpInstanceVersionVrfIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionVrfIpAddrIpNetmask *ClearBgpInstanceVersionVrfIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionVrfIpAddrIpNetmask *ClearBgpInstanceVersionVrfIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionVrfIpAddrIpNetmask *ClearBgpInstanceVersionVrfIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpInstanceVersionVrfIpAddrIpNetmask.parent = parent }

func (clearBgpInstanceVersionVrfIpAddrIpNetmask *ClearBgpInstanceVersionVrfIpAddrIpNetmask) GetParent() types.Entity { return clearBgpInstanceVersionVrfIpAddrIpNetmask.parent }

func (clearBgpInstanceVersionVrfIpAddrIpNetmask *ClearBgpInstanceVersionVrfIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input
type ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionVrfIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-instance-version-vrf-ip-addr-ip-netmask" }

// ClearBgpInstanceVersionVrfIpAddr
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfIpAddr_Input
}

func (clearBgpInstanceVersionVrfIpAddr *ClearBgpInstanceVersionVrfIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionVrfIpAddr.YFilter }

func (clearBgpInstanceVersionVrfIpAddr *ClearBgpInstanceVersionVrfIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionVrfIpAddr.YFilter = yf }

func (clearBgpInstanceVersionVrfIpAddr *ClearBgpInstanceVersionVrfIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionVrfIpAddr *ClearBgpInstanceVersionVrfIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-addr"
}

func (clearBgpInstanceVersionVrfIpAddr *ClearBgpInstanceVersionVrfIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionVrfIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceVersionVrfIpAddr *ClearBgpInstanceVersionVrfIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionVrfIpAddr.Input
    return children
}

func (clearBgpInstanceVersionVrfIpAddr *ClearBgpInstanceVersionVrfIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionVrfIpAddr *ClearBgpInstanceVersionVrfIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionVrfIpAddr *ClearBgpInstanceVersionVrfIpAddr) GetYangName() string { return "clear-bgp-instance-version-vrf-ip-addr" }

func (clearBgpInstanceVersionVrfIpAddr *ClearBgpInstanceVersionVrfIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionVrfIpAddr *ClearBgpInstanceVersionVrfIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionVrfIpAddr *ClearBgpInstanceVersionVrfIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionVrfIpAddr *ClearBgpInstanceVersionVrfIpAddr) SetParent(parent types.Entity) { clearBgpInstanceVersionVrfIpAddr.parent = parent }

func (clearBgpInstanceVersionVrfIpAddr *ClearBgpInstanceVersionVrfIpAddr) GetParent() types.Entity { return clearBgpInstanceVersionVrfIpAddr.parent }

func (clearBgpInstanceVersionVrfIpAddr *ClearBgpInstanceVersionVrfIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionVrfIpAddr_Input
type ClearBgpInstanceVersionVrfIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVersionVrfIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionVrfIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionVrfIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVersionVrfIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionVrfIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionVrfIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionVrfIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVersionVrfIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionVrfIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionVrfIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionVrfIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionVrfIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionVrfIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionVrfIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionVrfIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-version-vrf-ip-addr" }

// ClearBgpInstanceVersionVrfIpPrefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfIpPrefix_Input
}

func (clearBgpInstanceVersionVrfIpPrefix *ClearBgpInstanceVersionVrfIpPrefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionVrfIpPrefix.YFilter }

func (clearBgpInstanceVersionVrfIpPrefix *ClearBgpInstanceVersionVrfIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionVrfIpPrefix.YFilter = yf }

func (clearBgpInstanceVersionVrfIpPrefix *ClearBgpInstanceVersionVrfIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionVrfIpPrefix *ClearBgpInstanceVersionVrfIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-ip-prefix"
}

func (clearBgpInstanceVersionVrfIpPrefix *ClearBgpInstanceVersionVrfIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionVrfIpPrefix.Input
    }
    return nil
}

func (clearBgpInstanceVersionVrfIpPrefix *ClearBgpInstanceVersionVrfIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionVrfIpPrefix.Input
    return children
}

func (clearBgpInstanceVersionVrfIpPrefix *ClearBgpInstanceVersionVrfIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionVrfIpPrefix *ClearBgpInstanceVersionVrfIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionVrfIpPrefix *ClearBgpInstanceVersionVrfIpPrefix) GetYangName() string { return "clear-bgp-instance-version-vrf-ip-prefix" }

func (clearBgpInstanceVersionVrfIpPrefix *ClearBgpInstanceVersionVrfIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionVrfIpPrefix *ClearBgpInstanceVersionVrfIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionVrfIpPrefix *ClearBgpInstanceVersionVrfIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionVrfIpPrefix *ClearBgpInstanceVersionVrfIpPrefix) SetParent(parent types.Entity) { clearBgpInstanceVersionVrfIpPrefix.parent = parent }

func (clearBgpInstanceVersionVrfIpPrefix *ClearBgpInstanceVersionVrfIpPrefix) GetParent() types.Entity { return clearBgpInstanceVersionVrfIpPrefix.parent }

func (clearBgpInstanceVersionVrfIpPrefix *ClearBgpInstanceVersionVrfIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionVrfIpPrefix_Input
type ClearBgpInstanceVersionVrfIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpInstanceVersionVrfIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionVrfIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionVrfIpPrefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpInstanceVersionVrfIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionVrfIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionVrfIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionVrfIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpInstanceVersionVrfIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionVrfIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionVrfIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionVrfIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionVrfIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionVrfIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionVrfIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionVrfIpPrefix_Input) GetParentYangName() string { return "clear-bgp-instance-version-vrf-ip-prefix" }

// ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.YFilter }

func (clearBgpInstanceVersionVrfAfiSafiIpv4Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.YFilter = yf }

func (clearBgpInstanceVersionVrfAfiSafiIpv4Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix"
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.Input
    }
    return nil
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.Input
    return children
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionVrfAfiSafiIpv4Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix) GetYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix" }

func (clearBgpInstanceVersionVrfAfiSafiIpv4Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionVrfAfiSafiIpv4Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionVrfAfiSafiIpv4Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionVrfAfiSafiIpv4Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix) SetParent(parent types.Entity) { clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.parent = parent }

func (clearBgpInstanceVersionVrfAfiSafiIpv4Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix) GetParent() types.Entity { return clearBgpInstanceVersionVrfAfiSafiIpv4Prefix.parent }

func (clearBgpInstanceVersionVrfAfiSafiIpv4Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input
type ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Fspec IPv4 Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-ipv4-prefix" }

// ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.YFilter }

func (clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.YFilter = yf }

func (clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask"
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.Input
    return children
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask) GetYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask" }

func (clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask) SetParent(parent types.Entity) { clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.parent = parent }

func (clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask) GetParent() types.Entity { return clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask.parent }

func (clearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input
type ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-addr"] = input.Ipv4Addr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-ipv4-addr-ipv4-mask" }

// ClearBgpInstanceVersionVrfAfiSafiIpv4Addr
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafiIpv4Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4Addr *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionVrfAfiSafiIpv4Addr.YFilter }

func (clearBgpInstanceVersionVrfAfiSafiIpv4Addr *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionVrfAfiSafiIpv4Addr.YFilter = yf }

func (clearBgpInstanceVersionVrfAfiSafiIpv4Addr *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4Addr *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv4-addr"
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4Addr *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionVrfAfiSafiIpv4Addr.Input
    }
    return nil
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4Addr *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionVrfAfiSafiIpv4Addr.Input
    return children
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4Addr *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionVrfAfiSafiIpv4Addr *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionVrfAfiSafiIpv4Addr *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr) GetYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-ipv4-addr" }

func (clearBgpInstanceVersionVrfAfiSafiIpv4Addr *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionVrfAfiSafiIpv4Addr *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionVrfAfiSafiIpv4Addr *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionVrfAfiSafiIpv4Addr *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr) SetParent(parent types.Entity) { clearBgpInstanceVersionVrfAfiSafiIpv4Addr.parent = parent }

func (clearBgpInstanceVersionVrfAfiSafiIpv4Addr *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr) GetParent() types.Entity { return clearBgpInstanceVersionVrfAfiSafiIpv4Addr.parent }

func (clearBgpInstanceVersionVrfAfiSafiIpv4Addr *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input
type ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    return ""
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-addr"] = input.Ipv4Addr
    return leafs
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv4Addr_Input) GetParentYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-ipv4-addr" }

// ClearBgpInstanceVersionVrfAfiSafiNetwork
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafiNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiNetwork_Input
}

func (clearBgpInstanceVersionVrfAfiSafiNetwork *ClearBgpInstanceVersionVrfAfiSafiNetwork) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionVrfAfiSafiNetwork.YFilter }

func (clearBgpInstanceVersionVrfAfiSafiNetwork *ClearBgpInstanceVersionVrfAfiSafiNetwork) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionVrfAfiSafiNetwork.YFilter = yf }

func (clearBgpInstanceVersionVrfAfiSafiNetwork *ClearBgpInstanceVersionVrfAfiSafiNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionVrfAfiSafiNetwork *ClearBgpInstanceVersionVrfAfiSafiNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-network"
}

func (clearBgpInstanceVersionVrfAfiSafiNetwork *ClearBgpInstanceVersionVrfAfiSafiNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionVrfAfiSafiNetwork.Input
    }
    return nil
}

func (clearBgpInstanceVersionVrfAfiSafiNetwork *ClearBgpInstanceVersionVrfAfiSafiNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionVrfAfiSafiNetwork.Input
    return children
}

func (clearBgpInstanceVersionVrfAfiSafiNetwork *ClearBgpInstanceVersionVrfAfiSafiNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionVrfAfiSafiNetwork *ClearBgpInstanceVersionVrfAfiSafiNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionVrfAfiSafiNetwork *ClearBgpInstanceVersionVrfAfiSafiNetwork) GetYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-network" }

func (clearBgpInstanceVersionVrfAfiSafiNetwork *ClearBgpInstanceVersionVrfAfiSafiNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionVrfAfiSafiNetwork *ClearBgpInstanceVersionVrfAfiSafiNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionVrfAfiSafiNetwork *ClearBgpInstanceVersionVrfAfiSafiNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionVrfAfiSafiNetwork *ClearBgpInstanceVersionVrfAfiSafiNetwork) SetParent(parent types.Entity) { clearBgpInstanceVersionVrfAfiSafiNetwork.parent = parent }

func (clearBgpInstanceVersionVrfAfiSafiNetwork *ClearBgpInstanceVersionVrfAfiSafiNetwork) GetParent() types.Entity { return clearBgpInstanceVersionVrfAfiSafiNetwork.parent }

func (clearBgpInstanceVersionVrfAfiSafiNetwork *ClearBgpInstanceVersionVrfAfiSafiNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionVrfAfiSafiNetwork_Input
type ClearBgpInstanceVersionVrfAfiSafiNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionVrfAfiSafiNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionVrfAfiSafiNetwork_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpInstanceVersionVrfAfiSafiNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionVrfAfiSafiNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionVrfAfiSafiNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionVrfAfiSafiNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpInstanceVersionVrfAfiSafiNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionVrfAfiSafiNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionVrfAfiSafiNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionVrfAfiSafiNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionVrfAfiSafiNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionVrfAfiSafiNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiNetwork_Input) GetParentYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-network" }

// ClearBgpInstanceVersionVrfAfiSafiRdNetwork
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionVrfAfiSafiRdNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input
}

func (clearBgpInstanceVersionVrfAfiSafiRdNetwork *ClearBgpInstanceVersionVrfAfiSafiRdNetwork) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionVrfAfiSafiRdNetwork.YFilter }

func (clearBgpInstanceVersionVrfAfiSafiRdNetwork *ClearBgpInstanceVersionVrfAfiSafiRdNetwork) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionVrfAfiSafiRdNetwork.YFilter = yf }

func (clearBgpInstanceVersionVrfAfiSafiRdNetwork *ClearBgpInstanceVersionVrfAfiSafiRdNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionVrfAfiSafiRdNetwork *ClearBgpInstanceVersionVrfAfiSafiRdNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd-network"
}

func (clearBgpInstanceVersionVrfAfiSafiRdNetwork *ClearBgpInstanceVersionVrfAfiSafiRdNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionVrfAfiSafiRdNetwork.Input
    }
    return nil
}

func (clearBgpInstanceVersionVrfAfiSafiRdNetwork *ClearBgpInstanceVersionVrfAfiSafiRdNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionVrfAfiSafiRdNetwork.Input
    return children
}

func (clearBgpInstanceVersionVrfAfiSafiRdNetwork *ClearBgpInstanceVersionVrfAfiSafiRdNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionVrfAfiSafiRdNetwork *ClearBgpInstanceVersionVrfAfiSafiRdNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionVrfAfiSafiRdNetwork *ClearBgpInstanceVersionVrfAfiSafiRdNetwork) GetYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-rd-network" }

func (clearBgpInstanceVersionVrfAfiSafiRdNetwork *ClearBgpInstanceVersionVrfAfiSafiRdNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionVrfAfiSafiRdNetwork *ClearBgpInstanceVersionVrfAfiSafiRdNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionVrfAfiSafiRdNetwork *ClearBgpInstanceVersionVrfAfiSafiRdNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionVrfAfiSafiRdNetwork *ClearBgpInstanceVersionVrfAfiSafiRdNetwork) SetParent(parent types.Entity) { clearBgpInstanceVersionVrfAfiSafiRdNetwork.parent = parent }

func (clearBgpInstanceVersionVrfAfiSafiRdNetwork *ClearBgpInstanceVersionVrfAfiSafiRdNetwork) GetParent() types.Entity { return clearBgpInstanceVersionVrfAfiSafiRdNetwork.parent }

func (clearBgpInstanceVersionVrfAfiSafiRdNetwork *ClearBgpInstanceVersionVrfAfiSafiRdNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input
type ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiRdNetwork_Input) GetParentYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-rd-network" }

// ClearBgpInstanceVersionVrfAfiSafiVrfNetwork
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafiVrfNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input
}

func (clearBgpInstanceVersionVrfAfiSafiVrfNetwork *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionVrfAfiSafiVrfNetwork.YFilter }

func (clearBgpInstanceVersionVrfAfiSafiVrfNetwork *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionVrfAfiSafiVrfNetwork.YFilter = yf }

func (clearBgpInstanceVersionVrfAfiSafiVrfNetwork *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionVrfAfiSafiVrfNetwork *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf-network"
}

func (clearBgpInstanceVersionVrfAfiSafiVrfNetwork *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionVrfAfiSafiVrfNetwork.Input
    }
    return nil
}

func (clearBgpInstanceVersionVrfAfiSafiVrfNetwork *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionVrfAfiSafiVrfNetwork.Input
    return children
}

func (clearBgpInstanceVersionVrfAfiSafiVrfNetwork *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionVrfAfiSafiVrfNetwork *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionVrfAfiSafiVrfNetwork *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork) GetYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-vrf-network" }

func (clearBgpInstanceVersionVrfAfiSafiVrfNetwork *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionVrfAfiSafiVrfNetwork *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionVrfAfiSafiVrfNetwork *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionVrfAfiSafiVrfNetwork *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork) SetParent(parent types.Entity) { clearBgpInstanceVersionVrfAfiSafiVrfNetwork.parent = parent }

func (clearBgpInstanceVersionVrfAfiSafiVrfNetwork *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork) GetParent() types.Entity { return clearBgpInstanceVersionVrfAfiSafiVrfNetwork.parent }

func (clearBgpInstanceVersionVrfAfiSafiVrfNetwork *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input
type ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiVrfNetwork_Input) GetParentYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-vrf-network" }

// ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.YFilter }

func (clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.YFilter = yf }

func (clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input
    }
    return nil
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input
    return children
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask" }

func (clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask) SetParent(parent types.Entity) { clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.parent = parent }

func (clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetParent() types.Entity { return clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask.parent }

func (clearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input
type ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    if yname == "ipv6-netmask" { return "Ipv6Netmask" }
    return ""
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-addr"] = input.Ipv6Addr
    leafs["ipv6-netmask"] = input.Ipv6Netmask
    return leafs
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetParentYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-ipv6-addr-ipv6-netmask" }

// ClearBgpInstanceVersionVrfAfiSafiIpv6Addr
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafiIpv6Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6Addr *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionVrfAfiSafiIpv6Addr.YFilter }

func (clearBgpInstanceVersionVrfAfiSafiIpv6Addr *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionVrfAfiSafiIpv6Addr.YFilter = yf }

func (clearBgpInstanceVersionVrfAfiSafiIpv6Addr *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6Addr *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-addr"
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6Addr *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionVrfAfiSafiIpv6Addr.Input
    }
    return nil
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6Addr *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionVrfAfiSafiIpv6Addr.Input
    return children
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6Addr *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6Addr *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionVrfAfiSafiIpv6Addr *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr) GetYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-ipv6-addr" }

func (clearBgpInstanceVersionVrfAfiSafiIpv6Addr *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionVrfAfiSafiIpv6Addr *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionVrfAfiSafiIpv6Addr *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionVrfAfiSafiIpv6Addr *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr) SetParent(parent types.Entity) { clearBgpInstanceVersionVrfAfiSafiIpv6Addr.parent = parent }

func (clearBgpInstanceVersionVrfAfiSafiIpv6Addr *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr) GetParent() types.Entity { return clearBgpInstanceVersionVrfAfiSafiIpv6Addr.parent }

func (clearBgpInstanceVersionVrfAfiSafiIpv6Addr *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input
type ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    return ""
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-addr"] = input.Ipv6Addr
    return leafs
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Addr_Input) GetParentYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-ipv6-addr" }

// ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.YFilter }

func (clearBgpInstanceVersionVrfAfiSafiIpv6Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.YFilter = yf }

func (clearBgpInstanceVersionVrfAfiSafiIpv6Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix"
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.Input
    }
    return nil
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.Input
    return children
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionVrfAfiSafiIpv6Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionVrfAfiSafiIpv6Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix) GetYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix" }

func (clearBgpInstanceVersionVrfAfiSafiIpv6Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionVrfAfiSafiIpv6Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionVrfAfiSafiIpv6Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionVrfAfiSafiIpv6Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix) SetParent(parent types.Entity) { clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.parent = parent }

func (clearBgpInstanceVersionVrfAfiSafiIpv6Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix) GetParent() types.Entity { return clearBgpInstanceVersionVrfAfiSafiIpv6Prefix.parent }

func (clearBgpInstanceVersionVrfAfiSafiIpv6Prefix *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input
type ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-ipv6-prefix" }

// ClearBgpInstanceVersionVrfAfiSafiRd
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// Display routes with a specific route distinguisher.
// 
type ClearBgpInstanceVersionVrfAfiSafiRd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiRd_Input
}

func (clearBgpInstanceVersionVrfAfiSafiRd *ClearBgpInstanceVersionVrfAfiSafiRd) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionVrfAfiSafiRd.YFilter }

func (clearBgpInstanceVersionVrfAfiSafiRd *ClearBgpInstanceVersionVrfAfiSafiRd) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionVrfAfiSafiRd.YFilter = yf }

func (clearBgpInstanceVersionVrfAfiSafiRd *ClearBgpInstanceVersionVrfAfiSafiRd) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionVrfAfiSafiRd *ClearBgpInstanceVersionVrfAfiSafiRd) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-rd"
}

func (clearBgpInstanceVersionVrfAfiSafiRd *ClearBgpInstanceVersionVrfAfiSafiRd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionVrfAfiSafiRd.Input
    }
    return nil
}

func (clearBgpInstanceVersionVrfAfiSafiRd *ClearBgpInstanceVersionVrfAfiSafiRd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionVrfAfiSafiRd.Input
    return children
}

func (clearBgpInstanceVersionVrfAfiSafiRd *ClearBgpInstanceVersionVrfAfiSafiRd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionVrfAfiSafiRd *ClearBgpInstanceVersionVrfAfiSafiRd) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionVrfAfiSafiRd *ClearBgpInstanceVersionVrfAfiSafiRd) GetYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-rd" }

func (clearBgpInstanceVersionVrfAfiSafiRd *ClearBgpInstanceVersionVrfAfiSafiRd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionVrfAfiSafiRd *ClearBgpInstanceVersionVrfAfiSafiRd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionVrfAfiSafiRd *ClearBgpInstanceVersionVrfAfiSafiRd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionVrfAfiSafiRd *ClearBgpInstanceVersionVrfAfiSafiRd) SetParent(parent types.Entity) { clearBgpInstanceVersionVrfAfiSafiRd.parent = parent }

func (clearBgpInstanceVersionVrfAfiSafiRd *ClearBgpInstanceVersionVrfAfiSafiRd) GetParent() types.Entity { return clearBgpInstanceVersionVrfAfiSafiRd.parent }

func (clearBgpInstanceVersionVrfAfiSafiRd *ClearBgpInstanceVersionVrfAfiSafiRd) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionVrfAfiSafiRd_Input
type ClearBgpInstanceVersionVrfAfiSafiRd_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiRd_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionVrfAfiSafiRd_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionVrfAfiSafiRd_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    return ""
}

func (input *ClearBgpInstanceVersionVrfAfiSafiRd_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionVrfAfiSafiRd_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionVrfAfiSafiRd_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionVrfAfiSafiRd_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    return leafs
}

func (input *ClearBgpInstanceVersionVrfAfiSafiRd_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionVrfAfiSafiRd_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionVrfAfiSafiRd_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionVrfAfiSafiRd_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionVrfAfiSafiRd_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionVrfAfiSafiRd_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiRd_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiRd_Input) GetParentYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-rd" }

// ClearBgpInstanceVersionVrfAfiSafiVrf
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// Display routes for a specified VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafiVrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafiVrf_Input
}

func (clearBgpInstanceVersionVrfAfiSafiVrf *ClearBgpInstanceVersionVrfAfiSafiVrf) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionVrfAfiSafiVrf.YFilter }

func (clearBgpInstanceVersionVrfAfiSafiVrf *ClearBgpInstanceVersionVrfAfiSafiVrf) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionVrfAfiSafiVrf.YFilter = yf }

func (clearBgpInstanceVersionVrfAfiSafiVrf *ClearBgpInstanceVersionVrfAfiSafiVrf) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionVrfAfiSafiVrf *ClearBgpInstanceVersionVrfAfiSafiVrf) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi-vrf"
}

func (clearBgpInstanceVersionVrfAfiSafiVrf *ClearBgpInstanceVersionVrfAfiSafiVrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionVrfAfiSafiVrf.Input
    }
    return nil
}

func (clearBgpInstanceVersionVrfAfiSafiVrf *ClearBgpInstanceVersionVrfAfiSafiVrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionVrfAfiSafiVrf.Input
    return children
}

func (clearBgpInstanceVersionVrfAfiSafiVrf *ClearBgpInstanceVersionVrfAfiSafiVrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionVrfAfiSafiVrf *ClearBgpInstanceVersionVrfAfiSafiVrf) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionVrfAfiSafiVrf *ClearBgpInstanceVersionVrfAfiSafiVrf) GetYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-vrf" }

func (clearBgpInstanceVersionVrfAfiSafiVrf *ClearBgpInstanceVersionVrfAfiSafiVrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionVrfAfiSafiVrf *ClearBgpInstanceVersionVrfAfiSafiVrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionVrfAfiSafiVrf *ClearBgpInstanceVersionVrfAfiSafiVrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionVrfAfiSafiVrf *ClearBgpInstanceVersionVrfAfiSafiVrf) SetParent(parent types.Entity) { clearBgpInstanceVersionVrfAfiSafiVrf.parent = parent }

func (clearBgpInstanceVersionVrfAfiSafiVrf *ClearBgpInstanceVersionVrfAfiSafiVrf) GetParent() types.Entity { return clearBgpInstanceVersionVrfAfiSafiVrf.parent }

func (clearBgpInstanceVersionVrfAfiSafiVrf *ClearBgpInstanceVersionVrfAfiSafiVrf) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionVrfAfiSafiVrf_Input
type ClearBgpInstanceVersionVrfAfiSafiVrf_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafiVrf_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionVrfAfiSafiVrf_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionVrfAfiSafiVrf_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (input *ClearBgpInstanceVersionVrfAfiSafiVrf_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionVrfAfiSafiVrf_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionVrfAfiSafiVrf_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionVrfAfiSafiVrf_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    return leafs
}

func (input *ClearBgpInstanceVersionVrfAfiSafiVrf_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionVrfAfiSafiVrf_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionVrfAfiSafiVrf_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionVrfAfiSafiVrf_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionVrfAfiSafiVrf_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionVrfAfiSafiVrf_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiVrf_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionVrfAfiSafiVrf_Input) GetParentYangName() string { return "clear-bgp-instance-version-vrf-afi-safi-vrf" }

// ClearBgpInstanceVersionVrfAfiSafi
// Choose a particular BGP instance.
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpInstanceVersionVrfAfiSafi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVersionVrfAfiSafi_Input
}

func (clearBgpInstanceVersionVrfAfiSafi *ClearBgpInstanceVersionVrfAfiSafi) GetFilter() yfilter.YFilter { return clearBgpInstanceVersionVrfAfiSafi.YFilter }

func (clearBgpInstanceVersionVrfAfiSafi *ClearBgpInstanceVersionVrfAfiSafi) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVersionVrfAfiSafi.YFilter = yf }

func (clearBgpInstanceVersionVrfAfiSafi *ClearBgpInstanceVersionVrfAfiSafi) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVersionVrfAfiSafi *ClearBgpInstanceVersionVrfAfiSafi) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-version-vrf-afi-safi"
}

func (clearBgpInstanceVersionVrfAfiSafi *ClearBgpInstanceVersionVrfAfiSafi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVersionVrfAfiSafi.Input
    }
    return nil
}

func (clearBgpInstanceVersionVrfAfiSafi *ClearBgpInstanceVersionVrfAfiSafi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVersionVrfAfiSafi.Input
    return children
}

func (clearBgpInstanceVersionVrfAfiSafi *ClearBgpInstanceVersionVrfAfiSafi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVersionVrfAfiSafi *ClearBgpInstanceVersionVrfAfiSafi) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVersionVrfAfiSafi *ClearBgpInstanceVersionVrfAfiSafi) GetYangName() string { return "clear-bgp-instance-version-vrf-afi-safi" }

func (clearBgpInstanceVersionVrfAfiSafi *ClearBgpInstanceVersionVrfAfiSafi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVersionVrfAfiSafi *ClearBgpInstanceVersionVrfAfiSafi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVersionVrfAfiSafi *ClearBgpInstanceVersionVrfAfiSafi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVersionVrfAfiSafi *ClearBgpInstanceVersionVrfAfiSafi) SetParent(parent types.Entity) { clearBgpInstanceVersionVrfAfiSafi.parent = parent }

func (clearBgpInstanceVersionVrfAfiSafi *ClearBgpInstanceVersionVrfAfiSafi) GetParent() types.Entity { return clearBgpInstanceVersionVrfAfiSafi.parent }

func (clearBgpInstanceVersionVrfAfiSafi *ClearBgpInstanceVersionVrfAfiSafi) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVersionVrfAfiSafi_Input
type ClearBgpInstanceVersionVrfAfiSafi_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVersionVrfAfiSafi_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVersionVrfAfiSafi_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVersionVrfAfiSafi_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceVersionVrfAfiSafi_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVersionVrfAfiSafi_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVersionVrfAfiSafi_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVersionVrfAfiSafi_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceVersionVrfAfiSafi_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVersionVrfAfiSafi_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVersionVrfAfiSafi_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVersionVrfAfiSafi_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVersionVrfAfiSafi_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVersionVrfAfiSafi_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVersionVrfAfiSafi_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVersionVrfAfiSafi_Input) GetParentYangName() string { return "clear-bgp-instance-version-vrf-afi-safi" }

// ClearBgpInstanceVrfAllGraceful
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpInstanceVrfAllGraceful struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAllGraceful_Input
}

func (clearBgpInstanceVrfAllGraceful *ClearBgpInstanceVrfAllGraceful) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAllGraceful.YFilter }

func (clearBgpInstanceVrfAllGraceful *ClearBgpInstanceVrfAllGraceful) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAllGraceful.YFilter = yf }

func (clearBgpInstanceVrfAllGraceful *ClearBgpInstanceVrfAllGraceful) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAllGraceful *ClearBgpInstanceVrfAllGraceful) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all-graceful"
}

func (clearBgpInstanceVrfAllGraceful *ClearBgpInstanceVrfAllGraceful) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAllGraceful.Input
    }
    return nil
}

func (clearBgpInstanceVrfAllGraceful *ClearBgpInstanceVrfAllGraceful) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAllGraceful.Input
    return children
}

func (clearBgpInstanceVrfAllGraceful *ClearBgpInstanceVrfAllGraceful) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAllGraceful *ClearBgpInstanceVrfAllGraceful) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAllGraceful *ClearBgpInstanceVrfAllGraceful) GetYangName() string { return "clear-bgp-instance-vrf-all-graceful" }

func (clearBgpInstanceVrfAllGraceful *ClearBgpInstanceVrfAllGraceful) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAllGraceful *ClearBgpInstanceVrfAllGraceful) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAllGraceful *ClearBgpInstanceVrfAllGraceful) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAllGraceful *ClearBgpInstanceVrfAllGraceful) SetParent(parent types.Entity) { clearBgpInstanceVrfAllGraceful.parent = parent }

func (clearBgpInstanceVrfAllGraceful *ClearBgpInstanceVrfAllGraceful) GetParent() types.Entity { return clearBgpInstanceVrfAllGraceful.parent }

func (clearBgpInstanceVrfAllGraceful *ClearBgpInstanceVrfAllGraceful) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAllGraceful_Input
type ClearBgpInstanceVrfAllGraceful_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfAllGraceful_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAllGraceful_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAllGraceful_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpInstanceVrfAllGraceful_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAllGraceful_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAllGraceful_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAllGraceful_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpInstanceVrfAllGraceful_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAllGraceful_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAllGraceful_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAllGraceful_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAllGraceful_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAllGraceful_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAllGraceful_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAllGraceful_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-all-graceful" }

// ClearBgpInstanceVrfAll
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// 
type ClearBgpInstanceVrfAll struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAll_Input
}

func (clearBgpInstanceVrfAll *ClearBgpInstanceVrfAll) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAll.YFilter }

func (clearBgpInstanceVrfAll *ClearBgpInstanceVrfAll) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAll.YFilter = yf }

func (clearBgpInstanceVrfAll *ClearBgpInstanceVrfAll) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAll *ClearBgpInstanceVrfAll) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-all"
}

func (clearBgpInstanceVrfAll *ClearBgpInstanceVrfAll) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAll.Input
    }
    return nil
}

func (clearBgpInstanceVrfAll *ClearBgpInstanceVrfAll) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAll.Input
    return children
}

func (clearBgpInstanceVrfAll *ClearBgpInstanceVrfAll) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAll *ClearBgpInstanceVrfAll) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAll *ClearBgpInstanceVrfAll) GetYangName() string { return "clear-bgp-instance-vrf-all" }

func (clearBgpInstanceVrfAll *ClearBgpInstanceVrfAll) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAll *ClearBgpInstanceVrfAll) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAll *ClearBgpInstanceVrfAll) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAll *ClearBgpInstanceVrfAll) SetParent(parent types.Entity) { clearBgpInstanceVrfAll.parent = parent }

func (clearBgpInstanceVrfAll *ClearBgpInstanceVrfAll) GetParent() types.Entity { return clearBgpInstanceVrfAll.parent }

func (clearBgpInstanceVrfAll *ClearBgpInstanceVrfAll) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAll_Input
type ClearBgpInstanceVrfAll_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfAll_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAll_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAll_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpInstanceVrfAll_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAll_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAll_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAll_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpInstanceVrfAll_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAll_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAll_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAll_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAll_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAll_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAll_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAll_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-all" }

// ClearBgpInstanceVrfIpAddrGraceful
// Choose a particular BGP instance.
// Specify a VRF.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpInstanceVrfIpAddrGraceful struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfIpAddrGraceful_Input
}

func (clearBgpInstanceVrfIpAddrGraceful *ClearBgpInstanceVrfIpAddrGraceful) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfIpAddrGraceful.YFilter }

func (clearBgpInstanceVrfIpAddrGraceful *ClearBgpInstanceVrfIpAddrGraceful) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfIpAddrGraceful.YFilter = yf }

func (clearBgpInstanceVrfIpAddrGraceful *ClearBgpInstanceVrfIpAddrGraceful) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfIpAddrGraceful *ClearBgpInstanceVrfIpAddrGraceful) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-graceful"
}

func (clearBgpInstanceVrfIpAddrGraceful *ClearBgpInstanceVrfIpAddrGraceful) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfIpAddrGraceful.Input
    }
    return nil
}

func (clearBgpInstanceVrfIpAddrGraceful *ClearBgpInstanceVrfIpAddrGraceful) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfIpAddrGraceful.Input
    return children
}

func (clearBgpInstanceVrfIpAddrGraceful *ClearBgpInstanceVrfIpAddrGraceful) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfIpAddrGraceful *ClearBgpInstanceVrfIpAddrGraceful) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfIpAddrGraceful *ClearBgpInstanceVrfIpAddrGraceful) GetYangName() string { return "clear-bgp-instance-vrf-ip-addr-graceful" }

func (clearBgpInstanceVrfIpAddrGraceful *ClearBgpInstanceVrfIpAddrGraceful) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfIpAddrGraceful *ClearBgpInstanceVrfIpAddrGraceful) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfIpAddrGraceful *ClearBgpInstanceVrfIpAddrGraceful) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfIpAddrGraceful *ClearBgpInstanceVrfIpAddrGraceful) SetParent(parent types.Entity) { clearBgpInstanceVrfIpAddrGraceful.parent = parent }

func (clearBgpInstanceVrfIpAddrGraceful *ClearBgpInstanceVrfIpAddrGraceful) GetParent() types.Entity { return clearBgpInstanceVrfIpAddrGraceful.parent }

func (clearBgpInstanceVrfIpAddrGraceful *ClearBgpInstanceVrfIpAddrGraceful) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfIpAddrGraceful_Input
type ClearBgpInstanceVrfIpAddrGraceful_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfIpAddrGraceful_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfIpAddrGraceful_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfIpAddrGraceful_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfIpAddrGraceful_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfIpAddrGraceful_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfIpAddrGraceful_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfIpAddrGraceful_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfIpAddrGraceful_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfIpAddrGraceful_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfIpAddrGraceful_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfIpAddrGraceful_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfIpAddrGraceful_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfIpAddrGraceful_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfIpAddrGraceful_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfIpAddrGraceful_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-ip-addr-graceful" }

// ClearBgpInstanceVrfIpAddrLongLivedStale
// Choose a particular BGP instance.
// Specify a VRF.
// Clear long-lived-stale routes.
// 
type ClearBgpInstanceVrfIpAddrLongLivedStale struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfIpAddrLongLivedStale_Input
}

func (clearBgpInstanceVrfIpAddrLongLivedStale *ClearBgpInstanceVrfIpAddrLongLivedStale) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfIpAddrLongLivedStale.YFilter }

func (clearBgpInstanceVrfIpAddrLongLivedStale *ClearBgpInstanceVrfIpAddrLongLivedStale) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfIpAddrLongLivedStale.YFilter = yf }

func (clearBgpInstanceVrfIpAddrLongLivedStale *ClearBgpInstanceVrfIpAddrLongLivedStale) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfIpAddrLongLivedStale *ClearBgpInstanceVrfIpAddrLongLivedStale) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr-long-lived-stale"
}

func (clearBgpInstanceVrfIpAddrLongLivedStale *ClearBgpInstanceVrfIpAddrLongLivedStale) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfIpAddrLongLivedStale.Input
    }
    return nil
}

func (clearBgpInstanceVrfIpAddrLongLivedStale *ClearBgpInstanceVrfIpAddrLongLivedStale) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfIpAddrLongLivedStale.Input
    return children
}

func (clearBgpInstanceVrfIpAddrLongLivedStale *ClearBgpInstanceVrfIpAddrLongLivedStale) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfIpAddrLongLivedStale *ClearBgpInstanceVrfIpAddrLongLivedStale) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfIpAddrLongLivedStale *ClearBgpInstanceVrfIpAddrLongLivedStale) GetYangName() string { return "clear-bgp-instance-vrf-ip-addr-long-lived-stale" }

func (clearBgpInstanceVrfIpAddrLongLivedStale *ClearBgpInstanceVrfIpAddrLongLivedStale) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfIpAddrLongLivedStale *ClearBgpInstanceVrfIpAddrLongLivedStale) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfIpAddrLongLivedStale *ClearBgpInstanceVrfIpAddrLongLivedStale) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfIpAddrLongLivedStale *ClearBgpInstanceVrfIpAddrLongLivedStale) SetParent(parent types.Entity) { clearBgpInstanceVrfIpAddrLongLivedStale.parent = parent }

func (clearBgpInstanceVrfIpAddrLongLivedStale *ClearBgpInstanceVrfIpAddrLongLivedStale) GetParent() types.Entity { return clearBgpInstanceVrfIpAddrLongLivedStale.parent }

func (clearBgpInstanceVrfIpAddrLongLivedStale *ClearBgpInstanceVrfIpAddrLongLivedStale) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfIpAddrLongLivedStale_Input
type ClearBgpInstanceVrfIpAddrLongLivedStale_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfIpAddrLongLivedStale_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfIpAddrLongLivedStale_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfIpAddrLongLivedStale_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfIpAddrLongLivedStale_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfIpAddrLongLivedStale_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfIpAddrLongLivedStale_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfIpAddrLongLivedStale_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfIpAddrLongLivedStale_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfIpAddrLongLivedStale_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfIpAddrLongLivedStale_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfIpAddrLongLivedStale_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfIpAddrLongLivedStale_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfIpAddrLongLivedStale_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfIpAddrLongLivedStale_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfIpAddrLongLivedStale_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-ip-addr-long-lived-stale" }

// ClearBgpInstanceVrfIpAddr
// Choose a particular BGP instance.
// Specify a VRF.
// 
type ClearBgpInstanceVrfIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfIpAddr_Input
}

func (clearBgpInstanceVrfIpAddr *ClearBgpInstanceVrfIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfIpAddr.YFilter }

func (clearBgpInstanceVrfIpAddr *ClearBgpInstanceVrfIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfIpAddr.YFilter = yf }

func (clearBgpInstanceVrfIpAddr *ClearBgpInstanceVrfIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfIpAddr *ClearBgpInstanceVrfIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-ip-addr"
}

func (clearBgpInstanceVrfIpAddr *ClearBgpInstanceVrfIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceVrfIpAddr *ClearBgpInstanceVrfIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfIpAddr.Input
    return children
}

func (clearBgpInstanceVrfIpAddr *ClearBgpInstanceVrfIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfIpAddr *ClearBgpInstanceVrfIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfIpAddr *ClearBgpInstanceVrfIpAddr) GetYangName() string { return "clear-bgp-instance-vrf-ip-addr" }

func (clearBgpInstanceVrfIpAddr *ClearBgpInstanceVrfIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfIpAddr *ClearBgpInstanceVrfIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfIpAddr *ClearBgpInstanceVrfIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfIpAddr *ClearBgpInstanceVrfIpAddr) SetParent(parent types.Entity) { clearBgpInstanceVrfIpAddr.parent = parent }

func (clearBgpInstanceVrfIpAddr *ClearBgpInstanceVrfIpAddr) GetParent() types.Entity { return clearBgpInstanceVrfIpAddr.parent }

func (clearBgpInstanceVrfIpAddr *ClearBgpInstanceVrfIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfIpAddr_Input
type ClearBgpInstanceVrfIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-ip-addr" }

// ClearBgpInstanceVrfAsGraceful
// Choose a particular BGP instance.
// Specify a VRF.
// Clear peers in a specific AS.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpInstanceVrfAsGraceful struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAsGraceful_Input
}

func (clearBgpInstanceVrfAsGraceful *ClearBgpInstanceVrfAsGraceful) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAsGraceful.YFilter }

func (clearBgpInstanceVrfAsGraceful *ClearBgpInstanceVrfAsGraceful) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAsGraceful.YFilter = yf }

func (clearBgpInstanceVrfAsGraceful *ClearBgpInstanceVrfAsGraceful) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAsGraceful *ClearBgpInstanceVrfAsGraceful) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as-graceful"
}

func (clearBgpInstanceVrfAsGraceful *ClearBgpInstanceVrfAsGraceful) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAsGraceful.Input
    }
    return nil
}

func (clearBgpInstanceVrfAsGraceful *ClearBgpInstanceVrfAsGraceful) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAsGraceful.Input
    return children
}

func (clearBgpInstanceVrfAsGraceful *ClearBgpInstanceVrfAsGraceful) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAsGraceful *ClearBgpInstanceVrfAsGraceful) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAsGraceful *ClearBgpInstanceVrfAsGraceful) GetYangName() string { return "clear-bgp-instance-vrf-as-graceful" }

func (clearBgpInstanceVrfAsGraceful *ClearBgpInstanceVrfAsGraceful) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAsGraceful *ClearBgpInstanceVrfAsGraceful) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAsGraceful *ClearBgpInstanceVrfAsGraceful) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAsGraceful *ClearBgpInstanceVrfAsGraceful) SetParent(parent types.Entity) { clearBgpInstanceVrfAsGraceful.parent = parent }

func (clearBgpInstanceVrfAsGraceful *ClearBgpInstanceVrfAsGraceful) GetParent() types.Entity { return clearBgpInstanceVrfAsGraceful.parent }

func (clearBgpInstanceVrfAsGraceful *ClearBgpInstanceVrfAsGraceful) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAsGraceful_Input
type ClearBgpInstanceVrfAsGraceful_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceVrfAsGraceful_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAsGraceful_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAsGraceful_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpInstanceVrfAsGraceful_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAsGraceful_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAsGraceful_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAsGraceful_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpInstanceVrfAsGraceful_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAsGraceful_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAsGraceful_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAsGraceful_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAsGraceful_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAsGraceful_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAsGraceful_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAsGraceful_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-as-graceful" }

// ClearBgpInstanceVrfAs
// Choose a particular BGP instance.
// Specify a VRF.
// Clear peers in a specific AS.
// 
type ClearBgpInstanceVrfAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAs_Input
}

func (clearBgpInstanceVrfAs *ClearBgpInstanceVrfAs) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAs.YFilter }

func (clearBgpInstanceVrfAs *ClearBgpInstanceVrfAs) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAs.YFilter = yf }

func (clearBgpInstanceVrfAs *ClearBgpInstanceVrfAs) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAs *ClearBgpInstanceVrfAs) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-as"
}

func (clearBgpInstanceVrfAs *ClearBgpInstanceVrfAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAs.Input
    }
    return nil
}

func (clearBgpInstanceVrfAs *ClearBgpInstanceVrfAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAs.Input
    return children
}

func (clearBgpInstanceVrfAs *ClearBgpInstanceVrfAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAs *ClearBgpInstanceVrfAs) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAs *ClearBgpInstanceVrfAs) GetYangName() string { return "clear-bgp-instance-vrf-as" }

func (clearBgpInstanceVrfAs *ClearBgpInstanceVrfAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAs *ClearBgpInstanceVrfAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAs *ClearBgpInstanceVrfAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAs *ClearBgpInstanceVrfAs) SetParent(parent types.Entity) { clearBgpInstanceVrfAs.parent = parent }

func (clearBgpInstanceVrfAs *ClearBgpInstanceVrfAs) GetParent() types.Entity { return clearBgpInstanceVrfAs.parent }

func (clearBgpInstanceVrfAs *ClearBgpInstanceVrfAs) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAs_Input
type ClearBgpInstanceVrfAs_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceVrfAs_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAs_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAs_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpInstanceVrfAs_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAs_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAs_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAs_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpInstanceVrfAs_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAs_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAs_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAs_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAs_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAs_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAs_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAs_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-as" }

// ClearBgpInstanceVrfExternalGraceful
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all external peers.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpInstanceVrfExternalGraceful struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfExternalGraceful_Input
}

func (clearBgpInstanceVrfExternalGraceful *ClearBgpInstanceVrfExternalGraceful) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfExternalGraceful.YFilter }

func (clearBgpInstanceVrfExternalGraceful *ClearBgpInstanceVrfExternalGraceful) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfExternalGraceful.YFilter = yf }

func (clearBgpInstanceVrfExternalGraceful *ClearBgpInstanceVrfExternalGraceful) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfExternalGraceful *ClearBgpInstanceVrfExternalGraceful) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external-graceful"
}

func (clearBgpInstanceVrfExternalGraceful *ClearBgpInstanceVrfExternalGraceful) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfExternalGraceful.Input
    }
    return nil
}

func (clearBgpInstanceVrfExternalGraceful *ClearBgpInstanceVrfExternalGraceful) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfExternalGraceful.Input
    return children
}

func (clearBgpInstanceVrfExternalGraceful *ClearBgpInstanceVrfExternalGraceful) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfExternalGraceful *ClearBgpInstanceVrfExternalGraceful) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfExternalGraceful *ClearBgpInstanceVrfExternalGraceful) GetYangName() string { return "clear-bgp-instance-vrf-external-graceful" }

func (clearBgpInstanceVrfExternalGraceful *ClearBgpInstanceVrfExternalGraceful) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfExternalGraceful *ClearBgpInstanceVrfExternalGraceful) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfExternalGraceful *ClearBgpInstanceVrfExternalGraceful) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfExternalGraceful *ClearBgpInstanceVrfExternalGraceful) SetParent(parent types.Entity) { clearBgpInstanceVrfExternalGraceful.parent = parent }

func (clearBgpInstanceVrfExternalGraceful *ClearBgpInstanceVrfExternalGraceful) GetParent() types.Entity { return clearBgpInstanceVrfExternalGraceful.parent }

func (clearBgpInstanceVrfExternalGraceful *ClearBgpInstanceVrfExternalGraceful) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfExternalGraceful_Input
type ClearBgpInstanceVrfExternalGraceful_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfExternalGraceful_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfExternalGraceful_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfExternalGraceful_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpInstanceVrfExternalGraceful_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfExternalGraceful_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfExternalGraceful_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfExternalGraceful_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpInstanceVrfExternalGraceful_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfExternalGraceful_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfExternalGraceful_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfExternalGraceful_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfExternalGraceful_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfExternalGraceful_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfExternalGraceful_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfExternalGraceful_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-external-graceful" }

// ClearBgpInstanceVrfExternal
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all external peers.
// 
type ClearBgpInstanceVrfExternal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfExternal_Input
}

func (clearBgpInstanceVrfExternal *ClearBgpInstanceVrfExternal) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfExternal.YFilter }

func (clearBgpInstanceVrfExternal *ClearBgpInstanceVrfExternal) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfExternal.YFilter = yf }

func (clearBgpInstanceVrfExternal *ClearBgpInstanceVrfExternal) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfExternal *ClearBgpInstanceVrfExternal) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-external"
}

func (clearBgpInstanceVrfExternal *ClearBgpInstanceVrfExternal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfExternal.Input
    }
    return nil
}

func (clearBgpInstanceVrfExternal *ClearBgpInstanceVrfExternal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfExternal.Input
    return children
}

func (clearBgpInstanceVrfExternal *ClearBgpInstanceVrfExternal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfExternal *ClearBgpInstanceVrfExternal) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfExternal *ClearBgpInstanceVrfExternal) GetYangName() string { return "clear-bgp-instance-vrf-external" }

func (clearBgpInstanceVrfExternal *ClearBgpInstanceVrfExternal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfExternal *ClearBgpInstanceVrfExternal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfExternal *ClearBgpInstanceVrfExternal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfExternal *ClearBgpInstanceVrfExternal) SetParent(parent types.Entity) { clearBgpInstanceVrfExternal.parent = parent }

func (clearBgpInstanceVrfExternal *ClearBgpInstanceVrfExternal) GetParent() types.Entity { return clearBgpInstanceVrfExternal.parent }

func (clearBgpInstanceVrfExternal *ClearBgpInstanceVrfExternal) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfExternal_Input
type ClearBgpInstanceVrfExternal_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfExternal_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfExternal_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfExternal_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpInstanceVrfExternal_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfExternal_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfExternal_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfExternal_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpInstanceVrfExternal_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfExternal_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfExternal_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfExternal_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfExternal_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfExternal_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfExternal_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfExternal_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-external" }

// ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input
}

func (clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.YFilter }

func (clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter"
}

func (clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter" }

func (clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.parent = parent }

func (clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter.parent }

func (clearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input
type ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftInPrefixFilter_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-all-soft-in-prefix-filter" }

// ClearBgpInstanceVrfAfiSafiAllSoftIn
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpInstanceVrfAfiSafiAllSoftIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiAllSoftIn_Input
}

func (clearBgpInstanceVrfAfiSafiAllSoftIn *ClearBgpInstanceVrfAfiSafiAllSoftIn) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiAllSoftIn.YFilter }

func (clearBgpInstanceVrfAfiSafiAllSoftIn *ClearBgpInstanceVrfAfiSafiAllSoftIn) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiAllSoftIn.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiAllSoftIn *ClearBgpInstanceVrfAfiSafiAllSoftIn) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiAllSoftIn *ClearBgpInstanceVrfAfiSafiAllSoftIn) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-in"
}

func (clearBgpInstanceVrfAfiSafiAllSoftIn *ClearBgpInstanceVrfAfiSafiAllSoftIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiAllSoftIn.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiAllSoftIn *ClearBgpInstanceVrfAfiSafiAllSoftIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiAllSoftIn.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiAllSoftIn *ClearBgpInstanceVrfAfiSafiAllSoftIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiAllSoftIn *ClearBgpInstanceVrfAfiSafiAllSoftIn) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiAllSoftIn *ClearBgpInstanceVrfAfiSafiAllSoftIn) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-all-soft-in" }

func (clearBgpInstanceVrfAfiSafiAllSoftIn *ClearBgpInstanceVrfAfiSafiAllSoftIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiAllSoftIn *ClearBgpInstanceVrfAfiSafiAllSoftIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiAllSoftIn *ClearBgpInstanceVrfAfiSafiAllSoftIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiAllSoftIn *ClearBgpInstanceVrfAfiSafiAllSoftIn) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiAllSoftIn.parent = parent }

func (clearBgpInstanceVrfAfiSafiAllSoftIn *ClearBgpInstanceVrfAfiSafiAllSoftIn) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiAllSoftIn.parent }

func (clearBgpInstanceVrfAfiSafiAllSoftIn *ClearBgpInstanceVrfAfiSafiAllSoftIn) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiAllSoftIn_Input
type ClearBgpInstanceVrfAfiSafiAllSoftIn_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftIn_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftIn_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftIn_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftIn_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftIn_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftIn_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftIn_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftIn_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftIn_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftIn_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftIn_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftIn_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftIn_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftIn_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftIn_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-all-soft-in" }

// ClearBgpInstanceVrfAfiSafiAllSoftOut
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpInstanceVrfAfiSafiAllSoftOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiAllSoftOut_Input
}

func (clearBgpInstanceVrfAfiSafiAllSoftOut *ClearBgpInstanceVrfAfiSafiAllSoftOut) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiAllSoftOut.YFilter }

func (clearBgpInstanceVrfAfiSafiAllSoftOut *ClearBgpInstanceVrfAfiSafiAllSoftOut) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiAllSoftOut.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiAllSoftOut *ClearBgpInstanceVrfAfiSafiAllSoftOut) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiAllSoftOut *ClearBgpInstanceVrfAfiSafiAllSoftOut) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft-out"
}

func (clearBgpInstanceVrfAfiSafiAllSoftOut *ClearBgpInstanceVrfAfiSafiAllSoftOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiAllSoftOut.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiAllSoftOut *ClearBgpInstanceVrfAfiSafiAllSoftOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiAllSoftOut.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiAllSoftOut *ClearBgpInstanceVrfAfiSafiAllSoftOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiAllSoftOut *ClearBgpInstanceVrfAfiSafiAllSoftOut) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiAllSoftOut *ClearBgpInstanceVrfAfiSafiAllSoftOut) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-all-soft-out" }

func (clearBgpInstanceVrfAfiSafiAllSoftOut *ClearBgpInstanceVrfAfiSafiAllSoftOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiAllSoftOut *ClearBgpInstanceVrfAfiSafiAllSoftOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiAllSoftOut *ClearBgpInstanceVrfAfiSafiAllSoftOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiAllSoftOut *ClearBgpInstanceVrfAfiSafiAllSoftOut) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiAllSoftOut.parent = parent }

func (clearBgpInstanceVrfAfiSafiAllSoftOut *ClearBgpInstanceVrfAfiSafiAllSoftOut) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiAllSoftOut.parent }

func (clearBgpInstanceVrfAfiSafiAllSoftOut *ClearBgpInstanceVrfAfiSafiAllSoftOut) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiAllSoftOut_Input
type ClearBgpInstanceVrfAfiSafiAllSoftOut_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftOut_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftOut_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftOut_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftOut_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftOut_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftOut_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftOut_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoftOut_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftOut_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftOut_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftOut_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftOut_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftOut_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftOut_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiAllSoftOut_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-all-soft-out" }

// ClearBgpInstanceVrfAfiSafiAllSoft
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// 
type ClearBgpInstanceVrfAfiSafiAllSoft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiAllSoft_Input
}

func (clearBgpInstanceVrfAfiSafiAllSoft *ClearBgpInstanceVrfAfiSafiAllSoft) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiAllSoft.YFilter }

func (clearBgpInstanceVrfAfiSafiAllSoft *ClearBgpInstanceVrfAfiSafiAllSoft) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiAllSoft.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiAllSoft *ClearBgpInstanceVrfAfiSafiAllSoft) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiAllSoft *ClearBgpInstanceVrfAfiSafiAllSoft) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-all-soft"
}

func (clearBgpInstanceVrfAfiSafiAllSoft *ClearBgpInstanceVrfAfiSafiAllSoft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiAllSoft.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiAllSoft *ClearBgpInstanceVrfAfiSafiAllSoft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiAllSoft.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiAllSoft *ClearBgpInstanceVrfAfiSafiAllSoft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiAllSoft *ClearBgpInstanceVrfAfiSafiAllSoft) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiAllSoft *ClearBgpInstanceVrfAfiSafiAllSoft) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-all-soft" }

func (clearBgpInstanceVrfAfiSafiAllSoft *ClearBgpInstanceVrfAfiSafiAllSoft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiAllSoft *ClearBgpInstanceVrfAfiSafiAllSoft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiAllSoft *ClearBgpInstanceVrfAfiSafiAllSoft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiAllSoft *ClearBgpInstanceVrfAfiSafiAllSoft) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiAllSoft.parent = parent }

func (clearBgpInstanceVrfAfiSafiAllSoft *ClearBgpInstanceVrfAfiSafiAllSoft) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiAllSoft.parent }

func (clearBgpInstanceVrfAfiSafiAllSoft *ClearBgpInstanceVrfAfiSafiAllSoft) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiAllSoft_Input
type ClearBgpInstanceVrfAfiSafiAllSoft_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoft_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiAllSoft_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiAllSoft_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoft_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoft_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoft_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoft_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiAllSoft_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiAllSoft_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiAllSoft_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiAllSoft_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiAllSoft_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiAllSoft_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiAllSoft_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiAllSoft_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-all-soft" }

// ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale
// Choose a particular BGP instance.
// Specify a VRF.
// Clear long-lived-stale routes.
// 
type ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input
}

func (clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.YFilter }

func (clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale"
}

func (clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale" }

func (clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.parent = parent }

func (clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale.parent }

func (clearBgpInstanceVrfAfiSafiIpAddrLongLivedStale *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input
type ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrLongLivedStale_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-ip-addr-long-lived-stale" }

// ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter
// Choose a particular BGP instance.
// Specify a VRF.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.YFilter }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter"
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter" }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.parent = parent }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter.parent }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input
type ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in-prefix-filter" }

// ClearBgpInstanceVrfAfiSafiIpAddrSoftIn
// Choose a particular BGP instance.
// Specify a VRF.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpInstanceVrfAfiSafiIpAddrSoftIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftIn *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiIpAddrSoftIn.YFilter }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftIn *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiIpAddrSoftIn.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftIn *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftIn *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in"
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftIn *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiIpAddrSoftIn.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftIn *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiIpAddrSoftIn.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftIn *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftIn *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftIn *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in" }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftIn *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftIn *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftIn *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftIn *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiIpAddrSoftIn.parent = parent }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftIn *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiIpAddrSoftIn.parent }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftIn *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input
type ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftIn_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-in" }

// ClearBgpInstanceVrfAfiSafiIpAddrSoftOut
// Choose a particular BGP instance.
// Specify a VRF.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpInstanceVrfAfiSafiIpAddrSoftOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftOut *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiIpAddrSoftOut.YFilter }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftOut *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiIpAddrSoftOut.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftOut *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftOut *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out"
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftOut *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiIpAddrSoftOut.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftOut *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiIpAddrSoftOut.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftOut *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoftOut *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftOut *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out" }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftOut *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftOut *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftOut *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftOut *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiIpAddrSoftOut.parent = parent }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftOut *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiIpAddrSoftOut.parent }

func (clearBgpInstanceVrfAfiSafiIpAddrSoftOut *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input
type ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoftOut_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-ip-addr-soft-out" }

// ClearBgpInstanceVrfAfiSafiIpAddrSoft
// Choose a particular BGP instance.
// Specify a VRF.
// Soft reconfig.
// 
type ClearBgpInstanceVrfAfiSafiIpAddrSoft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoft *ClearBgpInstanceVrfAfiSafiIpAddrSoft) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiIpAddrSoft.YFilter }

func (clearBgpInstanceVrfAfiSafiIpAddrSoft *ClearBgpInstanceVrfAfiSafiIpAddrSoft) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiIpAddrSoft.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiIpAddrSoft *ClearBgpInstanceVrfAfiSafiIpAddrSoft) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoft *ClearBgpInstanceVrfAfiSafiIpAddrSoft) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-ip-addr-soft"
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoft *ClearBgpInstanceVrfAfiSafiIpAddrSoft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiIpAddrSoft.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoft *ClearBgpInstanceVrfAfiSafiIpAddrSoft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiIpAddrSoft.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoft *ClearBgpInstanceVrfAfiSafiIpAddrSoft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiIpAddrSoft *ClearBgpInstanceVrfAfiSafiIpAddrSoft) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiIpAddrSoft *ClearBgpInstanceVrfAfiSafiIpAddrSoft) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-ip-addr-soft" }

func (clearBgpInstanceVrfAfiSafiIpAddrSoft *ClearBgpInstanceVrfAfiSafiIpAddrSoft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiIpAddrSoft *ClearBgpInstanceVrfAfiSafiIpAddrSoft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiIpAddrSoft *ClearBgpInstanceVrfAfiSafiIpAddrSoft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiIpAddrSoft *ClearBgpInstanceVrfAfiSafiIpAddrSoft) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiIpAddrSoft.parent = parent }

func (clearBgpInstanceVrfAfiSafiIpAddrSoft *ClearBgpInstanceVrfAfiSafiIpAddrSoft) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiIpAddrSoft.parent }

func (clearBgpInstanceVrfAfiSafiIpAddrSoft *ClearBgpInstanceVrfAfiSafiIpAddrSoft) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input
type ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiIpAddrSoft_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-ip-addr-soft" }

// ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter
// Choose a particular BGP instance.
// Specify a VRF.
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input
}

func (clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.YFilter }

func (clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter"
}

func (clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter" }

func (clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.parent = parent }

func (clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter.parent }

func (clearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input
type ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftInPrefixFilter_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-as-soft-in-prefix-filter" }

// ClearBgpInstanceVrfAfiSafiAsSoftIn
// Choose a particular BGP instance.
// Specify a VRF.
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpInstanceVrfAfiSafiAsSoftIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiAsSoftIn_Input
}

func (clearBgpInstanceVrfAfiSafiAsSoftIn *ClearBgpInstanceVrfAfiSafiAsSoftIn) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiAsSoftIn.YFilter }

func (clearBgpInstanceVrfAfiSafiAsSoftIn *ClearBgpInstanceVrfAfiSafiAsSoftIn) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiAsSoftIn.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiAsSoftIn *ClearBgpInstanceVrfAfiSafiAsSoftIn) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiAsSoftIn *ClearBgpInstanceVrfAfiSafiAsSoftIn) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-in"
}

func (clearBgpInstanceVrfAfiSafiAsSoftIn *ClearBgpInstanceVrfAfiSafiAsSoftIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiAsSoftIn.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiAsSoftIn *ClearBgpInstanceVrfAfiSafiAsSoftIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiAsSoftIn.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiAsSoftIn *ClearBgpInstanceVrfAfiSafiAsSoftIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiAsSoftIn *ClearBgpInstanceVrfAfiSafiAsSoftIn) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiAsSoftIn *ClearBgpInstanceVrfAfiSafiAsSoftIn) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-as-soft-in" }

func (clearBgpInstanceVrfAfiSafiAsSoftIn *ClearBgpInstanceVrfAfiSafiAsSoftIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiAsSoftIn *ClearBgpInstanceVrfAfiSafiAsSoftIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiAsSoftIn *ClearBgpInstanceVrfAfiSafiAsSoftIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiAsSoftIn *ClearBgpInstanceVrfAfiSafiAsSoftIn) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiAsSoftIn.parent = parent }

func (clearBgpInstanceVrfAfiSafiAsSoftIn *ClearBgpInstanceVrfAfiSafiAsSoftIn) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiAsSoftIn.parent }

func (clearBgpInstanceVrfAfiSafiAsSoftIn *ClearBgpInstanceVrfAfiSafiAsSoftIn) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiAsSoftIn_Input
type ClearBgpInstanceVrfAfiSafiAsSoftIn_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftIn_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftIn_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftIn_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftIn_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftIn_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftIn_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftIn_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftIn_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftIn_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftIn_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftIn_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftIn_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftIn_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftIn_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftIn_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-as-soft-in" }

// ClearBgpInstanceVrfAfiSafiAsSoftOut
// Choose a particular BGP instance.
// Specify a VRF.
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpInstanceVrfAfiSafiAsSoftOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiAsSoftOut_Input
}

func (clearBgpInstanceVrfAfiSafiAsSoftOut *ClearBgpInstanceVrfAfiSafiAsSoftOut) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiAsSoftOut.YFilter }

func (clearBgpInstanceVrfAfiSafiAsSoftOut *ClearBgpInstanceVrfAfiSafiAsSoftOut) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiAsSoftOut.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiAsSoftOut *ClearBgpInstanceVrfAfiSafiAsSoftOut) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiAsSoftOut *ClearBgpInstanceVrfAfiSafiAsSoftOut) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft-out"
}

func (clearBgpInstanceVrfAfiSafiAsSoftOut *ClearBgpInstanceVrfAfiSafiAsSoftOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiAsSoftOut.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiAsSoftOut *ClearBgpInstanceVrfAfiSafiAsSoftOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiAsSoftOut.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiAsSoftOut *ClearBgpInstanceVrfAfiSafiAsSoftOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiAsSoftOut *ClearBgpInstanceVrfAfiSafiAsSoftOut) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiAsSoftOut *ClearBgpInstanceVrfAfiSafiAsSoftOut) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-as-soft-out" }

func (clearBgpInstanceVrfAfiSafiAsSoftOut *ClearBgpInstanceVrfAfiSafiAsSoftOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiAsSoftOut *ClearBgpInstanceVrfAfiSafiAsSoftOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiAsSoftOut *ClearBgpInstanceVrfAfiSafiAsSoftOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiAsSoftOut *ClearBgpInstanceVrfAfiSafiAsSoftOut) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiAsSoftOut.parent = parent }

func (clearBgpInstanceVrfAfiSafiAsSoftOut *ClearBgpInstanceVrfAfiSafiAsSoftOut) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiAsSoftOut.parent }

func (clearBgpInstanceVrfAfiSafiAsSoftOut *ClearBgpInstanceVrfAfiSafiAsSoftOut) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiAsSoftOut_Input
type ClearBgpInstanceVrfAfiSafiAsSoftOut_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftOut_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftOut_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftOut_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftOut_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftOut_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftOut_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftOut_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoftOut_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftOut_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftOut_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftOut_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftOut_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftOut_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftOut_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiAsSoftOut_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-as-soft-out" }

// ClearBgpInstanceVrfAfiSafiAsSoft
// Choose a particular BGP instance.
// Specify a VRF.
// Clear peers in a specific AS.
// Soft reconfig.
// 
type ClearBgpInstanceVrfAfiSafiAsSoft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiAsSoft_Input
}

func (clearBgpInstanceVrfAfiSafiAsSoft *ClearBgpInstanceVrfAfiSafiAsSoft) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiAsSoft.YFilter }

func (clearBgpInstanceVrfAfiSafiAsSoft *ClearBgpInstanceVrfAfiSafiAsSoft) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiAsSoft.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiAsSoft *ClearBgpInstanceVrfAfiSafiAsSoft) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiAsSoft *ClearBgpInstanceVrfAfiSafiAsSoft) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-as-soft"
}

func (clearBgpInstanceVrfAfiSafiAsSoft *ClearBgpInstanceVrfAfiSafiAsSoft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiAsSoft.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiAsSoft *ClearBgpInstanceVrfAfiSafiAsSoft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiAsSoft.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiAsSoft *ClearBgpInstanceVrfAfiSafiAsSoft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiAsSoft *ClearBgpInstanceVrfAfiSafiAsSoft) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiAsSoft *ClearBgpInstanceVrfAfiSafiAsSoft) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-as-soft" }

func (clearBgpInstanceVrfAfiSafiAsSoft *ClearBgpInstanceVrfAfiSafiAsSoft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiAsSoft *ClearBgpInstanceVrfAfiSafiAsSoft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiAsSoft *ClearBgpInstanceVrfAfiSafiAsSoft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiAsSoft *ClearBgpInstanceVrfAfiSafiAsSoft) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiAsSoft.parent = parent }

func (clearBgpInstanceVrfAfiSafiAsSoft *ClearBgpInstanceVrfAfiSafiAsSoft) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiAsSoft.parent }

func (clearBgpInstanceVrfAfiSafiAsSoft *ClearBgpInstanceVrfAfiSafiAsSoft) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiAsSoft_Input
type ClearBgpInstanceVrfAfiSafiAsSoft_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoft_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiAsSoft_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiAsSoft_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoft_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoft_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoft_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoft_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiAsSoft_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiAsSoft_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiAsSoft_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiAsSoft_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiAsSoft_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiAsSoft_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiAsSoft_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiAsSoft_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-as-soft" }

// ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix
// Choose a particular BGP instance.
// Specify a VRF.
// Clear route flap dampening information.
// 
type ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input
}

func (clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.YFilter }

func (clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix"
}

func (clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix" }

func (clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.parent = parent }

func (clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix.parent }

func (clearBgpInstanceVrfAfiSafiDampeningIpv4Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input
type ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Network and mask or masklength to clear dampening information. The
    // type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-dampening-ipv4-prefix" }

// ClearBgpInstanceVrfAfiSafiDampening
// Choose a particular BGP instance.
// Specify a VRF.
// Clear route flap dampening information.
// 
type ClearBgpInstanceVrfAfiSafiDampening struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiDampening_Input
}

func (clearBgpInstanceVrfAfiSafiDampening *ClearBgpInstanceVrfAfiSafiDampening) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiDampening.YFilter }

func (clearBgpInstanceVrfAfiSafiDampening *ClearBgpInstanceVrfAfiSafiDampening) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiDampening.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiDampening *ClearBgpInstanceVrfAfiSafiDampening) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiDampening *ClearBgpInstanceVrfAfiSafiDampening) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening"
}

func (clearBgpInstanceVrfAfiSafiDampening *ClearBgpInstanceVrfAfiSafiDampening) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiDampening.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiDampening *ClearBgpInstanceVrfAfiSafiDampening) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiDampening.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiDampening *ClearBgpInstanceVrfAfiSafiDampening) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiDampening *ClearBgpInstanceVrfAfiSafiDampening) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiDampening *ClearBgpInstanceVrfAfiSafiDampening) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-dampening" }

func (clearBgpInstanceVrfAfiSafiDampening *ClearBgpInstanceVrfAfiSafiDampening) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiDampening *ClearBgpInstanceVrfAfiSafiDampening) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiDampening *ClearBgpInstanceVrfAfiSafiDampening) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiDampening *ClearBgpInstanceVrfAfiSafiDampening) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiDampening.parent = parent }

func (clearBgpInstanceVrfAfiSafiDampening *ClearBgpInstanceVrfAfiSafiDampening) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiDampening.parent }

func (clearBgpInstanceVrfAfiSafiDampening *ClearBgpInstanceVrfAfiSafiDampening) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiDampening_Input
type ClearBgpInstanceVrfAfiSafiDampening_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiDampening_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiDampening_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiDampening_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiDampening_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiDampening_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiDampening_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiDampening_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiDampening_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiDampening_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiDampening_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiDampening_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiDampening_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiDampening_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiDampening_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiDampening_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-dampening" }

// ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all external peers.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input
}

func (clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.YFilter }

func (clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter"
}

func (clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter" }

func (clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.parent = parent }

func (clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter.parent }

func (clearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input
type ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftInPrefixFilter_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-external-soft-in-prefix-filter" }

// ClearBgpInstanceVrfAfiSafiExternalSoftIn
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all external peers.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpInstanceVrfAfiSafiExternalSoftIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input
}

func (clearBgpInstanceVrfAfiSafiExternalSoftIn *ClearBgpInstanceVrfAfiSafiExternalSoftIn) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiExternalSoftIn.YFilter }

func (clearBgpInstanceVrfAfiSafiExternalSoftIn *ClearBgpInstanceVrfAfiSafiExternalSoftIn) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiExternalSoftIn.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiExternalSoftIn *ClearBgpInstanceVrfAfiSafiExternalSoftIn) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiExternalSoftIn *ClearBgpInstanceVrfAfiSafiExternalSoftIn) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-in"
}

func (clearBgpInstanceVrfAfiSafiExternalSoftIn *ClearBgpInstanceVrfAfiSafiExternalSoftIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiExternalSoftIn.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiExternalSoftIn *ClearBgpInstanceVrfAfiSafiExternalSoftIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiExternalSoftIn.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiExternalSoftIn *ClearBgpInstanceVrfAfiSafiExternalSoftIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiExternalSoftIn *ClearBgpInstanceVrfAfiSafiExternalSoftIn) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiExternalSoftIn *ClearBgpInstanceVrfAfiSafiExternalSoftIn) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-external-soft-in" }

func (clearBgpInstanceVrfAfiSafiExternalSoftIn *ClearBgpInstanceVrfAfiSafiExternalSoftIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiExternalSoftIn *ClearBgpInstanceVrfAfiSafiExternalSoftIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiExternalSoftIn *ClearBgpInstanceVrfAfiSafiExternalSoftIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiExternalSoftIn *ClearBgpInstanceVrfAfiSafiExternalSoftIn) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiExternalSoftIn.parent = parent }

func (clearBgpInstanceVrfAfiSafiExternalSoftIn *ClearBgpInstanceVrfAfiSafiExternalSoftIn) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiExternalSoftIn.parent }

func (clearBgpInstanceVrfAfiSafiExternalSoftIn *ClearBgpInstanceVrfAfiSafiExternalSoftIn) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input
type ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftIn_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-external-soft-in" }

// ClearBgpInstanceVrfAfiSafiExternalSoftOut
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all external peers.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpInstanceVrfAfiSafiExternalSoftOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input
}

func (clearBgpInstanceVrfAfiSafiExternalSoftOut *ClearBgpInstanceVrfAfiSafiExternalSoftOut) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiExternalSoftOut.YFilter }

func (clearBgpInstanceVrfAfiSafiExternalSoftOut *ClearBgpInstanceVrfAfiSafiExternalSoftOut) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiExternalSoftOut.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiExternalSoftOut *ClearBgpInstanceVrfAfiSafiExternalSoftOut) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiExternalSoftOut *ClearBgpInstanceVrfAfiSafiExternalSoftOut) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft-out"
}

func (clearBgpInstanceVrfAfiSafiExternalSoftOut *ClearBgpInstanceVrfAfiSafiExternalSoftOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiExternalSoftOut.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiExternalSoftOut *ClearBgpInstanceVrfAfiSafiExternalSoftOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiExternalSoftOut.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiExternalSoftOut *ClearBgpInstanceVrfAfiSafiExternalSoftOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiExternalSoftOut *ClearBgpInstanceVrfAfiSafiExternalSoftOut) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiExternalSoftOut *ClearBgpInstanceVrfAfiSafiExternalSoftOut) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-external-soft-out" }

func (clearBgpInstanceVrfAfiSafiExternalSoftOut *ClearBgpInstanceVrfAfiSafiExternalSoftOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiExternalSoftOut *ClearBgpInstanceVrfAfiSafiExternalSoftOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiExternalSoftOut *ClearBgpInstanceVrfAfiSafiExternalSoftOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiExternalSoftOut *ClearBgpInstanceVrfAfiSafiExternalSoftOut) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiExternalSoftOut.parent = parent }

func (clearBgpInstanceVrfAfiSafiExternalSoftOut *ClearBgpInstanceVrfAfiSafiExternalSoftOut) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiExternalSoftOut.parent }

func (clearBgpInstanceVrfAfiSafiExternalSoftOut *ClearBgpInstanceVrfAfiSafiExternalSoftOut) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input
type ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoftOut_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-external-soft-out" }

// ClearBgpInstanceVrfAfiSafiExternalSoft
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all external peers.
// Soft reconfig.
// 
type ClearBgpInstanceVrfAfiSafiExternalSoft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiExternalSoft_Input
}

func (clearBgpInstanceVrfAfiSafiExternalSoft *ClearBgpInstanceVrfAfiSafiExternalSoft) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiExternalSoft.YFilter }

func (clearBgpInstanceVrfAfiSafiExternalSoft *ClearBgpInstanceVrfAfiSafiExternalSoft) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiExternalSoft.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiExternalSoft *ClearBgpInstanceVrfAfiSafiExternalSoft) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiExternalSoft *ClearBgpInstanceVrfAfiSafiExternalSoft) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-external-soft"
}

func (clearBgpInstanceVrfAfiSafiExternalSoft *ClearBgpInstanceVrfAfiSafiExternalSoft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiExternalSoft.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiExternalSoft *ClearBgpInstanceVrfAfiSafiExternalSoft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiExternalSoft.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiExternalSoft *ClearBgpInstanceVrfAfiSafiExternalSoft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiExternalSoft *ClearBgpInstanceVrfAfiSafiExternalSoft) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiExternalSoft *ClearBgpInstanceVrfAfiSafiExternalSoft) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-external-soft" }

func (clearBgpInstanceVrfAfiSafiExternalSoft *ClearBgpInstanceVrfAfiSafiExternalSoft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiExternalSoft *ClearBgpInstanceVrfAfiSafiExternalSoft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiExternalSoft *ClearBgpInstanceVrfAfiSafiExternalSoft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiExternalSoft *ClearBgpInstanceVrfAfiSafiExternalSoft) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiExternalSoft.parent = parent }

func (clearBgpInstanceVrfAfiSafiExternalSoft *ClearBgpInstanceVrfAfiSafiExternalSoft) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiExternalSoft.parent }

func (clearBgpInstanceVrfAfiSafiExternalSoft *ClearBgpInstanceVrfAfiSafiExternalSoft) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiExternalSoft_Input
type ClearBgpInstanceVrfAfiSafiExternalSoft_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoft_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoft_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoft_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoft_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoft_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoft_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoft_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiExternalSoft_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoft_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoft_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoft_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoft_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoft_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoft_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiExternalSoft_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-external-soft" }

// ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask
// Choose a particular BGP instance.
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.YFilter }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask" }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.parent = parent }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.parent }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input
type ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // IPv4 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask" }

// ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr
// Choose a particular BGP instance.
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.YFilter }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr"
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr" }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.parent = parent }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr.parent }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input
type ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-flap-statistics-ip-addr" }

// ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix
// Choose a particular BGP instance.
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.YFilter }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix"
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix" }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.parent = parent }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix.parent }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input
type ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv4-prefix" }

// ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp
// Choose a particular BGP instance.
// Specify a VRF.
// Clear flap statistics.
// Clear flap statistics for routes matching the regular expression.
// 
type ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.YFilter }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp"
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp" }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.parent = parent }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp.parent }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRegexp *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input
type ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // A regular expression to match the BGP AS paths.  Use 'ctrl-v ?' to enter
    // '?'. The type is string. This attribute is mandatory.
    RegexpPattern interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "regexp-pattern" { return "RegexpPattern" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["regexp-pattern"] = input.RegexpPattern
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRegexp_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-flap-statistics-regexp" }

// ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy
// Choose a particular BGP instance.
// Specify a VRF.
// Clear flap statistics.
// Clear flap statistics for routes matching the route policy.
// 
type ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.YFilter }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy"
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy" }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.parent = parent }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy.parent }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input
type ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route Policy name. The type is string. This attribute is mandatory.
    RoutePolicyName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["route-policy-name"] = input.RoutePolicyName
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-flap-statistics-route-policy" }

// ClearBgpInstanceVrfAfiSafiFlapStatistics
// Choose a particular BGP instance.
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpInstanceVrfAfiSafiFlapStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiFlapStatistics_Input
}

func (clearBgpInstanceVrfAfiSafiFlapStatistics *ClearBgpInstanceVrfAfiSafiFlapStatistics) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiFlapStatistics.YFilter }

func (clearBgpInstanceVrfAfiSafiFlapStatistics *ClearBgpInstanceVrfAfiSafiFlapStatistics) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiFlapStatistics.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiFlapStatistics *ClearBgpInstanceVrfAfiSafiFlapStatistics) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiFlapStatistics *ClearBgpInstanceVrfAfiSafiFlapStatistics) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics"
}

func (clearBgpInstanceVrfAfiSafiFlapStatistics *ClearBgpInstanceVrfAfiSafiFlapStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiFlapStatistics.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiFlapStatistics *ClearBgpInstanceVrfAfiSafiFlapStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiFlapStatistics.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiFlapStatistics *ClearBgpInstanceVrfAfiSafiFlapStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiFlapStatistics *ClearBgpInstanceVrfAfiSafiFlapStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiFlapStatistics *ClearBgpInstanceVrfAfiSafiFlapStatistics) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-flap-statistics" }

func (clearBgpInstanceVrfAfiSafiFlapStatistics *ClearBgpInstanceVrfAfiSafiFlapStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiFlapStatistics *ClearBgpInstanceVrfAfiSafiFlapStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiFlapStatistics *ClearBgpInstanceVrfAfiSafiFlapStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiFlapStatistics *ClearBgpInstanceVrfAfiSafiFlapStatistics) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiFlapStatistics.parent = parent }

func (clearBgpInstanceVrfAfiSafiFlapStatistics *ClearBgpInstanceVrfAfiSafiFlapStatistics) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiFlapStatistics.parent }

func (clearBgpInstanceVrfAfiSafiFlapStatistics *ClearBgpInstanceVrfAfiSafiFlapStatistics) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiFlapStatistics_Input
type ClearBgpInstanceVrfAfiSafiFlapStatistics_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatistics_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatistics_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatistics_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatistics_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatistics_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatistics_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatistics_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatistics_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatistics_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatistics_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatistics_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatistics_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatistics_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatistics_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatistics_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-flap-statistics" }

// ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics
// Choose a particular BGP instance.
// Specify a VRF.
// Clear nexthop.
// Performance statistics information related to processing.
// 
type ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input
}

func (clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.YFilter }

func (clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics"
}

func (clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics" }

func (clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.parent = parent }

func (clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics.parent }

func (clearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input
type ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiNexthopPerformanceStatistics_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-nexthop-performance-statistics" }

// ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr
// Choose a particular BGP instance.
// Specify a VRF.
// Clear nexthop.
// Registration with RIB and reregister.
// 
type ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input
}

func (clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.YFilter }

func (clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr"
}

func (clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr" }

func (clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.parent = parent }

func (clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr.parent }

func (clearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input
type ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Nexthop address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiNexthopRegistrationIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-nexthop-registration-ip-addr" }

// ClearBgpInstanceVrfAfiSafiSelfOriginated
// Choose a particular BGP instance.
// Specify a VRF.
// Clear redistributed, network and aggregate routes originated here.
// 
type ClearBgpInstanceVrfAfiSafiSelfOriginated struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiSelfOriginated_Input
}

func (clearBgpInstanceVrfAfiSafiSelfOriginated *ClearBgpInstanceVrfAfiSafiSelfOriginated) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiSelfOriginated.YFilter }

func (clearBgpInstanceVrfAfiSafiSelfOriginated *ClearBgpInstanceVrfAfiSafiSelfOriginated) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiSelfOriginated.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiSelfOriginated *ClearBgpInstanceVrfAfiSafiSelfOriginated) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiSelfOriginated *ClearBgpInstanceVrfAfiSafiSelfOriginated) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-self-originated"
}

func (clearBgpInstanceVrfAfiSafiSelfOriginated *ClearBgpInstanceVrfAfiSafiSelfOriginated) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiSelfOriginated.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiSelfOriginated *ClearBgpInstanceVrfAfiSafiSelfOriginated) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiSelfOriginated.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiSelfOriginated *ClearBgpInstanceVrfAfiSafiSelfOriginated) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiSelfOriginated *ClearBgpInstanceVrfAfiSafiSelfOriginated) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiSelfOriginated *ClearBgpInstanceVrfAfiSafiSelfOriginated) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-self-originated" }

func (clearBgpInstanceVrfAfiSafiSelfOriginated *ClearBgpInstanceVrfAfiSafiSelfOriginated) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiSelfOriginated *ClearBgpInstanceVrfAfiSafiSelfOriginated) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiSelfOriginated *ClearBgpInstanceVrfAfiSafiSelfOriginated) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiSelfOriginated *ClearBgpInstanceVrfAfiSafiSelfOriginated) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiSelfOriginated.parent = parent }

func (clearBgpInstanceVrfAfiSafiSelfOriginated *ClearBgpInstanceVrfAfiSafiSelfOriginated) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiSelfOriginated.parent }

func (clearBgpInstanceVrfAfiSafiSelfOriginated *ClearBgpInstanceVrfAfiSafiSelfOriginated) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiSelfOriginated_Input
type ClearBgpInstanceVrfAfiSafiSelfOriginated_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiSelfOriginated_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiSelfOriginated_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiSelfOriginated_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiSelfOriginated_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiSelfOriginated_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiSelfOriginated_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiSelfOriginated_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiSelfOriginated_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiSelfOriginated_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiSelfOriginated_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiSelfOriginated_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiSelfOriginated_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiSelfOriginated_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiSelfOriginated_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiSelfOriginated_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-self-originated" }

// ClearBgpInstanceVrfAfiSafiShutdown
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all peers which were shut down due to low memory.
// 
type ClearBgpInstanceVrfAfiSafiShutdown struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiShutdown_Input
}

func (clearBgpInstanceVrfAfiSafiShutdown *ClearBgpInstanceVrfAfiSafiShutdown) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiShutdown.YFilter }

func (clearBgpInstanceVrfAfiSafiShutdown *ClearBgpInstanceVrfAfiSafiShutdown) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiShutdown.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiShutdown *ClearBgpInstanceVrfAfiSafiShutdown) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiShutdown *ClearBgpInstanceVrfAfiSafiShutdown) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-shutdown"
}

func (clearBgpInstanceVrfAfiSafiShutdown *ClearBgpInstanceVrfAfiSafiShutdown) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiShutdown.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiShutdown *ClearBgpInstanceVrfAfiSafiShutdown) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiShutdown.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiShutdown *ClearBgpInstanceVrfAfiSafiShutdown) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiShutdown *ClearBgpInstanceVrfAfiSafiShutdown) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiShutdown *ClearBgpInstanceVrfAfiSafiShutdown) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-shutdown" }

func (clearBgpInstanceVrfAfiSafiShutdown *ClearBgpInstanceVrfAfiSafiShutdown) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiShutdown *ClearBgpInstanceVrfAfiSafiShutdown) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiShutdown *ClearBgpInstanceVrfAfiSafiShutdown) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiShutdown *ClearBgpInstanceVrfAfiSafiShutdown) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiShutdown.parent = parent }

func (clearBgpInstanceVrfAfiSafiShutdown *ClearBgpInstanceVrfAfiSafiShutdown) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiShutdown.parent }

func (clearBgpInstanceVrfAfiSafiShutdown *ClearBgpInstanceVrfAfiSafiShutdown) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiShutdown_Input
type ClearBgpInstanceVrfAfiSafiShutdown_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiShutdown_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiShutdown_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiShutdown_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiShutdown_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiShutdown_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiShutdown_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiShutdown_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiShutdown_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiShutdown_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiShutdown_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiShutdown_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiShutdown_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiShutdown_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiShutdown_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiShutdown_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-shutdown" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.YFilter }

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent"
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.parent = parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-address-family-update-parent" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.YFilter }

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-address-family"
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-address-family" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.parent = parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily.parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqAddressFamily_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-address-family" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.parent = parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.YFilter }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.parent = parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.YFilter }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.parent = parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.YFilter }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr"
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.parent = parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr.parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-neighbor-ip-addr" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.parent = parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "sub-group" { return "SubGroup" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    leafs["sub-group"] = input.SubGroup
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-update-parent" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.YFilter }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group"
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.parent = parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup.parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "sub-group" { return "SubGroup" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    leafs["sub-group"] = input.SubGroup
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.parent = parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "refresh-sub-group" { return "RefreshSubGroup" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    leafs["refresh-sub-group"] = input.RefreshSubGroup
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.parent = parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "refresh-sub-group" { return "RefreshSubGroup" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    leafs["refresh-sub-group"] = input.RefreshSubGroup
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.YFilter }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent"
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.parent = parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-update-group-update-parent" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// 
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.YFilter }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-update-outq-update-group"
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-update-group" }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.parent = parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup.parent }

func (clearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input
type ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiUpdateOutqUpdateGroup_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-update-outq-update-group" }

// ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix
// Choose a particular BGP instance.
// Specify a VRF.
// Clear route flap dampening information.
// 
type ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input
}

func (clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.YFilter }

func (clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix"
}

func (clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix" }

func (clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.parent = parent }

func (clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix.parent }

func (clearBgpInstanceVrfAfiSafiDampeningIpv6Prefix *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input
type ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 Network and mask or masklength to clear dampening information. The
    // type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiDampeningIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-dampening-ipv6-prefix" }

// ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix
// Choose a particular BGP instance.
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.YFilter }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.YFilter = yf }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix"
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.Input
    }
    return nil
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.Input
    return children
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix) GetYangName() string { return "clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix" }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix) SetParent(parent types.Entity) { clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.parent = parent }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix) GetParent() types.Entity { return clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix.parent }

func (clearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input
type ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-afi-safi-flap-statistics-ipv6-prefix" }

// ClearBgpInstanceVrfNexthopPerformanceStatistics
// Choose a particular BGP instance.
// Specify a VRF.
// Clear nexthop.
// Performance statistics information related to processing.
// 
type ClearBgpInstanceVrfNexthopPerformanceStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfNexthopPerformanceStatistics_Input
}

func (clearBgpInstanceVrfNexthopPerformanceStatistics *ClearBgpInstanceVrfNexthopPerformanceStatistics) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfNexthopPerformanceStatistics.YFilter }

func (clearBgpInstanceVrfNexthopPerformanceStatistics *ClearBgpInstanceVrfNexthopPerformanceStatistics) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfNexthopPerformanceStatistics.YFilter = yf }

func (clearBgpInstanceVrfNexthopPerformanceStatistics *ClearBgpInstanceVrfNexthopPerformanceStatistics) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfNexthopPerformanceStatistics *ClearBgpInstanceVrfNexthopPerformanceStatistics) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-performance-statistics"
}

func (clearBgpInstanceVrfNexthopPerformanceStatistics *ClearBgpInstanceVrfNexthopPerformanceStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfNexthopPerformanceStatistics.Input
    }
    return nil
}

func (clearBgpInstanceVrfNexthopPerformanceStatistics *ClearBgpInstanceVrfNexthopPerformanceStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfNexthopPerformanceStatistics.Input
    return children
}

func (clearBgpInstanceVrfNexthopPerformanceStatistics *ClearBgpInstanceVrfNexthopPerformanceStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfNexthopPerformanceStatistics *ClearBgpInstanceVrfNexthopPerformanceStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfNexthopPerformanceStatistics *ClearBgpInstanceVrfNexthopPerformanceStatistics) GetYangName() string { return "clear-bgp-instance-vrf-nexthop-performance-statistics" }

func (clearBgpInstanceVrfNexthopPerformanceStatistics *ClearBgpInstanceVrfNexthopPerformanceStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfNexthopPerformanceStatistics *ClearBgpInstanceVrfNexthopPerformanceStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfNexthopPerformanceStatistics *ClearBgpInstanceVrfNexthopPerformanceStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfNexthopPerformanceStatistics *ClearBgpInstanceVrfNexthopPerformanceStatistics) SetParent(parent types.Entity) { clearBgpInstanceVrfNexthopPerformanceStatistics.parent = parent }

func (clearBgpInstanceVrfNexthopPerformanceStatistics *ClearBgpInstanceVrfNexthopPerformanceStatistics) GetParent() types.Entity { return clearBgpInstanceVrfNexthopPerformanceStatistics.parent }

func (clearBgpInstanceVrfNexthopPerformanceStatistics *ClearBgpInstanceVrfNexthopPerformanceStatistics) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfNexthopPerformanceStatistics_Input
type ClearBgpInstanceVrfNexthopPerformanceStatistics_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfNexthopPerformanceStatistics_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfNexthopPerformanceStatistics_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfNexthopPerformanceStatistics_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpInstanceVrfNexthopPerformanceStatistics_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfNexthopPerformanceStatistics_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfNexthopPerformanceStatistics_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfNexthopPerformanceStatistics_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpInstanceVrfNexthopPerformanceStatistics_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfNexthopPerformanceStatistics_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfNexthopPerformanceStatistics_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfNexthopPerformanceStatistics_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfNexthopPerformanceStatistics_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfNexthopPerformanceStatistics_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfNexthopPerformanceStatistics_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfNexthopPerformanceStatistics_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-nexthop-performance-statistics" }

// ClearBgpInstanceVrfNexthopRegistrationIpAddr
// Choose a particular BGP instance.
// Specify a VRF.
// Clear nexthop.
// Registration with RIB and reregister.
// 
type ClearBgpInstanceVrfNexthopRegistrationIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input
}

func (clearBgpInstanceVrfNexthopRegistrationIpAddr *ClearBgpInstanceVrfNexthopRegistrationIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfNexthopRegistrationIpAddr.YFilter }

func (clearBgpInstanceVrfNexthopRegistrationIpAddr *ClearBgpInstanceVrfNexthopRegistrationIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfNexthopRegistrationIpAddr.YFilter = yf }

func (clearBgpInstanceVrfNexthopRegistrationIpAddr *ClearBgpInstanceVrfNexthopRegistrationIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfNexthopRegistrationIpAddr *ClearBgpInstanceVrfNexthopRegistrationIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-nexthop-registration-ip-addr"
}

func (clearBgpInstanceVrfNexthopRegistrationIpAddr *ClearBgpInstanceVrfNexthopRegistrationIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfNexthopRegistrationIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceVrfNexthopRegistrationIpAddr *ClearBgpInstanceVrfNexthopRegistrationIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfNexthopRegistrationIpAddr.Input
    return children
}

func (clearBgpInstanceVrfNexthopRegistrationIpAddr *ClearBgpInstanceVrfNexthopRegistrationIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfNexthopRegistrationIpAddr *ClearBgpInstanceVrfNexthopRegistrationIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfNexthopRegistrationIpAddr *ClearBgpInstanceVrfNexthopRegistrationIpAddr) GetYangName() string { return "clear-bgp-instance-vrf-nexthop-registration-ip-addr" }

func (clearBgpInstanceVrfNexthopRegistrationIpAddr *ClearBgpInstanceVrfNexthopRegistrationIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfNexthopRegistrationIpAddr *ClearBgpInstanceVrfNexthopRegistrationIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfNexthopRegistrationIpAddr *ClearBgpInstanceVrfNexthopRegistrationIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfNexthopRegistrationIpAddr *ClearBgpInstanceVrfNexthopRegistrationIpAddr) SetParent(parent types.Entity) { clearBgpInstanceVrfNexthopRegistrationIpAddr.parent = parent }

func (clearBgpInstanceVrfNexthopRegistrationIpAddr *ClearBgpInstanceVrfNexthopRegistrationIpAddr) GetParent() types.Entity { return clearBgpInstanceVrfNexthopRegistrationIpAddr.parent }

func (clearBgpInstanceVrfNexthopRegistrationIpAddr *ClearBgpInstanceVrfNexthopRegistrationIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input
type ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Nexthop address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfNexthopRegistrationIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-nexthop-registration-ip-addr" }

// ClearBgpInstanceVrfPeerDropsAll
// Choose a particular BGP instance.
// Specify a VRF.
// Clear established/dropped counters for a peer.
// All Neighbors.
// 
type ClearBgpInstanceVrfPeerDropsAll struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfPeerDropsAll_Input
}

func (clearBgpInstanceVrfPeerDropsAll *ClearBgpInstanceVrfPeerDropsAll) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfPeerDropsAll.YFilter }

func (clearBgpInstanceVrfPeerDropsAll *ClearBgpInstanceVrfPeerDropsAll) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfPeerDropsAll.YFilter = yf }

func (clearBgpInstanceVrfPeerDropsAll *ClearBgpInstanceVrfPeerDropsAll) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfPeerDropsAll *ClearBgpInstanceVrfPeerDropsAll) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-all"
}

func (clearBgpInstanceVrfPeerDropsAll *ClearBgpInstanceVrfPeerDropsAll) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfPeerDropsAll.Input
    }
    return nil
}

func (clearBgpInstanceVrfPeerDropsAll *ClearBgpInstanceVrfPeerDropsAll) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfPeerDropsAll.Input
    return children
}

func (clearBgpInstanceVrfPeerDropsAll *ClearBgpInstanceVrfPeerDropsAll) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfPeerDropsAll *ClearBgpInstanceVrfPeerDropsAll) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfPeerDropsAll *ClearBgpInstanceVrfPeerDropsAll) GetYangName() string { return "clear-bgp-instance-vrf-peer-drops-all" }

func (clearBgpInstanceVrfPeerDropsAll *ClearBgpInstanceVrfPeerDropsAll) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfPeerDropsAll *ClearBgpInstanceVrfPeerDropsAll) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfPeerDropsAll *ClearBgpInstanceVrfPeerDropsAll) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfPeerDropsAll *ClearBgpInstanceVrfPeerDropsAll) SetParent(parent types.Entity) { clearBgpInstanceVrfPeerDropsAll.parent = parent }

func (clearBgpInstanceVrfPeerDropsAll *ClearBgpInstanceVrfPeerDropsAll) GetParent() types.Entity { return clearBgpInstanceVrfPeerDropsAll.parent }

func (clearBgpInstanceVrfPeerDropsAll *ClearBgpInstanceVrfPeerDropsAll) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfPeerDropsAll_Input
type ClearBgpInstanceVrfPeerDropsAll_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfPeerDropsAll_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfPeerDropsAll_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfPeerDropsAll_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpInstanceVrfPeerDropsAll_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfPeerDropsAll_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfPeerDropsAll_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfPeerDropsAll_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpInstanceVrfPeerDropsAll_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfPeerDropsAll_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfPeerDropsAll_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfPeerDropsAll_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfPeerDropsAll_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfPeerDropsAll_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfPeerDropsAll_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfPeerDropsAll_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-peer-drops-all" }

// ClearBgpInstanceVrfPeerDropsIpAddr
// Choose a particular BGP instance.
// Specify a VRF.
// Clear established/dropped counters for a peer.
// 
type ClearBgpInstanceVrfPeerDropsIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfPeerDropsIpAddr_Input
}

func (clearBgpInstanceVrfPeerDropsIpAddr *ClearBgpInstanceVrfPeerDropsIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfPeerDropsIpAddr.YFilter }

func (clearBgpInstanceVrfPeerDropsIpAddr *ClearBgpInstanceVrfPeerDropsIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfPeerDropsIpAddr.YFilter = yf }

func (clearBgpInstanceVrfPeerDropsIpAddr *ClearBgpInstanceVrfPeerDropsIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfPeerDropsIpAddr *ClearBgpInstanceVrfPeerDropsIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-peer-drops-ip-addr"
}

func (clearBgpInstanceVrfPeerDropsIpAddr *ClearBgpInstanceVrfPeerDropsIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfPeerDropsIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceVrfPeerDropsIpAddr *ClearBgpInstanceVrfPeerDropsIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfPeerDropsIpAddr.Input
    return children
}

func (clearBgpInstanceVrfPeerDropsIpAddr *ClearBgpInstanceVrfPeerDropsIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfPeerDropsIpAddr *ClearBgpInstanceVrfPeerDropsIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfPeerDropsIpAddr *ClearBgpInstanceVrfPeerDropsIpAddr) GetYangName() string { return "clear-bgp-instance-vrf-peer-drops-ip-addr" }

func (clearBgpInstanceVrfPeerDropsIpAddr *ClearBgpInstanceVrfPeerDropsIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfPeerDropsIpAddr *ClearBgpInstanceVrfPeerDropsIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfPeerDropsIpAddr *ClearBgpInstanceVrfPeerDropsIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfPeerDropsIpAddr *ClearBgpInstanceVrfPeerDropsIpAddr) SetParent(parent types.Entity) { clearBgpInstanceVrfPeerDropsIpAddr.parent = parent }

func (clearBgpInstanceVrfPeerDropsIpAddr *ClearBgpInstanceVrfPeerDropsIpAddr) GetParent() types.Entity { return clearBgpInstanceVrfPeerDropsIpAddr.parent }

func (clearBgpInstanceVrfPeerDropsIpAddr *ClearBgpInstanceVrfPeerDropsIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfPeerDropsIpAddr_Input
type ClearBgpInstanceVrfPeerDropsIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // BGP neighbor IP address. The type is one of the following types: string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfPeerDropsIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfPeerDropsIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfPeerDropsIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfPeerDropsIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfPeerDropsIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfPeerDropsIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfPeerDropsIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfPeerDropsIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfPeerDropsIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfPeerDropsIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfPeerDropsIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfPeerDropsIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfPeerDropsIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfPeerDropsIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfPeerDropsIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-peer-drops-ip-addr" }

// ClearBgpInstanceVrfPerformanceStatistics
// Choose a particular BGP instance.
// Specify a VRF.
// Clear performance statistics.
// 
type ClearBgpInstanceVrfPerformanceStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfPerformanceStatistics_Input
}

func (clearBgpInstanceVrfPerformanceStatistics *ClearBgpInstanceVrfPerformanceStatistics) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfPerformanceStatistics.YFilter }

func (clearBgpInstanceVrfPerformanceStatistics *ClearBgpInstanceVrfPerformanceStatistics) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfPerformanceStatistics.YFilter = yf }

func (clearBgpInstanceVrfPerformanceStatistics *ClearBgpInstanceVrfPerformanceStatistics) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfPerformanceStatistics *ClearBgpInstanceVrfPerformanceStatistics) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-performance-statistics"
}

func (clearBgpInstanceVrfPerformanceStatistics *ClearBgpInstanceVrfPerformanceStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfPerformanceStatistics.Input
    }
    return nil
}

func (clearBgpInstanceVrfPerformanceStatistics *ClearBgpInstanceVrfPerformanceStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfPerformanceStatistics.Input
    return children
}

func (clearBgpInstanceVrfPerformanceStatistics *ClearBgpInstanceVrfPerformanceStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfPerformanceStatistics *ClearBgpInstanceVrfPerformanceStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfPerformanceStatistics *ClearBgpInstanceVrfPerformanceStatistics) GetYangName() string { return "clear-bgp-instance-vrf-performance-statistics" }

func (clearBgpInstanceVrfPerformanceStatistics *ClearBgpInstanceVrfPerformanceStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfPerformanceStatistics *ClearBgpInstanceVrfPerformanceStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfPerformanceStatistics *ClearBgpInstanceVrfPerformanceStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfPerformanceStatistics *ClearBgpInstanceVrfPerformanceStatistics) SetParent(parent types.Entity) { clearBgpInstanceVrfPerformanceStatistics.parent = parent }

func (clearBgpInstanceVrfPerformanceStatistics *ClearBgpInstanceVrfPerformanceStatistics) GetParent() types.Entity { return clearBgpInstanceVrfPerformanceStatistics.parent }

func (clearBgpInstanceVrfPerformanceStatistics *ClearBgpInstanceVrfPerformanceStatistics) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfPerformanceStatistics_Input
type ClearBgpInstanceVrfPerformanceStatistics_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfPerformanceStatistics_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfPerformanceStatistics_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfPerformanceStatistics_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpInstanceVrfPerformanceStatistics_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfPerformanceStatistics_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfPerformanceStatistics_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfPerformanceStatistics_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpInstanceVrfPerformanceStatistics_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfPerformanceStatistics_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfPerformanceStatistics_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfPerformanceStatistics_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfPerformanceStatistics_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfPerformanceStatistics_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfPerformanceStatistics_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfPerformanceStatistics_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-performance-statistics" }

// ClearBgpInstanceVrfShutdown
// Choose a particular BGP instance.
// Specify a VRF.
// Clear all peers which were shut down due to low memory.
// 
type ClearBgpInstanceVrfShutdown struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfShutdown_Input
}

func (clearBgpInstanceVrfShutdown *ClearBgpInstanceVrfShutdown) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfShutdown.YFilter }

func (clearBgpInstanceVrfShutdown *ClearBgpInstanceVrfShutdown) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfShutdown.YFilter = yf }

func (clearBgpInstanceVrfShutdown *ClearBgpInstanceVrfShutdown) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfShutdown *ClearBgpInstanceVrfShutdown) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-shutdown"
}

func (clearBgpInstanceVrfShutdown *ClearBgpInstanceVrfShutdown) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfShutdown.Input
    }
    return nil
}

func (clearBgpInstanceVrfShutdown *ClearBgpInstanceVrfShutdown) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfShutdown.Input
    return children
}

func (clearBgpInstanceVrfShutdown *ClearBgpInstanceVrfShutdown) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfShutdown *ClearBgpInstanceVrfShutdown) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfShutdown *ClearBgpInstanceVrfShutdown) GetYangName() string { return "clear-bgp-instance-vrf-shutdown" }

func (clearBgpInstanceVrfShutdown *ClearBgpInstanceVrfShutdown) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfShutdown *ClearBgpInstanceVrfShutdown) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfShutdown *ClearBgpInstanceVrfShutdown) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfShutdown *ClearBgpInstanceVrfShutdown) SetParent(parent types.Entity) { clearBgpInstanceVrfShutdown.parent = parent }

func (clearBgpInstanceVrfShutdown *ClearBgpInstanceVrfShutdown) GetParent() types.Entity { return clearBgpInstanceVrfShutdown.parent }

func (clearBgpInstanceVrfShutdown *ClearBgpInstanceVrfShutdown) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfShutdown_Input
type ClearBgpInstanceVrfShutdown_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfShutdown_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfShutdown_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfShutdown_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpInstanceVrfShutdown_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfShutdown_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfShutdown_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfShutdown_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpInstanceVrfShutdown_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfShutdown_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfShutdown_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfShutdown_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfShutdown_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfShutdown_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfShutdown_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfShutdown_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-shutdown" }

// ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input
}

func (clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.YFilter }

func (clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.YFilter = yf }

func (clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family-update-parent"
}

func (clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.Input
    return children
}

func (clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent) GetYangName() string { return "clear-bgp-instance-vrf-update-outq-address-family-update-parent" }

func (clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.parent = parent }

func (clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent) GetParent() types.Entity { return clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent.parent }

func (clearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input
type ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamilyUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-update-outq-address-family-update-parent" }

// ClearBgpInstanceVrfUpdateOutqAddressFamily
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// 
type ClearBgpInstanceVrfUpdateOutqAddressFamily struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqAddressFamily_Input
}

func (clearBgpInstanceVrfUpdateOutqAddressFamily *ClearBgpInstanceVrfUpdateOutqAddressFamily) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfUpdateOutqAddressFamily.YFilter }

func (clearBgpInstanceVrfUpdateOutqAddressFamily *ClearBgpInstanceVrfUpdateOutqAddressFamily) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfUpdateOutqAddressFamily.YFilter = yf }

func (clearBgpInstanceVrfUpdateOutqAddressFamily *ClearBgpInstanceVrfUpdateOutqAddressFamily) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfUpdateOutqAddressFamily *ClearBgpInstanceVrfUpdateOutqAddressFamily) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-address-family"
}

func (clearBgpInstanceVrfUpdateOutqAddressFamily *ClearBgpInstanceVrfUpdateOutqAddressFamily) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfUpdateOutqAddressFamily.Input
    }
    return nil
}

func (clearBgpInstanceVrfUpdateOutqAddressFamily *ClearBgpInstanceVrfUpdateOutqAddressFamily) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfUpdateOutqAddressFamily.Input
    return children
}

func (clearBgpInstanceVrfUpdateOutqAddressFamily *ClearBgpInstanceVrfUpdateOutqAddressFamily) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfUpdateOutqAddressFamily *ClearBgpInstanceVrfUpdateOutqAddressFamily) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfUpdateOutqAddressFamily *ClearBgpInstanceVrfUpdateOutqAddressFamily) GetYangName() string { return "clear-bgp-instance-vrf-update-outq-address-family" }

func (clearBgpInstanceVrfUpdateOutqAddressFamily *ClearBgpInstanceVrfUpdateOutqAddressFamily) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfUpdateOutqAddressFamily *ClearBgpInstanceVrfUpdateOutqAddressFamily) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfUpdateOutqAddressFamily *ClearBgpInstanceVrfUpdateOutqAddressFamily) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfUpdateOutqAddressFamily *ClearBgpInstanceVrfUpdateOutqAddressFamily) SetParent(parent types.Entity) { clearBgpInstanceVrfUpdateOutqAddressFamily.parent = parent }

func (clearBgpInstanceVrfUpdateOutqAddressFamily *ClearBgpInstanceVrfUpdateOutqAddressFamily) GetParent() types.Entity { return clearBgpInstanceVrfUpdateOutqAddressFamily.parent }

func (clearBgpInstanceVrfUpdateOutqAddressFamily *ClearBgpInstanceVrfUpdateOutqAddressFamily) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfUpdateOutqAddressFamily_Input
type ClearBgpInstanceVrfUpdateOutqAddressFamily_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamily_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamily_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamily_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamily_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamily_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamily_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamily_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamily_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamily_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamily_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamily_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamily_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamily_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamily_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfUpdateOutqAddressFamily_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-update-outq-address-family" }

// ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter = yf }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input
    return children
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetYangName() string { return "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent" }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.parent = parent }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetParent() types.Entity { return clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.parent }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
type ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh-update-parent" }

// ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// 
type ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.YFilter }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.YFilter = yf }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh"
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.Input
    }
    return nil
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.Input
    return children
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh) GetYangName() string { return "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh" }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh) SetParent(parent types.Entity) { clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.parent = parent }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh) GetParent() types.Entity { return clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh.parent }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input
type ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrRefresh_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-refresh" }

// ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.YFilter }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.YFilter = yf }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent"
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.Input
    return children
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent) GetYangName() string { return "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent" }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.parent = parent }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent) GetParent() types.Entity { return clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent.parent }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input
type ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr-update-parent" }

// ClearBgpInstanceVrfUpdateOutqNeighborIpAddr
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// 
type ClearBgpInstanceVrfUpdateOutqNeighborIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfUpdateOutqNeighborIpAddr.YFilter }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfUpdateOutqNeighborIpAddr.YFilter = yf }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-neighbor-ip-addr"
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfUpdateOutqNeighborIpAddr.Input
    }
    return nil
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfUpdateOutqNeighborIpAddr.Input
    return children
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr) GetYangName() string { return "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr" }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr) SetParent(parent types.Entity) { clearBgpInstanceVrfUpdateOutqNeighborIpAddr.parent = parent }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr) GetParent() types.Entity { return clearBgpInstanceVrfUpdateOutqNeighborIpAddr.parent }

func (clearBgpInstanceVrfUpdateOutqNeighborIpAddr *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input
type ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfUpdateOutqNeighborIpAddr_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-update-outq-neighbor-ip-addr" }

// ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter = yf }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent"
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input
    return children
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetYangName() string { return "clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent" }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.parent = parent }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetParent() types.Entity { return clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent.parent }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input
type ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "sub-group" { return "SubGroup" }
    return ""
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["update-group"] = input.UpdateGroup
    leafs["sub-group"] = input.SubGroup
    return leafs
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-update-outq-update-group-sub-group-update-parent" }

// ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.YFilter }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.YFilter = yf }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group"
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.Input
    }
    return nil
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.Input
    return children
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup) GetYangName() string { return "clear-bgp-instance-vrf-update-outq-update-group-sub-group" }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup) SetParent(parent types.Entity) { clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.parent = parent }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup) GetParent() types.Entity { return clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup.parent }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input
type ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "sub-group" { return "SubGroup" }
    return ""
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["update-group"] = input.UpdateGroup
    leafs["sub-group"] = input.SubGroup
    return leafs
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroup_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-update-outq-update-group-sub-group" }

// ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter = yf }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input
    return children
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetYangName() string { return "clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent" }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.parent = parent }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetParent() types.Entity { return clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.parent }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
type ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "refresh-sub-group" { return "RefreshSubGroup" }
    return ""
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["update-group"] = input.UpdateGroup
    leafs["refresh-sub-group"] = input.RefreshSubGroup
    return leafs
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent" }

// ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter = yf }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group"
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input
    }
    return nil
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input
    return children
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetYangName() string { return "clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group" }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) SetParent(parent types.Entity) { clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.parent = parent }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetParent() types.Entity { return clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.parent }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
type ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "refresh-sub-group" { return "RefreshSubGroup" }
    return ""
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["update-group"] = input.UpdateGroup
    leafs["refresh-sub-group"] = input.RefreshSubGroup
    return leafs
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-update-outq-update-group-sub-group-refresh-sub-group" }

// ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Update parents' OutQ counters too.
// 
type ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.YFilter }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.YFilter = yf }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group-update-parent"
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.Input
    return children
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent) GetYangName() string { return "clear-bgp-instance-vrf-update-outq-update-group-update-parent" }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent) SetParent(parent types.Entity) { clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.parent = parent }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent) GetParent() types.Entity { return clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent.parent }

func (clearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input
type ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "update-group" { return "UpdateGroup" }
    return ""
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["update-group"] = input.UpdateGroup
    return leafs
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-update-outq-update-group-update-parent" }

// ClearBgpInstanceVrfUpdateOutqUpdateGroup
// Choose a particular BGP instance.
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// 
type ClearBgpInstanceVrfUpdateOutqUpdateGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroup) GetFilter() yfilter.YFilter { return clearBgpInstanceVrfUpdateOutqUpdateGroup.YFilter }

func (clearBgpInstanceVrfUpdateOutqUpdateGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroup) SetFilter(yf yfilter.YFilter) { clearBgpInstanceVrfUpdateOutqUpdateGroup.YFilter = yf }

func (clearBgpInstanceVrfUpdateOutqUpdateGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-instance-vrf-update-outq-update-group"
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpInstanceVrfUpdateOutqUpdateGroup.Input
    }
    return nil
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpInstanceVrfUpdateOutqUpdateGroup.Input
    return children
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpInstanceVrfUpdateOutqUpdateGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpInstanceVrfUpdateOutqUpdateGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroup) GetYangName() string { return "clear-bgp-instance-vrf-update-outq-update-group" }

func (clearBgpInstanceVrfUpdateOutqUpdateGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpInstanceVrfUpdateOutqUpdateGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpInstanceVrfUpdateOutqUpdateGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpInstanceVrfUpdateOutqUpdateGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroup) SetParent(parent types.Entity) { clearBgpInstanceVrfUpdateOutqUpdateGroup.parent = parent }

func (clearBgpInstanceVrfUpdateOutqUpdateGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroup) GetParent() types.Entity { return clearBgpInstanceVrfUpdateOutqUpdateGroup.parent }

func (clearBgpInstanceVrfUpdateOutqUpdateGroup *ClearBgpInstanceVrfUpdateOutqUpdateGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input
type ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // instance name or all. The type is one of the following types: enumeration
    // InstanceName This attribute is mandatory., or string This attribute is
    // mandatory..
    InstanceName interface{}

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "update-group" { return "UpdateGroup" }
    return ""
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = input.InstanceName
    leafs["vrf-all"] = input.VrfAll
    leafs["update-group"] = input.UpdateGroup
    return leafs
}

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpInstanceVrfUpdateOutqUpdateGroup_Input) GetParentYangName() string { return "clear-bgp-instance-vrf-update-outq-update-group" }

// ClearBgpAfiSafiDampeningIpv4Prefix
// Clear route flap dampening information.
// 
type ClearBgpAfiSafiDampeningIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiDampeningIpv4Prefix_Input
}

func (clearBgpAfiSafiDampeningIpv4Prefix *ClearBgpAfiSafiDampeningIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpAfiSafiDampeningIpv4Prefix.YFilter }

func (clearBgpAfiSafiDampeningIpv4Prefix *ClearBgpAfiSafiDampeningIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiDampeningIpv4Prefix.YFilter = yf }

func (clearBgpAfiSafiDampeningIpv4Prefix *ClearBgpAfiSafiDampeningIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiDampeningIpv4Prefix *ClearBgpAfiSafiDampeningIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv4-prefix"
}

func (clearBgpAfiSafiDampeningIpv4Prefix *ClearBgpAfiSafiDampeningIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiDampeningIpv4Prefix.Input
    }
    return nil
}

func (clearBgpAfiSafiDampeningIpv4Prefix *ClearBgpAfiSafiDampeningIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiDampeningIpv4Prefix.Input
    return children
}

func (clearBgpAfiSafiDampeningIpv4Prefix *ClearBgpAfiSafiDampeningIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiDampeningIpv4Prefix *ClearBgpAfiSafiDampeningIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiDampeningIpv4Prefix *ClearBgpAfiSafiDampeningIpv4Prefix) GetYangName() string { return "clear-bgp-afi-safi-dampening-ipv4-prefix" }

func (clearBgpAfiSafiDampeningIpv4Prefix *ClearBgpAfiSafiDampeningIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiDampeningIpv4Prefix *ClearBgpAfiSafiDampeningIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiDampeningIpv4Prefix *ClearBgpAfiSafiDampeningIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiDampeningIpv4Prefix *ClearBgpAfiSafiDampeningIpv4Prefix) SetParent(parent types.Entity) { clearBgpAfiSafiDampeningIpv4Prefix.parent = parent }

func (clearBgpAfiSafiDampeningIpv4Prefix *ClearBgpAfiSafiDampeningIpv4Prefix) GetParent() types.Entity { return clearBgpAfiSafiDampeningIpv4Prefix.parent }

func (clearBgpAfiSafiDampeningIpv4Prefix *ClearBgpAfiSafiDampeningIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiDampeningIpv4Prefix_Input
type ClearBgpAfiSafiDampeningIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Network and mask or masklength to clear dampening information. The
    // type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpAfiSafiDampeningIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiDampeningIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiDampeningIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpAfiSafiDampeningIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiDampeningIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiDampeningIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiDampeningIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpAfiSafiDampeningIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiDampeningIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiDampeningIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiDampeningIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiDampeningIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiDampeningIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiDampeningIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiDampeningIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-afi-safi-dampening-ipv4-prefix" }

// ClearBgpAfiSafiFlapStatisticsIpv4Prefix
// Clear flap statistics.
// 
type ClearBgpAfiSafiFlapStatisticsIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input
}

func (clearBgpAfiSafiFlapStatisticsIpv4Prefix *ClearBgpAfiSafiFlapStatisticsIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpAfiSafiFlapStatisticsIpv4Prefix.YFilter }

func (clearBgpAfiSafiFlapStatisticsIpv4Prefix *ClearBgpAfiSafiFlapStatisticsIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiFlapStatisticsIpv4Prefix.YFilter = yf }

func (clearBgpAfiSafiFlapStatisticsIpv4Prefix *ClearBgpAfiSafiFlapStatisticsIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiFlapStatisticsIpv4Prefix *ClearBgpAfiSafiFlapStatisticsIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv4-prefix"
}

func (clearBgpAfiSafiFlapStatisticsIpv4Prefix *ClearBgpAfiSafiFlapStatisticsIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiFlapStatisticsIpv4Prefix.Input
    }
    return nil
}

func (clearBgpAfiSafiFlapStatisticsIpv4Prefix *ClearBgpAfiSafiFlapStatisticsIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiFlapStatisticsIpv4Prefix.Input
    return children
}

func (clearBgpAfiSafiFlapStatisticsIpv4Prefix *ClearBgpAfiSafiFlapStatisticsIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiFlapStatisticsIpv4Prefix *ClearBgpAfiSafiFlapStatisticsIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiFlapStatisticsIpv4Prefix *ClearBgpAfiSafiFlapStatisticsIpv4Prefix) GetYangName() string { return "clear-bgp-afi-safi-flap-statistics-ipv4-prefix" }

func (clearBgpAfiSafiFlapStatisticsIpv4Prefix *ClearBgpAfiSafiFlapStatisticsIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiFlapStatisticsIpv4Prefix *ClearBgpAfiSafiFlapStatisticsIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiFlapStatisticsIpv4Prefix *ClearBgpAfiSafiFlapStatisticsIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiFlapStatisticsIpv4Prefix *ClearBgpAfiSafiFlapStatisticsIpv4Prefix) SetParent(parent types.Entity) { clearBgpAfiSafiFlapStatisticsIpv4Prefix.parent = parent }

func (clearBgpAfiSafiFlapStatisticsIpv4Prefix *ClearBgpAfiSafiFlapStatisticsIpv4Prefix) GetParent() types.Entity { return clearBgpAfiSafiFlapStatisticsIpv4Prefix.parent }

func (clearBgpAfiSafiFlapStatisticsIpv4Prefix *ClearBgpAfiSafiFlapStatisticsIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input
type ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiFlapStatisticsIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-afi-safi-flap-statistics-ipv4-prefix" }

// ClearBgpAfiSafiDampeningIpv6Prefix
// Clear route flap dampening information.
// 
type ClearBgpAfiSafiDampeningIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiDampeningIpv6Prefix_Input
}

func (clearBgpAfiSafiDampeningIpv6Prefix *ClearBgpAfiSafiDampeningIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpAfiSafiDampeningIpv6Prefix.YFilter }

func (clearBgpAfiSafiDampeningIpv6Prefix *ClearBgpAfiSafiDampeningIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiDampeningIpv6Prefix.YFilter = yf }

func (clearBgpAfiSafiDampeningIpv6Prefix *ClearBgpAfiSafiDampeningIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiDampeningIpv6Prefix *ClearBgpAfiSafiDampeningIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-dampening-ipv6-prefix"
}

func (clearBgpAfiSafiDampeningIpv6Prefix *ClearBgpAfiSafiDampeningIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiDampeningIpv6Prefix.Input
    }
    return nil
}

func (clearBgpAfiSafiDampeningIpv6Prefix *ClearBgpAfiSafiDampeningIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiDampeningIpv6Prefix.Input
    return children
}

func (clearBgpAfiSafiDampeningIpv6Prefix *ClearBgpAfiSafiDampeningIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiDampeningIpv6Prefix *ClearBgpAfiSafiDampeningIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiDampeningIpv6Prefix *ClearBgpAfiSafiDampeningIpv6Prefix) GetYangName() string { return "clear-bgp-afi-safi-dampening-ipv6-prefix" }

func (clearBgpAfiSafiDampeningIpv6Prefix *ClearBgpAfiSafiDampeningIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiDampeningIpv6Prefix *ClearBgpAfiSafiDampeningIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiDampeningIpv6Prefix *ClearBgpAfiSafiDampeningIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiDampeningIpv6Prefix *ClearBgpAfiSafiDampeningIpv6Prefix) SetParent(parent types.Entity) { clearBgpAfiSafiDampeningIpv6Prefix.parent = parent }

func (clearBgpAfiSafiDampeningIpv6Prefix *ClearBgpAfiSafiDampeningIpv6Prefix) GetParent() types.Entity { return clearBgpAfiSafiDampeningIpv6Prefix.parent }

func (clearBgpAfiSafiDampeningIpv6Prefix *ClearBgpAfiSafiDampeningIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiDampeningIpv6Prefix_Input
type ClearBgpAfiSafiDampeningIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 Network and mask or masklength to clear dampening information. The
    // type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpAfiSafiDampeningIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiDampeningIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiDampeningIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpAfiSafiDampeningIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiDampeningIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiDampeningIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiDampeningIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpAfiSafiDampeningIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiDampeningIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiDampeningIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiDampeningIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiDampeningIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiDampeningIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiDampeningIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiDampeningIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-afi-safi-dampening-ipv6-prefix" }

// ClearBgpAfiSafiFlapStatisticsIpv6Prefix
// Clear flap statistics.
// 
type ClearBgpAfiSafiFlapStatisticsIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input
}

func (clearBgpAfiSafiFlapStatisticsIpv6Prefix *ClearBgpAfiSafiFlapStatisticsIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpAfiSafiFlapStatisticsIpv6Prefix.YFilter }

func (clearBgpAfiSafiFlapStatisticsIpv6Prefix *ClearBgpAfiSafiFlapStatisticsIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpAfiSafiFlapStatisticsIpv6Prefix.YFilter = yf }

func (clearBgpAfiSafiFlapStatisticsIpv6Prefix *ClearBgpAfiSafiFlapStatisticsIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpAfiSafiFlapStatisticsIpv6Prefix *ClearBgpAfiSafiFlapStatisticsIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-afi-safi-flap-statistics-ipv6-prefix"
}

func (clearBgpAfiSafiFlapStatisticsIpv6Prefix *ClearBgpAfiSafiFlapStatisticsIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpAfiSafiFlapStatisticsIpv6Prefix.Input
    }
    return nil
}

func (clearBgpAfiSafiFlapStatisticsIpv6Prefix *ClearBgpAfiSafiFlapStatisticsIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpAfiSafiFlapStatisticsIpv6Prefix.Input
    return children
}

func (clearBgpAfiSafiFlapStatisticsIpv6Prefix *ClearBgpAfiSafiFlapStatisticsIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpAfiSafiFlapStatisticsIpv6Prefix *ClearBgpAfiSafiFlapStatisticsIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpAfiSafiFlapStatisticsIpv6Prefix *ClearBgpAfiSafiFlapStatisticsIpv6Prefix) GetYangName() string { return "clear-bgp-afi-safi-flap-statistics-ipv6-prefix" }

func (clearBgpAfiSafiFlapStatisticsIpv6Prefix *ClearBgpAfiSafiFlapStatisticsIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpAfiSafiFlapStatisticsIpv6Prefix *ClearBgpAfiSafiFlapStatisticsIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpAfiSafiFlapStatisticsIpv6Prefix *ClearBgpAfiSafiFlapStatisticsIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpAfiSafiFlapStatisticsIpv6Prefix *ClearBgpAfiSafiFlapStatisticsIpv6Prefix) SetParent(parent types.Entity) { clearBgpAfiSafiFlapStatisticsIpv6Prefix.parent = parent }

func (clearBgpAfiSafiFlapStatisticsIpv6Prefix *ClearBgpAfiSafiFlapStatisticsIpv6Prefix) GetParent() types.Entity { return clearBgpAfiSafiFlapStatisticsIpv6Prefix.parent }

func (clearBgpAfiSafiFlapStatisticsIpv6Prefix *ClearBgpAfiSafiFlapStatisticsIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input
type ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpAfiSafiFlapStatisticsIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-afi-safi-flap-statistics-ipv6-prefix" }

// ClearBgpNexthopPerformanceStatistics
// Clear nexthop.
// Performance statistics information related to processing.
// 
type ClearBgpNexthopPerformanceStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter
}

func (clearBgpNexthopPerformanceStatistics *ClearBgpNexthopPerformanceStatistics) GetFilter() yfilter.YFilter { return clearBgpNexthopPerformanceStatistics.YFilter }

func (clearBgpNexthopPerformanceStatistics *ClearBgpNexthopPerformanceStatistics) SetFilter(yf yfilter.YFilter) { clearBgpNexthopPerformanceStatistics.YFilter = yf }

func (clearBgpNexthopPerformanceStatistics *ClearBgpNexthopPerformanceStatistics) GetGoName(yname string) string {
    return ""
}

func (clearBgpNexthopPerformanceStatistics *ClearBgpNexthopPerformanceStatistics) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-nexthop-performance-statistics"
}

func (clearBgpNexthopPerformanceStatistics *ClearBgpNexthopPerformanceStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clearBgpNexthopPerformanceStatistics *ClearBgpNexthopPerformanceStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clearBgpNexthopPerformanceStatistics *ClearBgpNexthopPerformanceStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpNexthopPerformanceStatistics *ClearBgpNexthopPerformanceStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpNexthopPerformanceStatistics *ClearBgpNexthopPerformanceStatistics) GetYangName() string { return "clear-bgp-nexthop-performance-statistics" }

func (clearBgpNexthopPerformanceStatistics *ClearBgpNexthopPerformanceStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpNexthopPerformanceStatistics *ClearBgpNexthopPerformanceStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpNexthopPerformanceStatistics *ClearBgpNexthopPerformanceStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpNexthopPerformanceStatistics *ClearBgpNexthopPerformanceStatistics) SetParent(parent types.Entity) { clearBgpNexthopPerformanceStatistics.parent = parent }

func (clearBgpNexthopPerformanceStatistics *ClearBgpNexthopPerformanceStatistics) GetParent() types.Entity { return clearBgpNexthopPerformanceStatistics.parent }

func (clearBgpNexthopPerformanceStatistics *ClearBgpNexthopPerformanceStatistics) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpNexthopRegistrationIpAddr
// Clear nexthop.
// Registration with RIB and reregister.
// 
type ClearBgpNexthopRegistrationIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpNexthopRegistrationIpAddr_Input
}

func (clearBgpNexthopRegistrationIpAddr *ClearBgpNexthopRegistrationIpAddr) GetFilter() yfilter.YFilter { return clearBgpNexthopRegistrationIpAddr.YFilter }

func (clearBgpNexthopRegistrationIpAddr *ClearBgpNexthopRegistrationIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpNexthopRegistrationIpAddr.YFilter = yf }

func (clearBgpNexthopRegistrationIpAddr *ClearBgpNexthopRegistrationIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpNexthopRegistrationIpAddr *ClearBgpNexthopRegistrationIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-nexthop-registration-ip-addr"
}

func (clearBgpNexthopRegistrationIpAddr *ClearBgpNexthopRegistrationIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpNexthopRegistrationIpAddr.Input
    }
    return nil
}

func (clearBgpNexthopRegistrationIpAddr *ClearBgpNexthopRegistrationIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpNexthopRegistrationIpAddr.Input
    return children
}

func (clearBgpNexthopRegistrationIpAddr *ClearBgpNexthopRegistrationIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpNexthopRegistrationIpAddr *ClearBgpNexthopRegistrationIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpNexthopRegistrationIpAddr *ClearBgpNexthopRegistrationIpAddr) GetYangName() string { return "clear-bgp-nexthop-registration-ip-addr" }

func (clearBgpNexthopRegistrationIpAddr *ClearBgpNexthopRegistrationIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpNexthopRegistrationIpAddr *ClearBgpNexthopRegistrationIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpNexthopRegistrationIpAddr *ClearBgpNexthopRegistrationIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpNexthopRegistrationIpAddr *ClearBgpNexthopRegistrationIpAddr) SetParent(parent types.Entity) { clearBgpNexthopRegistrationIpAddr.parent = parent }

func (clearBgpNexthopRegistrationIpAddr *ClearBgpNexthopRegistrationIpAddr) GetParent() types.Entity { return clearBgpNexthopRegistrationIpAddr.parent }

func (clearBgpNexthopRegistrationIpAddr *ClearBgpNexthopRegistrationIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpNexthopRegistrationIpAddr_Input
type ClearBgpNexthopRegistrationIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpNexthopRegistrationIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpNexthopRegistrationIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpNexthopRegistrationIpAddr_Input) GetGoName(yname string) string {
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpNexthopRegistrationIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpNexthopRegistrationIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpNexthopRegistrationIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpNexthopRegistrationIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpNexthopRegistrationIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpNexthopRegistrationIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpNexthopRegistrationIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpNexthopRegistrationIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpNexthopRegistrationIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpNexthopRegistrationIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpNexthopRegistrationIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpNexthopRegistrationIpAddr_Input) GetParentYangName() string { return "clear-bgp-nexthop-registration-ip-addr" }

// ClearBgpPeerDropsAll
// Clear established/dropped counters for a peer.
// All Neighbors.
// 
type ClearBgpPeerDropsAll struct {
    parent types.Entity
    YFilter yfilter.YFilter
}

func (clearBgpPeerDropsAll *ClearBgpPeerDropsAll) GetFilter() yfilter.YFilter { return clearBgpPeerDropsAll.YFilter }

func (clearBgpPeerDropsAll *ClearBgpPeerDropsAll) SetFilter(yf yfilter.YFilter) { clearBgpPeerDropsAll.YFilter = yf }

func (clearBgpPeerDropsAll *ClearBgpPeerDropsAll) GetGoName(yname string) string {
    return ""
}

func (clearBgpPeerDropsAll *ClearBgpPeerDropsAll) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-peer-drops-all"
}

func (clearBgpPeerDropsAll *ClearBgpPeerDropsAll) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clearBgpPeerDropsAll *ClearBgpPeerDropsAll) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clearBgpPeerDropsAll *ClearBgpPeerDropsAll) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpPeerDropsAll *ClearBgpPeerDropsAll) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpPeerDropsAll *ClearBgpPeerDropsAll) GetYangName() string { return "clear-bgp-peer-drops-all" }

func (clearBgpPeerDropsAll *ClearBgpPeerDropsAll) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpPeerDropsAll *ClearBgpPeerDropsAll) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpPeerDropsAll *ClearBgpPeerDropsAll) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpPeerDropsAll *ClearBgpPeerDropsAll) SetParent(parent types.Entity) { clearBgpPeerDropsAll.parent = parent }

func (clearBgpPeerDropsAll *ClearBgpPeerDropsAll) GetParent() types.Entity { return clearBgpPeerDropsAll.parent }

func (clearBgpPeerDropsAll *ClearBgpPeerDropsAll) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpPeerDropsIpAddr
// Clear established/dropped counters for a peer.
// 
type ClearBgpPeerDropsIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpPeerDropsIpAddr_Input
}

func (clearBgpPeerDropsIpAddr *ClearBgpPeerDropsIpAddr) GetFilter() yfilter.YFilter { return clearBgpPeerDropsIpAddr.YFilter }

func (clearBgpPeerDropsIpAddr *ClearBgpPeerDropsIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpPeerDropsIpAddr.YFilter = yf }

func (clearBgpPeerDropsIpAddr *ClearBgpPeerDropsIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpPeerDropsIpAddr *ClearBgpPeerDropsIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-peer-drops-ip-addr"
}

func (clearBgpPeerDropsIpAddr *ClearBgpPeerDropsIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpPeerDropsIpAddr.Input
    }
    return nil
}

func (clearBgpPeerDropsIpAddr *ClearBgpPeerDropsIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpPeerDropsIpAddr.Input
    return children
}

func (clearBgpPeerDropsIpAddr *ClearBgpPeerDropsIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpPeerDropsIpAddr *ClearBgpPeerDropsIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpPeerDropsIpAddr *ClearBgpPeerDropsIpAddr) GetYangName() string { return "clear-bgp-peer-drops-ip-addr" }

func (clearBgpPeerDropsIpAddr *ClearBgpPeerDropsIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpPeerDropsIpAddr *ClearBgpPeerDropsIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpPeerDropsIpAddr *ClearBgpPeerDropsIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpPeerDropsIpAddr *ClearBgpPeerDropsIpAddr) SetParent(parent types.Entity) { clearBgpPeerDropsIpAddr.parent = parent }

func (clearBgpPeerDropsIpAddr *ClearBgpPeerDropsIpAddr) GetParent() types.Entity { return clearBgpPeerDropsIpAddr.parent }

func (clearBgpPeerDropsIpAddr *ClearBgpPeerDropsIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpPeerDropsIpAddr_Input
type ClearBgpPeerDropsIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BGP neighbor IP address. The type is one of the following types: string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpPeerDropsIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpPeerDropsIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpPeerDropsIpAddr_Input) GetGoName(yname string) string {
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpPeerDropsIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpPeerDropsIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpPeerDropsIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpPeerDropsIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpPeerDropsIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpPeerDropsIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpPeerDropsIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpPeerDropsIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpPeerDropsIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpPeerDropsIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpPeerDropsIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpPeerDropsIpAddr_Input) GetParentYangName() string { return "clear-bgp-peer-drops-ip-addr" }

// ClearBgpPerformanceStatistics
// Clear performance statistics.
// 
type ClearBgpPerformanceStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter
}

func (clearBgpPerformanceStatistics *ClearBgpPerformanceStatistics) GetFilter() yfilter.YFilter { return clearBgpPerformanceStatistics.YFilter }

func (clearBgpPerformanceStatistics *ClearBgpPerformanceStatistics) SetFilter(yf yfilter.YFilter) { clearBgpPerformanceStatistics.YFilter = yf }

func (clearBgpPerformanceStatistics *ClearBgpPerformanceStatistics) GetGoName(yname string) string {
    return ""
}

func (clearBgpPerformanceStatistics *ClearBgpPerformanceStatistics) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-performance-statistics"
}

func (clearBgpPerformanceStatistics *ClearBgpPerformanceStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clearBgpPerformanceStatistics *ClearBgpPerformanceStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clearBgpPerformanceStatistics *ClearBgpPerformanceStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpPerformanceStatistics *ClearBgpPerformanceStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpPerformanceStatistics *ClearBgpPerformanceStatistics) GetYangName() string { return "clear-bgp-performance-statistics" }

func (clearBgpPerformanceStatistics *ClearBgpPerformanceStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpPerformanceStatistics *ClearBgpPerformanceStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpPerformanceStatistics *ClearBgpPerformanceStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpPerformanceStatistics *ClearBgpPerformanceStatistics) SetParent(parent types.Entity) { clearBgpPerformanceStatistics.parent = parent }

func (clearBgpPerformanceStatistics *ClearBgpPerformanceStatistics) GetParent() types.Entity { return clearBgpPerformanceStatistics.parent }

func (clearBgpPerformanceStatistics *ClearBgpPerformanceStatistics) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpRpkiServerAllSerialQuery
// RPKI clear command.
// clear RPKI cache-server.
// clear all RPKI cache-servers.
// send serial-queries to all cache-servers (with latest serial numbers).
// 
type ClearBgpRpkiServerAllSerialQuery struct {
    parent types.Entity
    YFilter yfilter.YFilter
}

func (clearBgpRpkiServerAllSerialQuery *ClearBgpRpkiServerAllSerialQuery) GetFilter() yfilter.YFilter { return clearBgpRpkiServerAllSerialQuery.YFilter }

func (clearBgpRpkiServerAllSerialQuery *ClearBgpRpkiServerAllSerialQuery) SetFilter(yf yfilter.YFilter) { clearBgpRpkiServerAllSerialQuery.YFilter = yf }

func (clearBgpRpkiServerAllSerialQuery *ClearBgpRpkiServerAllSerialQuery) GetGoName(yname string) string {
    return ""
}

func (clearBgpRpkiServerAllSerialQuery *ClearBgpRpkiServerAllSerialQuery) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-all-serial-query"
}

func (clearBgpRpkiServerAllSerialQuery *ClearBgpRpkiServerAllSerialQuery) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clearBgpRpkiServerAllSerialQuery *ClearBgpRpkiServerAllSerialQuery) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clearBgpRpkiServerAllSerialQuery *ClearBgpRpkiServerAllSerialQuery) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpRpkiServerAllSerialQuery *ClearBgpRpkiServerAllSerialQuery) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpRpkiServerAllSerialQuery *ClearBgpRpkiServerAllSerialQuery) GetYangName() string { return "clear-bgp-rpki-server-all-serial-query" }

func (clearBgpRpkiServerAllSerialQuery *ClearBgpRpkiServerAllSerialQuery) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpRpkiServerAllSerialQuery *ClearBgpRpkiServerAllSerialQuery) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpRpkiServerAllSerialQuery *ClearBgpRpkiServerAllSerialQuery) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpRpkiServerAllSerialQuery *ClearBgpRpkiServerAllSerialQuery) SetParent(parent types.Entity) { clearBgpRpkiServerAllSerialQuery.parent = parent }

func (clearBgpRpkiServerAllSerialQuery *ClearBgpRpkiServerAllSerialQuery) GetParent() types.Entity { return clearBgpRpkiServerAllSerialQuery.parent }

func (clearBgpRpkiServerAllSerialQuery *ClearBgpRpkiServerAllSerialQuery) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpRpkiServerAll
// RPKI clear command.
// clear RPKI cache-server.
// clear all RPKI cache-servers.
// 
type ClearBgpRpkiServerAll struct {
    parent types.Entity
    YFilter yfilter.YFilter
}

func (clearBgpRpkiServerAll *ClearBgpRpkiServerAll) GetFilter() yfilter.YFilter { return clearBgpRpkiServerAll.YFilter }

func (clearBgpRpkiServerAll *ClearBgpRpkiServerAll) SetFilter(yf yfilter.YFilter) { clearBgpRpkiServerAll.YFilter = yf }

func (clearBgpRpkiServerAll *ClearBgpRpkiServerAll) GetGoName(yname string) string {
    return ""
}

func (clearBgpRpkiServerAll *ClearBgpRpkiServerAll) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-all"
}

func (clearBgpRpkiServerAll *ClearBgpRpkiServerAll) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clearBgpRpkiServerAll *ClearBgpRpkiServerAll) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clearBgpRpkiServerAll *ClearBgpRpkiServerAll) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpRpkiServerAll *ClearBgpRpkiServerAll) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpRpkiServerAll *ClearBgpRpkiServerAll) GetYangName() string { return "clear-bgp-rpki-server-all" }

func (clearBgpRpkiServerAll *ClearBgpRpkiServerAll) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpRpkiServerAll *ClearBgpRpkiServerAll) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpRpkiServerAll *ClearBgpRpkiServerAll) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpRpkiServerAll *ClearBgpRpkiServerAll) SetParent(parent types.Entity) { clearBgpRpkiServerAll.parent = parent }

func (clearBgpRpkiServerAll *ClearBgpRpkiServerAll) GetParent() types.Entity { return clearBgpRpkiServerAll.parent }

func (clearBgpRpkiServerAll *ClearBgpRpkiServerAll) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpRpkiServerRpkiServer
// RPKI clear command.
// clear RPKI cache-server.
// 
type ClearBgpRpkiServerRpkiServer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpRpkiServerRpkiServer_Input
}

func (clearBgpRpkiServerRpkiServer *ClearBgpRpkiServerRpkiServer) GetFilter() yfilter.YFilter { return clearBgpRpkiServerRpkiServer.YFilter }

func (clearBgpRpkiServerRpkiServer *ClearBgpRpkiServerRpkiServer) SetFilter(yf yfilter.YFilter) { clearBgpRpkiServerRpkiServer.YFilter = yf }

func (clearBgpRpkiServerRpkiServer *ClearBgpRpkiServerRpkiServer) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpRpkiServerRpkiServer *ClearBgpRpkiServerRpkiServer) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-server-rpki-server"
}

func (clearBgpRpkiServerRpkiServer *ClearBgpRpkiServerRpkiServer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpRpkiServerRpkiServer.Input
    }
    return nil
}

func (clearBgpRpkiServerRpkiServer *ClearBgpRpkiServerRpkiServer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpRpkiServerRpkiServer.Input
    return children
}

func (clearBgpRpkiServerRpkiServer *ClearBgpRpkiServerRpkiServer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpRpkiServerRpkiServer *ClearBgpRpkiServerRpkiServer) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpRpkiServerRpkiServer *ClearBgpRpkiServerRpkiServer) GetYangName() string { return "clear-bgp-rpki-server-rpki-server" }

func (clearBgpRpkiServerRpkiServer *ClearBgpRpkiServerRpkiServer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpRpkiServerRpkiServer *ClearBgpRpkiServerRpkiServer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpRpkiServerRpkiServer *ClearBgpRpkiServerRpkiServer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpRpkiServerRpkiServer *ClearBgpRpkiServerRpkiServer) SetParent(parent types.Entity) { clearBgpRpkiServerRpkiServer.parent = parent }

func (clearBgpRpkiServerRpkiServer *ClearBgpRpkiServerRpkiServer) GetParent() types.Entity { return clearBgpRpkiServerRpkiServer.parent }

func (clearBgpRpkiServerRpkiServer *ClearBgpRpkiServerRpkiServer) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpRpkiServerRpkiServer_Input
type ClearBgpRpkiServerRpkiServer_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // clear a specific RPKI cache-server (hostname or IP address). The type is
    // string. This attribute is mandatory.
    RpkiServer interface{}
}

func (input *ClearBgpRpkiServerRpkiServer_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpRpkiServerRpkiServer_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpRpkiServerRpkiServer_Input) GetGoName(yname string) string {
    if yname == "rpki-server" { return "RpkiServer" }
    return ""
}

func (input *ClearBgpRpkiServerRpkiServer_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpRpkiServerRpkiServer_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpRpkiServerRpkiServer_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpRpkiServerRpkiServer_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rpki-server"] = input.RpkiServer
    return leafs
}

func (input *ClearBgpRpkiServerRpkiServer_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpRpkiServerRpkiServer_Input) GetYangName() string { return "input" }

func (input *ClearBgpRpkiServerRpkiServer_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpRpkiServerRpkiServer_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpRpkiServerRpkiServer_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpRpkiServerRpkiServer_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpRpkiServerRpkiServer_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpRpkiServerRpkiServer_Input) GetParentYangName() string { return "clear-bgp-rpki-server-rpki-server" }

// ClearBgpRpkiValidationIpv4
// RPKI clear command.
// clear RPKI origin-validation (trigger origin validation).
// trigger origin validation walk for the IPv4 table.
// 
type ClearBgpRpkiValidationIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter
}

func (clearBgpRpkiValidationIpv4 *ClearBgpRpkiValidationIpv4) GetFilter() yfilter.YFilter { return clearBgpRpkiValidationIpv4.YFilter }

func (clearBgpRpkiValidationIpv4 *ClearBgpRpkiValidationIpv4) SetFilter(yf yfilter.YFilter) { clearBgpRpkiValidationIpv4.YFilter = yf }

func (clearBgpRpkiValidationIpv4 *ClearBgpRpkiValidationIpv4) GetGoName(yname string) string {
    return ""
}

func (clearBgpRpkiValidationIpv4 *ClearBgpRpkiValidationIpv4) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation-ipv4"
}

func (clearBgpRpkiValidationIpv4 *ClearBgpRpkiValidationIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clearBgpRpkiValidationIpv4 *ClearBgpRpkiValidationIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clearBgpRpkiValidationIpv4 *ClearBgpRpkiValidationIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpRpkiValidationIpv4 *ClearBgpRpkiValidationIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpRpkiValidationIpv4 *ClearBgpRpkiValidationIpv4) GetYangName() string { return "clear-bgp-rpki-validation-ipv4" }

func (clearBgpRpkiValidationIpv4 *ClearBgpRpkiValidationIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpRpkiValidationIpv4 *ClearBgpRpkiValidationIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpRpkiValidationIpv4 *ClearBgpRpkiValidationIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpRpkiValidationIpv4 *ClearBgpRpkiValidationIpv4) SetParent(parent types.Entity) { clearBgpRpkiValidationIpv4.parent = parent }

func (clearBgpRpkiValidationIpv4 *ClearBgpRpkiValidationIpv4) GetParent() types.Entity { return clearBgpRpkiValidationIpv4.parent }

func (clearBgpRpkiValidationIpv4 *ClearBgpRpkiValidationIpv4) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpRpkiValidationIpv6
// RPKI clear command.
// clear RPKI origin-validation (trigger origin validation).
// trigger origin validation walk for the IPv6 table.
// 
type ClearBgpRpkiValidationIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter
}

func (clearBgpRpkiValidationIpv6 *ClearBgpRpkiValidationIpv6) GetFilter() yfilter.YFilter { return clearBgpRpkiValidationIpv6.YFilter }

func (clearBgpRpkiValidationIpv6 *ClearBgpRpkiValidationIpv6) SetFilter(yf yfilter.YFilter) { clearBgpRpkiValidationIpv6.YFilter = yf }

func (clearBgpRpkiValidationIpv6 *ClearBgpRpkiValidationIpv6) GetGoName(yname string) string {
    return ""
}

func (clearBgpRpkiValidationIpv6 *ClearBgpRpkiValidationIpv6) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation-ipv6"
}

func (clearBgpRpkiValidationIpv6 *ClearBgpRpkiValidationIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clearBgpRpkiValidationIpv6 *ClearBgpRpkiValidationIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clearBgpRpkiValidationIpv6 *ClearBgpRpkiValidationIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpRpkiValidationIpv6 *ClearBgpRpkiValidationIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpRpkiValidationIpv6 *ClearBgpRpkiValidationIpv6) GetYangName() string { return "clear-bgp-rpki-validation-ipv6" }

func (clearBgpRpkiValidationIpv6 *ClearBgpRpkiValidationIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpRpkiValidationIpv6 *ClearBgpRpkiValidationIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpRpkiValidationIpv6 *ClearBgpRpkiValidationIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpRpkiValidationIpv6 *ClearBgpRpkiValidationIpv6) SetParent(parent types.Entity) { clearBgpRpkiValidationIpv6.parent = parent }

func (clearBgpRpkiValidationIpv6 *ClearBgpRpkiValidationIpv6) GetParent() types.Entity { return clearBgpRpkiValidationIpv6.parent }

func (clearBgpRpkiValidationIpv6 *ClearBgpRpkiValidationIpv6) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpRpkiValidation
// RPKI clear command.
// clear RPKI origin-validation (trigger origin validation).
// 
type ClearBgpRpkiValidation struct {
    parent types.Entity
    YFilter yfilter.YFilter
}

func (clearBgpRpkiValidation *ClearBgpRpkiValidation) GetFilter() yfilter.YFilter { return clearBgpRpkiValidation.YFilter }

func (clearBgpRpkiValidation *ClearBgpRpkiValidation) SetFilter(yf yfilter.YFilter) { clearBgpRpkiValidation.YFilter = yf }

func (clearBgpRpkiValidation *ClearBgpRpkiValidation) GetGoName(yname string) string {
    return ""
}

func (clearBgpRpkiValidation *ClearBgpRpkiValidation) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-rpki-validation"
}

func (clearBgpRpkiValidation *ClearBgpRpkiValidation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clearBgpRpkiValidation *ClearBgpRpkiValidation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clearBgpRpkiValidation *ClearBgpRpkiValidation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpRpkiValidation *ClearBgpRpkiValidation) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpRpkiValidation *ClearBgpRpkiValidation) GetYangName() string { return "clear-bgp-rpki-validation" }

func (clearBgpRpkiValidation *ClearBgpRpkiValidation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpRpkiValidation *ClearBgpRpkiValidation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpRpkiValidation *ClearBgpRpkiValidation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpRpkiValidation *ClearBgpRpkiValidation) SetParent(parent types.Entity) { clearBgpRpkiValidation.parent = parent }

func (clearBgpRpkiValidation *ClearBgpRpkiValidation) GetParent() types.Entity { return clearBgpRpkiValidation.parent }

func (clearBgpRpkiValidation *ClearBgpRpkiValidation) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpShutdown
// Clear all peers which were shut down due to low memory.
// 
type ClearBgpShutdown struct {
    parent types.Entity
    YFilter yfilter.YFilter
}

func (clearBgpShutdown *ClearBgpShutdown) GetFilter() yfilter.YFilter { return clearBgpShutdown.YFilter }

func (clearBgpShutdown *ClearBgpShutdown) SetFilter(yf yfilter.YFilter) { clearBgpShutdown.YFilter = yf }

func (clearBgpShutdown *ClearBgpShutdown) GetGoName(yname string) string {
    return ""
}

func (clearBgpShutdown *ClearBgpShutdown) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-shutdown"
}

func (clearBgpShutdown *ClearBgpShutdown) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clearBgpShutdown *ClearBgpShutdown) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clearBgpShutdown *ClearBgpShutdown) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpShutdown *ClearBgpShutdown) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpShutdown *ClearBgpShutdown) GetYangName() string { return "clear-bgp-shutdown" }

func (clearBgpShutdown *ClearBgpShutdown) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpShutdown *ClearBgpShutdown) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpShutdown *ClearBgpShutdown) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpShutdown *ClearBgpShutdown) SetParent(parent types.Entity) { clearBgpShutdown.parent = parent }

func (clearBgpShutdown *ClearBgpShutdown) GetParent() types.Entity { return clearBgpShutdown.parent }

func (clearBgpShutdown *ClearBgpShutdown) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpUpdateOutqAddressFamilyUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// Update parents' OutQ counters too.
// 
type ClearBgpUpdateOutqAddressFamilyUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter
}

func (clearBgpUpdateOutqAddressFamilyUpdateParent *ClearBgpUpdateOutqAddressFamilyUpdateParent) GetFilter() yfilter.YFilter { return clearBgpUpdateOutqAddressFamilyUpdateParent.YFilter }

func (clearBgpUpdateOutqAddressFamilyUpdateParent *ClearBgpUpdateOutqAddressFamilyUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpUpdateOutqAddressFamilyUpdateParent.YFilter = yf }

func (clearBgpUpdateOutqAddressFamilyUpdateParent *ClearBgpUpdateOutqAddressFamilyUpdateParent) GetGoName(yname string) string {
    return ""
}

func (clearBgpUpdateOutqAddressFamilyUpdateParent *ClearBgpUpdateOutqAddressFamilyUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-address-family-update-parent"
}

func (clearBgpUpdateOutqAddressFamilyUpdateParent *ClearBgpUpdateOutqAddressFamilyUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clearBgpUpdateOutqAddressFamilyUpdateParent *ClearBgpUpdateOutqAddressFamilyUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clearBgpUpdateOutqAddressFamilyUpdateParent *ClearBgpUpdateOutqAddressFamilyUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpUpdateOutqAddressFamilyUpdateParent *ClearBgpUpdateOutqAddressFamilyUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpUpdateOutqAddressFamilyUpdateParent *ClearBgpUpdateOutqAddressFamilyUpdateParent) GetYangName() string { return "clear-bgp-update-outq-address-family-update-parent" }

func (clearBgpUpdateOutqAddressFamilyUpdateParent *ClearBgpUpdateOutqAddressFamilyUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpUpdateOutqAddressFamilyUpdateParent *ClearBgpUpdateOutqAddressFamilyUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpUpdateOutqAddressFamilyUpdateParent *ClearBgpUpdateOutqAddressFamilyUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpUpdateOutqAddressFamilyUpdateParent *ClearBgpUpdateOutqAddressFamilyUpdateParent) SetParent(parent types.Entity) { clearBgpUpdateOutqAddressFamilyUpdateParent.parent = parent }

func (clearBgpUpdateOutqAddressFamilyUpdateParent *ClearBgpUpdateOutqAddressFamilyUpdateParent) GetParent() types.Entity { return clearBgpUpdateOutqAddressFamilyUpdateParent.parent }

func (clearBgpUpdateOutqAddressFamilyUpdateParent *ClearBgpUpdateOutqAddressFamilyUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpUpdateOutqAddressFamily
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// 
type ClearBgpUpdateOutqAddressFamily struct {
    parent types.Entity
    YFilter yfilter.YFilter
}

func (clearBgpUpdateOutqAddressFamily *ClearBgpUpdateOutqAddressFamily) GetFilter() yfilter.YFilter { return clearBgpUpdateOutqAddressFamily.YFilter }

func (clearBgpUpdateOutqAddressFamily *ClearBgpUpdateOutqAddressFamily) SetFilter(yf yfilter.YFilter) { clearBgpUpdateOutqAddressFamily.YFilter = yf }

func (clearBgpUpdateOutqAddressFamily *ClearBgpUpdateOutqAddressFamily) GetGoName(yname string) string {
    return ""
}

func (clearBgpUpdateOutqAddressFamily *ClearBgpUpdateOutqAddressFamily) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-address-family"
}

func (clearBgpUpdateOutqAddressFamily *ClearBgpUpdateOutqAddressFamily) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clearBgpUpdateOutqAddressFamily *ClearBgpUpdateOutqAddressFamily) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clearBgpUpdateOutqAddressFamily *ClearBgpUpdateOutqAddressFamily) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpUpdateOutqAddressFamily *ClearBgpUpdateOutqAddressFamily) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpUpdateOutqAddressFamily *ClearBgpUpdateOutqAddressFamily) GetYangName() string { return "clear-bgp-update-outq-address-family" }

func (clearBgpUpdateOutqAddressFamily *ClearBgpUpdateOutqAddressFamily) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpUpdateOutqAddressFamily *ClearBgpUpdateOutqAddressFamily) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpUpdateOutqAddressFamily *ClearBgpUpdateOutqAddressFamily) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpUpdateOutqAddressFamily *ClearBgpUpdateOutqAddressFamily) SetParent(parent types.Entity) { clearBgpUpdateOutqAddressFamily.parent = parent }

func (clearBgpUpdateOutqAddressFamily *ClearBgpUpdateOutqAddressFamily) GetParent() types.Entity { return clearBgpUpdateOutqAddressFamily.parent }

func (clearBgpUpdateOutqAddressFamily *ClearBgpUpdateOutqAddressFamily) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// Update parents' OutQ counters too.
// 
type ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
}

func (clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent) GetFilter() yfilter.YFilter { return clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter }

func (clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter = yf }

func (clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent"
}

func (clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.Input
    }
    return nil
}

func (clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.Input
    return children
}

func (clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent) GetYangName() string { return "clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent" }

func (clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent) SetParent(parent types.Entity) { clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.parent = parent }

func (clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent) GetParent() types.Entity { return clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent.parent }

func (clearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
type ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetGoName(yname string) string {
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetParentYangName() string { return "clear-bgp-update-outq-neighbor-ip-addr-refresh-update-parent" }

// ClearBgpUpdateOutqNeighborIpAddrRefresh
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// 
type ClearBgpUpdateOutqNeighborIpAddrRefresh struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqNeighborIpAddrRefresh_Input
}

func (clearBgpUpdateOutqNeighborIpAddrRefresh *ClearBgpUpdateOutqNeighborIpAddrRefresh) GetFilter() yfilter.YFilter { return clearBgpUpdateOutqNeighborIpAddrRefresh.YFilter }

func (clearBgpUpdateOutqNeighborIpAddrRefresh *ClearBgpUpdateOutqNeighborIpAddrRefresh) SetFilter(yf yfilter.YFilter) { clearBgpUpdateOutqNeighborIpAddrRefresh.YFilter = yf }

func (clearBgpUpdateOutqNeighborIpAddrRefresh *ClearBgpUpdateOutqNeighborIpAddrRefresh) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpUpdateOutqNeighborIpAddrRefresh *ClearBgpUpdateOutqNeighborIpAddrRefresh) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-refresh"
}

func (clearBgpUpdateOutqNeighborIpAddrRefresh *ClearBgpUpdateOutqNeighborIpAddrRefresh) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpUpdateOutqNeighborIpAddrRefresh.Input
    }
    return nil
}

func (clearBgpUpdateOutqNeighborIpAddrRefresh *ClearBgpUpdateOutqNeighborIpAddrRefresh) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpUpdateOutqNeighborIpAddrRefresh.Input
    return children
}

func (clearBgpUpdateOutqNeighborIpAddrRefresh *ClearBgpUpdateOutqNeighborIpAddrRefresh) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpUpdateOutqNeighborIpAddrRefresh *ClearBgpUpdateOutqNeighborIpAddrRefresh) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpUpdateOutqNeighborIpAddrRefresh *ClearBgpUpdateOutqNeighborIpAddrRefresh) GetYangName() string { return "clear-bgp-update-outq-neighbor-ip-addr-refresh" }

func (clearBgpUpdateOutqNeighborIpAddrRefresh *ClearBgpUpdateOutqNeighborIpAddrRefresh) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpUpdateOutqNeighborIpAddrRefresh *ClearBgpUpdateOutqNeighborIpAddrRefresh) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpUpdateOutqNeighborIpAddrRefresh *ClearBgpUpdateOutqNeighborIpAddrRefresh) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpUpdateOutqNeighborIpAddrRefresh *ClearBgpUpdateOutqNeighborIpAddrRefresh) SetParent(parent types.Entity) { clearBgpUpdateOutqNeighborIpAddrRefresh.parent = parent }

func (clearBgpUpdateOutqNeighborIpAddrRefresh *ClearBgpUpdateOutqNeighborIpAddrRefresh) GetParent() types.Entity { return clearBgpUpdateOutqNeighborIpAddrRefresh.parent }

func (clearBgpUpdateOutqNeighborIpAddrRefresh *ClearBgpUpdateOutqNeighborIpAddrRefresh) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpUpdateOutqNeighborIpAddrRefresh_Input
type ClearBgpUpdateOutqNeighborIpAddrRefresh_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpUpdateOutqNeighborIpAddrRefresh_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpUpdateOutqNeighborIpAddrRefresh_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpUpdateOutqNeighborIpAddrRefresh_Input) GetGoName(yname string) string {
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpUpdateOutqNeighborIpAddrRefresh_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpUpdateOutqNeighborIpAddrRefresh_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpUpdateOutqNeighborIpAddrRefresh_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpUpdateOutqNeighborIpAddrRefresh_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpUpdateOutqNeighborIpAddrRefresh_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpUpdateOutqNeighborIpAddrRefresh_Input) GetYangName() string { return "input" }

func (input *ClearBgpUpdateOutqNeighborIpAddrRefresh_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpUpdateOutqNeighborIpAddrRefresh_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpUpdateOutqNeighborIpAddrRefresh_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpUpdateOutqNeighborIpAddrRefresh_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpUpdateOutqNeighborIpAddrRefresh_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpUpdateOutqNeighborIpAddrRefresh_Input) GetParentYangName() string { return "clear-bgp-update-outq-neighbor-ip-addr-refresh" }

// ClearBgpUpdateOutqNeighborIpAddrUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Update parents' OutQ counters too.
// 
type ClearBgpUpdateOutqNeighborIpAddrUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input
}

func (clearBgpUpdateOutqNeighborIpAddrUpdateParent *ClearBgpUpdateOutqNeighborIpAddrUpdateParent) GetFilter() yfilter.YFilter { return clearBgpUpdateOutqNeighborIpAddrUpdateParent.YFilter }

func (clearBgpUpdateOutqNeighborIpAddrUpdateParent *ClearBgpUpdateOutqNeighborIpAddrUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpUpdateOutqNeighborIpAddrUpdateParent.YFilter = yf }

func (clearBgpUpdateOutqNeighborIpAddrUpdateParent *ClearBgpUpdateOutqNeighborIpAddrUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpUpdateOutqNeighborIpAddrUpdateParent *ClearBgpUpdateOutqNeighborIpAddrUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr-update-parent"
}

func (clearBgpUpdateOutqNeighborIpAddrUpdateParent *ClearBgpUpdateOutqNeighborIpAddrUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpUpdateOutqNeighborIpAddrUpdateParent.Input
    }
    return nil
}

func (clearBgpUpdateOutqNeighborIpAddrUpdateParent *ClearBgpUpdateOutqNeighborIpAddrUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpUpdateOutqNeighborIpAddrUpdateParent.Input
    return children
}

func (clearBgpUpdateOutqNeighborIpAddrUpdateParent *ClearBgpUpdateOutqNeighborIpAddrUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpUpdateOutqNeighborIpAddrUpdateParent *ClearBgpUpdateOutqNeighborIpAddrUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpUpdateOutqNeighborIpAddrUpdateParent *ClearBgpUpdateOutqNeighborIpAddrUpdateParent) GetYangName() string { return "clear-bgp-update-outq-neighbor-ip-addr-update-parent" }

func (clearBgpUpdateOutqNeighborIpAddrUpdateParent *ClearBgpUpdateOutqNeighborIpAddrUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpUpdateOutqNeighborIpAddrUpdateParent *ClearBgpUpdateOutqNeighborIpAddrUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpUpdateOutqNeighborIpAddrUpdateParent *ClearBgpUpdateOutqNeighborIpAddrUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpUpdateOutqNeighborIpAddrUpdateParent *ClearBgpUpdateOutqNeighborIpAddrUpdateParent) SetParent(parent types.Entity) { clearBgpUpdateOutqNeighborIpAddrUpdateParent.parent = parent }

func (clearBgpUpdateOutqNeighborIpAddrUpdateParent *ClearBgpUpdateOutqNeighborIpAddrUpdateParent) GetParent() types.Entity { return clearBgpUpdateOutqNeighborIpAddrUpdateParent.parent }

func (clearBgpUpdateOutqNeighborIpAddrUpdateParent *ClearBgpUpdateOutqNeighborIpAddrUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input
type ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input) GetGoName(yname string) string {
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpUpdateOutqNeighborIpAddrUpdateParent_Input) GetParentYangName() string { return "clear-bgp-update-outq-neighbor-ip-addr-update-parent" }

// ClearBgpUpdateOutqNeighborIpAddr
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// 
type ClearBgpUpdateOutqNeighborIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqNeighborIpAddr_Input
}

func (clearBgpUpdateOutqNeighborIpAddr *ClearBgpUpdateOutqNeighborIpAddr) GetFilter() yfilter.YFilter { return clearBgpUpdateOutqNeighborIpAddr.YFilter }

func (clearBgpUpdateOutqNeighborIpAddr *ClearBgpUpdateOutqNeighborIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpUpdateOutqNeighborIpAddr.YFilter = yf }

func (clearBgpUpdateOutqNeighborIpAddr *ClearBgpUpdateOutqNeighborIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpUpdateOutqNeighborIpAddr *ClearBgpUpdateOutqNeighborIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-neighbor-ip-addr"
}

func (clearBgpUpdateOutqNeighborIpAddr *ClearBgpUpdateOutqNeighborIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpUpdateOutqNeighborIpAddr.Input
    }
    return nil
}

func (clearBgpUpdateOutqNeighborIpAddr *ClearBgpUpdateOutqNeighborIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpUpdateOutqNeighborIpAddr.Input
    return children
}

func (clearBgpUpdateOutqNeighborIpAddr *ClearBgpUpdateOutqNeighborIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpUpdateOutqNeighborIpAddr *ClearBgpUpdateOutqNeighborIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpUpdateOutqNeighborIpAddr *ClearBgpUpdateOutqNeighborIpAddr) GetYangName() string { return "clear-bgp-update-outq-neighbor-ip-addr" }

func (clearBgpUpdateOutqNeighborIpAddr *ClearBgpUpdateOutqNeighborIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpUpdateOutqNeighborIpAddr *ClearBgpUpdateOutqNeighborIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpUpdateOutqNeighborIpAddr *ClearBgpUpdateOutqNeighborIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpUpdateOutqNeighborIpAddr *ClearBgpUpdateOutqNeighborIpAddr) SetParent(parent types.Entity) { clearBgpUpdateOutqNeighborIpAddr.parent = parent }

func (clearBgpUpdateOutqNeighborIpAddr *ClearBgpUpdateOutqNeighborIpAddr) GetParent() types.Entity { return clearBgpUpdateOutqNeighborIpAddr.parent }

func (clearBgpUpdateOutqNeighborIpAddr *ClearBgpUpdateOutqNeighborIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpUpdateOutqNeighborIpAddr_Input
type ClearBgpUpdateOutqNeighborIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpUpdateOutqNeighborIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpUpdateOutqNeighborIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpUpdateOutqNeighborIpAddr_Input) GetGoName(yname string) string {
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpUpdateOutqNeighborIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpUpdateOutqNeighborIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpUpdateOutqNeighborIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpUpdateOutqNeighborIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpUpdateOutqNeighborIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpUpdateOutqNeighborIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpUpdateOutqNeighborIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpUpdateOutqNeighborIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpUpdateOutqNeighborIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpUpdateOutqNeighborIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpUpdateOutqNeighborIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpUpdateOutqNeighborIpAddr_Input) GetParentYangName() string { return "clear-bgp-update-outq-neighbor-ip-addr" }

// ClearBgpUpdateOutqProcess
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Process.
// 
type ClearBgpUpdateOutqProcess struct {
    parent types.Entity
    YFilter yfilter.YFilter
}

func (clearBgpUpdateOutqProcess *ClearBgpUpdateOutqProcess) GetFilter() yfilter.YFilter { return clearBgpUpdateOutqProcess.YFilter }

func (clearBgpUpdateOutqProcess *ClearBgpUpdateOutqProcess) SetFilter(yf yfilter.YFilter) { clearBgpUpdateOutqProcess.YFilter = yf }

func (clearBgpUpdateOutqProcess *ClearBgpUpdateOutqProcess) GetGoName(yname string) string {
    return ""
}

func (clearBgpUpdateOutqProcess *ClearBgpUpdateOutqProcess) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-process"
}

func (clearBgpUpdateOutqProcess *ClearBgpUpdateOutqProcess) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clearBgpUpdateOutqProcess *ClearBgpUpdateOutqProcess) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clearBgpUpdateOutqProcess *ClearBgpUpdateOutqProcess) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpUpdateOutqProcess *ClearBgpUpdateOutqProcess) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpUpdateOutqProcess *ClearBgpUpdateOutqProcess) GetYangName() string { return "clear-bgp-update-outq-process" }

func (clearBgpUpdateOutqProcess *ClearBgpUpdateOutqProcess) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpUpdateOutqProcess *ClearBgpUpdateOutqProcess) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpUpdateOutqProcess *ClearBgpUpdateOutqProcess) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpUpdateOutqProcess *ClearBgpUpdateOutqProcess) SetParent(parent types.Entity) { clearBgpUpdateOutqProcess.parent = parent }

func (clearBgpUpdateOutqProcess *ClearBgpUpdateOutqProcess) GetParent() types.Entity { return clearBgpUpdateOutqProcess.parent }

func (clearBgpUpdateOutqProcess *ClearBgpUpdateOutqProcess) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input
}

func (clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter }

func (clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter = yf }

func (clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-update-parent"
}

func (clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.Input
    return children
}

func (clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent) GetYangName() string { return "clear-bgp-update-outq-update-group-sub-group-update-parent" }

func (clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent) SetParent(parent types.Entity) { clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.parent = parent }

func (clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent) GetParent() types.Entity { return clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent.parent }

func (clearBgpUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input
type ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "sub-group" { return "SubGroup" }
    return ""
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["update-group"] = input.UpdateGroup
    leafs["sub-group"] = input.SubGroup
    return leafs
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-update-outq-update-group-sub-group-update-parent" }

// ClearBgpUpdateOutqUpdateGroupSubGroup
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpUpdateOutqUpdateGroupSubGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqUpdateGroupSubGroup_Input
}

func (clearBgpUpdateOutqUpdateGroupSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroup) GetFilter() yfilter.YFilter { return clearBgpUpdateOutqUpdateGroupSubGroup.YFilter }

func (clearBgpUpdateOutqUpdateGroupSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroup) SetFilter(yf yfilter.YFilter) { clearBgpUpdateOutqUpdateGroupSubGroup.YFilter = yf }

func (clearBgpUpdateOutqUpdateGroupSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpUpdateOutqUpdateGroupSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group"
}

func (clearBgpUpdateOutqUpdateGroupSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpUpdateOutqUpdateGroupSubGroup.Input
    }
    return nil
}

func (clearBgpUpdateOutqUpdateGroupSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpUpdateOutqUpdateGroupSubGroup.Input
    return children
}

func (clearBgpUpdateOutqUpdateGroupSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpUpdateOutqUpdateGroupSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpUpdateOutqUpdateGroupSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroup) GetYangName() string { return "clear-bgp-update-outq-update-group-sub-group" }

func (clearBgpUpdateOutqUpdateGroupSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpUpdateOutqUpdateGroupSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpUpdateOutqUpdateGroupSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpUpdateOutqUpdateGroupSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroup) SetParent(parent types.Entity) { clearBgpUpdateOutqUpdateGroupSubGroup.parent = parent }

func (clearBgpUpdateOutqUpdateGroupSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroup) GetParent() types.Entity { return clearBgpUpdateOutqUpdateGroupSubGroup.parent }

func (clearBgpUpdateOutqUpdateGroupSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpUpdateOutqUpdateGroupSubGroup_Input
type ClearBgpUpdateOutqUpdateGroupSubGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroup_Input) GetGoName(yname string) string {
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "sub-group" { return "SubGroup" }
    return ""
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["update-group"] = input.UpdateGroup
    leafs["sub-group"] = input.SubGroup
    return leafs
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroup_Input) GetParentYangName() string { return "clear-bgp-update-outq-update-group-sub-group" }

// ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
}

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter }

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter = yf }

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
}

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input
    return children
}

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetYangName() string { return "clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent" }

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) SetParent(parent types.Entity) { clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.parent = parent }

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetParent() types.Entity { return clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.parent }

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
type ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "refresh-sub-group" { return "RefreshSubGroup" }
    return ""
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["update-group"] = input.UpdateGroup
    leafs["refresh-sub-group"] = input.RefreshSubGroup
    return leafs
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-update-outq-update-group-sub-group-refresh-sub-group-update-parent" }

// ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
}

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetFilter() yfilter.YFilter { return clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter }

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup) SetFilter(yf yfilter.YFilter) { clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter = yf }

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-sub-group-refresh-sub-group"
}

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input
    }
    return nil
}

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input
    return children
}

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetYangName() string { return "clear-bgp-update-outq-update-group-sub-group-refresh-sub-group" }

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup) SetParent(parent types.Entity) { clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.parent = parent }

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetParent() types.Entity { return clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup.parent }

func (clearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
type ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetGoName(yname string) string {
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "refresh-sub-group" { return "RefreshSubGroup" }
    return ""
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["update-group"] = input.UpdateGroup
    leafs["refresh-sub-group"] = input.RefreshSubGroup
    return leafs
}

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetParentYangName() string { return "clear-bgp-update-outq-update-group-sub-group-refresh-sub-group" }

// ClearBgpUpdateOutqUpdateGroupUpdateParent
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Update parents' OutQ counters too.
// 
type ClearBgpUpdateOutqUpdateGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqUpdateGroupUpdateParent_Input
}

func (clearBgpUpdateOutqUpdateGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpUpdateOutqUpdateGroupUpdateParent.YFilter }

func (clearBgpUpdateOutqUpdateGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpUpdateOutqUpdateGroupUpdateParent.YFilter = yf }

func (clearBgpUpdateOutqUpdateGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpUpdateOutqUpdateGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group-update-parent"
}

func (clearBgpUpdateOutqUpdateGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpUpdateOutqUpdateGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpUpdateOutqUpdateGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpUpdateOutqUpdateGroupUpdateParent.Input
    return children
}

func (clearBgpUpdateOutqUpdateGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpUpdateOutqUpdateGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpUpdateOutqUpdateGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupUpdateParent) GetYangName() string { return "clear-bgp-update-outq-update-group-update-parent" }

func (clearBgpUpdateOutqUpdateGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpUpdateOutqUpdateGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpUpdateOutqUpdateGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpUpdateOutqUpdateGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupUpdateParent) SetParent(parent types.Entity) { clearBgpUpdateOutqUpdateGroupUpdateParent.parent = parent }

func (clearBgpUpdateOutqUpdateGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupUpdateParent) GetParent() types.Entity { return clearBgpUpdateOutqUpdateGroupUpdateParent.parent }

func (clearBgpUpdateOutqUpdateGroupUpdateParent *ClearBgpUpdateOutqUpdateGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpUpdateOutqUpdateGroupUpdateParent_Input
type ClearBgpUpdateOutqUpdateGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpUpdateOutqUpdateGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpUpdateOutqUpdateGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpUpdateOutqUpdateGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "update-group" { return "UpdateGroup" }
    return ""
}

func (input *ClearBgpUpdateOutqUpdateGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpUpdateOutqUpdateGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpUpdateOutqUpdateGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpUpdateOutqUpdateGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["update-group"] = input.UpdateGroup
    return leafs
}

func (input *ClearBgpUpdateOutqUpdateGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpUpdateOutqUpdateGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpUpdateOutqUpdateGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpUpdateOutqUpdateGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpUpdateOutqUpdateGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpUpdateOutqUpdateGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpUpdateOutqUpdateGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpUpdateOutqUpdateGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-update-outq-update-group-update-parent" }

// ClearBgpUpdateOutqUpdateGroup
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// 
type ClearBgpUpdateOutqUpdateGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpUpdateOutqUpdateGroup_Input
}

func (clearBgpUpdateOutqUpdateGroup *ClearBgpUpdateOutqUpdateGroup) GetFilter() yfilter.YFilter { return clearBgpUpdateOutqUpdateGroup.YFilter }

func (clearBgpUpdateOutqUpdateGroup *ClearBgpUpdateOutqUpdateGroup) SetFilter(yf yfilter.YFilter) { clearBgpUpdateOutqUpdateGroup.YFilter = yf }

func (clearBgpUpdateOutqUpdateGroup *ClearBgpUpdateOutqUpdateGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpUpdateOutqUpdateGroup *ClearBgpUpdateOutqUpdateGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-update-outq-update-group"
}

func (clearBgpUpdateOutqUpdateGroup *ClearBgpUpdateOutqUpdateGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpUpdateOutqUpdateGroup.Input
    }
    return nil
}

func (clearBgpUpdateOutqUpdateGroup *ClearBgpUpdateOutqUpdateGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpUpdateOutqUpdateGroup.Input
    return children
}

func (clearBgpUpdateOutqUpdateGroup *ClearBgpUpdateOutqUpdateGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpUpdateOutqUpdateGroup *ClearBgpUpdateOutqUpdateGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpUpdateOutqUpdateGroup *ClearBgpUpdateOutqUpdateGroup) GetYangName() string { return "clear-bgp-update-outq-update-group" }

func (clearBgpUpdateOutqUpdateGroup *ClearBgpUpdateOutqUpdateGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpUpdateOutqUpdateGroup *ClearBgpUpdateOutqUpdateGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpUpdateOutqUpdateGroup *ClearBgpUpdateOutqUpdateGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpUpdateOutqUpdateGroup *ClearBgpUpdateOutqUpdateGroup) SetParent(parent types.Entity) { clearBgpUpdateOutqUpdateGroup.parent = parent }

func (clearBgpUpdateOutqUpdateGroup *ClearBgpUpdateOutqUpdateGroup) GetParent() types.Entity { return clearBgpUpdateOutqUpdateGroup.parent }

func (clearBgpUpdateOutqUpdateGroup *ClearBgpUpdateOutqUpdateGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpUpdateOutqUpdateGroup_Input
type ClearBgpUpdateOutqUpdateGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpUpdateOutqUpdateGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpUpdateOutqUpdateGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpUpdateOutqUpdateGroup_Input) GetGoName(yname string) string {
    if yname == "update-group" { return "UpdateGroup" }
    return ""
}

func (input *ClearBgpUpdateOutqUpdateGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpUpdateOutqUpdateGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpUpdateOutqUpdateGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpUpdateOutqUpdateGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["update-group"] = input.UpdateGroup
    return leafs
}

func (input *ClearBgpUpdateOutqUpdateGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpUpdateOutqUpdateGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpUpdateOutqUpdateGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpUpdateOutqUpdateGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpUpdateOutqUpdateGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpUpdateOutqUpdateGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpUpdateOutqUpdateGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpUpdateOutqUpdateGroup_Input) GetParentYangName() string { return "clear-bgp-update-outq-update-group" }

// ClearBgpVersionIpAddrIpNetmask
// clear BGP prefix version.
// 
type ClearBgpVersionIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionIpAddrIpNetmask_Input
}

func (clearBgpVersionIpAddrIpNetmask *ClearBgpVersionIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpVersionIpAddrIpNetmask.YFilter }

func (clearBgpVersionIpAddrIpNetmask *ClearBgpVersionIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpVersionIpAddrIpNetmask.YFilter = yf }

func (clearBgpVersionIpAddrIpNetmask *ClearBgpVersionIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionIpAddrIpNetmask *ClearBgpVersionIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr-ip-netmask"
}

func (clearBgpVersionIpAddrIpNetmask *ClearBgpVersionIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpVersionIpAddrIpNetmask *ClearBgpVersionIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionIpAddrIpNetmask.Input
    return children
}

func (clearBgpVersionIpAddrIpNetmask *ClearBgpVersionIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionIpAddrIpNetmask *ClearBgpVersionIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionIpAddrIpNetmask *ClearBgpVersionIpAddrIpNetmask) GetYangName() string { return "clear-bgp-version-ip-addr-ip-netmask" }

func (clearBgpVersionIpAddrIpNetmask *ClearBgpVersionIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionIpAddrIpNetmask *ClearBgpVersionIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionIpAddrIpNetmask *ClearBgpVersionIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionIpAddrIpNetmask *ClearBgpVersionIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpVersionIpAddrIpNetmask.parent = parent }

func (clearBgpVersionIpAddrIpNetmask *ClearBgpVersionIpAddrIpNetmask) GetParent() types.Entity { return clearBgpVersionIpAddrIpNetmask.parent }

func (clearBgpVersionIpAddrIpNetmask *ClearBgpVersionIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionIpAddrIpNetmask_Input
type ClearBgpVersionIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpVersionIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpVersionIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpVersionIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-version-ip-addr-ip-netmask" }

// ClearBgpVersionIpAddr
// clear BGP prefix version.
// 
type ClearBgpVersionIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionIpAddr_Input
}

func (clearBgpVersionIpAddr *ClearBgpVersionIpAddr) GetFilter() yfilter.YFilter { return clearBgpVersionIpAddr.YFilter }

func (clearBgpVersionIpAddr *ClearBgpVersionIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpVersionIpAddr.YFilter = yf }

func (clearBgpVersionIpAddr *ClearBgpVersionIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionIpAddr *ClearBgpVersionIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-addr"
}

func (clearBgpVersionIpAddr *ClearBgpVersionIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionIpAddr.Input
    }
    return nil
}

func (clearBgpVersionIpAddr *ClearBgpVersionIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionIpAddr.Input
    return children
}

func (clearBgpVersionIpAddr *ClearBgpVersionIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionIpAddr *ClearBgpVersionIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionIpAddr *ClearBgpVersionIpAddr) GetYangName() string { return "clear-bgp-version-ip-addr" }

func (clearBgpVersionIpAddr *ClearBgpVersionIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionIpAddr *ClearBgpVersionIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionIpAddr *ClearBgpVersionIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionIpAddr *ClearBgpVersionIpAddr) SetParent(parent types.Entity) { clearBgpVersionIpAddr.parent = parent }

func (clearBgpVersionIpAddr *ClearBgpVersionIpAddr) GetParent() types.Entity { return clearBgpVersionIpAddr.parent }

func (clearBgpVersionIpAddr *ClearBgpVersionIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionIpAddr_Input
type ClearBgpVersionIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVersionIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionIpAddr_Input) GetGoName(yname string) string {
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVersionIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVersionIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionIpAddr_Input) GetParentYangName() string { return "clear-bgp-version-ip-addr" }

// ClearBgpVersionIpPrefix
// clear BGP prefix version.
// 
type ClearBgpVersionIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionIpPrefix_Input
}

func (clearBgpVersionIpPrefix *ClearBgpVersionIpPrefix) GetFilter() yfilter.YFilter { return clearBgpVersionIpPrefix.YFilter }

func (clearBgpVersionIpPrefix *ClearBgpVersionIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpVersionIpPrefix.YFilter = yf }

func (clearBgpVersionIpPrefix *ClearBgpVersionIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionIpPrefix *ClearBgpVersionIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-ip-prefix"
}

func (clearBgpVersionIpPrefix *ClearBgpVersionIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionIpPrefix.Input
    }
    return nil
}

func (clearBgpVersionIpPrefix *ClearBgpVersionIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionIpPrefix.Input
    return children
}

func (clearBgpVersionIpPrefix *ClearBgpVersionIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionIpPrefix *ClearBgpVersionIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionIpPrefix *ClearBgpVersionIpPrefix) GetYangName() string { return "clear-bgp-version-ip-prefix" }

func (clearBgpVersionIpPrefix *ClearBgpVersionIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionIpPrefix *ClearBgpVersionIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionIpPrefix *ClearBgpVersionIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionIpPrefix *ClearBgpVersionIpPrefix) SetParent(parent types.Entity) { clearBgpVersionIpPrefix.parent = parent }

func (clearBgpVersionIpPrefix *ClearBgpVersionIpPrefix) GetParent() types.Entity { return clearBgpVersionIpPrefix.parent }

func (clearBgpVersionIpPrefix *ClearBgpVersionIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionIpPrefix_Input
type ClearBgpVersionIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpVersionIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionIpPrefix_Input) GetGoName(yname string) string {
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpVersionIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpVersionIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionIpPrefix_Input) GetParentYangName() string { return "clear-bgp-version-ip-prefix" }

// ClearBgpVersionAfiSafiIpAddrIpNetmask
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpAddrIpNetmask_Input
}

func (clearBgpVersionAfiSafiIpAddrIpNetmask *ClearBgpVersionAfiSafiIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiIpAddrIpNetmask.YFilter }

func (clearBgpVersionAfiSafiIpAddrIpNetmask *ClearBgpVersionAfiSafiIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiIpAddrIpNetmask.YFilter = yf }

func (clearBgpVersionAfiSafiIpAddrIpNetmask *ClearBgpVersionAfiSafiIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiIpAddrIpNetmask *ClearBgpVersionAfiSafiIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr-ip-netmask"
}

func (clearBgpVersionAfiSafiIpAddrIpNetmask *ClearBgpVersionAfiSafiIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiIpAddrIpNetmask *ClearBgpVersionAfiSafiIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiIpAddrIpNetmask.Input
    return children
}

func (clearBgpVersionAfiSafiIpAddrIpNetmask *ClearBgpVersionAfiSafiIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiIpAddrIpNetmask *ClearBgpVersionAfiSafiIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiIpAddrIpNetmask *ClearBgpVersionAfiSafiIpAddrIpNetmask) GetYangName() string { return "clear-bgp-version-afi-safi-ip-addr-ip-netmask" }

func (clearBgpVersionAfiSafiIpAddrIpNetmask *ClearBgpVersionAfiSafiIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiIpAddrIpNetmask *ClearBgpVersionAfiSafiIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiIpAddrIpNetmask *ClearBgpVersionAfiSafiIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiIpAddrIpNetmask *ClearBgpVersionAfiSafiIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpVersionAfiSafiIpAddrIpNetmask.parent = parent }

func (clearBgpVersionAfiSafiIpAddrIpNetmask *ClearBgpVersionAfiSafiIpAddrIpNetmask) GetParent() types.Entity { return clearBgpVersionAfiSafiIpAddrIpNetmask.parent }

func (clearBgpVersionAfiSafiIpAddrIpNetmask *ClearBgpVersionAfiSafiIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiIpAddrIpNetmask_Input
type ClearBgpVersionAfiSafiIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpVersionAfiSafiIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpVersionAfiSafiIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpVersionAfiSafiIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-ip-addr-ip-netmask" }

// ClearBgpVersionAfiSafiIpAddr
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpAddr_Input
}

func (clearBgpVersionAfiSafiIpAddr *ClearBgpVersionAfiSafiIpAddr) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiIpAddr.YFilter }

func (clearBgpVersionAfiSafiIpAddr *ClearBgpVersionAfiSafiIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiIpAddr.YFilter = yf }

func (clearBgpVersionAfiSafiIpAddr *ClearBgpVersionAfiSafiIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiIpAddr *ClearBgpVersionAfiSafiIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-addr"
}

func (clearBgpVersionAfiSafiIpAddr *ClearBgpVersionAfiSafiIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiIpAddr.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiIpAddr *ClearBgpVersionAfiSafiIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiIpAddr.Input
    return children
}

func (clearBgpVersionAfiSafiIpAddr *ClearBgpVersionAfiSafiIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiIpAddr *ClearBgpVersionAfiSafiIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiIpAddr *ClearBgpVersionAfiSafiIpAddr) GetYangName() string { return "clear-bgp-version-afi-safi-ip-addr" }

func (clearBgpVersionAfiSafiIpAddr *ClearBgpVersionAfiSafiIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiIpAddr *ClearBgpVersionAfiSafiIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiIpAddr *ClearBgpVersionAfiSafiIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiIpAddr *ClearBgpVersionAfiSafiIpAddr) SetParent(parent types.Entity) { clearBgpVersionAfiSafiIpAddr.parent = parent }

func (clearBgpVersionAfiSafiIpAddr *ClearBgpVersionAfiSafiIpAddr) GetParent() types.Entity { return clearBgpVersionAfiSafiIpAddr.parent }

func (clearBgpVersionAfiSafiIpAddr *ClearBgpVersionAfiSafiIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiIpAddr_Input
type ClearBgpVersionAfiSafiIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVersionAfiSafiIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiIpAddr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVersionAfiSafiIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVersionAfiSafiIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiIpAddr_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-ip-addr" }

// ClearBgpVersionAfiSafiIpPrefix
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpPrefix_Input
}

func (clearBgpVersionAfiSafiIpPrefix *ClearBgpVersionAfiSafiIpPrefix) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiIpPrefix.YFilter }

func (clearBgpVersionAfiSafiIpPrefix *ClearBgpVersionAfiSafiIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiIpPrefix.YFilter = yf }

func (clearBgpVersionAfiSafiIpPrefix *ClearBgpVersionAfiSafiIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiIpPrefix *ClearBgpVersionAfiSafiIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ip-prefix"
}

func (clearBgpVersionAfiSafiIpPrefix *ClearBgpVersionAfiSafiIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiIpPrefix.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiIpPrefix *ClearBgpVersionAfiSafiIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiIpPrefix.Input
    return children
}

func (clearBgpVersionAfiSafiIpPrefix *ClearBgpVersionAfiSafiIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiIpPrefix *ClearBgpVersionAfiSafiIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiIpPrefix *ClearBgpVersionAfiSafiIpPrefix) GetYangName() string { return "clear-bgp-version-afi-safi-ip-prefix" }

func (clearBgpVersionAfiSafiIpPrefix *ClearBgpVersionAfiSafiIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiIpPrefix *ClearBgpVersionAfiSafiIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiIpPrefix *ClearBgpVersionAfiSafiIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiIpPrefix *ClearBgpVersionAfiSafiIpPrefix) SetParent(parent types.Entity) { clearBgpVersionAfiSafiIpPrefix.parent = parent }

func (clearBgpVersionAfiSafiIpPrefix *ClearBgpVersionAfiSafiIpPrefix) GetParent() types.Entity { return clearBgpVersionAfiSafiIpPrefix.parent }

func (clearBgpVersionAfiSafiIpPrefix *ClearBgpVersionAfiSafiIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiIpPrefix_Input
type ClearBgpVersionAfiSafiIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpVersionAfiSafiIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiIpPrefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpVersionAfiSafiIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpVersionAfiSafiIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiIpPrefix_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-ip-prefix" }

// ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask
// clear BGP prefix version.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input
}

func (clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.YFilter }

func (clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.YFilter = yf }

func (clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask"
}

func (clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.Input
    return children
}

func (clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetYangName() string { return "clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask" }

func (clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.parent = parent }

func (clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetParent() types.Entity { return clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask.parent }

func (clearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input
type ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "bridge-domain-name" { return "BridgeDomainName" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["bridge-domain-name"] = input.BridgeDomainName
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-bridge-domain-ip-addr-ip-netmask" }

// ClearBgpVersionAfiSafiBridgeDomainIpAddr
// clear BGP prefix version.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpVersionAfiSafiBridgeDomainIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input
}

func (clearBgpVersionAfiSafiBridgeDomainIpAddr *ClearBgpVersionAfiSafiBridgeDomainIpAddr) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiBridgeDomainIpAddr.YFilter }

func (clearBgpVersionAfiSafiBridgeDomainIpAddr *ClearBgpVersionAfiSafiBridgeDomainIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiBridgeDomainIpAddr.YFilter = yf }

func (clearBgpVersionAfiSafiBridgeDomainIpAddr *ClearBgpVersionAfiSafiBridgeDomainIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiBridgeDomainIpAddr *ClearBgpVersionAfiSafiBridgeDomainIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-addr"
}

func (clearBgpVersionAfiSafiBridgeDomainIpAddr *ClearBgpVersionAfiSafiBridgeDomainIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiBridgeDomainIpAddr.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiBridgeDomainIpAddr *ClearBgpVersionAfiSafiBridgeDomainIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiBridgeDomainIpAddr.Input
    return children
}

func (clearBgpVersionAfiSafiBridgeDomainIpAddr *ClearBgpVersionAfiSafiBridgeDomainIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiBridgeDomainIpAddr *ClearBgpVersionAfiSafiBridgeDomainIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiBridgeDomainIpAddr *ClearBgpVersionAfiSafiBridgeDomainIpAddr) GetYangName() string { return "clear-bgp-version-afi-safi-bridge-domain-ip-addr" }

func (clearBgpVersionAfiSafiBridgeDomainIpAddr *ClearBgpVersionAfiSafiBridgeDomainIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiBridgeDomainIpAddr *ClearBgpVersionAfiSafiBridgeDomainIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiBridgeDomainIpAddr *ClearBgpVersionAfiSafiBridgeDomainIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiBridgeDomainIpAddr *ClearBgpVersionAfiSafiBridgeDomainIpAddr) SetParent(parent types.Entity) { clearBgpVersionAfiSafiBridgeDomainIpAddr.parent = parent }

func (clearBgpVersionAfiSafiBridgeDomainIpAddr *ClearBgpVersionAfiSafiBridgeDomainIpAddr) GetParent() types.Entity { return clearBgpVersionAfiSafiBridgeDomainIpAddr.parent }

func (clearBgpVersionAfiSafiBridgeDomainIpAddr *ClearBgpVersionAfiSafiBridgeDomainIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input
type ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "bridge-domain-name" { return "BridgeDomainName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["bridge-domain-name"] = input.BridgeDomainName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpAddr_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-bridge-domain-ip-addr" }

// ClearBgpVersionAfiSafiBridgeDomainIpPrefix
// clear BGP prefix version.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpVersionAfiSafiBridgeDomainIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input
}

func (clearBgpVersionAfiSafiBridgeDomainIpPrefix *ClearBgpVersionAfiSafiBridgeDomainIpPrefix) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiBridgeDomainIpPrefix.YFilter }

func (clearBgpVersionAfiSafiBridgeDomainIpPrefix *ClearBgpVersionAfiSafiBridgeDomainIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiBridgeDomainIpPrefix.YFilter = yf }

func (clearBgpVersionAfiSafiBridgeDomainIpPrefix *ClearBgpVersionAfiSafiBridgeDomainIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiBridgeDomainIpPrefix *ClearBgpVersionAfiSafiBridgeDomainIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ip-prefix"
}

func (clearBgpVersionAfiSafiBridgeDomainIpPrefix *ClearBgpVersionAfiSafiBridgeDomainIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiBridgeDomainIpPrefix.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiBridgeDomainIpPrefix *ClearBgpVersionAfiSafiBridgeDomainIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiBridgeDomainIpPrefix.Input
    return children
}

func (clearBgpVersionAfiSafiBridgeDomainIpPrefix *ClearBgpVersionAfiSafiBridgeDomainIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiBridgeDomainIpPrefix *ClearBgpVersionAfiSafiBridgeDomainIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiBridgeDomainIpPrefix *ClearBgpVersionAfiSafiBridgeDomainIpPrefix) GetYangName() string { return "clear-bgp-version-afi-safi-bridge-domain-ip-prefix" }

func (clearBgpVersionAfiSafiBridgeDomainIpPrefix *ClearBgpVersionAfiSafiBridgeDomainIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiBridgeDomainIpPrefix *ClearBgpVersionAfiSafiBridgeDomainIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiBridgeDomainIpPrefix *ClearBgpVersionAfiSafiBridgeDomainIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiBridgeDomainIpPrefix *ClearBgpVersionAfiSafiBridgeDomainIpPrefix) SetParent(parent types.Entity) { clearBgpVersionAfiSafiBridgeDomainIpPrefix.parent = parent }

func (clearBgpVersionAfiSafiBridgeDomainIpPrefix *ClearBgpVersionAfiSafiBridgeDomainIpPrefix) GetParent() types.Entity { return clearBgpVersionAfiSafiBridgeDomainIpPrefix.parent }

func (clearBgpVersionAfiSafiBridgeDomainIpPrefix *ClearBgpVersionAfiSafiBridgeDomainIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input
type ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "bridge-domain-name" { return "BridgeDomainName" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["bridge-domain-name"] = input.BridgeDomainName
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpPrefix_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-bridge-domain-ip-prefix" }

// ClearBgpVersionAfiSafiRdIpAddrIpNetmask
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input
}

func (clearBgpVersionAfiSafiRdIpAddrIpNetmask *ClearBgpVersionAfiSafiRdIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiRdIpAddrIpNetmask.YFilter }

func (clearBgpVersionAfiSafiRdIpAddrIpNetmask *ClearBgpVersionAfiSafiRdIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiRdIpAddrIpNetmask.YFilter = yf }

func (clearBgpVersionAfiSafiRdIpAddrIpNetmask *ClearBgpVersionAfiSafiRdIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiRdIpAddrIpNetmask *ClearBgpVersionAfiSafiRdIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask"
}

func (clearBgpVersionAfiSafiRdIpAddrIpNetmask *ClearBgpVersionAfiSafiRdIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiRdIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiRdIpAddrIpNetmask *ClearBgpVersionAfiSafiRdIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiRdIpAddrIpNetmask.Input
    return children
}

func (clearBgpVersionAfiSafiRdIpAddrIpNetmask *ClearBgpVersionAfiSafiRdIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiRdIpAddrIpNetmask *ClearBgpVersionAfiSafiRdIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiRdIpAddrIpNetmask *ClearBgpVersionAfiSafiRdIpAddrIpNetmask) GetYangName() string { return "clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask" }

func (clearBgpVersionAfiSafiRdIpAddrIpNetmask *ClearBgpVersionAfiSafiRdIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiRdIpAddrIpNetmask *ClearBgpVersionAfiSafiRdIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiRdIpAddrIpNetmask *ClearBgpVersionAfiSafiRdIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiRdIpAddrIpNetmask *ClearBgpVersionAfiSafiRdIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpVersionAfiSafiRdIpAddrIpNetmask.parent = parent }

func (clearBgpVersionAfiSafiRdIpAddrIpNetmask *ClearBgpVersionAfiSafiRdIpAddrIpNetmask) GetParent() types.Entity { return clearBgpVersionAfiSafiRdIpAddrIpNetmask.parent }

func (clearBgpVersionAfiSafiRdIpAddrIpNetmask *ClearBgpVersionAfiSafiRdIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input
type ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiRdIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-rd-ip-addr-ip-netmask" }

// ClearBgpVersionAfiSafiRdIpAddr
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdIpAddr_Input
}

func (clearBgpVersionAfiSafiRdIpAddr *ClearBgpVersionAfiSafiRdIpAddr) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiRdIpAddr.YFilter }

func (clearBgpVersionAfiSafiRdIpAddr *ClearBgpVersionAfiSafiRdIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiRdIpAddr.YFilter = yf }

func (clearBgpVersionAfiSafiRdIpAddr *ClearBgpVersionAfiSafiRdIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiRdIpAddr *ClearBgpVersionAfiSafiRdIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-addr"
}

func (clearBgpVersionAfiSafiRdIpAddr *ClearBgpVersionAfiSafiRdIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiRdIpAddr.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiRdIpAddr *ClearBgpVersionAfiSafiRdIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiRdIpAddr.Input
    return children
}

func (clearBgpVersionAfiSafiRdIpAddr *ClearBgpVersionAfiSafiRdIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiRdIpAddr *ClearBgpVersionAfiSafiRdIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiRdIpAddr *ClearBgpVersionAfiSafiRdIpAddr) GetYangName() string { return "clear-bgp-version-afi-safi-rd-ip-addr" }

func (clearBgpVersionAfiSafiRdIpAddr *ClearBgpVersionAfiSafiRdIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiRdIpAddr *ClearBgpVersionAfiSafiRdIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiRdIpAddr *ClearBgpVersionAfiSafiRdIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiRdIpAddr *ClearBgpVersionAfiSafiRdIpAddr) SetParent(parent types.Entity) { clearBgpVersionAfiSafiRdIpAddr.parent = parent }

func (clearBgpVersionAfiSafiRdIpAddr *ClearBgpVersionAfiSafiRdIpAddr) GetParent() types.Entity { return clearBgpVersionAfiSafiRdIpAddr.parent }

func (clearBgpVersionAfiSafiRdIpAddr *ClearBgpVersionAfiSafiRdIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiRdIpAddr_Input
type ClearBgpVersionAfiSafiRdIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVersionAfiSafiRdIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiRdIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiRdIpAddr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVersionAfiSafiRdIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiRdIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiRdIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiRdIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVersionAfiSafiRdIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiRdIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiRdIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiRdIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiRdIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiRdIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiRdIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiRdIpAddr_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-rd-ip-addr" }

// ClearBgpVersionAfiSafiRdIpPrefix
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdIpPrefix_Input
}

func (clearBgpVersionAfiSafiRdIpPrefix *ClearBgpVersionAfiSafiRdIpPrefix) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiRdIpPrefix.YFilter }

func (clearBgpVersionAfiSafiRdIpPrefix *ClearBgpVersionAfiSafiRdIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiRdIpPrefix.YFilter = yf }

func (clearBgpVersionAfiSafiRdIpPrefix *ClearBgpVersionAfiSafiRdIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiRdIpPrefix *ClearBgpVersionAfiSafiRdIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ip-prefix"
}

func (clearBgpVersionAfiSafiRdIpPrefix *ClearBgpVersionAfiSafiRdIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiRdIpPrefix.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiRdIpPrefix *ClearBgpVersionAfiSafiRdIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiRdIpPrefix.Input
    return children
}

func (clearBgpVersionAfiSafiRdIpPrefix *ClearBgpVersionAfiSafiRdIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiRdIpPrefix *ClearBgpVersionAfiSafiRdIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiRdIpPrefix *ClearBgpVersionAfiSafiRdIpPrefix) GetYangName() string { return "clear-bgp-version-afi-safi-rd-ip-prefix" }

func (clearBgpVersionAfiSafiRdIpPrefix *ClearBgpVersionAfiSafiRdIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiRdIpPrefix *ClearBgpVersionAfiSafiRdIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiRdIpPrefix *ClearBgpVersionAfiSafiRdIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiRdIpPrefix *ClearBgpVersionAfiSafiRdIpPrefix) SetParent(parent types.Entity) { clearBgpVersionAfiSafiRdIpPrefix.parent = parent }

func (clearBgpVersionAfiSafiRdIpPrefix *ClearBgpVersionAfiSafiRdIpPrefix) GetParent() types.Entity { return clearBgpVersionAfiSafiRdIpPrefix.parent }

func (clearBgpVersionAfiSafiRdIpPrefix *ClearBgpVersionAfiSafiRdIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiRdIpPrefix_Input
type ClearBgpVersionAfiSafiRdIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpVersionAfiSafiRdIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiRdIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiRdIpPrefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpVersionAfiSafiRdIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiRdIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiRdIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiRdIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpVersionAfiSafiRdIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiRdIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiRdIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiRdIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiRdIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiRdIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiRdIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiRdIpPrefix_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-rd-ip-prefix" }

// ClearBgpVersionAfiSafiIpv4AddrIpv4Mask
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpv4AddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input
}

func (clearBgpVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiIpv4AddrIpv4Mask.YFilter }

func (clearBgpVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiIpv4AddrIpv4Mask.YFilter = yf }

func (clearBgpVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask"
}

func (clearBgpVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiIpv4AddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiIpv4AddrIpv4Mask.Input
    return children
}

func (clearBgpVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask) GetYangName() string { return "clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask" }

func (clearBgpVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask) SetParent(parent types.Entity) { clearBgpVersionAfiSafiIpv4AddrIpv4Mask.parent = parent }

func (clearBgpVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask) GetParent() types.Entity { return clearBgpVersionAfiSafiIpv4AddrIpv4Mask.parent }

func (clearBgpVersionAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input
type ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-addr"] = input.Ipv4Addr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiIpv4AddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-ipv4-addr-ipv4-mask" }

// ClearBgpVersionAfiSafiIpv4Addr
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpv4Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpv4Addr_Input
}

func (clearBgpVersionAfiSafiIpv4Addr *ClearBgpVersionAfiSafiIpv4Addr) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiIpv4Addr.YFilter }

func (clearBgpVersionAfiSafiIpv4Addr *ClearBgpVersionAfiSafiIpv4Addr) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiIpv4Addr.YFilter = yf }

func (clearBgpVersionAfiSafiIpv4Addr *ClearBgpVersionAfiSafiIpv4Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiIpv4Addr *ClearBgpVersionAfiSafiIpv4Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-addr"
}

func (clearBgpVersionAfiSafiIpv4Addr *ClearBgpVersionAfiSafiIpv4Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiIpv4Addr.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiIpv4Addr *ClearBgpVersionAfiSafiIpv4Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiIpv4Addr.Input
    return children
}

func (clearBgpVersionAfiSafiIpv4Addr *ClearBgpVersionAfiSafiIpv4Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiIpv4Addr *ClearBgpVersionAfiSafiIpv4Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiIpv4Addr *ClearBgpVersionAfiSafiIpv4Addr) GetYangName() string { return "clear-bgp-version-afi-safi-ipv4-addr" }

func (clearBgpVersionAfiSafiIpv4Addr *ClearBgpVersionAfiSafiIpv4Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiIpv4Addr *ClearBgpVersionAfiSafiIpv4Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiIpv4Addr *ClearBgpVersionAfiSafiIpv4Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiIpv4Addr *ClearBgpVersionAfiSafiIpv4Addr) SetParent(parent types.Entity) { clearBgpVersionAfiSafiIpv4Addr.parent = parent }

func (clearBgpVersionAfiSafiIpv4Addr *ClearBgpVersionAfiSafiIpv4Addr) GetParent() types.Entity { return clearBgpVersionAfiSafiIpv4Addr.parent }

func (clearBgpVersionAfiSafiIpv4Addr *ClearBgpVersionAfiSafiIpv4Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiIpv4Addr_Input
type ClearBgpVersionAfiSafiIpv4Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpVersionAfiSafiIpv4Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiIpv4Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiIpv4Addr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    return ""
}

func (input *ClearBgpVersionAfiSafiIpv4Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiIpv4Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiIpv4Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiIpv4Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-addr"] = input.Ipv4Addr
    return leafs
}

func (input *ClearBgpVersionAfiSafiIpv4Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiIpv4Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiIpv4Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiIpv4Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiIpv4Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiIpv4Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiIpv4Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiIpv4Addr_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-ipv4-addr" }

// ClearBgpVersionAfiSafiIpv4Prefix
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpv4Prefix_Input
}

func (clearBgpVersionAfiSafiIpv4Prefix *ClearBgpVersionAfiSafiIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiIpv4Prefix.YFilter }

func (clearBgpVersionAfiSafiIpv4Prefix *ClearBgpVersionAfiSafiIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiIpv4Prefix.YFilter = yf }

func (clearBgpVersionAfiSafiIpv4Prefix *ClearBgpVersionAfiSafiIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiIpv4Prefix *ClearBgpVersionAfiSafiIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-prefix"
}

func (clearBgpVersionAfiSafiIpv4Prefix *ClearBgpVersionAfiSafiIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiIpv4Prefix.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiIpv4Prefix *ClearBgpVersionAfiSafiIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiIpv4Prefix.Input
    return children
}

func (clearBgpVersionAfiSafiIpv4Prefix *ClearBgpVersionAfiSafiIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiIpv4Prefix *ClearBgpVersionAfiSafiIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiIpv4Prefix *ClearBgpVersionAfiSafiIpv4Prefix) GetYangName() string { return "clear-bgp-version-afi-safi-ipv4-prefix" }

func (clearBgpVersionAfiSafiIpv4Prefix *ClearBgpVersionAfiSafiIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiIpv4Prefix *ClearBgpVersionAfiSafiIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiIpv4Prefix *ClearBgpVersionAfiSafiIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiIpv4Prefix *ClearBgpVersionAfiSafiIpv4Prefix) SetParent(parent types.Entity) { clearBgpVersionAfiSafiIpv4Prefix.parent = parent }

func (clearBgpVersionAfiSafiIpv4Prefix *ClearBgpVersionAfiSafiIpv4Prefix) GetParent() types.Entity { return clearBgpVersionAfiSafiIpv4Prefix.parent }

func (clearBgpVersionAfiSafiIpv4Prefix *ClearBgpVersionAfiSafiIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiIpv4Prefix_Input
type ClearBgpVersionAfiSafiIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network and masklength. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpVersionAfiSafiIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpVersionAfiSafiIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpVersionAfiSafiIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-ipv4-prefix" }

// ClearBgpVersionAfiSafiRdIpv4Addr
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdIpv4Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdIpv4Addr_Input
}

func (clearBgpVersionAfiSafiRdIpv4Addr *ClearBgpVersionAfiSafiRdIpv4Addr) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiRdIpv4Addr.YFilter }

func (clearBgpVersionAfiSafiRdIpv4Addr *ClearBgpVersionAfiSafiRdIpv4Addr) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiRdIpv4Addr.YFilter = yf }

func (clearBgpVersionAfiSafiRdIpv4Addr *ClearBgpVersionAfiSafiRdIpv4Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiRdIpv4Addr *ClearBgpVersionAfiSafiRdIpv4Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr"
}

func (clearBgpVersionAfiSafiRdIpv4Addr *ClearBgpVersionAfiSafiRdIpv4Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiRdIpv4Addr.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiRdIpv4Addr *ClearBgpVersionAfiSafiRdIpv4Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiRdIpv4Addr.Input
    return children
}

func (clearBgpVersionAfiSafiRdIpv4Addr *ClearBgpVersionAfiSafiRdIpv4Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiRdIpv4Addr *ClearBgpVersionAfiSafiRdIpv4Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiRdIpv4Addr *ClearBgpVersionAfiSafiRdIpv4Addr) GetYangName() string { return "clear-bgp-version-afi-safi-rd-ipv4-addr" }

func (clearBgpVersionAfiSafiRdIpv4Addr *ClearBgpVersionAfiSafiRdIpv4Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiRdIpv4Addr *ClearBgpVersionAfiSafiRdIpv4Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiRdIpv4Addr *ClearBgpVersionAfiSafiRdIpv4Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiRdIpv4Addr *ClearBgpVersionAfiSafiRdIpv4Addr) SetParent(parent types.Entity) { clearBgpVersionAfiSafiRdIpv4Addr.parent = parent }

func (clearBgpVersionAfiSafiRdIpv4Addr *ClearBgpVersionAfiSafiRdIpv4Addr) GetParent() types.Entity { return clearBgpVersionAfiSafiRdIpv4Addr.parent }

func (clearBgpVersionAfiSafiRdIpv4Addr *ClearBgpVersionAfiSafiRdIpv4Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiRdIpv4Addr_Input
type ClearBgpVersionAfiSafiRdIpv4Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv4 MDT network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpVersionAfiSafiRdIpv4Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiRdIpv4Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiRdIpv4Addr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    return ""
}

func (input *ClearBgpVersionAfiSafiRdIpv4Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiRdIpv4Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiRdIpv4Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiRdIpv4Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv4-addr"] = input.Ipv4Addr
    return leafs
}

func (input *ClearBgpVersionAfiSafiRdIpv4Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiRdIpv4Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiRdIpv4Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiRdIpv4Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiRdIpv4Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiRdIpv4Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiRdIpv4Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiRdIpv4Addr_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-rd-ipv4-addr" }

// ClearBgpVersionAfiSafiVrfIpv4Addr
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpVersionAfiSafiVrfIpv4Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiVrfIpv4Addr_Input
}

func (clearBgpVersionAfiSafiVrfIpv4Addr *ClearBgpVersionAfiSafiVrfIpv4Addr) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiVrfIpv4Addr.YFilter }

func (clearBgpVersionAfiSafiVrfIpv4Addr *ClearBgpVersionAfiSafiVrfIpv4Addr) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiVrfIpv4Addr.YFilter = yf }

func (clearBgpVersionAfiSafiVrfIpv4Addr *ClearBgpVersionAfiSafiVrfIpv4Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiVrfIpv4Addr *ClearBgpVersionAfiSafiVrfIpv4Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr"
}

func (clearBgpVersionAfiSafiVrfIpv4Addr *ClearBgpVersionAfiSafiVrfIpv4Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiVrfIpv4Addr.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiVrfIpv4Addr *ClearBgpVersionAfiSafiVrfIpv4Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiVrfIpv4Addr.Input
    return children
}

func (clearBgpVersionAfiSafiVrfIpv4Addr *ClearBgpVersionAfiSafiVrfIpv4Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiVrfIpv4Addr *ClearBgpVersionAfiSafiVrfIpv4Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiVrfIpv4Addr *ClearBgpVersionAfiSafiVrfIpv4Addr) GetYangName() string { return "clear-bgp-version-afi-safi-vrf-ipv4-addr" }

func (clearBgpVersionAfiSafiVrfIpv4Addr *ClearBgpVersionAfiSafiVrfIpv4Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiVrfIpv4Addr *ClearBgpVersionAfiSafiVrfIpv4Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiVrfIpv4Addr *ClearBgpVersionAfiSafiVrfIpv4Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiVrfIpv4Addr *ClearBgpVersionAfiSafiVrfIpv4Addr) SetParent(parent types.Entity) { clearBgpVersionAfiSafiVrfIpv4Addr.parent = parent }

func (clearBgpVersionAfiSafiVrfIpv4Addr *ClearBgpVersionAfiSafiVrfIpv4Addr) GetParent() types.Entity { return clearBgpVersionAfiSafiVrfIpv4Addr.parent }

func (clearBgpVersionAfiSafiVrfIpv4Addr *ClearBgpVersionAfiSafiVrfIpv4Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiVrfIpv4Addr_Input
type ClearBgpVersionAfiSafiVrfIpv4Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv4 MDT network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpVersionAfiSafiVrfIpv4Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiVrfIpv4Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiVrfIpv4Addr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    return ""
}

func (input *ClearBgpVersionAfiSafiVrfIpv4Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiVrfIpv4Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiVrfIpv4Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiVrfIpv4Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv4-addr"] = input.Ipv4Addr
    return leafs
}

func (input *ClearBgpVersionAfiSafiVrfIpv4Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiVrfIpv4Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiVrfIpv4Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiVrfIpv4Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiVrfIpv4Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiVrfIpv4Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiVrfIpv4Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiVrfIpv4Addr_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-vrf-ipv4-addr" }

// ClearBgpVersionAfiSafiNetwork
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiNetwork_Input
}

func (clearBgpVersionAfiSafiNetwork *ClearBgpVersionAfiSafiNetwork) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiNetwork.YFilter }

func (clearBgpVersionAfiSafiNetwork *ClearBgpVersionAfiSafiNetwork) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiNetwork.YFilter = yf }

func (clearBgpVersionAfiSafiNetwork *ClearBgpVersionAfiSafiNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiNetwork *ClearBgpVersionAfiSafiNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-network"
}

func (clearBgpVersionAfiSafiNetwork *ClearBgpVersionAfiSafiNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiNetwork.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiNetwork *ClearBgpVersionAfiSafiNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiNetwork.Input
    return children
}

func (clearBgpVersionAfiSafiNetwork *ClearBgpVersionAfiSafiNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiNetwork *ClearBgpVersionAfiSafiNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiNetwork *ClearBgpVersionAfiSafiNetwork) GetYangName() string { return "clear-bgp-version-afi-safi-network" }

func (clearBgpVersionAfiSafiNetwork *ClearBgpVersionAfiSafiNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiNetwork *ClearBgpVersionAfiSafiNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiNetwork *ClearBgpVersionAfiSafiNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiNetwork *ClearBgpVersionAfiSafiNetwork) SetParent(parent types.Entity) { clearBgpVersionAfiSafiNetwork.parent = parent }

func (clearBgpVersionAfiSafiNetwork *ClearBgpVersionAfiSafiNetwork) GetParent() types.Entity { return clearBgpVersionAfiSafiNetwork.parent }

func (clearBgpVersionAfiSafiNetwork *ClearBgpVersionAfiSafiNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiNetwork_Input
type ClearBgpVersionAfiSafiNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpVersionAfiSafiNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiNetwork_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpVersionAfiSafiNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpVersionAfiSafiNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiNetwork_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-network" }

// ClearBgpVersionAfiSafiRdNetwork
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdNetwork_Input
}

func (clearBgpVersionAfiSafiRdNetwork *ClearBgpVersionAfiSafiRdNetwork) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiRdNetwork.YFilter }

func (clearBgpVersionAfiSafiRdNetwork *ClearBgpVersionAfiSafiRdNetwork) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiRdNetwork.YFilter = yf }

func (clearBgpVersionAfiSafiRdNetwork *ClearBgpVersionAfiSafiRdNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiRdNetwork *ClearBgpVersionAfiSafiRdNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-network"
}

func (clearBgpVersionAfiSafiRdNetwork *ClearBgpVersionAfiSafiRdNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiRdNetwork.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiRdNetwork *ClearBgpVersionAfiSafiRdNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiRdNetwork.Input
    return children
}

func (clearBgpVersionAfiSafiRdNetwork *ClearBgpVersionAfiSafiRdNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiRdNetwork *ClearBgpVersionAfiSafiRdNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiRdNetwork *ClearBgpVersionAfiSafiRdNetwork) GetYangName() string { return "clear-bgp-version-afi-safi-rd-network" }

func (clearBgpVersionAfiSafiRdNetwork *ClearBgpVersionAfiSafiRdNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiRdNetwork *ClearBgpVersionAfiSafiRdNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiRdNetwork *ClearBgpVersionAfiSafiRdNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiRdNetwork *ClearBgpVersionAfiSafiRdNetwork) SetParent(parent types.Entity) { clearBgpVersionAfiSafiRdNetwork.parent = parent }

func (clearBgpVersionAfiSafiRdNetwork *ClearBgpVersionAfiSafiRdNetwork) GetParent() types.Entity { return clearBgpVersionAfiSafiRdNetwork.parent }

func (clearBgpVersionAfiSafiRdNetwork *ClearBgpVersionAfiSafiRdNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiRdNetwork_Input
type ClearBgpVersionAfiSafiRdNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpVersionAfiSafiRdNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiRdNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiRdNetwork_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpVersionAfiSafiRdNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiRdNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiRdNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiRdNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpVersionAfiSafiRdNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiRdNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiRdNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiRdNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiRdNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiRdNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiRdNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiRdNetwork_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-rd-network" }

// ClearBgpVersionAfiSafiVrfNetwork
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpVersionAfiSafiVrfNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiVrfNetwork_Input
}

func (clearBgpVersionAfiSafiVrfNetwork *ClearBgpVersionAfiSafiVrfNetwork) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiVrfNetwork.YFilter }

func (clearBgpVersionAfiSafiVrfNetwork *ClearBgpVersionAfiSafiVrfNetwork) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiVrfNetwork.YFilter = yf }

func (clearBgpVersionAfiSafiVrfNetwork *ClearBgpVersionAfiSafiVrfNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiVrfNetwork *ClearBgpVersionAfiSafiVrfNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-network"
}

func (clearBgpVersionAfiSafiVrfNetwork *ClearBgpVersionAfiSafiVrfNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiVrfNetwork.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiVrfNetwork *ClearBgpVersionAfiSafiVrfNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiVrfNetwork.Input
    return children
}

func (clearBgpVersionAfiSafiVrfNetwork *ClearBgpVersionAfiSafiVrfNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiVrfNetwork *ClearBgpVersionAfiSafiVrfNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiVrfNetwork *ClearBgpVersionAfiSafiVrfNetwork) GetYangName() string { return "clear-bgp-version-afi-safi-vrf-network" }

func (clearBgpVersionAfiSafiVrfNetwork *ClearBgpVersionAfiSafiVrfNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiVrfNetwork *ClearBgpVersionAfiSafiVrfNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiVrfNetwork *ClearBgpVersionAfiSafiVrfNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiVrfNetwork *ClearBgpVersionAfiSafiVrfNetwork) SetParent(parent types.Entity) { clearBgpVersionAfiSafiVrfNetwork.parent = parent }

func (clearBgpVersionAfiSafiVrfNetwork *ClearBgpVersionAfiSafiVrfNetwork) GetParent() types.Entity { return clearBgpVersionAfiSafiVrfNetwork.parent }

func (clearBgpVersionAfiSafiVrfNetwork *ClearBgpVersionAfiSafiVrfNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiVrfNetwork_Input
type ClearBgpVersionAfiSafiVrfNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpVersionAfiSafiVrfNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiVrfNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiVrfNetwork_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpVersionAfiSafiVrfNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiVrfNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiVrfNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiVrfNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpVersionAfiSafiVrfNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiVrfNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiVrfNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiVrfNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiVrfNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiVrfNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiVrfNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiVrfNetwork_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-vrf-network" }

// ClearBgpVersionAfiSafiRtConstraintNetwork
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiRtConstraintNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRtConstraintNetwork_Input
}

func (clearBgpVersionAfiSafiRtConstraintNetwork *ClearBgpVersionAfiSafiRtConstraintNetwork) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiRtConstraintNetwork.YFilter }

func (clearBgpVersionAfiSafiRtConstraintNetwork *ClearBgpVersionAfiSafiRtConstraintNetwork) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiRtConstraintNetwork.YFilter = yf }

func (clearBgpVersionAfiSafiRtConstraintNetwork *ClearBgpVersionAfiSafiRtConstraintNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiRtConstraintNetwork *ClearBgpVersionAfiSafiRtConstraintNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rt-constraint-network"
}

func (clearBgpVersionAfiSafiRtConstraintNetwork *ClearBgpVersionAfiSafiRtConstraintNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiRtConstraintNetwork.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiRtConstraintNetwork *ClearBgpVersionAfiSafiRtConstraintNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiRtConstraintNetwork.Input
    return children
}

func (clearBgpVersionAfiSafiRtConstraintNetwork *ClearBgpVersionAfiSafiRtConstraintNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiRtConstraintNetwork *ClearBgpVersionAfiSafiRtConstraintNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiRtConstraintNetwork *ClearBgpVersionAfiSafiRtConstraintNetwork) GetYangName() string { return "clear-bgp-version-afi-safi-rt-constraint-network" }

func (clearBgpVersionAfiSafiRtConstraintNetwork *ClearBgpVersionAfiSafiRtConstraintNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiRtConstraintNetwork *ClearBgpVersionAfiSafiRtConstraintNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiRtConstraintNetwork *ClearBgpVersionAfiSafiRtConstraintNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiRtConstraintNetwork *ClearBgpVersionAfiSafiRtConstraintNetwork) SetParent(parent types.Entity) { clearBgpVersionAfiSafiRtConstraintNetwork.parent = parent }

func (clearBgpVersionAfiSafiRtConstraintNetwork *ClearBgpVersionAfiSafiRtConstraintNetwork) GetParent() types.Entity { return clearBgpVersionAfiSafiRtConstraintNetwork.parent }

func (clearBgpVersionAfiSafiRtConstraintNetwork *ClearBgpVersionAfiSafiRtConstraintNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiRtConstraintNetwork_Input
type ClearBgpVersionAfiSafiRtConstraintNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // RT-Constraint network. The type is string. This attribute is mandatory.
    RtConstraintNetwork interface{}
}

func (input *ClearBgpVersionAfiSafiRtConstraintNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiRtConstraintNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiRtConstraintNetwork_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rt-constraint-network" { return "RtConstraintNetwork" }
    return ""
}

func (input *ClearBgpVersionAfiSafiRtConstraintNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiRtConstraintNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiRtConstraintNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiRtConstraintNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rt-constraint-network"] = input.RtConstraintNetwork
    return leafs
}

func (input *ClearBgpVersionAfiSafiRtConstraintNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiRtConstraintNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiRtConstraintNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiRtConstraintNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiRtConstraintNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiRtConstraintNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiRtConstraintNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiRtConstraintNetwork_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-rt-constraint-network" }

// ClearBgpVersionAfiSafiIpv4TunnelNetwork
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpv4TunnelNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input
}

func (clearBgpVersionAfiSafiIpv4TunnelNetwork *ClearBgpVersionAfiSafiIpv4TunnelNetwork) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiIpv4TunnelNetwork.YFilter }

func (clearBgpVersionAfiSafiIpv4TunnelNetwork *ClearBgpVersionAfiSafiIpv4TunnelNetwork) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiIpv4TunnelNetwork.YFilter = yf }

func (clearBgpVersionAfiSafiIpv4TunnelNetwork *ClearBgpVersionAfiSafiIpv4TunnelNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiIpv4TunnelNetwork *ClearBgpVersionAfiSafiIpv4TunnelNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv4-tunnel-network"
}

func (clearBgpVersionAfiSafiIpv4TunnelNetwork *ClearBgpVersionAfiSafiIpv4TunnelNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiIpv4TunnelNetwork.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiIpv4TunnelNetwork *ClearBgpVersionAfiSafiIpv4TunnelNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiIpv4TunnelNetwork.Input
    return children
}

func (clearBgpVersionAfiSafiIpv4TunnelNetwork *ClearBgpVersionAfiSafiIpv4TunnelNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiIpv4TunnelNetwork *ClearBgpVersionAfiSafiIpv4TunnelNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiIpv4TunnelNetwork *ClearBgpVersionAfiSafiIpv4TunnelNetwork) GetYangName() string { return "clear-bgp-version-afi-safi-ipv4-tunnel-network" }

func (clearBgpVersionAfiSafiIpv4TunnelNetwork *ClearBgpVersionAfiSafiIpv4TunnelNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiIpv4TunnelNetwork *ClearBgpVersionAfiSafiIpv4TunnelNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiIpv4TunnelNetwork *ClearBgpVersionAfiSafiIpv4TunnelNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiIpv4TunnelNetwork *ClearBgpVersionAfiSafiIpv4TunnelNetwork) SetParent(parent types.Entity) { clearBgpVersionAfiSafiIpv4TunnelNetwork.parent = parent }

func (clearBgpVersionAfiSafiIpv4TunnelNetwork *ClearBgpVersionAfiSafiIpv4TunnelNetwork) GetParent() types.Entity { return clearBgpVersionAfiSafiIpv4TunnelNetwork.parent }

func (clearBgpVersionAfiSafiIpv4TunnelNetwork *ClearBgpVersionAfiSafiIpv4TunnelNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input
type ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Tunnel network <Tunnel-ID>:<IPv4 Address>. The type is string. This
    // attribute is mandatory.
    Ipv4TunnelNetwork interface{}
}

func (input *ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-tunnel-network" { return "Ipv4TunnelNetwork" }
    return ""
}

func (input *ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-tunnel-network"] = input.Ipv4TunnelNetwork
    return leafs
}

func (input *ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiIpv4TunnelNetwork_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-ipv4-tunnel-network" }

// ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input
}

func (clearBgpVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.YFilter }

func (clearBgpVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.YFilter = yf }

func (clearBgpVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask"
}

func (clearBgpVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.Input
    return children
}

func (clearBgpVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask) GetYangName() string { return "clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask" }

func (clearBgpVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask) SetParent(parent types.Entity) { clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.parent = parent }

func (clearBgpVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask) GetParent() types.Entity { return clearBgpVersionAfiSafiIpv6AddrIpv6Netmask.parent }

func (clearBgpVersionAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input
type ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    if yname == "ipv6-netmask" { return "Ipv6Netmask" }
    return ""
}

func (input *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-addr"] = input.Ipv6Addr
    leafs["ipv6-netmask"] = input.Ipv6Netmask
    return leafs
}

func (input *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiIpv6AddrIpv6Netmask_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-ipv6-addr-ipv6-netmask" }

// ClearBgpVersionAfiSafiIpv6Addr
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpv6Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpv6Addr_Input
}

func (clearBgpVersionAfiSafiIpv6Addr *ClearBgpVersionAfiSafiIpv6Addr) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiIpv6Addr.YFilter }

func (clearBgpVersionAfiSafiIpv6Addr *ClearBgpVersionAfiSafiIpv6Addr) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiIpv6Addr.YFilter = yf }

func (clearBgpVersionAfiSafiIpv6Addr *ClearBgpVersionAfiSafiIpv6Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiIpv6Addr *ClearBgpVersionAfiSafiIpv6Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-addr"
}

func (clearBgpVersionAfiSafiIpv6Addr *ClearBgpVersionAfiSafiIpv6Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiIpv6Addr.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiIpv6Addr *ClearBgpVersionAfiSafiIpv6Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiIpv6Addr.Input
    return children
}

func (clearBgpVersionAfiSafiIpv6Addr *ClearBgpVersionAfiSafiIpv6Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiIpv6Addr *ClearBgpVersionAfiSafiIpv6Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiIpv6Addr *ClearBgpVersionAfiSafiIpv6Addr) GetYangName() string { return "clear-bgp-version-afi-safi-ipv6-addr" }

func (clearBgpVersionAfiSafiIpv6Addr *ClearBgpVersionAfiSafiIpv6Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiIpv6Addr *ClearBgpVersionAfiSafiIpv6Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiIpv6Addr *ClearBgpVersionAfiSafiIpv6Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiIpv6Addr *ClearBgpVersionAfiSafiIpv6Addr) SetParent(parent types.Entity) { clearBgpVersionAfiSafiIpv6Addr.parent = parent }

func (clearBgpVersionAfiSafiIpv6Addr *ClearBgpVersionAfiSafiIpv6Addr) GetParent() types.Entity { return clearBgpVersionAfiSafiIpv6Addr.parent }

func (clearBgpVersionAfiSafiIpv6Addr *ClearBgpVersionAfiSafiIpv6Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiIpv6Addr_Input
type ClearBgpVersionAfiSafiIpv6Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpVersionAfiSafiIpv6Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiIpv6Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiIpv6Addr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    return ""
}

func (input *ClearBgpVersionAfiSafiIpv6Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiIpv6Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiIpv6Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiIpv6Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-addr"] = input.Ipv6Addr
    return leafs
}

func (input *ClearBgpVersionAfiSafiIpv6Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiIpv6Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiIpv6Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiIpv6Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiIpv6Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiIpv6Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiIpv6Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiIpv6Addr_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-ipv6-addr" }

// ClearBgpVersionAfiSafiIpv6Prefix
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiIpv6Prefix_Input
}

func (clearBgpVersionAfiSafiIpv6Prefix *ClearBgpVersionAfiSafiIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiIpv6Prefix.YFilter }

func (clearBgpVersionAfiSafiIpv6Prefix *ClearBgpVersionAfiSafiIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiIpv6Prefix.YFilter = yf }

func (clearBgpVersionAfiSafiIpv6Prefix *ClearBgpVersionAfiSafiIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiIpv6Prefix *ClearBgpVersionAfiSafiIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-ipv6-prefix"
}

func (clearBgpVersionAfiSafiIpv6Prefix *ClearBgpVersionAfiSafiIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiIpv6Prefix.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiIpv6Prefix *ClearBgpVersionAfiSafiIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiIpv6Prefix.Input
    return children
}

func (clearBgpVersionAfiSafiIpv6Prefix *ClearBgpVersionAfiSafiIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiIpv6Prefix *ClearBgpVersionAfiSafiIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiIpv6Prefix *ClearBgpVersionAfiSafiIpv6Prefix) GetYangName() string { return "clear-bgp-version-afi-safi-ipv6-prefix" }

func (clearBgpVersionAfiSafiIpv6Prefix *ClearBgpVersionAfiSafiIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiIpv6Prefix *ClearBgpVersionAfiSafiIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiIpv6Prefix *ClearBgpVersionAfiSafiIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiIpv6Prefix *ClearBgpVersionAfiSafiIpv6Prefix) SetParent(parent types.Entity) { clearBgpVersionAfiSafiIpv6Prefix.parent = parent }

func (clearBgpVersionAfiSafiIpv6Prefix *ClearBgpVersionAfiSafiIpv6Prefix) GetParent() types.Entity { return clearBgpVersionAfiSafiIpv6Prefix.parent }

func (clearBgpVersionAfiSafiIpv6Prefix *ClearBgpVersionAfiSafiIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiIpv6Prefix_Input
type ClearBgpVersionAfiSafiIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpVersionAfiSafiIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpVersionAfiSafiIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpVersionAfiSafiIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-ipv6-prefix" }

// ClearBgpVersionAfiSafiRd
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRd_Input
}

func (clearBgpVersionAfiSafiRd *ClearBgpVersionAfiSafiRd) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiRd.YFilter }

func (clearBgpVersionAfiSafiRd *ClearBgpVersionAfiSafiRd) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiRd.YFilter = yf }

func (clearBgpVersionAfiSafiRd *ClearBgpVersionAfiSafiRd) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiRd *ClearBgpVersionAfiSafiRd) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd"
}

func (clearBgpVersionAfiSafiRd *ClearBgpVersionAfiSafiRd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiRd.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiRd *ClearBgpVersionAfiSafiRd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiRd.Input
    return children
}

func (clearBgpVersionAfiSafiRd *ClearBgpVersionAfiSafiRd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiRd *ClearBgpVersionAfiSafiRd) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiRd *ClearBgpVersionAfiSafiRd) GetYangName() string { return "clear-bgp-version-afi-safi-rd" }

func (clearBgpVersionAfiSafiRd *ClearBgpVersionAfiSafiRd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiRd *ClearBgpVersionAfiSafiRd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiRd *ClearBgpVersionAfiSafiRd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiRd *ClearBgpVersionAfiSafiRd) SetParent(parent types.Entity) { clearBgpVersionAfiSafiRd.parent = parent }

func (clearBgpVersionAfiSafiRd *ClearBgpVersionAfiSafiRd) GetParent() types.Entity { return clearBgpVersionAfiSafiRd.parent }

func (clearBgpVersionAfiSafiRd *ClearBgpVersionAfiSafiRd) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiRd_Input
type ClearBgpVersionAfiSafiRd_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}
}

func (input *ClearBgpVersionAfiSafiRd_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiRd_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiRd_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    return ""
}

func (input *ClearBgpVersionAfiSafiRd_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiRd_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiRd_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiRd_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    return leafs
}

func (input *ClearBgpVersionAfiSafiRd_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiRd_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiRd_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiRd_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiRd_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiRd_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiRd_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiRd_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-rd" }

// ClearBgpVersionAfiSafiVrf
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpVersionAfiSafiVrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiVrf_Input
}

func (clearBgpVersionAfiSafiVrf *ClearBgpVersionAfiSafiVrf) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiVrf.YFilter }

func (clearBgpVersionAfiSafiVrf *ClearBgpVersionAfiSafiVrf) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiVrf.YFilter = yf }

func (clearBgpVersionAfiSafiVrf *ClearBgpVersionAfiSafiVrf) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiVrf *ClearBgpVersionAfiSafiVrf) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf"
}

func (clearBgpVersionAfiSafiVrf *ClearBgpVersionAfiSafiVrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiVrf.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiVrf *ClearBgpVersionAfiSafiVrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiVrf.Input
    return children
}

func (clearBgpVersionAfiSafiVrf *ClearBgpVersionAfiSafiVrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiVrf *ClearBgpVersionAfiSafiVrf) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiVrf *ClearBgpVersionAfiSafiVrf) GetYangName() string { return "clear-bgp-version-afi-safi-vrf" }

func (clearBgpVersionAfiSafiVrf *ClearBgpVersionAfiSafiVrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiVrf *ClearBgpVersionAfiSafiVrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiVrf *ClearBgpVersionAfiSafiVrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiVrf *ClearBgpVersionAfiSafiVrf) SetParent(parent types.Entity) { clearBgpVersionAfiSafiVrf.parent = parent }

func (clearBgpVersionAfiSafiVrf *ClearBgpVersionAfiSafiVrf) GetParent() types.Entity { return clearBgpVersionAfiSafiVrf.parent }

func (clearBgpVersionAfiSafiVrf *ClearBgpVersionAfiSafiVrf) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiVrf_Input
type ClearBgpVersionAfiSafiVrf_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}
}

func (input *ClearBgpVersionAfiSafiVrf_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiVrf_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiVrf_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (input *ClearBgpVersionAfiSafiVrf_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiVrf_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiVrf_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiVrf_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    return leafs
}

func (input *ClearBgpVersionAfiSafiVrf_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiVrf_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiVrf_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiVrf_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiVrf_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiVrf_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiVrf_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiVrf_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-vrf" }

// ClearBgpVersionAfiSafi
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafi_Input
}

func (clearBgpVersionAfiSafi *ClearBgpVersionAfiSafi) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafi.YFilter }

func (clearBgpVersionAfiSafi *ClearBgpVersionAfiSafi) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafi.YFilter = yf }

func (clearBgpVersionAfiSafi *ClearBgpVersionAfiSafi) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafi *ClearBgpVersionAfiSafi) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi"
}

func (clearBgpVersionAfiSafi *ClearBgpVersionAfiSafi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafi.Input
    }
    return nil
}

func (clearBgpVersionAfiSafi *ClearBgpVersionAfiSafi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafi.Input
    return children
}

func (clearBgpVersionAfiSafi *ClearBgpVersionAfiSafi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafi *ClearBgpVersionAfiSafi) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafi *ClearBgpVersionAfiSafi) GetYangName() string { return "clear-bgp-version-afi-safi" }

func (clearBgpVersionAfiSafi *ClearBgpVersionAfiSafi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafi *ClearBgpVersionAfiSafi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafi *ClearBgpVersionAfiSafi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafi *ClearBgpVersionAfiSafi) SetParent(parent types.Entity) { clearBgpVersionAfiSafi.parent = parent }

func (clearBgpVersionAfiSafi *ClearBgpVersionAfiSafi) GetParent() types.Entity { return clearBgpVersionAfiSafi.parent }

func (clearBgpVersionAfiSafi *ClearBgpVersionAfiSafi) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafi_Input
type ClearBgpVersionAfiSafi_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVersionAfiSafi_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafi_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafi_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpVersionAfiSafi_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafi_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafi_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafi_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpVersionAfiSafi_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafi_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafi_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafi_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafi_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafi_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafi_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafi_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi" }

// ClearBgpVersionAfiSafiSrPolicyPrefix
// clear BGP prefix version.
// 
type ClearBgpVersionAfiSafiSrPolicyPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiSrPolicyPrefix_Input
}

func (clearBgpVersionAfiSafiSrPolicyPrefix *ClearBgpVersionAfiSafiSrPolicyPrefix) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiSrPolicyPrefix.YFilter }

func (clearBgpVersionAfiSafiSrPolicyPrefix *ClearBgpVersionAfiSafiSrPolicyPrefix) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiSrPolicyPrefix.YFilter = yf }

func (clearBgpVersionAfiSafiSrPolicyPrefix *ClearBgpVersionAfiSafiSrPolicyPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiSrPolicyPrefix *ClearBgpVersionAfiSafiSrPolicyPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-sr-policy-prefix"
}

func (clearBgpVersionAfiSafiSrPolicyPrefix *ClearBgpVersionAfiSafiSrPolicyPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiSrPolicyPrefix.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiSrPolicyPrefix *ClearBgpVersionAfiSafiSrPolicyPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiSrPolicyPrefix.Input
    return children
}

func (clearBgpVersionAfiSafiSrPolicyPrefix *ClearBgpVersionAfiSafiSrPolicyPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiSrPolicyPrefix *ClearBgpVersionAfiSafiSrPolicyPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiSrPolicyPrefix *ClearBgpVersionAfiSafiSrPolicyPrefix) GetYangName() string { return "clear-bgp-version-afi-safi-sr-policy-prefix" }

func (clearBgpVersionAfiSafiSrPolicyPrefix *ClearBgpVersionAfiSafiSrPolicyPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiSrPolicyPrefix *ClearBgpVersionAfiSafiSrPolicyPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiSrPolicyPrefix *ClearBgpVersionAfiSafiSrPolicyPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiSrPolicyPrefix *ClearBgpVersionAfiSafiSrPolicyPrefix) SetParent(parent types.Entity) { clearBgpVersionAfiSafiSrPolicyPrefix.parent = parent }

func (clearBgpVersionAfiSafiSrPolicyPrefix *ClearBgpVersionAfiSafiSrPolicyPrefix) GetParent() types.Entity { return clearBgpVersionAfiSafiSrPolicyPrefix.parent }

func (clearBgpVersionAfiSafiSrPolicyPrefix *ClearBgpVersionAfiSafiSrPolicyPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiSrPolicyPrefix_Input
type ClearBgpVersionAfiSafiSrPolicyPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // SR Policy prefix. The type is string. This attribute is mandatory.
    SrPolicyPrefix interface{}
}

func (input *ClearBgpVersionAfiSafiSrPolicyPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiSrPolicyPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiSrPolicyPrefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "sr-policy-prefix" { return "SrPolicyPrefix" }
    return ""
}

func (input *ClearBgpVersionAfiSafiSrPolicyPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiSrPolicyPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiSrPolicyPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiSrPolicyPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["sr-policy-prefix"] = input.SrPolicyPrefix
    return leafs
}

func (input *ClearBgpVersionAfiSafiSrPolicyPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiSrPolicyPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiSrPolicyPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiSrPolicyPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiSrPolicyPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiSrPolicyPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiSrPolicyPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiSrPolicyPrefix_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-sr-policy-prefix" }

// ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix
// clear BGP prefix version.
// Display routes for a specified Bridge Domain.
// 
type ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input
}

func (clearBgpVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.YFilter }

func (clearBgpVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.YFilter = yf }

func (clearBgpVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix"
}

func (clearBgpVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.Input
    return children
}

func (clearBgpVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix) GetYangName() string { return "clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix" }

func (clearBgpVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix) SetParent(parent types.Entity) { clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.parent = parent }

func (clearBgpVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix) GetParent() types.Entity { return clearBgpVersionAfiSafiBridgeDomainIpv4Prefix.parent }

func (clearBgpVersionAfiSafiBridgeDomainIpv4Prefix *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input
type ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Bridge Domain. The type is string. This attribute is mandatory.
    BridgeDomainName interface{}

    // L2VPN EVPN Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "bridge-domain-name" { return "BridgeDomainName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["bridge-domain-name"] = input.BridgeDomainName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiBridgeDomainIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-bridge-domain-ipv4-prefix" }

// ClearBgpVersionAfiSafiRdIpv4Prefix
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdIpv4Prefix_Input
}

func (clearBgpVersionAfiSafiRdIpv4Prefix *ClearBgpVersionAfiSafiRdIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiRdIpv4Prefix.YFilter }

func (clearBgpVersionAfiSafiRdIpv4Prefix *ClearBgpVersionAfiSafiRdIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiRdIpv4Prefix.YFilter = yf }

func (clearBgpVersionAfiSafiRdIpv4Prefix *ClearBgpVersionAfiSafiRdIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiRdIpv4Prefix *ClearBgpVersionAfiSafiRdIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-prefix"
}

func (clearBgpVersionAfiSafiRdIpv4Prefix *ClearBgpVersionAfiSafiRdIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiRdIpv4Prefix.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiRdIpv4Prefix *ClearBgpVersionAfiSafiRdIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiRdIpv4Prefix.Input
    return children
}

func (clearBgpVersionAfiSafiRdIpv4Prefix *ClearBgpVersionAfiSafiRdIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiRdIpv4Prefix *ClearBgpVersionAfiSafiRdIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiRdIpv4Prefix *ClearBgpVersionAfiSafiRdIpv4Prefix) GetYangName() string { return "clear-bgp-version-afi-safi-rd-ipv4-prefix" }

func (clearBgpVersionAfiSafiRdIpv4Prefix *ClearBgpVersionAfiSafiRdIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiRdIpv4Prefix *ClearBgpVersionAfiSafiRdIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiRdIpv4Prefix *ClearBgpVersionAfiSafiRdIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiRdIpv4Prefix *ClearBgpVersionAfiSafiRdIpv4Prefix) SetParent(parent types.Entity) { clearBgpVersionAfiSafiRdIpv4Prefix.parent = parent }

func (clearBgpVersionAfiSafiRdIpv4Prefix *ClearBgpVersionAfiSafiRdIpv4Prefix) GetParent() types.Entity { return clearBgpVersionAfiSafiRdIpv4Prefix.parent }

func (clearBgpVersionAfiSafiRdIpv4Prefix *ClearBgpVersionAfiSafiRdIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiRdIpv4Prefix_Input
type ClearBgpVersionAfiSafiRdIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // L2VPN EVPN Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpVersionAfiSafiRdIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiRdIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiRdIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpVersionAfiSafiRdIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiRdIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiRdIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiRdIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpVersionAfiSafiRdIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiRdIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiRdIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiRdIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiRdIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiRdIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiRdIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiRdIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-rd-ipv4-prefix" }

// ClearBgpVersionAfiSafiMp2MpIpv4Prefix
// clear BGP prefix version.
// Display routes for a specified Xconnect group:MP2MP.
// 
type ClearBgpVersionAfiSafiMp2MpIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiMp2MpIpv4Prefix_Input
}

func (clearBgpVersionAfiSafiMp2MpIpv4Prefix *ClearBgpVersionAfiSafiMp2MpIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiMp2MpIpv4Prefix.YFilter }

func (clearBgpVersionAfiSafiMp2MpIpv4Prefix *ClearBgpVersionAfiSafiMp2MpIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiMp2MpIpv4Prefix.YFilter = yf }

func (clearBgpVersionAfiSafiMp2MpIpv4Prefix *ClearBgpVersionAfiSafiMp2MpIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiMp2MpIpv4Prefix *ClearBgpVersionAfiSafiMp2MpIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-mp2mp-ipv4-prefix"
}

func (clearBgpVersionAfiSafiMp2MpIpv4Prefix *ClearBgpVersionAfiSafiMp2MpIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiMp2MpIpv4Prefix.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiMp2MpIpv4Prefix *ClearBgpVersionAfiSafiMp2MpIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiMp2MpIpv4Prefix.Input
    return children
}

func (clearBgpVersionAfiSafiMp2MpIpv4Prefix *ClearBgpVersionAfiSafiMp2MpIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiMp2MpIpv4Prefix *ClearBgpVersionAfiSafiMp2MpIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiMp2MpIpv4Prefix *ClearBgpVersionAfiSafiMp2MpIpv4Prefix) GetYangName() string { return "clear-bgp-version-afi-safi-mp2mp-ipv4-prefix" }

func (clearBgpVersionAfiSafiMp2MpIpv4Prefix *ClearBgpVersionAfiSafiMp2MpIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiMp2MpIpv4Prefix *ClearBgpVersionAfiSafiMp2MpIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiMp2MpIpv4Prefix *ClearBgpVersionAfiSafiMp2MpIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiMp2MpIpv4Prefix *ClearBgpVersionAfiSafiMp2MpIpv4Prefix) SetParent(parent types.Entity) { clearBgpVersionAfiSafiMp2MpIpv4Prefix.parent = parent }

func (clearBgpVersionAfiSafiMp2MpIpv4Prefix *ClearBgpVersionAfiSafiMp2MpIpv4Prefix) GetParent() types.Entity { return clearBgpVersionAfiSafiMp2MpIpv4Prefix.parent }

func (clearBgpVersionAfiSafiMp2MpIpv4Prefix *ClearBgpVersionAfiSafiMp2MpIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiMp2MpIpv4Prefix_Input
type ClearBgpVersionAfiSafiMp2MpIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Xconnect Group:mp2mp. The type is string. This attribute is mandatory.
    Mp2Mp interface{}

    // L2VPN VPWS Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpVersionAfiSafiMp2MpIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiMp2MpIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiMp2MpIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "mp2mp" { return "Mp2Mp" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpVersionAfiSafiMp2MpIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiMp2MpIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiMp2MpIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiMp2MpIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["mp2mp"] = input.Mp2Mp
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpVersionAfiSafiMp2MpIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiMp2MpIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiMp2MpIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiMp2MpIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiMp2MpIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiMp2MpIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiMp2MpIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiMp2MpIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-mp2mp-ipv4-prefix" }

// ClearBgpVersionAfiSafiVrfIpv4Prefix
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpVersionAfiSafiVrfIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiVrfIpv4Prefix_Input
}

func (clearBgpVersionAfiSafiVrfIpv4Prefix *ClearBgpVersionAfiSafiVrfIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiVrfIpv4Prefix.YFilter }

func (clearBgpVersionAfiSafiVrfIpv4Prefix *ClearBgpVersionAfiSafiVrfIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiVrfIpv4Prefix.YFilter = yf }

func (clearBgpVersionAfiSafiVrfIpv4Prefix *ClearBgpVersionAfiSafiVrfIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiVrfIpv4Prefix *ClearBgpVersionAfiSafiVrfIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-prefix"
}

func (clearBgpVersionAfiSafiVrfIpv4Prefix *ClearBgpVersionAfiSafiVrfIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiVrfIpv4Prefix.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiVrfIpv4Prefix *ClearBgpVersionAfiSafiVrfIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiVrfIpv4Prefix.Input
    return children
}

func (clearBgpVersionAfiSafiVrfIpv4Prefix *ClearBgpVersionAfiSafiVrfIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiVrfIpv4Prefix *ClearBgpVersionAfiSafiVrfIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiVrfIpv4Prefix *ClearBgpVersionAfiSafiVrfIpv4Prefix) GetYangName() string { return "clear-bgp-version-afi-safi-vrf-ipv4-prefix" }

func (clearBgpVersionAfiSafiVrfIpv4Prefix *ClearBgpVersionAfiSafiVrfIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiVrfIpv4Prefix *ClearBgpVersionAfiSafiVrfIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiVrfIpv4Prefix *ClearBgpVersionAfiSafiVrfIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiVrfIpv4Prefix *ClearBgpVersionAfiSafiVrfIpv4Prefix) SetParent(parent types.Entity) { clearBgpVersionAfiSafiVrfIpv4Prefix.parent = parent }

func (clearBgpVersionAfiSafiVrfIpv4Prefix *ClearBgpVersionAfiSafiVrfIpv4Prefix) GetParent() types.Entity { return clearBgpVersionAfiSafiVrfIpv4Prefix.parent }

func (clearBgpVersionAfiSafiVrfIpv4Prefix *ClearBgpVersionAfiSafiVrfIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiVrfIpv4Prefix_Input
type ClearBgpVersionAfiSafiVrfIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // VPN Fspec Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpVersionAfiSafiVrfIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiVrfIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiVrfIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpVersionAfiSafiVrfIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiVrfIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiVrfIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiVrfIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpVersionAfiSafiVrfIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiVrfIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiVrfIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiVrfIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiVrfIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiVrfIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiVrfIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiVrfIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-vrf-ipv4-prefix" }

// ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input
}

func (clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.YFilter }

func (clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.YFilter = yf }

func (clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask"
}

func (clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.Input
    return children
}

func (clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask) GetYangName() string { return "clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask" }

func (clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask) SetParent(parent types.Entity) { clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.parent = parent }

func (clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask) GetParent() types.Entity { return clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask.parent }

func (clearBgpVersionAfiSafiRdIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input
type ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv4-addr"] = input.Ipv4Addr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiRdIpv4AddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-rd-ipv4-addr-ipv4-mask" }

// ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input
}

func (clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.YFilter }

func (clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.YFilter = yf }

func (clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask"
}

func (clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.Input
    return children
}

func (clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask) GetYangName() string { return "clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask" }

func (clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask) SetParent(parent types.Entity) { clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.parent = parent }

func (clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask) GetParent() types.Entity { return clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask.parent }

func (clearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input
type ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv4-addr"] = input.Ipv4Addr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiVrfIpv4AddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-vrf-ipv4-addr-ipv4-mask" }

// ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input
}

func (clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.YFilter }

func (clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.YFilter = yf }

func (clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask"
}

func (clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.Input
    return children
}

func (clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask) GetYangName() string { return "clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask" }

func (clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask) SetParent(parent types.Entity) { clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.parent = parent }

func (clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask) GetParent() types.Entity { return clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask.parent }

func (clearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input
type ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    if yname == "ipv6-netmask" { return "Ipv6Netmask" }
    return ""
}

func (input *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv6-addr"] = input.Ipv6Addr
    leafs["ipv6-netmask"] = input.Ipv6Netmask
    return leafs
}

func (input *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiRdIpv6AddrIpv6Netmask_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-rd-ipv6-addr-ipv6-netmask" }

// ClearBgpVersionAfiSafiRdIpv6Addr
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdIpv6Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdIpv6Addr_Input
}

func (clearBgpVersionAfiSafiRdIpv6Addr *ClearBgpVersionAfiSafiRdIpv6Addr) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiRdIpv6Addr.YFilter }

func (clearBgpVersionAfiSafiRdIpv6Addr *ClearBgpVersionAfiSafiRdIpv6Addr) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiRdIpv6Addr.YFilter = yf }

func (clearBgpVersionAfiSafiRdIpv6Addr *ClearBgpVersionAfiSafiRdIpv6Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiRdIpv6Addr *ClearBgpVersionAfiSafiRdIpv6Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-addr"
}

func (clearBgpVersionAfiSafiRdIpv6Addr *ClearBgpVersionAfiSafiRdIpv6Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiRdIpv6Addr.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiRdIpv6Addr *ClearBgpVersionAfiSafiRdIpv6Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiRdIpv6Addr.Input
    return children
}

func (clearBgpVersionAfiSafiRdIpv6Addr *ClearBgpVersionAfiSafiRdIpv6Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiRdIpv6Addr *ClearBgpVersionAfiSafiRdIpv6Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiRdIpv6Addr *ClearBgpVersionAfiSafiRdIpv6Addr) GetYangName() string { return "clear-bgp-version-afi-safi-rd-ipv6-addr" }

func (clearBgpVersionAfiSafiRdIpv6Addr *ClearBgpVersionAfiSafiRdIpv6Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiRdIpv6Addr *ClearBgpVersionAfiSafiRdIpv6Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiRdIpv6Addr *ClearBgpVersionAfiSafiRdIpv6Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiRdIpv6Addr *ClearBgpVersionAfiSafiRdIpv6Addr) SetParent(parent types.Entity) { clearBgpVersionAfiSafiRdIpv6Addr.parent = parent }

func (clearBgpVersionAfiSafiRdIpv6Addr *ClearBgpVersionAfiSafiRdIpv6Addr) GetParent() types.Entity { return clearBgpVersionAfiSafiRdIpv6Addr.parent }

func (clearBgpVersionAfiSafiRdIpv6Addr *ClearBgpVersionAfiSafiRdIpv6Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiRdIpv6Addr_Input
type ClearBgpVersionAfiSafiRdIpv6Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpVersionAfiSafiRdIpv6Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiRdIpv6Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiRdIpv6Addr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    return ""
}

func (input *ClearBgpVersionAfiSafiRdIpv6Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiRdIpv6Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiRdIpv6Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiRdIpv6Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv6-addr"] = input.Ipv6Addr
    return leafs
}

func (input *ClearBgpVersionAfiSafiRdIpv6Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiRdIpv6Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiRdIpv6Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiRdIpv6Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiRdIpv6Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiRdIpv6Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiRdIpv6Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiRdIpv6Addr_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-rd-ipv6-addr" }

// ClearBgpVersionAfiSafiRdIpv6Prefix
// clear BGP prefix version.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionAfiSafiRdIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiRdIpv6Prefix_Input
}

func (clearBgpVersionAfiSafiRdIpv6Prefix *ClearBgpVersionAfiSafiRdIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiRdIpv6Prefix.YFilter }

func (clearBgpVersionAfiSafiRdIpv6Prefix *ClearBgpVersionAfiSafiRdIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiRdIpv6Prefix.YFilter = yf }

func (clearBgpVersionAfiSafiRdIpv6Prefix *ClearBgpVersionAfiSafiRdIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiRdIpv6Prefix *ClearBgpVersionAfiSafiRdIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-rd-ipv6-prefix"
}

func (clearBgpVersionAfiSafiRdIpv6Prefix *ClearBgpVersionAfiSafiRdIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiRdIpv6Prefix.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiRdIpv6Prefix *ClearBgpVersionAfiSafiRdIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiRdIpv6Prefix.Input
    return children
}

func (clearBgpVersionAfiSafiRdIpv6Prefix *ClearBgpVersionAfiSafiRdIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiRdIpv6Prefix *ClearBgpVersionAfiSafiRdIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiRdIpv6Prefix *ClearBgpVersionAfiSafiRdIpv6Prefix) GetYangName() string { return "clear-bgp-version-afi-safi-rd-ipv6-prefix" }

func (clearBgpVersionAfiSafiRdIpv6Prefix *ClearBgpVersionAfiSafiRdIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiRdIpv6Prefix *ClearBgpVersionAfiSafiRdIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiRdIpv6Prefix *ClearBgpVersionAfiSafiRdIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiRdIpv6Prefix *ClearBgpVersionAfiSafiRdIpv6Prefix) SetParent(parent types.Entity) { clearBgpVersionAfiSafiRdIpv6Prefix.parent = parent }

func (clearBgpVersionAfiSafiRdIpv6Prefix *ClearBgpVersionAfiSafiRdIpv6Prefix) GetParent() types.Entity { return clearBgpVersionAfiSafiRdIpv6Prefix.parent }

func (clearBgpVersionAfiSafiRdIpv6Prefix *ClearBgpVersionAfiSafiRdIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiRdIpv6Prefix_Input
type ClearBgpVersionAfiSafiRdIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpVersionAfiSafiRdIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiRdIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiRdIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpVersionAfiSafiRdIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiRdIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiRdIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiRdIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpVersionAfiSafiRdIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiRdIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiRdIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiRdIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiRdIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiRdIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiRdIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiRdIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-rd-ipv6-prefix" }

// ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input
}

func (clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.YFilter }

func (clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.YFilter = yf }

func (clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask"
}

func (clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.Input
    return children
}

func (clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetYangName() string { return "clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask" }

func (clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask) SetParent(parent types.Entity) { clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.parent = parent }

func (clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetParent() types.Entity { return clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask.parent }

func (clearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input
type ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    if yname == "ipv6-netmask" { return "Ipv6Netmask" }
    return ""
}

func (input *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv6-addr"] = input.Ipv6Addr
    leafs["ipv6-netmask"] = input.Ipv6Netmask
    return leafs
}

func (input *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiVrfIpv6AddrIpv6Netmask_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-vrf-ipv6-addr-ipv6-netmask" }

// ClearBgpVersionAfiSafiVrfIpv6Addr
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpVersionAfiSafiVrfIpv6Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiVrfIpv6Addr_Input
}

func (clearBgpVersionAfiSafiVrfIpv6Addr *ClearBgpVersionAfiSafiVrfIpv6Addr) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiVrfIpv6Addr.YFilter }

func (clearBgpVersionAfiSafiVrfIpv6Addr *ClearBgpVersionAfiSafiVrfIpv6Addr) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiVrfIpv6Addr.YFilter = yf }

func (clearBgpVersionAfiSafiVrfIpv6Addr *ClearBgpVersionAfiSafiVrfIpv6Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiVrfIpv6Addr *ClearBgpVersionAfiSafiVrfIpv6Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-addr"
}

func (clearBgpVersionAfiSafiVrfIpv6Addr *ClearBgpVersionAfiSafiVrfIpv6Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiVrfIpv6Addr.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiVrfIpv6Addr *ClearBgpVersionAfiSafiVrfIpv6Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiVrfIpv6Addr.Input
    return children
}

func (clearBgpVersionAfiSafiVrfIpv6Addr *ClearBgpVersionAfiSafiVrfIpv6Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiVrfIpv6Addr *ClearBgpVersionAfiSafiVrfIpv6Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiVrfIpv6Addr *ClearBgpVersionAfiSafiVrfIpv6Addr) GetYangName() string { return "clear-bgp-version-afi-safi-vrf-ipv6-addr" }

func (clearBgpVersionAfiSafiVrfIpv6Addr *ClearBgpVersionAfiSafiVrfIpv6Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiVrfIpv6Addr *ClearBgpVersionAfiSafiVrfIpv6Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiVrfIpv6Addr *ClearBgpVersionAfiSafiVrfIpv6Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiVrfIpv6Addr *ClearBgpVersionAfiSafiVrfIpv6Addr) SetParent(parent types.Entity) { clearBgpVersionAfiSafiVrfIpv6Addr.parent = parent }

func (clearBgpVersionAfiSafiVrfIpv6Addr *ClearBgpVersionAfiSafiVrfIpv6Addr) GetParent() types.Entity { return clearBgpVersionAfiSafiVrfIpv6Addr.parent }

func (clearBgpVersionAfiSafiVrfIpv6Addr *ClearBgpVersionAfiSafiVrfIpv6Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiVrfIpv6Addr_Input
type ClearBgpVersionAfiSafiVrfIpv6Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpVersionAfiSafiVrfIpv6Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiVrfIpv6Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiVrfIpv6Addr_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    return ""
}

func (input *ClearBgpVersionAfiSafiVrfIpv6Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiVrfIpv6Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiVrfIpv6Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiVrfIpv6Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv6-addr"] = input.Ipv6Addr
    return leafs
}

func (input *ClearBgpVersionAfiSafiVrfIpv6Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiVrfIpv6Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiVrfIpv6Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiVrfIpv6Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiVrfIpv6Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiVrfIpv6Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiVrfIpv6Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiVrfIpv6Addr_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-vrf-ipv6-addr" }

// ClearBgpVersionAfiSafiVrfIpv6Prefix
// clear BGP prefix version.
// Display routes for a specified VRF.
// 
type ClearBgpVersionAfiSafiVrfIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionAfiSafiVrfIpv6Prefix_Input
}

func (clearBgpVersionAfiSafiVrfIpv6Prefix *ClearBgpVersionAfiSafiVrfIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpVersionAfiSafiVrfIpv6Prefix.YFilter }

func (clearBgpVersionAfiSafiVrfIpv6Prefix *ClearBgpVersionAfiSafiVrfIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpVersionAfiSafiVrfIpv6Prefix.YFilter = yf }

func (clearBgpVersionAfiSafiVrfIpv6Prefix *ClearBgpVersionAfiSafiVrfIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionAfiSafiVrfIpv6Prefix *ClearBgpVersionAfiSafiVrfIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-afi-safi-vrf-ipv6-prefix"
}

func (clearBgpVersionAfiSafiVrfIpv6Prefix *ClearBgpVersionAfiSafiVrfIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionAfiSafiVrfIpv6Prefix.Input
    }
    return nil
}

func (clearBgpVersionAfiSafiVrfIpv6Prefix *ClearBgpVersionAfiSafiVrfIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionAfiSafiVrfIpv6Prefix.Input
    return children
}

func (clearBgpVersionAfiSafiVrfIpv6Prefix *ClearBgpVersionAfiSafiVrfIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionAfiSafiVrfIpv6Prefix *ClearBgpVersionAfiSafiVrfIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionAfiSafiVrfIpv6Prefix *ClearBgpVersionAfiSafiVrfIpv6Prefix) GetYangName() string { return "clear-bgp-version-afi-safi-vrf-ipv6-prefix" }

func (clearBgpVersionAfiSafiVrfIpv6Prefix *ClearBgpVersionAfiSafiVrfIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionAfiSafiVrfIpv6Prefix *ClearBgpVersionAfiSafiVrfIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionAfiSafiVrfIpv6Prefix *ClearBgpVersionAfiSafiVrfIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionAfiSafiVrfIpv6Prefix *ClearBgpVersionAfiSafiVrfIpv6Prefix) SetParent(parent types.Entity) { clearBgpVersionAfiSafiVrfIpv6Prefix.parent = parent }

func (clearBgpVersionAfiSafiVrfIpv6Prefix *ClearBgpVersionAfiSafiVrfIpv6Prefix) GetParent() types.Entity { return clearBgpVersionAfiSafiVrfIpv6Prefix.parent }

func (clearBgpVersionAfiSafiVrfIpv6Prefix *ClearBgpVersionAfiSafiVrfIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionAfiSafiVrfIpv6Prefix_Input
type ClearBgpVersionAfiSafiVrfIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpVersionAfiSafiVrfIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionAfiSafiVrfIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionAfiSafiVrfIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpVersionAfiSafiVrfIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionAfiSafiVrfIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionAfiSafiVrfIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionAfiSafiVrfIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpVersionAfiSafiVrfIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionAfiSafiVrfIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionAfiSafiVrfIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionAfiSafiVrfIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionAfiSafiVrfIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionAfiSafiVrfIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionAfiSafiVrfIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionAfiSafiVrfIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-version-afi-safi-vrf-ipv6-prefix" }

// ClearBgpVersionVrfIpAddrIpNetmask
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfIpAddrIpNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfIpAddrIpNetmask_Input
}

func (clearBgpVersionVrfIpAddrIpNetmask *ClearBgpVersionVrfIpAddrIpNetmask) GetFilter() yfilter.YFilter { return clearBgpVersionVrfIpAddrIpNetmask.YFilter }

func (clearBgpVersionVrfIpAddrIpNetmask *ClearBgpVersionVrfIpAddrIpNetmask) SetFilter(yf yfilter.YFilter) { clearBgpVersionVrfIpAddrIpNetmask.YFilter = yf }

func (clearBgpVersionVrfIpAddrIpNetmask *ClearBgpVersionVrfIpAddrIpNetmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionVrfIpAddrIpNetmask *ClearBgpVersionVrfIpAddrIpNetmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr-ip-netmask"
}

func (clearBgpVersionVrfIpAddrIpNetmask *ClearBgpVersionVrfIpAddrIpNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionVrfIpAddrIpNetmask.Input
    }
    return nil
}

func (clearBgpVersionVrfIpAddrIpNetmask *ClearBgpVersionVrfIpAddrIpNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionVrfIpAddrIpNetmask.Input
    return children
}

func (clearBgpVersionVrfIpAddrIpNetmask *ClearBgpVersionVrfIpAddrIpNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionVrfIpAddrIpNetmask *ClearBgpVersionVrfIpAddrIpNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionVrfIpAddrIpNetmask *ClearBgpVersionVrfIpAddrIpNetmask) GetYangName() string { return "clear-bgp-version-vrf-ip-addr-ip-netmask" }

func (clearBgpVersionVrfIpAddrIpNetmask *ClearBgpVersionVrfIpAddrIpNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionVrfIpAddrIpNetmask *ClearBgpVersionVrfIpAddrIpNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionVrfIpAddrIpNetmask *ClearBgpVersionVrfIpAddrIpNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionVrfIpAddrIpNetmask *ClearBgpVersionVrfIpAddrIpNetmask) SetParent(parent types.Entity) { clearBgpVersionVrfIpAddrIpNetmask.parent = parent }

func (clearBgpVersionVrfIpAddrIpNetmask *ClearBgpVersionVrfIpAddrIpNetmask) GetParent() types.Entity { return clearBgpVersionVrfIpAddrIpNetmask.parent }

func (clearBgpVersionVrfIpAddrIpNetmask *ClearBgpVersionVrfIpAddrIpNetmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionVrfIpAddrIpNetmask_Input
type ClearBgpVersionVrfIpAddrIpNetmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // Mask. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpNetmask interface{}
}

func (input *ClearBgpVersionVrfIpAddrIpNetmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionVrfIpAddrIpNetmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionVrfIpAddrIpNetmask_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ip-netmask" { return "IpNetmask" }
    return ""
}

func (input *ClearBgpVersionVrfIpAddrIpNetmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionVrfIpAddrIpNetmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionVrfIpAddrIpNetmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionVrfIpAddrIpNetmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    leafs["ip-netmask"] = input.IpNetmask
    return leafs
}

func (input *ClearBgpVersionVrfIpAddrIpNetmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionVrfIpAddrIpNetmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionVrfIpAddrIpNetmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionVrfIpAddrIpNetmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionVrfIpAddrIpNetmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionVrfIpAddrIpNetmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionVrfIpAddrIpNetmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionVrfIpAddrIpNetmask_Input) GetParentYangName() string { return "clear-bgp-version-vrf-ip-addr-ip-netmask" }

// ClearBgpVersionVrfIpAddr
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfIpAddr_Input
}

func (clearBgpVersionVrfIpAddr *ClearBgpVersionVrfIpAddr) GetFilter() yfilter.YFilter { return clearBgpVersionVrfIpAddr.YFilter }

func (clearBgpVersionVrfIpAddr *ClearBgpVersionVrfIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpVersionVrfIpAddr.YFilter = yf }

func (clearBgpVersionVrfIpAddr *ClearBgpVersionVrfIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionVrfIpAddr *ClearBgpVersionVrfIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-addr"
}

func (clearBgpVersionVrfIpAddr *ClearBgpVersionVrfIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionVrfIpAddr.Input
    }
    return nil
}

func (clearBgpVersionVrfIpAddr *ClearBgpVersionVrfIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionVrfIpAddr.Input
    return children
}

func (clearBgpVersionVrfIpAddr *ClearBgpVersionVrfIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionVrfIpAddr *ClearBgpVersionVrfIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionVrfIpAddr *ClearBgpVersionVrfIpAddr) GetYangName() string { return "clear-bgp-version-vrf-ip-addr" }

func (clearBgpVersionVrfIpAddr *ClearBgpVersionVrfIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionVrfIpAddr *ClearBgpVersionVrfIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionVrfIpAddr *ClearBgpVersionVrfIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionVrfIpAddr *ClearBgpVersionVrfIpAddr) SetParent(parent types.Entity) { clearBgpVersionVrfIpAddr.parent = parent }

func (clearBgpVersionVrfIpAddr *ClearBgpVersionVrfIpAddr) GetParent() types.Entity { return clearBgpVersionVrfIpAddr.parent }

func (clearBgpVersionVrfIpAddr *ClearBgpVersionVrfIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionVrfIpAddr_Input
type ClearBgpVersionVrfIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVersionVrfIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionVrfIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionVrfIpAddr_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVersionVrfIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionVrfIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionVrfIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionVrfIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVersionVrfIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionVrfIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionVrfIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionVrfIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionVrfIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionVrfIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionVrfIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionVrfIpAddr_Input) GetParentYangName() string { return "clear-bgp-version-vrf-ip-addr" }

// ClearBgpVersionVrfIpPrefix
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfIpPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfIpPrefix_Input
}

func (clearBgpVersionVrfIpPrefix *ClearBgpVersionVrfIpPrefix) GetFilter() yfilter.YFilter { return clearBgpVersionVrfIpPrefix.YFilter }

func (clearBgpVersionVrfIpPrefix *ClearBgpVersionVrfIpPrefix) SetFilter(yf yfilter.YFilter) { clearBgpVersionVrfIpPrefix.YFilter = yf }

func (clearBgpVersionVrfIpPrefix *ClearBgpVersionVrfIpPrefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionVrfIpPrefix *ClearBgpVersionVrfIpPrefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-ip-prefix"
}

func (clearBgpVersionVrfIpPrefix *ClearBgpVersionVrfIpPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionVrfIpPrefix.Input
    }
    return nil
}

func (clearBgpVersionVrfIpPrefix *ClearBgpVersionVrfIpPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionVrfIpPrefix.Input
    return children
}

func (clearBgpVersionVrfIpPrefix *ClearBgpVersionVrfIpPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionVrfIpPrefix *ClearBgpVersionVrfIpPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionVrfIpPrefix *ClearBgpVersionVrfIpPrefix) GetYangName() string { return "clear-bgp-version-vrf-ip-prefix" }

func (clearBgpVersionVrfIpPrefix *ClearBgpVersionVrfIpPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionVrfIpPrefix *ClearBgpVersionVrfIpPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionVrfIpPrefix *ClearBgpVersionVrfIpPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionVrfIpPrefix *ClearBgpVersionVrfIpPrefix) SetParent(parent types.Entity) { clearBgpVersionVrfIpPrefix.parent = parent }

func (clearBgpVersionVrfIpPrefix *ClearBgpVersionVrfIpPrefix) GetParent() types.Entity { return clearBgpVersionVrfIpPrefix.parent }

func (clearBgpVersionVrfIpPrefix *ClearBgpVersionVrfIpPrefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionVrfIpPrefix_Input
type ClearBgpVersionVrfIpPrefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Network and masklength. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
    // This attribute is mandatory..
    IpPrefix interface{}
}

func (input *ClearBgpVersionVrfIpPrefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionVrfIpPrefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionVrfIpPrefix_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-prefix" { return "IpPrefix" }
    return ""
}

func (input *ClearBgpVersionVrfIpPrefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionVrfIpPrefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionVrfIpPrefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionVrfIpPrefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-prefix"] = input.IpPrefix
    return leafs
}

func (input *ClearBgpVersionVrfIpPrefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionVrfIpPrefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionVrfIpPrefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionVrfIpPrefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionVrfIpPrefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionVrfIpPrefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionVrfIpPrefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionVrfIpPrefix_Input) GetParentYangName() string { return "clear-bgp-version-vrf-ip-prefix" }

// ClearBgpVersionVrfAfiSafiIpv4Prefix
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfAfiSafiIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiIpv4Prefix_Input
}

func (clearBgpVersionVrfAfiSafiIpv4Prefix *ClearBgpVersionVrfAfiSafiIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpVersionVrfAfiSafiIpv4Prefix.YFilter }

func (clearBgpVersionVrfAfiSafiIpv4Prefix *ClearBgpVersionVrfAfiSafiIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpVersionVrfAfiSafiIpv4Prefix.YFilter = yf }

func (clearBgpVersionVrfAfiSafiIpv4Prefix *ClearBgpVersionVrfAfiSafiIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionVrfAfiSafiIpv4Prefix *ClearBgpVersionVrfAfiSafiIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-prefix"
}

func (clearBgpVersionVrfAfiSafiIpv4Prefix *ClearBgpVersionVrfAfiSafiIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionVrfAfiSafiIpv4Prefix.Input
    }
    return nil
}

func (clearBgpVersionVrfAfiSafiIpv4Prefix *ClearBgpVersionVrfAfiSafiIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionVrfAfiSafiIpv4Prefix.Input
    return children
}

func (clearBgpVersionVrfAfiSafiIpv4Prefix *ClearBgpVersionVrfAfiSafiIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionVrfAfiSafiIpv4Prefix *ClearBgpVersionVrfAfiSafiIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionVrfAfiSafiIpv4Prefix *ClearBgpVersionVrfAfiSafiIpv4Prefix) GetYangName() string { return "clear-bgp-version-vrf-afi-safi-ipv4-prefix" }

func (clearBgpVersionVrfAfiSafiIpv4Prefix *ClearBgpVersionVrfAfiSafiIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionVrfAfiSafiIpv4Prefix *ClearBgpVersionVrfAfiSafiIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionVrfAfiSafiIpv4Prefix *ClearBgpVersionVrfAfiSafiIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionVrfAfiSafiIpv4Prefix *ClearBgpVersionVrfAfiSafiIpv4Prefix) SetParent(parent types.Entity) { clearBgpVersionVrfAfiSafiIpv4Prefix.parent = parent }

func (clearBgpVersionVrfAfiSafiIpv4Prefix *ClearBgpVersionVrfAfiSafiIpv4Prefix) GetParent() types.Entity { return clearBgpVersionVrfAfiSafiIpv4Prefix.parent }

func (clearBgpVersionVrfAfiSafiIpv4Prefix *ClearBgpVersionVrfAfiSafiIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionVrfAfiSafiIpv4Prefix_Input
type ClearBgpVersionVrfAfiSafiIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Fspec IPv4 Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpVersionVrfAfiSafiIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionVrfAfiSafiIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionVrfAfiSafiIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpVersionVrfAfiSafiIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionVrfAfiSafiIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionVrfAfiSafiIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionVrfAfiSafiIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpVersionVrfAfiSafiIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionVrfAfiSafiIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionVrfAfiSafiIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionVrfAfiSafiIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionVrfAfiSafiIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionVrfAfiSafiIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionVrfAfiSafiIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionVrfAfiSafiIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-version-vrf-afi-safi-ipv4-prefix" }

// ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input
}

func (clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.YFilter }

func (clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.YFilter = yf }

func (clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask"
}

func (clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.Input
    return children
}

func (clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask) GetYangName() string { return "clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask" }

func (clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask) SetParent(parent types.Entity) { clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.parent = parent }

func (clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask) GetParent() types.Entity { return clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask.parent }

func (clearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input
type ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}

    // IPv4 mask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-addr"] = input.Ipv4Addr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionVrfAfiSafiIpv4AddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-version-vrf-afi-safi-ipv4-addr-ipv4-mask" }

// ClearBgpVersionVrfAfiSafiIpv4Addr
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfAfiSafiIpv4Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiIpv4Addr_Input
}

func (clearBgpVersionVrfAfiSafiIpv4Addr *ClearBgpVersionVrfAfiSafiIpv4Addr) GetFilter() yfilter.YFilter { return clearBgpVersionVrfAfiSafiIpv4Addr.YFilter }

func (clearBgpVersionVrfAfiSafiIpv4Addr *ClearBgpVersionVrfAfiSafiIpv4Addr) SetFilter(yf yfilter.YFilter) { clearBgpVersionVrfAfiSafiIpv4Addr.YFilter = yf }

func (clearBgpVersionVrfAfiSafiIpv4Addr *ClearBgpVersionVrfAfiSafiIpv4Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionVrfAfiSafiIpv4Addr *ClearBgpVersionVrfAfiSafiIpv4Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv4-addr"
}

func (clearBgpVersionVrfAfiSafiIpv4Addr *ClearBgpVersionVrfAfiSafiIpv4Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionVrfAfiSafiIpv4Addr.Input
    }
    return nil
}

func (clearBgpVersionVrfAfiSafiIpv4Addr *ClearBgpVersionVrfAfiSafiIpv4Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionVrfAfiSafiIpv4Addr.Input
    return children
}

func (clearBgpVersionVrfAfiSafiIpv4Addr *ClearBgpVersionVrfAfiSafiIpv4Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionVrfAfiSafiIpv4Addr *ClearBgpVersionVrfAfiSafiIpv4Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionVrfAfiSafiIpv4Addr *ClearBgpVersionVrfAfiSafiIpv4Addr) GetYangName() string { return "clear-bgp-version-vrf-afi-safi-ipv4-addr" }

func (clearBgpVersionVrfAfiSafiIpv4Addr *ClearBgpVersionVrfAfiSafiIpv4Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionVrfAfiSafiIpv4Addr *ClearBgpVersionVrfAfiSafiIpv4Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionVrfAfiSafiIpv4Addr *ClearBgpVersionVrfAfiSafiIpv4Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionVrfAfiSafiIpv4Addr *ClearBgpVersionVrfAfiSafiIpv4Addr) SetParent(parent types.Entity) { clearBgpVersionVrfAfiSafiIpv4Addr.parent = parent }

func (clearBgpVersionVrfAfiSafiIpv4Addr *ClearBgpVersionVrfAfiSafiIpv4Addr) GetParent() types.Entity { return clearBgpVersionVrfAfiSafiIpv4Addr.parent }

func (clearBgpVersionVrfAfiSafiIpv4Addr *ClearBgpVersionVrfAfiSafiIpv4Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionVrfAfiSafiIpv4Addr_Input
type ClearBgpVersionVrfAfiSafiIpv4Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 network. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Addr interface{}
}

func (input *ClearBgpVersionVrfAfiSafiIpv4Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionVrfAfiSafiIpv4Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionVrfAfiSafiIpv4Addr_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-addr" { return "Ipv4Addr" }
    return ""
}

func (input *ClearBgpVersionVrfAfiSafiIpv4Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionVrfAfiSafiIpv4Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionVrfAfiSafiIpv4Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionVrfAfiSafiIpv4Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-addr"] = input.Ipv4Addr
    return leafs
}

func (input *ClearBgpVersionVrfAfiSafiIpv4Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionVrfAfiSafiIpv4Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionVrfAfiSafiIpv4Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionVrfAfiSafiIpv4Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionVrfAfiSafiIpv4Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionVrfAfiSafiIpv4Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionVrfAfiSafiIpv4Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionVrfAfiSafiIpv4Addr_Input) GetParentYangName() string { return "clear-bgp-version-vrf-afi-safi-ipv4-addr" }

// ClearBgpVersionVrfAfiSafiNetwork
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfAfiSafiNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiNetwork_Input
}

func (clearBgpVersionVrfAfiSafiNetwork *ClearBgpVersionVrfAfiSafiNetwork) GetFilter() yfilter.YFilter { return clearBgpVersionVrfAfiSafiNetwork.YFilter }

func (clearBgpVersionVrfAfiSafiNetwork *ClearBgpVersionVrfAfiSafiNetwork) SetFilter(yf yfilter.YFilter) { clearBgpVersionVrfAfiSafiNetwork.YFilter = yf }

func (clearBgpVersionVrfAfiSafiNetwork *ClearBgpVersionVrfAfiSafiNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionVrfAfiSafiNetwork *ClearBgpVersionVrfAfiSafiNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-network"
}

func (clearBgpVersionVrfAfiSafiNetwork *ClearBgpVersionVrfAfiSafiNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionVrfAfiSafiNetwork.Input
    }
    return nil
}

func (clearBgpVersionVrfAfiSafiNetwork *ClearBgpVersionVrfAfiSafiNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionVrfAfiSafiNetwork.Input
    return children
}

func (clearBgpVersionVrfAfiSafiNetwork *ClearBgpVersionVrfAfiSafiNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionVrfAfiSafiNetwork *ClearBgpVersionVrfAfiSafiNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionVrfAfiSafiNetwork *ClearBgpVersionVrfAfiSafiNetwork) GetYangName() string { return "clear-bgp-version-vrf-afi-safi-network" }

func (clearBgpVersionVrfAfiSafiNetwork *ClearBgpVersionVrfAfiSafiNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionVrfAfiSafiNetwork *ClearBgpVersionVrfAfiSafiNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionVrfAfiSafiNetwork *ClearBgpVersionVrfAfiSafiNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionVrfAfiSafiNetwork *ClearBgpVersionVrfAfiSafiNetwork) SetParent(parent types.Entity) { clearBgpVersionVrfAfiSafiNetwork.parent = parent }

func (clearBgpVersionVrfAfiSafiNetwork *ClearBgpVersionVrfAfiSafiNetwork) GetParent() types.Entity { return clearBgpVersionVrfAfiSafiNetwork.parent }

func (clearBgpVersionVrfAfiSafiNetwork *ClearBgpVersionVrfAfiSafiNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionVrfAfiSafiNetwork_Input
type ClearBgpVersionVrfAfiSafiNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpVersionVrfAfiSafiNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionVrfAfiSafiNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionVrfAfiSafiNetwork_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpVersionVrfAfiSafiNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionVrfAfiSafiNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionVrfAfiSafiNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionVrfAfiSafiNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpVersionVrfAfiSafiNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionVrfAfiSafiNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionVrfAfiSafiNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionVrfAfiSafiNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionVrfAfiSafiNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionVrfAfiSafiNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionVrfAfiSafiNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionVrfAfiSafiNetwork_Input) GetParentYangName() string { return "clear-bgp-version-vrf-afi-safi-network" }

// ClearBgpVersionVrfAfiSafiRdNetwork
// clear BGP prefix version.
// Specify a VRF.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionVrfAfiSafiRdNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiRdNetwork_Input
}

func (clearBgpVersionVrfAfiSafiRdNetwork *ClearBgpVersionVrfAfiSafiRdNetwork) GetFilter() yfilter.YFilter { return clearBgpVersionVrfAfiSafiRdNetwork.YFilter }

func (clearBgpVersionVrfAfiSafiRdNetwork *ClearBgpVersionVrfAfiSafiRdNetwork) SetFilter(yf yfilter.YFilter) { clearBgpVersionVrfAfiSafiRdNetwork.YFilter = yf }

func (clearBgpVersionVrfAfiSafiRdNetwork *ClearBgpVersionVrfAfiSafiRdNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionVrfAfiSafiRdNetwork *ClearBgpVersionVrfAfiSafiRdNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd-network"
}

func (clearBgpVersionVrfAfiSafiRdNetwork *ClearBgpVersionVrfAfiSafiRdNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionVrfAfiSafiRdNetwork.Input
    }
    return nil
}

func (clearBgpVersionVrfAfiSafiRdNetwork *ClearBgpVersionVrfAfiSafiRdNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionVrfAfiSafiRdNetwork.Input
    return children
}

func (clearBgpVersionVrfAfiSafiRdNetwork *ClearBgpVersionVrfAfiSafiRdNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionVrfAfiSafiRdNetwork *ClearBgpVersionVrfAfiSafiRdNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionVrfAfiSafiRdNetwork *ClearBgpVersionVrfAfiSafiRdNetwork) GetYangName() string { return "clear-bgp-version-vrf-afi-safi-rd-network" }

func (clearBgpVersionVrfAfiSafiRdNetwork *ClearBgpVersionVrfAfiSafiRdNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionVrfAfiSafiRdNetwork *ClearBgpVersionVrfAfiSafiRdNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionVrfAfiSafiRdNetwork *ClearBgpVersionVrfAfiSafiRdNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionVrfAfiSafiRdNetwork *ClearBgpVersionVrfAfiSafiRdNetwork) SetParent(parent types.Entity) { clearBgpVersionVrfAfiSafiRdNetwork.parent = parent }

func (clearBgpVersionVrfAfiSafiRdNetwork *ClearBgpVersionVrfAfiSafiRdNetwork) GetParent() types.Entity { return clearBgpVersionVrfAfiSafiRdNetwork.parent }

func (clearBgpVersionVrfAfiSafiRdNetwork *ClearBgpVersionVrfAfiSafiRdNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionVrfAfiSafiRdNetwork_Input
type ClearBgpVersionVrfAfiSafiRdNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpVersionVrfAfiSafiRdNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionVrfAfiSafiRdNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionVrfAfiSafiRdNetwork_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpVersionVrfAfiSafiRdNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionVrfAfiSafiRdNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionVrfAfiSafiRdNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionVrfAfiSafiRdNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpVersionVrfAfiSafiRdNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionVrfAfiSafiRdNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionVrfAfiSafiRdNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionVrfAfiSafiRdNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionVrfAfiSafiRdNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionVrfAfiSafiRdNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionVrfAfiSafiRdNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionVrfAfiSafiRdNetwork_Input) GetParentYangName() string { return "clear-bgp-version-vrf-afi-safi-rd-network" }

// ClearBgpVersionVrfAfiSafiVrfNetwork
// clear BGP prefix version.
// Specify a VRF.
// Display routes for a specified VRF.
// 
type ClearBgpVersionVrfAfiSafiVrfNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiVrfNetwork_Input
}

func (clearBgpVersionVrfAfiSafiVrfNetwork *ClearBgpVersionVrfAfiSafiVrfNetwork) GetFilter() yfilter.YFilter { return clearBgpVersionVrfAfiSafiVrfNetwork.YFilter }

func (clearBgpVersionVrfAfiSafiVrfNetwork *ClearBgpVersionVrfAfiSafiVrfNetwork) SetFilter(yf yfilter.YFilter) { clearBgpVersionVrfAfiSafiVrfNetwork.YFilter = yf }

func (clearBgpVersionVrfAfiSafiVrfNetwork *ClearBgpVersionVrfAfiSafiVrfNetwork) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionVrfAfiSafiVrfNetwork *ClearBgpVersionVrfAfiSafiVrfNetwork) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf-network"
}

func (clearBgpVersionVrfAfiSafiVrfNetwork *ClearBgpVersionVrfAfiSafiVrfNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionVrfAfiSafiVrfNetwork.Input
    }
    return nil
}

func (clearBgpVersionVrfAfiSafiVrfNetwork *ClearBgpVersionVrfAfiSafiVrfNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionVrfAfiSafiVrfNetwork.Input
    return children
}

func (clearBgpVersionVrfAfiSafiVrfNetwork *ClearBgpVersionVrfAfiSafiVrfNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionVrfAfiSafiVrfNetwork *ClearBgpVersionVrfAfiSafiVrfNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionVrfAfiSafiVrfNetwork *ClearBgpVersionVrfAfiSafiVrfNetwork) GetYangName() string { return "clear-bgp-version-vrf-afi-safi-vrf-network" }

func (clearBgpVersionVrfAfiSafiVrfNetwork *ClearBgpVersionVrfAfiSafiVrfNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionVrfAfiSafiVrfNetwork *ClearBgpVersionVrfAfiSafiVrfNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionVrfAfiSafiVrfNetwork *ClearBgpVersionVrfAfiSafiVrfNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionVrfAfiSafiVrfNetwork *ClearBgpVersionVrfAfiSafiVrfNetwork) SetParent(parent types.Entity) { clearBgpVersionVrfAfiSafiVrfNetwork.parent = parent }

func (clearBgpVersionVrfAfiSafiVrfNetwork *ClearBgpVersionVrfAfiSafiVrfNetwork) GetParent() types.Entity { return clearBgpVersionVrfAfiSafiVrfNetwork.parent }

func (clearBgpVersionVrfAfiSafiVrfNetwork *ClearBgpVersionVrfAfiSafiVrfNetwork) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionVrfAfiSafiVrfNetwork_Input
type ClearBgpVersionVrfAfiSafiVrfNetwork_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}

    // Address family modifier specific network. The type is string. This
    // attribute is mandatory.
    Network interface{}
}

func (input *ClearBgpVersionVrfAfiSafiVrfNetwork_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionVrfAfiSafiVrfNetwork_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionVrfAfiSafiVrfNetwork_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "network" { return "Network" }
    return ""
}

func (input *ClearBgpVersionVrfAfiSafiVrfNetwork_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionVrfAfiSafiVrfNetwork_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionVrfAfiSafiVrfNetwork_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionVrfAfiSafiVrfNetwork_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    leafs["network"] = input.Network
    return leafs
}

func (input *ClearBgpVersionVrfAfiSafiVrfNetwork_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionVrfAfiSafiVrfNetwork_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionVrfAfiSafiVrfNetwork_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionVrfAfiSafiVrfNetwork_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionVrfAfiSafiVrfNetwork_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionVrfAfiSafiVrfNetwork_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionVrfAfiSafiVrfNetwork_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionVrfAfiSafiVrfNetwork_Input) GetParentYangName() string { return "clear-bgp-version-vrf-afi-safi-vrf-network" }

// ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input
}

func (clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetFilter() yfilter.YFilter { return clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.YFilter }

func (clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask) SetFilter(yf yfilter.YFilter) { clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.YFilter = yf }

func (clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask"
}

func (clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input
    }
    return nil
}

func (clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.Input
    return children
}

func (clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetYangName() string { return "clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask" }

func (clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask) SetParent(parent types.Entity) { clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.parent = parent }

func (clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetParent() types.Entity { return clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask.parent }

func (clearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input
type ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}

    // IPv6 mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Netmask interface{}
}

func (input *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    if yname == "ipv6-netmask" { return "Ipv6Netmask" }
    return ""
}

func (input *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-addr"] = input.Ipv6Addr
    leafs["ipv6-netmask"] = input.Ipv6Netmask
    return leafs
}

func (input *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionVrfAfiSafiIpv6AddrIpv6Netmask_Input) GetParentYangName() string { return "clear-bgp-version-vrf-afi-safi-ipv6-addr-ipv6-netmask" }

// ClearBgpVersionVrfAfiSafiIpv6Addr
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfAfiSafiIpv6Addr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiIpv6Addr_Input
}

func (clearBgpVersionVrfAfiSafiIpv6Addr *ClearBgpVersionVrfAfiSafiIpv6Addr) GetFilter() yfilter.YFilter { return clearBgpVersionVrfAfiSafiIpv6Addr.YFilter }

func (clearBgpVersionVrfAfiSafiIpv6Addr *ClearBgpVersionVrfAfiSafiIpv6Addr) SetFilter(yf yfilter.YFilter) { clearBgpVersionVrfAfiSafiIpv6Addr.YFilter = yf }

func (clearBgpVersionVrfAfiSafiIpv6Addr *ClearBgpVersionVrfAfiSafiIpv6Addr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionVrfAfiSafiIpv6Addr *ClearBgpVersionVrfAfiSafiIpv6Addr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-addr"
}

func (clearBgpVersionVrfAfiSafiIpv6Addr *ClearBgpVersionVrfAfiSafiIpv6Addr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionVrfAfiSafiIpv6Addr.Input
    }
    return nil
}

func (clearBgpVersionVrfAfiSafiIpv6Addr *ClearBgpVersionVrfAfiSafiIpv6Addr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionVrfAfiSafiIpv6Addr.Input
    return children
}

func (clearBgpVersionVrfAfiSafiIpv6Addr *ClearBgpVersionVrfAfiSafiIpv6Addr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionVrfAfiSafiIpv6Addr *ClearBgpVersionVrfAfiSafiIpv6Addr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionVrfAfiSafiIpv6Addr *ClearBgpVersionVrfAfiSafiIpv6Addr) GetYangName() string { return "clear-bgp-version-vrf-afi-safi-ipv6-addr" }

func (clearBgpVersionVrfAfiSafiIpv6Addr *ClearBgpVersionVrfAfiSafiIpv6Addr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionVrfAfiSafiIpv6Addr *ClearBgpVersionVrfAfiSafiIpv6Addr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionVrfAfiSafiIpv6Addr *ClearBgpVersionVrfAfiSafiIpv6Addr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionVrfAfiSafiIpv6Addr *ClearBgpVersionVrfAfiSafiIpv6Addr) SetParent(parent types.Entity) { clearBgpVersionVrfAfiSafiIpv6Addr.parent = parent }

func (clearBgpVersionVrfAfiSafiIpv6Addr *ClearBgpVersionVrfAfiSafiIpv6Addr) GetParent() types.Entity { return clearBgpVersionVrfAfiSafiIpv6Addr.parent }

func (clearBgpVersionVrfAfiSafiIpv6Addr *ClearBgpVersionVrfAfiSafiIpv6Addr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionVrfAfiSafiIpv6Addr_Input
type ClearBgpVersionVrfAfiSafiIpv6Addr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv6Addr interface{}
}

func (input *ClearBgpVersionVrfAfiSafiIpv6Addr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionVrfAfiSafiIpv6Addr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionVrfAfiSafiIpv6Addr_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-addr" { return "Ipv6Addr" }
    return ""
}

func (input *ClearBgpVersionVrfAfiSafiIpv6Addr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionVrfAfiSafiIpv6Addr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionVrfAfiSafiIpv6Addr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionVrfAfiSafiIpv6Addr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-addr"] = input.Ipv6Addr
    return leafs
}

func (input *ClearBgpVersionVrfAfiSafiIpv6Addr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionVrfAfiSafiIpv6Addr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionVrfAfiSafiIpv6Addr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionVrfAfiSafiIpv6Addr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionVrfAfiSafiIpv6Addr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionVrfAfiSafiIpv6Addr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionVrfAfiSafiIpv6Addr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionVrfAfiSafiIpv6Addr_Input) GetParentYangName() string { return "clear-bgp-version-vrf-afi-safi-ipv6-addr" }

// ClearBgpVersionVrfAfiSafiIpv6Prefix
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfAfiSafiIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiIpv6Prefix_Input
}

func (clearBgpVersionVrfAfiSafiIpv6Prefix *ClearBgpVersionVrfAfiSafiIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpVersionVrfAfiSafiIpv6Prefix.YFilter }

func (clearBgpVersionVrfAfiSafiIpv6Prefix *ClearBgpVersionVrfAfiSafiIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpVersionVrfAfiSafiIpv6Prefix.YFilter = yf }

func (clearBgpVersionVrfAfiSafiIpv6Prefix *ClearBgpVersionVrfAfiSafiIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionVrfAfiSafiIpv6Prefix *ClearBgpVersionVrfAfiSafiIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-ipv6-prefix"
}

func (clearBgpVersionVrfAfiSafiIpv6Prefix *ClearBgpVersionVrfAfiSafiIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionVrfAfiSafiIpv6Prefix.Input
    }
    return nil
}

func (clearBgpVersionVrfAfiSafiIpv6Prefix *ClearBgpVersionVrfAfiSafiIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionVrfAfiSafiIpv6Prefix.Input
    return children
}

func (clearBgpVersionVrfAfiSafiIpv6Prefix *ClearBgpVersionVrfAfiSafiIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionVrfAfiSafiIpv6Prefix *ClearBgpVersionVrfAfiSafiIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionVrfAfiSafiIpv6Prefix *ClearBgpVersionVrfAfiSafiIpv6Prefix) GetYangName() string { return "clear-bgp-version-vrf-afi-safi-ipv6-prefix" }

func (clearBgpVersionVrfAfiSafiIpv6Prefix *ClearBgpVersionVrfAfiSafiIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionVrfAfiSafiIpv6Prefix *ClearBgpVersionVrfAfiSafiIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionVrfAfiSafiIpv6Prefix *ClearBgpVersionVrfAfiSafiIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionVrfAfiSafiIpv6Prefix *ClearBgpVersionVrfAfiSafiIpv6Prefix) SetParent(parent types.Entity) { clearBgpVersionVrfAfiSafiIpv6Prefix.parent = parent }

func (clearBgpVersionVrfAfiSafiIpv6Prefix *ClearBgpVersionVrfAfiSafiIpv6Prefix) GetParent() types.Entity { return clearBgpVersionVrfAfiSafiIpv6Prefix.parent }

func (clearBgpVersionVrfAfiSafiIpv6Prefix *ClearBgpVersionVrfAfiSafiIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionVrfAfiSafiIpv6Prefix_Input
type ClearBgpVersionVrfAfiSafiIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 network and masklength. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpVersionVrfAfiSafiIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionVrfAfiSafiIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionVrfAfiSafiIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpVersionVrfAfiSafiIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionVrfAfiSafiIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionVrfAfiSafiIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionVrfAfiSafiIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpVersionVrfAfiSafiIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionVrfAfiSafiIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionVrfAfiSafiIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionVrfAfiSafiIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionVrfAfiSafiIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionVrfAfiSafiIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionVrfAfiSafiIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionVrfAfiSafiIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-version-vrf-afi-safi-ipv6-prefix" }

// ClearBgpVersionVrfAfiSafiRd
// clear BGP prefix version.
// Specify a VRF.
// Display routes with a specific route distinguisher.
// 
type ClearBgpVersionVrfAfiSafiRd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiRd_Input
}

func (clearBgpVersionVrfAfiSafiRd *ClearBgpVersionVrfAfiSafiRd) GetFilter() yfilter.YFilter { return clearBgpVersionVrfAfiSafiRd.YFilter }

func (clearBgpVersionVrfAfiSafiRd *ClearBgpVersionVrfAfiSafiRd) SetFilter(yf yfilter.YFilter) { clearBgpVersionVrfAfiSafiRd.YFilter = yf }

func (clearBgpVersionVrfAfiSafiRd *ClearBgpVersionVrfAfiSafiRd) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionVrfAfiSafiRd *ClearBgpVersionVrfAfiSafiRd) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-rd"
}

func (clearBgpVersionVrfAfiSafiRd *ClearBgpVersionVrfAfiSafiRd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionVrfAfiSafiRd.Input
    }
    return nil
}

func (clearBgpVersionVrfAfiSafiRd *ClearBgpVersionVrfAfiSafiRd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionVrfAfiSafiRd.Input
    return children
}

func (clearBgpVersionVrfAfiSafiRd *ClearBgpVersionVrfAfiSafiRd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionVrfAfiSafiRd *ClearBgpVersionVrfAfiSafiRd) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionVrfAfiSafiRd *ClearBgpVersionVrfAfiSafiRd) GetYangName() string { return "clear-bgp-version-vrf-afi-safi-rd" }

func (clearBgpVersionVrfAfiSafiRd *ClearBgpVersionVrfAfiSafiRd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionVrfAfiSafiRd *ClearBgpVersionVrfAfiSafiRd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionVrfAfiSafiRd *ClearBgpVersionVrfAfiSafiRd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionVrfAfiSafiRd *ClearBgpVersionVrfAfiSafiRd) SetParent(parent types.Entity) { clearBgpVersionVrfAfiSafiRd.parent = parent }

func (clearBgpVersionVrfAfiSafiRd *ClearBgpVersionVrfAfiSafiRd) GetParent() types.Entity { return clearBgpVersionVrfAfiSafiRd.parent }

func (clearBgpVersionVrfAfiSafiRd *ClearBgpVersionVrfAfiSafiRd) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionVrfAfiSafiRd_Input
type ClearBgpVersionVrfAfiSafiRd_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route distinguisher. The type is one of the following types: string with
    // pattern: (\d+\.\d+:\d+) This attribute is mandatory., or string with
    // pattern: (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (\d+:\d+) This attribute is mandatory., or string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(:\d+)
    // This attribute is mandatory..
    Rd interface{}
}

func (input *ClearBgpVersionVrfAfiSafiRd_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionVrfAfiSafiRd_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionVrfAfiSafiRd_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "rd" { return "Rd" }
    return ""
}

func (input *ClearBgpVersionVrfAfiSafiRd_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionVrfAfiSafiRd_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionVrfAfiSafiRd_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionVrfAfiSafiRd_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["rd"] = input.Rd
    return leafs
}

func (input *ClearBgpVersionVrfAfiSafiRd_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionVrfAfiSafiRd_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionVrfAfiSafiRd_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionVrfAfiSafiRd_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionVrfAfiSafiRd_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionVrfAfiSafiRd_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionVrfAfiSafiRd_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionVrfAfiSafiRd_Input) GetParentYangName() string { return "clear-bgp-version-vrf-afi-safi-rd" }

// ClearBgpVersionVrfAfiSafiVrf
// clear BGP prefix version.
// Specify a VRF.
// Display routes for a specified VRF.
// 
type ClearBgpVersionVrfAfiSafiVrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafiVrf_Input
}

func (clearBgpVersionVrfAfiSafiVrf *ClearBgpVersionVrfAfiSafiVrf) GetFilter() yfilter.YFilter { return clearBgpVersionVrfAfiSafiVrf.YFilter }

func (clearBgpVersionVrfAfiSafiVrf *ClearBgpVersionVrfAfiSafiVrf) SetFilter(yf yfilter.YFilter) { clearBgpVersionVrfAfiSafiVrf.YFilter = yf }

func (clearBgpVersionVrfAfiSafiVrf *ClearBgpVersionVrfAfiSafiVrf) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionVrfAfiSafiVrf *ClearBgpVersionVrfAfiSafiVrf) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi-vrf"
}

func (clearBgpVersionVrfAfiSafiVrf *ClearBgpVersionVrfAfiSafiVrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionVrfAfiSafiVrf.Input
    }
    return nil
}

func (clearBgpVersionVrfAfiSafiVrf *ClearBgpVersionVrfAfiSafiVrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionVrfAfiSafiVrf.Input
    return children
}

func (clearBgpVersionVrfAfiSafiVrf *ClearBgpVersionVrfAfiSafiVrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionVrfAfiSafiVrf *ClearBgpVersionVrfAfiSafiVrf) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionVrfAfiSafiVrf *ClearBgpVersionVrfAfiSafiVrf) GetYangName() string { return "clear-bgp-version-vrf-afi-safi-vrf" }

func (clearBgpVersionVrfAfiSafiVrf *ClearBgpVersionVrfAfiSafiVrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionVrfAfiSafiVrf *ClearBgpVersionVrfAfiSafiVrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionVrfAfiSafiVrf *ClearBgpVersionVrfAfiSafiVrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionVrfAfiSafiVrf *ClearBgpVersionVrfAfiSafiVrf) SetParent(parent types.Entity) { clearBgpVersionVrfAfiSafiVrf.parent = parent }

func (clearBgpVersionVrfAfiSafiVrf *ClearBgpVersionVrfAfiSafiVrf) GetParent() types.Entity { return clearBgpVersionVrfAfiSafiVrf.parent }

func (clearBgpVersionVrfAfiSafiVrf *ClearBgpVersionVrfAfiSafiVrf) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionVrfAfiSafiVrf_Input
type ClearBgpVersionVrfAfiSafiVrf_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // VRF name. The type is string. This attribute is mandatory.
    VrfName interface{}
}

func (input *ClearBgpVersionVrfAfiSafiVrf_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionVrfAfiSafiVrf_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionVrfAfiSafiVrf_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (input *ClearBgpVersionVrfAfiSafiVrf_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionVrfAfiSafiVrf_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionVrfAfiSafiVrf_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionVrfAfiSafiVrf_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["vrf-name"] = input.VrfName
    return leafs
}

func (input *ClearBgpVersionVrfAfiSafiVrf_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionVrfAfiSafiVrf_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionVrfAfiSafiVrf_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionVrfAfiSafiVrf_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionVrfAfiSafiVrf_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionVrfAfiSafiVrf_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionVrfAfiSafiVrf_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionVrfAfiSafiVrf_Input) GetParentYangName() string { return "clear-bgp-version-vrf-afi-safi-vrf" }

// ClearBgpVersionVrfAfiSafi
// clear BGP prefix version.
// Specify a VRF.
// 
type ClearBgpVersionVrfAfiSafi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVersionVrfAfiSafi_Input
}

func (clearBgpVersionVrfAfiSafi *ClearBgpVersionVrfAfiSafi) GetFilter() yfilter.YFilter { return clearBgpVersionVrfAfiSafi.YFilter }

func (clearBgpVersionVrfAfiSafi *ClearBgpVersionVrfAfiSafi) SetFilter(yf yfilter.YFilter) { clearBgpVersionVrfAfiSafi.YFilter = yf }

func (clearBgpVersionVrfAfiSafi *ClearBgpVersionVrfAfiSafi) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVersionVrfAfiSafi *ClearBgpVersionVrfAfiSafi) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-version-vrf-afi-safi"
}

func (clearBgpVersionVrfAfiSafi *ClearBgpVersionVrfAfiSafi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVersionVrfAfiSafi.Input
    }
    return nil
}

func (clearBgpVersionVrfAfiSafi *ClearBgpVersionVrfAfiSafi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVersionVrfAfiSafi.Input
    return children
}

func (clearBgpVersionVrfAfiSafi *ClearBgpVersionVrfAfiSafi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVersionVrfAfiSafi *ClearBgpVersionVrfAfiSafi) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVersionVrfAfiSafi *ClearBgpVersionVrfAfiSafi) GetYangName() string { return "clear-bgp-version-vrf-afi-safi" }

func (clearBgpVersionVrfAfiSafi *ClearBgpVersionVrfAfiSafi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVersionVrfAfiSafi *ClearBgpVersionVrfAfiSafi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVersionVrfAfiSafi *ClearBgpVersionVrfAfiSafi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVersionVrfAfiSafi *ClearBgpVersionVrfAfiSafi) SetParent(parent types.Entity) { clearBgpVersionVrfAfiSafi.parent = parent }

func (clearBgpVersionVrfAfiSafi *ClearBgpVersionVrfAfiSafi) GetParent() types.Entity { return clearBgpVersionVrfAfiSafi.parent }

func (clearBgpVersionVrfAfiSafi *ClearBgpVersionVrfAfiSafi) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVersionVrfAfiSafi_Input
type ClearBgpVersionVrfAfiSafi_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVersionVrfAfiSafi_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVersionVrfAfiSafi_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVersionVrfAfiSafi_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpVersionVrfAfiSafi_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVersionVrfAfiSafi_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVersionVrfAfiSafi_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVersionVrfAfiSafi_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpVersionVrfAfiSafi_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVersionVrfAfiSafi_Input) GetYangName() string { return "input" }

func (input *ClearBgpVersionVrfAfiSafi_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVersionVrfAfiSafi_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVersionVrfAfiSafi_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVersionVrfAfiSafi_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVersionVrfAfiSafi_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVersionVrfAfiSafi_Input) GetParentYangName() string { return "clear-bgp-version-vrf-afi-safi" }

// ClearBgpVrfAllGraceful
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpVrfAllGraceful struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAllGraceful_Input
}

func (clearBgpVrfAllGraceful *ClearBgpVrfAllGraceful) GetFilter() yfilter.YFilter { return clearBgpVrfAllGraceful.YFilter }

func (clearBgpVrfAllGraceful *ClearBgpVrfAllGraceful) SetFilter(yf yfilter.YFilter) { clearBgpVrfAllGraceful.YFilter = yf }

func (clearBgpVrfAllGraceful *ClearBgpVrfAllGraceful) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAllGraceful *ClearBgpVrfAllGraceful) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all-graceful"
}

func (clearBgpVrfAllGraceful *ClearBgpVrfAllGraceful) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAllGraceful.Input
    }
    return nil
}

func (clearBgpVrfAllGraceful *ClearBgpVrfAllGraceful) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAllGraceful.Input
    return children
}

func (clearBgpVrfAllGraceful *ClearBgpVrfAllGraceful) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAllGraceful *ClearBgpVrfAllGraceful) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAllGraceful *ClearBgpVrfAllGraceful) GetYangName() string { return "clear-bgp-vrf-all-graceful" }

func (clearBgpVrfAllGraceful *ClearBgpVrfAllGraceful) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAllGraceful *ClearBgpVrfAllGraceful) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAllGraceful *ClearBgpVrfAllGraceful) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAllGraceful *ClearBgpVrfAllGraceful) SetParent(parent types.Entity) { clearBgpVrfAllGraceful.parent = parent }

func (clearBgpVrfAllGraceful *ClearBgpVrfAllGraceful) GetParent() types.Entity { return clearBgpVrfAllGraceful.parent }

func (clearBgpVrfAllGraceful *ClearBgpVrfAllGraceful) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAllGraceful_Input
type ClearBgpVrfAllGraceful_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfAllGraceful_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAllGraceful_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAllGraceful_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpVrfAllGraceful_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAllGraceful_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAllGraceful_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAllGraceful_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpVrfAllGraceful_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAllGraceful_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAllGraceful_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAllGraceful_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAllGraceful_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAllGraceful_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAllGraceful_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAllGraceful_Input) GetParentYangName() string { return "clear-bgp-vrf-all-graceful" }

// ClearBgpVrfAll
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// 
type ClearBgpVrfAll struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAll_Input
}

func (clearBgpVrfAll *ClearBgpVrfAll) GetFilter() yfilter.YFilter { return clearBgpVrfAll.YFilter }

func (clearBgpVrfAll *ClearBgpVrfAll) SetFilter(yf yfilter.YFilter) { clearBgpVrfAll.YFilter = yf }

func (clearBgpVrfAll *ClearBgpVrfAll) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAll *ClearBgpVrfAll) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-all"
}

func (clearBgpVrfAll *ClearBgpVrfAll) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAll.Input
    }
    return nil
}

func (clearBgpVrfAll *ClearBgpVrfAll) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAll.Input
    return children
}

func (clearBgpVrfAll *ClearBgpVrfAll) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAll *ClearBgpVrfAll) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAll *ClearBgpVrfAll) GetYangName() string { return "clear-bgp-vrf-all" }

func (clearBgpVrfAll *ClearBgpVrfAll) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAll *ClearBgpVrfAll) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAll *ClearBgpVrfAll) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAll *ClearBgpVrfAll) SetParent(parent types.Entity) { clearBgpVrfAll.parent = parent }

func (clearBgpVrfAll *ClearBgpVrfAll) GetParent() types.Entity { return clearBgpVrfAll.parent }

func (clearBgpVrfAll *ClearBgpVrfAll) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAll_Input
type ClearBgpVrfAll_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfAll_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAll_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAll_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpVrfAll_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAll_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAll_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAll_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpVrfAll_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAll_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAll_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAll_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAll_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAll_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAll_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAll_Input) GetParentYangName() string { return "clear-bgp-vrf-all" }

// ClearBgpVrfIpAddrGraceful
// Specify a VRF.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpVrfIpAddrGraceful struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfIpAddrGraceful_Input
}

func (clearBgpVrfIpAddrGraceful *ClearBgpVrfIpAddrGraceful) GetFilter() yfilter.YFilter { return clearBgpVrfIpAddrGraceful.YFilter }

func (clearBgpVrfIpAddrGraceful *ClearBgpVrfIpAddrGraceful) SetFilter(yf yfilter.YFilter) { clearBgpVrfIpAddrGraceful.YFilter = yf }

func (clearBgpVrfIpAddrGraceful *ClearBgpVrfIpAddrGraceful) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfIpAddrGraceful *ClearBgpVrfIpAddrGraceful) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-graceful"
}

func (clearBgpVrfIpAddrGraceful *ClearBgpVrfIpAddrGraceful) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfIpAddrGraceful.Input
    }
    return nil
}

func (clearBgpVrfIpAddrGraceful *ClearBgpVrfIpAddrGraceful) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfIpAddrGraceful.Input
    return children
}

func (clearBgpVrfIpAddrGraceful *ClearBgpVrfIpAddrGraceful) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfIpAddrGraceful *ClearBgpVrfIpAddrGraceful) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfIpAddrGraceful *ClearBgpVrfIpAddrGraceful) GetYangName() string { return "clear-bgp-vrf-ip-addr-graceful" }

func (clearBgpVrfIpAddrGraceful *ClearBgpVrfIpAddrGraceful) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfIpAddrGraceful *ClearBgpVrfIpAddrGraceful) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfIpAddrGraceful *ClearBgpVrfIpAddrGraceful) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfIpAddrGraceful *ClearBgpVrfIpAddrGraceful) SetParent(parent types.Entity) { clearBgpVrfIpAddrGraceful.parent = parent }

func (clearBgpVrfIpAddrGraceful *ClearBgpVrfIpAddrGraceful) GetParent() types.Entity { return clearBgpVrfIpAddrGraceful.parent }

func (clearBgpVrfIpAddrGraceful *ClearBgpVrfIpAddrGraceful) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfIpAddrGraceful_Input
type ClearBgpVrfIpAddrGraceful_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfIpAddrGraceful_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfIpAddrGraceful_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfIpAddrGraceful_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfIpAddrGraceful_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfIpAddrGraceful_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfIpAddrGraceful_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfIpAddrGraceful_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfIpAddrGraceful_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfIpAddrGraceful_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfIpAddrGraceful_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfIpAddrGraceful_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfIpAddrGraceful_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfIpAddrGraceful_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfIpAddrGraceful_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfIpAddrGraceful_Input) GetParentYangName() string { return "clear-bgp-vrf-ip-addr-graceful" }

// ClearBgpVrfIpAddrLongLivedStale
// Specify a VRF.
// Clear long-lived-stale routes.
// 
type ClearBgpVrfIpAddrLongLivedStale struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfIpAddrLongLivedStale_Input
}

func (clearBgpVrfIpAddrLongLivedStale *ClearBgpVrfIpAddrLongLivedStale) GetFilter() yfilter.YFilter { return clearBgpVrfIpAddrLongLivedStale.YFilter }

func (clearBgpVrfIpAddrLongLivedStale *ClearBgpVrfIpAddrLongLivedStale) SetFilter(yf yfilter.YFilter) { clearBgpVrfIpAddrLongLivedStale.YFilter = yf }

func (clearBgpVrfIpAddrLongLivedStale *ClearBgpVrfIpAddrLongLivedStale) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfIpAddrLongLivedStale *ClearBgpVrfIpAddrLongLivedStale) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr-long-lived-stale"
}

func (clearBgpVrfIpAddrLongLivedStale *ClearBgpVrfIpAddrLongLivedStale) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfIpAddrLongLivedStale.Input
    }
    return nil
}

func (clearBgpVrfIpAddrLongLivedStale *ClearBgpVrfIpAddrLongLivedStale) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfIpAddrLongLivedStale.Input
    return children
}

func (clearBgpVrfIpAddrLongLivedStale *ClearBgpVrfIpAddrLongLivedStale) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfIpAddrLongLivedStale *ClearBgpVrfIpAddrLongLivedStale) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfIpAddrLongLivedStale *ClearBgpVrfIpAddrLongLivedStale) GetYangName() string { return "clear-bgp-vrf-ip-addr-long-lived-stale" }

func (clearBgpVrfIpAddrLongLivedStale *ClearBgpVrfIpAddrLongLivedStale) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfIpAddrLongLivedStale *ClearBgpVrfIpAddrLongLivedStale) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfIpAddrLongLivedStale *ClearBgpVrfIpAddrLongLivedStale) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfIpAddrLongLivedStale *ClearBgpVrfIpAddrLongLivedStale) SetParent(parent types.Entity) { clearBgpVrfIpAddrLongLivedStale.parent = parent }

func (clearBgpVrfIpAddrLongLivedStale *ClearBgpVrfIpAddrLongLivedStale) GetParent() types.Entity { return clearBgpVrfIpAddrLongLivedStale.parent }

func (clearBgpVrfIpAddrLongLivedStale *ClearBgpVrfIpAddrLongLivedStale) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfIpAddrLongLivedStale_Input
type ClearBgpVrfIpAddrLongLivedStale_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfIpAddrLongLivedStale_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfIpAddrLongLivedStale_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfIpAddrLongLivedStale_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfIpAddrLongLivedStale_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfIpAddrLongLivedStale_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfIpAddrLongLivedStale_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfIpAddrLongLivedStale_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfIpAddrLongLivedStale_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfIpAddrLongLivedStale_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfIpAddrLongLivedStale_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfIpAddrLongLivedStale_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfIpAddrLongLivedStale_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfIpAddrLongLivedStale_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfIpAddrLongLivedStale_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfIpAddrLongLivedStale_Input) GetParentYangName() string { return "clear-bgp-vrf-ip-addr-long-lived-stale" }

// ClearBgpVrfIpAddr
// Specify a VRF.
// 
type ClearBgpVrfIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfIpAddr_Input
}

func (clearBgpVrfIpAddr *ClearBgpVrfIpAddr) GetFilter() yfilter.YFilter { return clearBgpVrfIpAddr.YFilter }

func (clearBgpVrfIpAddr *ClearBgpVrfIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpVrfIpAddr.YFilter = yf }

func (clearBgpVrfIpAddr *ClearBgpVrfIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfIpAddr *ClearBgpVrfIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-ip-addr"
}

func (clearBgpVrfIpAddr *ClearBgpVrfIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfIpAddr.Input
    }
    return nil
}

func (clearBgpVrfIpAddr *ClearBgpVrfIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfIpAddr.Input
    return children
}

func (clearBgpVrfIpAddr *ClearBgpVrfIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfIpAddr *ClearBgpVrfIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfIpAddr *ClearBgpVrfIpAddr) GetYangName() string { return "clear-bgp-vrf-ip-addr" }

func (clearBgpVrfIpAddr *ClearBgpVrfIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfIpAddr *ClearBgpVrfIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfIpAddr *ClearBgpVrfIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfIpAddr *ClearBgpVrfIpAddr) SetParent(parent types.Entity) { clearBgpVrfIpAddr.parent = parent }

func (clearBgpVrfIpAddr *ClearBgpVrfIpAddr) GetParent() types.Entity { return clearBgpVrfIpAddr.parent }

func (clearBgpVrfIpAddr *ClearBgpVrfIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfIpAddr_Input
type ClearBgpVrfIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfIpAddr_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfIpAddr_Input) GetParentYangName() string { return "clear-bgp-vrf-ip-addr" }

// ClearBgpVrfAsGraceful
// Specify a VRF.
// Clear peers in a specific AS.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpVrfAsGraceful struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAsGraceful_Input
}

func (clearBgpVrfAsGraceful *ClearBgpVrfAsGraceful) GetFilter() yfilter.YFilter { return clearBgpVrfAsGraceful.YFilter }

func (clearBgpVrfAsGraceful *ClearBgpVrfAsGraceful) SetFilter(yf yfilter.YFilter) { clearBgpVrfAsGraceful.YFilter = yf }

func (clearBgpVrfAsGraceful *ClearBgpVrfAsGraceful) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAsGraceful *ClearBgpVrfAsGraceful) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as-graceful"
}

func (clearBgpVrfAsGraceful *ClearBgpVrfAsGraceful) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAsGraceful.Input
    }
    return nil
}

func (clearBgpVrfAsGraceful *ClearBgpVrfAsGraceful) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAsGraceful.Input
    return children
}

func (clearBgpVrfAsGraceful *ClearBgpVrfAsGraceful) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAsGraceful *ClearBgpVrfAsGraceful) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAsGraceful *ClearBgpVrfAsGraceful) GetYangName() string { return "clear-bgp-vrf-as-graceful" }

func (clearBgpVrfAsGraceful *ClearBgpVrfAsGraceful) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAsGraceful *ClearBgpVrfAsGraceful) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAsGraceful *ClearBgpVrfAsGraceful) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAsGraceful *ClearBgpVrfAsGraceful) SetParent(parent types.Entity) { clearBgpVrfAsGraceful.parent = parent }

func (clearBgpVrfAsGraceful *ClearBgpVrfAsGraceful) GetParent() types.Entity { return clearBgpVrfAsGraceful.parent }

func (clearBgpVrfAsGraceful *ClearBgpVrfAsGraceful) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAsGraceful_Input
type ClearBgpVrfAsGraceful_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpVrfAsGraceful_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAsGraceful_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAsGraceful_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpVrfAsGraceful_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAsGraceful_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAsGraceful_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAsGraceful_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpVrfAsGraceful_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAsGraceful_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAsGraceful_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAsGraceful_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAsGraceful_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAsGraceful_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAsGraceful_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAsGraceful_Input) GetParentYangName() string { return "clear-bgp-vrf-as-graceful" }

// ClearBgpVrfAs
// Specify a VRF.
// Clear peers in a specific AS.
// 
type ClearBgpVrfAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAs_Input
}

func (clearBgpVrfAs *ClearBgpVrfAs) GetFilter() yfilter.YFilter { return clearBgpVrfAs.YFilter }

func (clearBgpVrfAs *ClearBgpVrfAs) SetFilter(yf yfilter.YFilter) { clearBgpVrfAs.YFilter = yf }

func (clearBgpVrfAs *ClearBgpVrfAs) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAs *ClearBgpVrfAs) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-as"
}

func (clearBgpVrfAs *ClearBgpVrfAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAs.Input
    }
    return nil
}

func (clearBgpVrfAs *ClearBgpVrfAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAs.Input
    return children
}

func (clearBgpVrfAs *ClearBgpVrfAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAs *ClearBgpVrfAs) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAs *ClearBgpVrfAs) GetYangName() string { return "clear-bgp-vrf-as" }

func (clearBgpVrfAs *ClearBgpVrfAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAs *ClearBgpVrfAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAs *ClearBgpVrfAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAs *ClearBgpVrfAs) SetParent(parent types.Entity) { clearBgpVrfAs.parent = parent }

func (clearBgpVrfAs *ClearBgpVrfAs) GetParent() types.Entity { return clearBgpVrfAs.parent }

func (clearBgpVrfAs *ClearBgpVrfAs) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAs_Input
type ClearBgpVrfAs_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpVrfAs_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAs_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAs_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpVrfAs_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAs_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAs_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAs_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpVrfAs_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAs_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAs_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAs_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAs_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAs_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAs_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAs_Input) GetParentYangName() string { return "clear-bgp-vrf-as" }

// ClearBgpVrfExternalGraceful
// Specify a VRF.
// Clear all external peers.
// Clear with a hard reset and a graceful restart.
// 
type ClearBgpVrfExternalGraceful struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfExternalGraceful_Input
}

func (clearBgpVrfExternalGraceful *ClearBgpVrfExternalGraceful) GetFilter() yfilter.YFilter { return clearBgpVrfExternalGraceful.YFilter }

func (clearBgpVrfExternalGraceful *ClearBgpVrfExternalGraceful) SetFilter(yf yfilter.YFilter) { clearBgpVrfExternalGraceful.YFilter = yf }

func (clearBgpVrfExternalGraceful *ClearBgpVrfExternalGraceful) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfExternalGraceful *ClearBgpVrfExternalGraceful) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external-graceful"
}

func (clearBgpVrfExternalGraceful *ClearBgpVrfExternalGraceful) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfExternalGraceful.Input
    }
    return nil
}

func (clearBgpVrfExternalGraceful *ClearBgpVrfExternalGraceful) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfExternalGraceful.Input
    return children
}

func (clearBgpVrfExternalGraceful *ClearBgpVrfExternalGraceful) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfExternalGraceful *ClearBgpVrfExternalGraceful) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfExternalGraceful *ClearBgpVrfExternalGraceful) GetYangName() string { return "clear-bgp-vrf-external-graceful" }

func (clearBgpVrfExternalGraceful *ClearBgpVrfExternalGraceful) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfExternalGraceful *ClearBgpVrfExternalGraceful) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfExternalGraceful *ClearBgpVrfExternalGraceful) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfExternalGraceful *ClearBgpVrfExternalGraceful) SetParent(parent types.Entity) { clearBgpVrfExternalGraceful.parent = parent }

func (clearBgpVrfExternalGraceful *ClearBgpVrfExternalGraceful) GetParent() types.Entity { return clearBgpVrfExternalGraceful.parent }

func (clearBgpVrfExternalGraceful *ClearBgpVrfExternalGraceful) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfExternalGraceful_Input
type ClearBgpVrfExternalGraceful_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfExternalGraceful_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfExternalGraceful_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfExternalGraceful_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpVrfExternalGraceful_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfExternalGraceful_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfExternalGraceful_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfExternalGraceful_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpVrfExternalGraceful_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfExternalGraceful_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfExternalGraceful_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfExternalGraceful_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfExternalGraceful_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfExternalGraceful_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfExternalGraceful_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfExternalGraceful_Input) GetParentYangName() string { return "clear-bgp-vrf-external-graceful" }

// ClearBgpVrfExternal
// Specify a VRF.
// Clear all external peers.
// 
type ClearBgpVrfExternal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfExternal_Input
}

func (clearBgpVrfExternal *ClearBgpVrfExternal) GetFilter() yfilter.YFilter { return clearBgpVrfExternal.YFilter }

func (clearBgpVrfExternal *ClearBgpVrfExternal) SetFilter(yf yfilter.YFilter) { clearBgpVrfExternal.YFilter = yf }

func (clearBgpVrfExternal *ClearBgpVrfExternal) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfExternal *ClearBgpVrfExternal) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-external"
}

func (clearBgpVrfExternal *ClearBgpVrfExternal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfExternal.Input
    }
    return nil
}

func (clearBgpVrfExternal *ClearBgpVrfExternal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfExternal.Input
    return children
}

func (clearBgpVrfExternal *ClearBgpVrfExternal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfExternal *ClearBgpVrfExternal) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfExternal *ClearBgpVrfExternal) GetYangName() string { return "clear-bgp-vrf-external" }

func (clearBgpVrfExternal *ClearBgpVrfExternal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfExternal *ClearBgpVrfExternal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfExternal *ClearBgpVrfExternal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfExternal *ClearBgpVrfExternal) SetParent(parent types.Entity) { clearBgpVrfExternal.parent = parent }

func (clearBgpVrfExternal *ClearBgpVrfExternal) GetParent() types.Entity { return clearBgpVrfExternal.parent }

func (clearBgpVrfExternal *ClearBgpVrfExternal) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfExternal_Input
type ClearBgpVrfExternal_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfExternal_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfExternal_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfExternal_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpVrfExternal_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfExternal_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfExternal_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfExternal_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpVrfExternal_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfExternal_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfExternal_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfExternal_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfExternal_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfExternal_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfExternal_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfExternal_Input) GetParentYangName() string { return "clear-bgp-vrf-external" }

// ClearBgpVrfAfiSafiAllSoftInPrefixFilter
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpVrfAfiSafiAllSoftInPrefixFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input
}

func (clearBgpVrfAfiSafiAllSoftInPrefixFilter *ClearBgpVrfAfiSafiAllSoftInPrefixFilter) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiAllSoftInPrefixFilter.YFilter }

func (clearBgpVrfAfiSafiAllSoftInPrefixFilter *ClearBgpVrfAfiSafiAllSoftInPrefixFilter) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiAllSoftInPrefixFilter.YFilter = yf }

func (clearBgpVrfAfiSafiAllSoftInPrefixFilter *ClearBgpVrfAfiSafiAllSoftInPrefixFilter) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiAllSoftInPrefixFilter *ClearBgpVrfAfiSafiAllSoftInPrefixFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter"
}

func (clearBgpVrfAfiSafiAllSoftInPrefixFilter *ClearBgpVrfAfiSafiAllSoftInPrefixFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiAllSoftInPrefixFilter.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiAllSoftInPrefixFilter *ClearBgpVrfAfiSafiAllSoftInPrefixFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiAllSoftInPrefixFilter.Input
    return children
}

func (clearBgpVrfAfiSafiAllSoftInPrefixFilter *ClearBgpVrfAfiSafiAllSoftInPrefixFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiAllSoftInPrefixFilter *ClearBgpVrfAfiSafiAllSoftInPrefixFilter) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiAllSoftInPrefixFilter *ClearBgpVrfAfiSafiAllSoftInPrefixFilter) GetYangName() string { return "clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter" }

func (clearBgpVrfAfiSafiAllSoftInPrefixFilter *ClearBgpVrfAfiSafiAllSoftInPrefixFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiAllSoftInPrefixFilter *ClearBgpVrfAfiSafiAllSoftInPrefixFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiAllSoftInPrefixFilter *ClearBgpVrfAfiSafiAllSoftInPrefixFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiAllSoftInPrefixFilter *ClearBgpVrfAfiSafiAllSoftInPrefixFilter) SetParent(parent types.Entity) { clearBgpVrfAfiSafiAllSoftInPrefixFilter.parent = parent }

func (clearBgpVrfAfiSafiAllSoftInPrefixFilter *ClearBgpVrfAfiSafiAllSoftInPrefixFilter) GetParent() types.Entity { return clearBgpVrfAfiSafiAllSoftInPrefixFilter.parent }

func (clearBgpVrfAfiSafiAllSoftInPrefixFilter *ClearBgpVrfAfiSafiAllSoftInPrefixFilter) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input
type ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiAllSoftInPrefixFilter_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-all-soft-in-prefix-filter" }

// ClearBgpVrfAfiSafiAllSoftIn
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpVrfAfiSafiAllSoftIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiAllSoftIn_Input
}

func (clearBgpVrfAfiSafiAllSoftIn *ClearBgpVrfAfiSafiAllSoftIn) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiAllSoftIn.YFilter }

func (clearBgpVrfAfiSafiAllSoftIn *ClearBgpVrfAfiSafiAllSoftIn) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiAllSoftIn.YFilter = yf }

func (clearBgpVrfAfiSafiAllSoftIn *ClearBgpVrfAfiSafiAllSoftIn) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiAllSoftIn *ClearBgpVrfAfiSafiAllSoftIn) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-in"
}

func (clearBgpVrfAfiSafiAllSoftIn *ClearBgpVrfAfiSafiAllSoftIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiAllSoftIn.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiAllSoftIn *ClearBgpVrfAfiSafiAllSoftIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiAllSoftIn.Input
    return children
}

func (clearBgpVrfAfiSafiAllSoftIn *ClearBgpVrfAfiSafiAllSoftIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiAllSoftIn *ClearBgpVrfAfiSafiAllSoftIn) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiAllSoftIn *ClearBgpVrfAfiSafiAllSoftIn) GetYangName() string { return "clear-bgp-vrf-afi-safi-all-soft-in" }

func (clearBgpVrfAfiSafiAllSoftIn *ClearBgpVrfAfiSafiAllSoftIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiAllSoftIn *ClearBgpVrfAfiSafiAllSoftIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiAllSoftIn *ClearBgpVrfAfiSafiAllSoftIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiAllSoftIn *ClearBgpVrfAfiSafiAllSoftIn) SetParent(parent types.Entity) { clearBgpVrfAfiSafiAllSoftIn.parent = parent }

func (clearBgpVrfAfiSafiAllSoftIn *ClearBgpVrfAfiSafiAllSoftIn) GetParent() types.Entity { return clearBgpVrfAfiSafiAllSoftIn.parent }

func (clearBgpVrfAfiSafiAllSoftIn *ClearBgpVrfAfiSafiAllSoftIn) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiAllSoftIn_Input
type ClearBgpVrfAfiSafiAllSoftIn_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiAllSoftIn_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiAllSoftIn_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiAllSoftIn_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpVrfAfiSafiAllSoftIn_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiAllSoftIn_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiAllSoftIn_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiAllSoftIn_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpVrfAfiSafiAllSoftIn_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiAllSoftIn_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiAllSoftIn_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiAllSoftIn_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiAllSoftIn_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiAllSoftIn_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiAllSoftIn_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiAllSoftIn_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-all-soft-in" }

// ClearBgpVrfAfiSafiAllSoftOut
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpVrfAfiSafiAllSoftOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiAllSoftOut_Input
}

func (clearBgpVrfAfiSafiAllSoftOut *ClearBgpVrfAfiSafiAllSoftOut) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiAllSoftOut.YFilter }

func (clearBgpVrfAfiSafiAllSoftOut *ClearBgpVrfAfiSafiAllSoftOut) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiAllSoftOut.YFilter = yf }

func (clearBgpVrfAfiSafiAllSoftOut *ClearBgpVrfAfiSafiAllSoftOut) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiAllSoftOut *ClearBgpVrfAfiSafiAllSoftOut) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft-out"
}

func (clearBgpVrfAfiSafiAllSoftOut *ClearBgpVrfAfiSafiAllSoftOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiAllSoftOut.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiAllSoftOut *ClearBgpVrfAfiSafiAllSoftOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiAllSoftOut.Input
    return children
}

func (clearBgpVrfAfiSafiAllSoftOut *ClearBgpVrfAfiSafiAllSoftOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiAllSoftOut *ClearBgpVrfAfiSafiAllSoftOut) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiAllSoftOut *ClearBgpVrfAfiSafiAllSoftOut) GetYangName() string { return "clear-bgp-vrf-afi-safi-all-soft-out" }

func (clearBgpVrfAfiSafiAllSoftOut *ClearBgpVrfAfiSafiAllSoftOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiAllSoftOut *ClearBgpVrfAfiSafiAllSoftOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiAllSoftOut *ClearBgpVrfAfiSafiAllSoftOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiAllSoftOut *ClearBgpVrfAfiSafiAllSoftOut) SetParent(parent types.Entity) { clearBgpVrfAfiSafiAllSoftOut.parent = parent }

func (clearBgpVrfAfiSafiAllSoftOut *ClearBgpVrfAfiSafiAllSoftOut) GetParent() types.Entity { return clearBgpVrfAfiSafiAllSoftOut.parent }

func (clearBgpVrfAfiSafiAllSoftOut *ClearBgpVrfAfiSafiAllSoftOut) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiAllSoftOut_Input
type ClearBgpVrfAfiSafiAllSoftOut_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiAllSoftOut_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiAllSoftOut_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiAllSoftOut_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpVrfAfiSafiAllSoftOut_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiAllSoftOut_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiAllSoftOut_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiAllSoftOut_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpVrfAfiSafiAllSoftOut_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiAllSoftOut_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiAllSoftOut_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiAllSoftOut_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiAllSoftOut_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiAllSoftOut_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiAllSoftOut_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiAllSoftOut_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-all-soft-out" }

// ClearBgpVrfAfiSafiAllSoft
// Specify a VRF.
// Clear all peers and all routes from the BGP table.
// Soft reconfig.
// 
type ClearBgpVrfAfiSafiAllSoft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiAllSoft_Input
}

func (clearBgpVrfAfiSafiAllSoft *ClearBgpVrfAfiSafiAllSoft) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiAllSoft.YFilter }

func (clearBgpVrfAfiSafiAllSoft *ClearBgpVrfAfiSafiAllSoft) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiAllSoft.YFilter = yf }

func (clearBgpVrfAfiSafiAllSoft *ClearBgpVrfAfiSafiAllSoft) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiAllSoft *ClearBgpVrfAfiSafiAllSoft) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-all-soft"
}

func (clearBgpVrfAfiSafiAllSoft *ClearBgpVrfAfiSafiAllSoft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiAllSoft.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiAllSoft *ClearBgpVrfAfiSafiAllSoft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiAllSoft.Input
    return children
}

func (clearBgpVrfAfiSafiAllSoft *ClearBgpVrfAfiSafiAllSoft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiAllSoft *ClearBgpVrfAfiSafiAllSoft) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiAllSoft *ClearBgpVrfAfiSafiAllSoft) GetYangName() string { return "clear-bgp-vrf-afi-safi-all-soft" }

func (clearBgpVrfAfiSafiAllSoft *ClearBgpVrfAfiSafiAllSoft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiAllSoft *ClearBgpVrfAfiSafiAllSoft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiAllSoft *ClearBgpVrfAfiSafiAllSoft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiAllSoft *ClearBgpVrfAfiSafiAllSoft) SetParent(parent types.Entity) { clearBgpVrfAfiSafiAllSoft.parent = parent }

func (clearBgpVrfAfiSafiAllSoft *ClearBgpVrfAfiSafiAllSoft) GetParent() types.Entity { return clearBgpVrfAfiSafiAllSoft.parent }

func (clearBgpVrfAfiSafiAllSoft *ClearBgpVrfAfiSafiAllSoft) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiAllSoft_Input
type ClearBgpVrfAfiSafiAllSoft_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiAllSoft_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiAllSoft_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiAllSoft_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpVrfAfiSafiAllSoft_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiAllSoft_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiAllSoft_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiAllSoft_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpVrfAfiSafiAllSoft_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiAllSoft_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiAllSoft_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiAllSoft_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiAllSoft_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiAllSoft_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiAllSoft_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiAllSoft_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-all-soft" }

// ClearBgpVrfAfiSafiIpAddrLongLivedStale
// Specify a VRF.
// Clear long-lived-stale routes.
// 
type ClearBgpVrfAfiSafiIpAddrLongLivedStale struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input
}

func (clearBgpVrfAfiSafiIpAddrLongLivedStale *ClearBgpVrfAfiSafiIpAddrLongLivedStale) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiIpAddrLongLivedStale.YFilter }

func (clearBgpVrfAfiSafiIpAddrLongLivedStale *ClearBgpVrfAfiSafiIpAddrLongLivedStale) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiIpAddrLongLivedStale.YFilter = yf }

func (clearBgpVrfAfiSafiIpAddrLongLivedStale *ClearBgpVrfAfiSafiIpAddrLongLivedStale) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiIpAddrLongLivedStale *ClearBgpVrfAfiSafiIpAddrLongLivedStale) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale"
}

func (clearBgpVrfAfiSafiIpAddrLongLivedStale *ClearBgpVrfAfiSafiIpAddrLongLivedStale) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiIpAddrLongLivedStale.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiIpAddrLongLivedStale *ClearBgpVrfAfiSafiIpAddrLongLivedStale) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiIpAddrLongLivedStale.Input
    return children
}

func (clearBgpVrfAfiSafiIpAddrLongLivedStale *ClearBgpVrfAfiSafiIpAddrLongLivedStale) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiIpAddrLongLivedStale *ClearBgpVrfAfiSafiIpAddrLongLivedStale) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiIpAddrLongLivedStale *ClearBgpVrfAfiSafiIpAddrLongLivedStale) GetYangName() string { return "clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale" }

func (clearBgpVrfAfiSafiIpAddrLongLivedStale *ClearBgpVrfAfiSafiIpAddrLongLivedStale) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiIpAddrLongLivedStale *ClearBgpVrfAfiSafiIpAddrLongLivedStale) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiIpAddrLongLivedStale *ClearBgpVrfAfiSafiIpAddrLongLivedStale) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiIpAddrLongLivedStale *ClearBgpVrfAfiSafiIpAddrLongLivedStale) SetParent(parent types.Entity) { clearBgpVrfAfiSafiIpAddrLongLivedStale.parent = parent }

func (clearBgpVrfAfiSafiIpAddrLongLivedStale *ClearBgpVrfAfiSafiIpAddrLongLivedStale) GetParent() types.Entity { return clearBgpVrfAfiSafiIpAddrLongLivedStale.parent }

func (clearBgpVrfAfiSafiIpAddrLongLivedStale *ClearBgpVrfAfiSafiIpAddrLongLivedStale) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input
type ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiIpAddrLongLivedStale_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-ip-addr-long-lived-stale" }

// ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter
// Specify a VRF.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input
}

func (clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.YFilter }

func (clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.YFilter = yf }

func (clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter"
}

func (clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.Input
    return children
}

func (clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter) GetYangName() string { return "clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter" }

func (clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter) SetParent(parent types.Entity) { clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.parent = parent }

func (clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter) GetParent() types.Entity { return clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter.parent }

func (clearBgpVrfAfiSafiIpAddrSoftInPrefixFilter *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input
type ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiIpAddrSoftInPrefixFilter_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-ip-addr-soft-in-prefix-filter" }

// ClearBgpVrfAfiSafiIpAddrSoftIn
// Specify a VRF.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpVrfAfiSafiIpAddrSoftIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiIpAddrSoftIn_Input
}

func (clearBgpVrfAfiSafiIpAddrSoftIn *ClearBgpVrfAfiSafiIpAddrSoftIn) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiIpAddrSoftIn.YFilter }

func (clearBgpVrfAfiSafiIpAddrSoftIn *ClearBgpVrfAfiSafiIpAddrSoftIn) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiIpAddrSoftIn.YFilter = yf }

func (clearBgpVrfAfiSafiIpAddrSoftIn *ClearBgpVrfAfiSafiIpAddrSoftIn) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiIpAddrSoftIn *ClearBgpVrfAfiSafiIpAddrSoftIn) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-in"
}

func (clearBgpVrfAfiSafiIpAddrSoftIn *ClearBgpVrfAfiSafiIpAddrSoftIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiIpAddrSoftIn.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiIpAddrSoftIn *ClearBgpVrfAfiSafiIpAddrSoftIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiIpAddrSoftIn.Input
    return children
}

func (clearBgpVrfAfiSafiIpAddrSoftIn *ClearBgpVrfAfiSafiIpAddrSoftIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiIpAddrSoftIn *ClearBgpVrfAfiSafiIpAddrSoftIn) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiIpAddrSoftIn *ClearBgpVrfAfiSafiIpAddrSoftIn) GetYangName() string { return "clear-bgp-vrf-afi-safi-ip-addr-soft-in" }

func (clearBgpVrfAfiSafiIpAddrSoftIn *ClearBgpVrfAfiSafiIpAddrSoftIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiIpAddrSoftIn *ClearBgpVrfAfiSafiIpAddrSoftIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiIpAddrSoftIn *ClearBgpVrfAfiSafiIpAddrSoftIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiIpAddrSoftIn *ClearBgpVrfAfiSafiIpAddrSoftIn) SetParent(parent types.Entity) { clearBgpVrfAfiSafiIpAddrSoftIn.parent = parent }

func (clearBgpVrfAfiSafiIpAddrSoftIn *ClearBgpVrfAfiSafiIpAddrSoftIn) GetParent() types.Entity { return clearBgpVrfAfiSafiIpAddrSoftIn.parent }

func (clearBgpVrfAfiSafiIpAddrSoftIn *ClearBgpVrfAfiSafiIpAddrSoftIn) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiIpAddrSoftIn_Input
type ClearBgpVrfAfiSafiIpAddrSoftIn_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftIn_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiIpAddrSoftIn_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiIpAddrSoftIn_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftIn_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftIn_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftIn_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftIn_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftIn_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiIpAddrSoftIn_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiIpAddrSoftIn_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiIpAddrSoftIn_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiIpAddrSoftIn_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiIpAddrSoftIn_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiIpAddrSoftIn_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiIpAddrSoftIn_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-ip-addr-soft-in" }

// ClearBgpVrfAfiSafiIpAddrSoftOut
// Specify a VRF.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpVrfAfiSafiIpAddrSoftOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiIpAddrSoftOut_Input
}

func (clearBgpVrfAfiSafiIpAddrSoftOut *ClearBgpVrfAfiSafiIpAddrSoftOut) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiIpAddrSoftOut.YFilter }

func (clearBgpVrfAfiSafiIpAddrSoftOut *ClearBgpVrfAfiSafiIpAddrSoftOut) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiIpAddrSoftOut.YFilter = yf }

func (clearBgpVrfAfiSafiIpAddrSoftOut *ClearBgpVrfAfiSafiIpAddrSoftOut) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiIpAddrSoftOut *ClearBgpVrfAfiSafiIpAddrSoftOut) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft-out"
}

func (clearBgpVrfAfiSafiIpAddrSoftOut *ClearBgpVrfAfiSafiIpAddrSoftOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiIpAddrSoftOut.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiIpAddrSoftOut *ClearBgpVrfAfiSafiIpAddrSoftOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiIpAddrSoftOut.Input
    return children
}

func (clearBgpVrfAfiSafiIpAddrSoftOut *ClearBgpVrfAfiSafiIpAddrSoftOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiIpAddrSoftOut *ClearBgpVrfAfiSafiIpAddrSoftOut) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiIpAddrSoftOut *ClearBgpVrfAfiSafiIpAddrSoftOut) GetYangName() string { return "clear-bgp-vrf-afi-safi-ip-addr-soft-out" }

func (clearBgpVrfAfiSafiIpAddrSoftOut *ClearBgpVrfAfiSafiIpAddrSoftOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiIpAddrSoftOut *ClearBgpVrfAfiSafiIpAddrSoftOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiIpAddrSoftOut *ClearBgpVrfAfiSafiIpAddrSoftOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiIpAddrSoftOut *ClearBgpVrfAfiSafiIpAddrSoftOut) SetParent(parent types.Entity) { clearBgpVrfAfiSafiIpAddrSoftOut.parent = parent }

func (clearBgpVrfAfiSafiIpAddrSoftOut *ClearBgpVrfAfiSafiIpAddrSoftOut) GetParent() types.Entity { return clearBgpVrfAfiSafiIpAddrSoftOut.parent }

func (clearBgpVrfAfiSafiIpAddrSoftOut *ClearBgpVrfAfiSafiIpAddrSoftOut) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiIpAddrSoftOut_Input
type ClearBgpVrfAfiSafiIpAddrSoftOut_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftOut_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiIpAddrSoftOut_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiIpAddrSoftOut_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftOut_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftOut_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftOut_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftOut_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfAfiSafiIpAddrSoftOut_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiIpAddrSoftOut_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiIpAddrSoftOut_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiIpAddrSoftOut_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiIpAddrSoftOut_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiIpAddrSoftOut_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiIpAddrSoftOut_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiIpAddrSoftOut_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-ip-addr-soft-out" }

// ClearBgpVrfAfiSafiIpAddrSoft
// Specify a VRF.
// Soft reconfig.
// 
type ClearBgpVrfAfiSafiIpAddrSoft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiIpAddrSoft_Input
}

func (clearBgpVrfAfiSafiIpAddrSoft *ClearBgpVrfAfiSafiIpAddrSoft) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiIpAddrSoft.YFilter }

func (clearBgpVrfAfiSafiIpAddrSoft *ClearBgpVrfAfiSafiIpAddrSoft) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiIpAddrSoft.YFilter = yf }

func (clearBgpVrfAfiSafiIpAddrSoft *ClearBgpVrfAfiSafiIpAddrSoft) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiIpAddrSoft *ClearBgpVrfAfiSafiIpAddrSoft) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-ip-addr-soft"
}

func (clearBgpVrfAfiSafiIpAddrSoft *ClearBgpVrfAfiSafiIpAddrSoft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiIpAddrSoft.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiIpAddrSoft *ClearBgpVrfAfiSafiIpAddrSoft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiIpAddrSoft.Input
    return children
}

func (clearBgpVrfAfiSafiIpAddrSoft *ClearBgpVrfAfiSafiIpAddrSoft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiIpAddrSoft *ClearBgpVrfAfiSafiIpAddrSoft) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiIpAddrSoft *ClearBgpVrfAfiSafiIpAddrSoft) GetYangName() string { return "clear-bgp-vrf-afi-safi-ip-addr-soft" }

func (clearBgpVrfAfiSafiIpAddrSoft *ClearBgpVrfAfiSafiIpAddrSoft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiIpAddrSoft *ClearBgpVrfAfiSafiIpAddrSoft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiIpAddrSoft *ClearBgpVrfAfiSafiIpAddrSoft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiIpAddrSoft *ClearBgpVrfAfiSafiIpAddrSoft) SetParent(parent types.Entity) { clearBgpVrfAfiSafiIpAddrSoft.parent = parent }

func (clearBgpVrfAfiSafiIpAddrSoft *ClearBgpVrfAfiSafiIpAddrSoft) GetParent() types.Entity { return clearBgpVrfAfiSafiIpAddrSoft.parent }

func (clearBgpVrfAfiSafiIpAddrSoft *ClearBgpVrfAfiSafiIpAddrSoft) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiIpAddrSoft_Input
type ClearBgpVrfAfiSafiIpAddrSoft_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiIpAddrSoft_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiIpAddrSoft_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiIpAddrSoft_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfAfiSafiIpAddrSoft_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiIpAddrSoft_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiIpAddrSoft_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiIpAddrSoft_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfAfiSafiIpAddrSoft_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiIpAddrSoft_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiIpAddrSoft_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiIpAddrSoft_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiIpAddrSoft_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiIpAddrSoft_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiIpAddrSoft_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiIpAddrSoft_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-ip-addr-soft" }

// ClearBgpVrfAfiSafiAsSoftInPrefixFilter
// Specify a VRF.
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpVrfAfiSafiAsSoftInPrefixFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input
}

func (clearBgpVrfAfiSafiAsSoftInPrefixFilter *ClearBgpVrfAfiSafiAsSoftInPrefixFilter) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiAsSoftInPrefixFilter.YFilter }

func (clearBgpVrfAfiSafiAsSoftInPrefixFilter *ClearBgpVrfAfiSafiAsSoftInPrefixFilter) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiAsSoftInPrefixFilter.YFilter = yf }

func (clearBgpVrfAfiSafiAsSoftInPrefixFilter *ClearBgpVrfAfiSafiAsSoftInPrefixFilter) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiAsSoftInPrefixFilter *ClearBgpVrfAfiSafiAsSoftInPrefixFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter"
}

func (clearBgpVrfAfiSafiAsSoftInPrefixFilter *ClearBgpVrfAfiSafiAsSoftInPrefixFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiAsSoftInPrefixFilter.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiAsSoftInPrefixFilter *ClearBgpVrfAfiSafiAsSoftInPrefixFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiAsSoftInPrefixFilter.Input
    return children
}

func (clearBgpVrfAfiSafiAsSoftInPrefixFilter *ClearBgpVrfAfiSafiAsSoftInPrefixFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiAsSoftInPrefixFilter *ClearBgpVrfAfiSafiAsSoftInPrefixFilter) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiAsSoftInPrefixFilter *ClearBgpVrfAfiSafiAsSoftInPrefixFilter) GetYangName() string { return "clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter" }

func (clearBgpVrfAfiSafiAsSoftInPrefixFilter *ClearBgpVrfAfiSafiAsSoftInPrefixFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiAsSoftInPrefixFilter *ClearBgpVrfAfiSafiAsSoftInPrefixFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiAsSoftInPrefixFilter *ClearBgpVrfAfiSafiAsSoftInPrefixFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiAsSoftInPrefixFilter *ClearBgpVrfAfiSafiAsSoftInPrefixFilter) SetParent(parent types.Entity) { clearBgpVrfAfiSafiAsSoftInPrefixFilter.parent = parent }

func (clearBgpVrfAfiSafiAsSoftInPrefixFilter *ClearBgpVrfAfiSafiAsSoftInPrefixFilter) GetParent() types.Entity { return clearBgpVrfAfiSafiAsSoftInPrefixFilter.parent }

func (clearBgpVrfAfiSafiAsSoftInPrefixFilter *ClearBgpVrfAfiSafiAsSoftInPrefixFilter) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input
type ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiAsSoftInPrefixFilter_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-as-soft-in-prefix-filter" }

// ClearBgpVrfAfiSafiAsSoftIn
// Specify a VRF.
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpVrfAfiSafiAsSoftIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiAsSoftIn_Input
}

func (clearBgpVrfAfiSafiAsSoftIn *ClearBgpVrfAfiSafiAsSoftIn) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiAsSoftIn.YFilter }

func (clearBgpVrfAfiSafiAsSoftIn *ClearBgpVrfAfiSafiAsSoftIn) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiAsSoftIn.YFilter = yf }

func (clearBgpVrfAfiSafiAsSoftIn *ClearBgpVrfAfiSafiAsSoftIn) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiAsSoftIn *ClearBgpVrfAfiSafiAsSoftIn) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-in"
}

func (clearBgpVrfAfiSafiAsSoftIn *ClearBgpVrfAfiSafiAsSoftIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiAsSoftIn.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiAsSoftIn *ClearBgpVrfAfiSafiAsSoftIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiAsSoftIn.Input
    return children
}

func (clearBgpVrfAfiSafiAsSoftIn *ClearBgpVrfAfiSafiAsSoftIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiAsSoftIn *ClearBgpVrfAfiSafiAsSoftIn) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiAsSoftIn *ClearBgpVrfAfiSafiAsSoftIn) GetYangName() string { return "clear-bgp-vrf-afi-safi-as-soft-in" }

func (clearBgpVrfAfiSafiAsSoftIn *ClearBgpVrfAfiSafiAsSoftIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiAsSoftIn *ClearBgpVrfAfiSafiAsSoftIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiAsSoftIn *ClearBgpVrfAfiSafiAsSoftIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiAsSoftIn *ClearBgpVrfAfiSafiAsSoftIn) SetParent(parent types.Entity) { clearBgpVrfAfiSafiAsSoftIn.parent = parent }

func (clearBgpVrfAfiSafiAsSoftIn *ClearBgpVrfAfiSafiAsSoftIn) GetParent() types.Entity { return clearBgpVrfAfiSafiAsSoftIn.parent }

func (clearBgpVrfAfiSafiAsSoftIn *ClearBgpVrfAfiSafiAsSoftIn) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiAsSoftIn_Input
type ClearBgpVrfAfiSafiAsSoftIn_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpVrfAfiSafiAsSoftIn_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiAsSoftIn_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiAsSoftIn_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpVrfAfiSafiAsSoftIn_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiAsSoftIn_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiAsSoftIn_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiAsSoftIn_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpVrfAfiSafiAsSoftIn_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiAsSoftIn_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiAsSoftIn_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiAsSoftIn_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiAsSoftIn_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiAsSoftIn_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiAsSoftIn_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiAsSoftIn_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-as-soft-in" }

// ClearBgpVrfAfiSafiAsSoftOut
// Specify a VRF.
// Clear peers in a specific AS.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpVrfAfiSafiAsSoftOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiAsSoftOut_Input
}

func (clearBgpVrfAfiSafiAsSoftOut *ClearBgpVrfAfiSafiAsSoftOut) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiAsSoftOut.YFilter }

func (clearBgpVrfAfiSafiAsSoftOut *ClearBgpVrfAfiSafiAsSoftOut) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiAsSoftOut.YFilter = yf }

func (clearBgpVrfAfiSafiAsSoftOut *ClearBgpVrfAfiSafiAsSoftOut) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiAsSoftOut *ClearBgpVrfAfiSafiAsSoftOut) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft-out"
}

func (clearBgpVrfAfiSafiAsSoftOut *ClearBgpVrfAfiSafiAsSoftOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiAsSoftOut.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiAsSoftOut *ClearBgpVrfAfiSafiAsSoftOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiAsSoftOut.Input
    return children
}

func (clearBgpVrfAfiSafiAsSoftOut *ClearBgpVrfAfiSafiAsSoftOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiAsSoftOut *ClearBgpVrfAfiSafiAsSoftOut) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiAsSoftOut *ClearBgpVrfAfiSafiAsSoftOut) GetYangName() string { return "clear-bgp-vrf-afi-safi-as-soft-out" }

func (clearBgpVrfAfiSafiAsSoftOut *ClearBgpVrfAfiSafiAsSoftOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiAsSoftOut *ClearBgpVrfAfiSafiAsSoftOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiAsSoftOut *ClearBgpVrfAfiSafiAsSoftOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiAsSoftOut *ClearBgpVrfAfiSafiAsSoftOut) SetParent(parent types.Entity) { clearBgpVrfAfiSafiAsSoftOut.parent = parent }

func (clearBgpVrfAfiSafiAsSoftOut *ClearBgpVrfAfiSafiAsSoftOut) GetParent() types.Entity { return clearBgpVrfAfiSafiAsSoftOut.parent }

func (clearBgpVrfAfiSafiAsSoftOut *ClearBgpVrfAfiSafiAsSoftOut) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiAsSoftOut_Input
type ClearBgpVrfAfiSafiAsSoftOut_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpVrfAfiSafiAsSoftOut_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiAsSoftOut_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiAsSoftOut_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpVrfAfiSafiAsSoftOut_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiAsSoftOut_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiAsSoftOut_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiAsSoftOut_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpVrfAfiSafiAsSoftOut_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiAsSoftOut_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiAsSoftOut_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiAsSoftOut_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiAsSoftOut_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiAsSoftOut_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiAsSoftOut_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiAsSoftOut_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-as-soft-out" }

// ClearBgpVrfAfiSafiAsSoft
// Specify a VRF.
// Clear peers in a specific AS.
// Soft reconfig.
// 
type ClearBgpVrfAfiSafiAsSoft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiAsSoft_Input
}

func (clearBgpVrfAfiSafiAsSoft *ClearBgpVrfAfiSafiAsSoft) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiAsSoft.YFilter }

func (clearBgpVrfAfiSafiAsSoft *ClearBgpVrfAfiSafiAsSoft) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiAsSoft.YFilter = yf }

func (clearBgpVrfAfiSafiAsSoft *ClearBgpVrfAfiSafiAsSoft) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiAsSoft *ClearBgpVrfAfiSafiAsSoft) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-as-soft"
}

func (clearBgpVrfAfiSafiAsSoft *ClearBgpVrfAfiSafiAsSoft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiAsSoft.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiAsSoft *ClearBgpVrfAfiSafiAsSoft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiAsSoft.Input
    return children
}

func (clearBgpVrfAfiSafiAsSoft *ClearBgpVrfAfiSafiAsSoft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiAsSoft *ClearBgpVrfAfiSafiAsSoft) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiAsSoft *ClearBgpVrfAfiSafiAsSoft) GetYangName() string { return "clear-bgp-vrf-afi-safi-as-soft" }

func (clearBgpVrfAfiSafiAsSoft *ClearBgpVrfAfiSafiAsSoft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiAsSoft *ClearBgpVrfAfiSafiAsSoft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiAsSoft *ClearBgpVrfAfiSafiAsSoft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiAsSoft *ClearBgpVrfAfiSafiAsSoft) SetParent(parent types.Entity) { clearBgpVrfAfiSafiAsSoft.parent = parent }

func (clearBgpVrfAfiSafiAsSoft *ClearBgpVrfAfiSafiAsSoft) GetParent() types.Entity { return clearBgpVrfAfiSafiAsSoft.parent }

func (clearBgpVrfAfiSafiAsSoft *ClearBgpVrfAfiSafiAsSoft) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiAsSoft_Input
type ClearBgpVrfAfiSafiAsSoft_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // AS number. The type is one of the following types: int with range: 1..65535
    // This attribute is mandatory., or string with pattern: (\d+\.\d+) This
    // attribute is mandatory., or int with range: 65536..4294967295 This
    // attribute is mandatory...
    AsNumber interface{}
}

func (input *ClearBgpVrfAfiSafiAsSoft_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiAsSoft_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiAsSoft_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "as-number" { return "AsNumber" }
    return ""
}

func (input *ClearBgpVrfAfiSafiAsSoft_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiAsSoft_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiAsSoft_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiAsSoft_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["as-number"] = input.AsNumber
    return leafs
}

func (input *ClearBgpVrfAfiSafiAsSoft_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiAsSoft_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiAsSoft_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiAsSoft_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiAsSoft_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiAsSoft_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiAsSoft_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiAsSoft_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-as-soft" }

// ClearBgpVrfAfiSafiDampeningIpv4Prefix
// Specify a VRF.
// Clear route flap dampening information.
// 
type ClearBgpVrfAfiSafiDampeningIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input
}

func (clearBgpVrfAfiSafiDampeningIpv4Prefix *ClearBgpVrfAfiSafiDampeningIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiDampeningIpv4Prefix.YFilter }

func (clearBgpVrfAfiSafiDampeningIpv4Prefix *ClearBgpVrfAfiSafiDampeningIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiDampeningIpv4Prefix.YFilter = yf }

func (clearBgpVrfAfiSafiDampeningIpv4Prefix *ClearBgpVrfAfiSafiDampeningIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiDampeningIpv4Prefix *ClearBgpVrfAfiSafiDampeningIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv4-prefix"
}

func (clearBgpVrfAfiSafiDampeningIpv4Prefix *ClearBgpVrfAfiSafiDampeningIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiDampeningIpv4Prefix.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiDampeningIpv4Prefix *ClearBgpVrfAfiSafiDampeningIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiDampeningIpv4Prefix.Input
    return children
}

func (clearBgpVrfAfiSafiDampeningIpv4Prefix *ClearBgpVrfAfiSafiDampeningIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiDampeningIpv4Prefix *ClearBgpVrfAfiSafiDampeningIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiDampeningIpv4Prefix *ClearBgpVrfAfiSafiDampeningIpv4Prefix) GetYangName() string { return "clear-bgp-vrf-afi-safi-dampening-ipv4-prefix" }

func (clearBgpVrfAfiSafiDampeningIpv4Prefix *ClearBgpVrfAfiSafiDampeningIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiDampeningIpv4Prefix *ClearBgpVrfAfiSafiDampeningIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiDampeningIpv4Prefix *ClearBgpVrfAfiSafiDampeningIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiDampeningIpv4Prefix *ClearBgpVrfAfiSafiDampeningIpv4Prefix) SetParent(parent types.Entity) { clearBgpVrfAfiSafiDampeningIpv4Prefix.parent = parent }

func (clearBgpVrfAfiSafiDampeningIpv4Prefix *ClearBgpVrfAfiSafiDampeningIpv4Prefix) GetParent() types.Entity { return clearBgpVrfAfiSafiDampeningIpv4Prefix.parent }

func (clearBgpVrfAfiSafiDampeningIpv4Prefix *ClearBgpVrfAfiSafiDampeningIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input
type ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Network and mask or masklength to clear dampening information. The
    // type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiDampeningIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-dampening-ipv4-prefix" }

// ClearBgpVrfAfiSafiDampening
// Specify a VRF.
// Clear route flap dampening information.
// 
type ClearBgpVrfAfiSafiDampening struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiDampening_Input
}

func (clearBgpVrfAfiSafiDampening *ClearBgpVrfAfiSafiDampening) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiDampening.YFilter }

func (clearBgpVrfAfiSafiDampening *ClearBgpVrfAfiSafiDampening) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiDampening.YFilter = yf }

func (clearBgpVrfAfiSafiDampening *ClearBgpVrfAfiSafiDampening) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiDampening *ClearBgpVrfAfiSafiDampening) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening"
}

func (clearBgpVrfAfiSafiDampening *ClearBgpVrfAfiSafiDampening) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiDampening.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiDampening *ClearBgpVrfAfiSafiDampening) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiDampening.Input
    return children
}

func (clearBgpVrfAfiSafiDampening *ClearBgpVrfAfiSafiDampening) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiDampening *ClearBgpVrfAfiSafiDampening) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiDampening *ClearBgpVrfAfiSafiDampening) GetYangName() string { return "clear-bgp-vrf-afi-safi-dampening" }

func (clearBgpVrfAfiSafiDampening *ClearBgpVrfAfiSafiDampening) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiDampening *ClearBgpVrfAfiSafiDampening) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiDampening *ClearBgpVrfAfiSafiDampening) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiDampening *ClearBgpVrfAfiSafiDampening) SetParent(parent types.Entity) { clearBgpVrfAfiSafiDampening.parent = parent }

func (clearBgpVrfAfiSafiDampening *ClearBgpVrfAfiSafiDampening) GetParent() types.Entity { return clearBgpVrfAfiSafiDampening.parent }

func (clearBgpVrfAfiSafiDampening *ClearBgpVrfAfiSafiDampening) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiDampening_Input
type ClearBgpVrfAfiSafiDampening_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiDampening_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiDampening_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiDampening_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpVrfAfiSafiDampening_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiDampening_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiDampening_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiDampening_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpVrfAfiSafiDampening_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiDampening_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiDampening_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiDampening_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiDampening_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiDampening_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiDampening_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiDampening_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-dampening" }

// ClearBgpVrfAfiSafiExternalSoftInPrefixFilter
// Specify a VRF.
// Clear all external peers.
// Soft reconfig.
// Soft reconfig inbound update.
// Push out prefix ORF and do inbound soft reconfig.
// 
type ClearBgpVrfAfiSafiExternalSoftInPrefixFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input
}

func (clearBgpVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiExternalSoftInPrefixFilter.YFilter }

func (clearBgpVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiExternalSoftInPrefixFilter.YFilter = yf }

func (clearBgpVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter"
}

func (clearBgpVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiExternalSoftInPrefixFilter.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiExternalSoftInPrefixFilter.Input
    return children
}

func (clearBgpVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter) GetYangName() string { return "clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter" }

func (clearBgpVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter) SetParent(parent types.Entity) { clearBgpVrfAfiSafiExternalSoftInPrefixFilter.parent = parent }

func (clearBgpVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter) GetParent() types.Entity { return clearBgpVrfAfiSafiExternalSoftInPrefixFilter.parent }

func (clearBgpVrfAfiSafiExternalSoftInPrefixFilter *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input
type ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiExternalSoftInPrefixFilter_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-external-soft-in-prefix-filter" }

// ClearBgpVrfAfiSafiExternalSoftIn
// Specify a VRF.
// Clear all external peers.
// Soft reconfig.
// Soft reconfig inbound update.
// 
type ClearBgpVrfAfiSafiExternalSoftIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiExternalSoftIn_Input
}

func (clearBgpVrfAfiSafiExternalSoftIn *ClearBgpVrfAfiSafiExternalSoftIn) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiExternalSoftIn.YFilter }

func (clearBgpVrfAfiSafiExternalSoftIn *ClearBgpVrfAfiSafiExternalSoftIn) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiExternalSoftIn.YFilter = yf }

func (clearBgpVrfAfiSafiExternalSoftIn *ClearBgpVrfAfiSafiExternalSoftIn) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiExternalSoftIn *ClearBgpVrfAfiSafiExternalSoftIn) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-in"
}

func (clearBgpVrfAfiSafiExternalSoftIn *ClearBgpVrfAfiSafiExternalSoftIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiExternalSoftIn.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiExternalSoftIn *ClearBgpVrfAfiSafiExternalSoftIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiExternalSoftIn.Input
    return children
}

func (clearBgpVrfAfiSafiExternalSoftIn *ClearBgpVrfAfiSafiExternalSoftIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiExternalSoftIn *ClearBgpVrfAfiSafiExternalSoftIn) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiExternalSoftIn *ClearBgpVrfAfiSafiExternalSoftIn) GetYangName() string { return "clear-bgp-vrf-afi-safi-external-soft-in" }

func (clearBgpVrfAfiSafiExternalSoftIn *ClearBgpVrfAfiSafiExternalSoftIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiExternalSoftIn *ClearBgpVrfAfiSafiExternalSoftIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiExternalSoftIn *ClearBgpVrfAfiSafiExternalSoftIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiExternalSoftIn *ClearBgpVrfAfiSafiExternalSoftIn) SetParent(parent types.Entity) { clearBgpVrfAfiSafiExternalSoftIn.parent = parent }

func (clearBgpVrfAfiSafiExternalSoftIn *ClearBgpVrfAfiSafiExternalSoftIn) GetParent() types.Entity { return clearBgpVrfAfiSafiExternalSoftIn.parent }

func (clearBgpVrfAfiSafiExternalSoftIn *ClearBgpVrfAfiSafiExternalSoftIn) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiExternalSoftIn_Input
type ClearBgpVrfAfiSafiExternalSoftIn_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiExternalSoftIn_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiExternalSoftIn_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiExternalSoftIn_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpVrfAfiSafiExternalSoftIn_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiExternalSoftIn_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiExternalSoftIn_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiExternalSoftIn_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpVrfAfiSafiExternalSoftIn_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiExternalSoftIn_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiExternalSoftIn_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiExternalSoftIn_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiExternalSoftIn_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiExternalSoftIn_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiExternalSoftIn_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiExternalSoftIn_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-external-soft-in" }

// ClearBgpVrfAfiSafiExternalSoftOut
// Specify a VRF.
// Clear all external peers.
// Soft reconfig.
// Soft reconfig outbound update.
// 
type ClearBgpVrfAfiSafiExternalSoftOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiExternalSoftOut_Input
}

func (clearBgpVrfAfiSafiExternalSoftOut *ClearBgpVrfAfiSafiExternalSoftOut) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiExternalSoftOut.YFilter }

func (clearBgpVrfAfiSafiExternalSoftOut *ClearBgpVrfAfiSafiExternalSoftOut) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiExternalSoftOut.YFilter = yf }

func (clearBgpVrfAfiSafiExternalSoftOut *ClearBgpVrfAfiSafiExternalSoftOut) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiExternalSoftOut *ClearBgpVrfAfiSafiExternalSoftOut) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft-out"
}

func (clearBgpVrfAfiSafiExternalSoftOut *ClearBgpVrfAfiSafiExternalSoftOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiExternalSoftOut.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiExternalSoftOut *ClearBgpVrfAfiSafiExternalSoftOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiExternalSoftOut.Input
    return children
}

func (clearBgpVrfAfiSafiExternalSoftOut *ClearBgpVrfAfiSafiExternalSoftOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiExternalSoftOut *ClearBgpVrfAfiSafiExternalSoftOut) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiExternalSoftOut *ClearBgpVrfAfiSafiExternalSoftOut) GetYangName() string { return "clear-bgp-vrf-afi-safi-external-soft-out" }

func (clearBgpVrfAfiSafiExternalSoftOut *ClearBgpVrfAfiSafiExternalSoftOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiExternalSoftOut *ClearBgpVrfAfiSafiExternalSoftOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiExternalSoftOut *ClearBgpVrfAfiSafiExternalSoftOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiExternalSoftOut *ClearBgpVrfAfiSafiExternalSoftOut) SetParent(parent types.Entity) { clearBgpVrfAfiSafiExternalSoftOut.parent = parent }

func (clearBgpVrfAfiSafiExternalSoftOut *ClearBgpVrfAfiSafiExternalSoftOut) GetParent() types.Entity { return clearBgpVrfAfiSafiExternalSoftOut.parent }

func (clearBgpVrfAfiSafiExternalSoftOut *ClearBgpVrfAfiSafiExternalSoftOut) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiExternalSoftOut_Input
type ClearBgpVrfAfiSafiExternalSoftOut_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiExternalSoftOut_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiExternalSoftOut_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiExternalSoftOut_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpVrfAfiSafiExternalSoftOut_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiExternalSoftOut_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiExternalSoftOut_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiExternalSoftOut_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpVrfAfiSafiExternalSoftOut_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiExternalSoftOut_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiExternalSoftOut_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiExternalSoftOut_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiExternalSoftOut_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiExternalSoftOut_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiExternalSoftOut_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiExternalSoftOut_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-external-soft-out" }

// ClearBgpVrfAfiSafiExternalSoft
// Specify a VRF.
// Clear all external peers.
// Soft reconfig.
// 
type ClearBgpVrfAfiSafiExternalSoft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiExternalSoft_Input
}

func (clearBgpVrfAfiSafiExternalSoft *ClearBgpVrfAfiSafiExternalSoft) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiExternalSoft.YFilter }

func (clearBgpVrfAfiSafiExternalSoft *ClearBgpVrfAfiSafiExternalSoft) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiExternalSoft.YFilter = yf }

func (clearBgpVrfAfiSafiExternalSoft *ClearBgpVrfAfiSafiExternalSoft) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiExternalSoft *ClearBgpVrfAfiSafiExternalSoft) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-external-soft"
}

func (clearBgpVrfAfiSafiExternalSoft *ClearBgpVrfAfiSafiExternalSoft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiExternalSoft.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiExternalSoft *ClearBgpVrfAfiSafiExternalSoft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiExternalSoft.Input
    return children
}

func (clearBgpVrfAfiSafiExternalSoft *ClearBgpVrfAfiSafiExternalSoft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiExternalSoft *ClearBgpVrfAfiSafiExternalSoft) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiExternalSoft *ClearBgpVrfAfiSafiExternalSoft) GetYangName() string { return "clear-bgp-vrf-afi-safi-external-soft" }

func (clearBgpVrfAfiSafiExternalSoft *ClearBgpVrfAfiSafiExternalSoft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiExternalSoft *ClearBgpVrfAfiSafiExternalSoft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiExternalSoft *ClearBgpVrfAfiSafiExternalSoft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiExternalSoft *ClearBgpVrfAfiSafiExternalSoft) SetParent(parent types.Entity) { clearBgpVrfAfiSafiExternalSoft.parent = parent }

func (clearBgpVrfAfiSafiExternalSoft *ClearBgpVrfAfiSafiExternalSoft) GetParent() types.Entity { return clearBgpVrfAfiSafiExternalSoft.parent }

func (clearBgpVrfAfiSafiExternalSoft *ClearBgpVrfAfiSafiExternalSoft) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiExternalSoft_Input
type ClearBgpVrfAfiSafiExternalSoft_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiExternalSoft_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiExternalSoft_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiExternalSoft_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpVrfAfiSafiExternalSoft_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiExternalSoft_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiExternalSoft_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiExternalSoft_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpVrfAfiSafiExternalSoft_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiExternalSoft_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiExternalSoft_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiExternalSoft_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiExternalSoft_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiExternalSoft_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiExternalSoft_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiExternalSoft_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-external-soft" }

// ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input
}

func (clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.YFilter }

func (clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.YFilter = yf }

func (clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask"
}

func (clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.Input
    return children
}

func (clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetYangName() string { return "clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask" }

func (clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) SetParent(parent types.Entity) { clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.parent = parent }

func (clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetParent() types.Entity { return clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask.parent }

func (clearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input
type ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}

    // IPv4 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    Ipv4Mask interface{}
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    if yname == "ipv4-mask" { return "Ipv4Mask" }
    return ""
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    leafs["ipv4-mask"] = input.Ipv4Mask
    return leafs
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddrIpv4Mask_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-flap-statistics-ip-addr-ipv4-mask" }

// ClearBgpVrfAfiSafiFlapStatisticsIpAddr
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpVrfAfiSafiFlapStatisticsIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input
}

func (clearBgpVrfAfiSafiFlapStatisticsIpAddr *ClearBgpVrfAfiSafiFlapStatisticsIpAddr) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiFlapStatisticsIpAddr.YFilter }

func (clearBgpVrfAfiSafiFlapStatisticsIpAddr *ClearBgpVrfAfiSafiFlapStatisticsIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiFlapStatisticsIpAddr.YFilter = yf }

func (clearBgpVrfAfiSafiFlapStatisticsIpAddr *ClearBgpVrfAfiSafiFlapStatisticsIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiFlapStatisticsIpAddr *ClearBgpVrfAfiSafiFlapStatisticsIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ip-addr"
}

func (clearBgpVrfAfiSafiFlapStatisticsIpAddr *ClearBgpVrfAfiSafiFlapStatisticsIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiFlapStatisticsIpAddr.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiFlapStatisticsIpAddr *ClearBgpVrfAfiSafiFlapStatisticsIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiFlapStatisticsIpAddr.Input
    return children
}

func (clearBgpVrfAfiSafiFlapStatisticsIpAddr *ClearBgpVrfAfiSafiFlapStatisticsIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiFlapStatisticsIpAddr *ClearBgpVrfAfiSafiFlapStatisticsIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiFlapStatisticsIpAddr *ClearBgpVrfAfiSafiFlapStatisticsIpAddr) GetYangName() string { return "clear-bgp-vrf-afi-safi-flap-statistics-ip-addr" }

func (clearBgpVrfAfiSafiFlapStatisticsIpAddr *ClearBgpVrfAfiSafiFlapStatisticsIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiFlapStatisticsIpAddr *ClearBgpVrfAfiSafiFlapStatisticsIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiFlapStatisticsIpAddr *ClearBgpVrfAfiSafiFlapStatisticsIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiFlapStatisticsIpAddr *ClearBgpVrfAfiSafiFlapStatisticsIpAddr) SetParent(parent types.Entity) { clearBgpVrfAfiSafiFlapStatisticsIpAddr.parent = parent }

func (clearBgpVrfAfiSafiFlapStatisticsIpAddr *ClearBgpVrfAfiSafiFlapStatisticsIpAddr) GetParent() types.Entity { return clearBgpVrfAfiSafiFlapStatisticsIpAddr.parent }

func (clearBgpVrfAfiSafiFlapStatisticsIpAddr *ClearBgpVrfAfiSafiFlapStatisticsIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input
type ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // BGP neighbor address to clear. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpAddr_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-flap-statistics-ip-addr" }

// ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input
}

func (clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.YFilter }

func (clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.YFilter = yf }

func (clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix"
}

func (clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.Input
    return children
}

func (clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix) GetYangName() string { return "clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix" }

func (clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix) SetParent(parent types.Entity) { clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.parent = parent }

func (clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix) GetParent() types.Entity { return clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix.parent }

func (clearBgpVrfAfiSafiFlapStatisticsIpv4Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input
type ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv4 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])).
    // This attribute is mandatory.
    Ipv4Prefix interface{}
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv4-prefix" { return "Ipv4Prefix" }
    return ""
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv4-prefix"] = input.Ipv4Prefix
    return leafs
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv4Prefix_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-flap-statistics-ipv4-prefix" }

// ClearBgpVrfAfiSafiFlapStatisticsRegexp
// Specify a VRF.
// Clear flap statistics.
// Clear flap statistics for routes matching the regular expression.
// 
type ClearBgpVrfAfiSafiFlapStatisticsRegexp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input
}

func (clearBgpVrfAfiSafiFlapStatisticsRegexp *ClearBgpVrfAfiSafiFlapStatisticsRegexp) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiFlapStatisticsRegexp.YFilter }

func (clearBgpVrfAfiSafiFlapStatisticsRegexp *ClearBgpVrfAfiSafiFlapStatisticsRegexp) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiFlapStatisticsRegexp.YFilter = yf }

func (clearBgpVrfAfiSafiFlapStatisticsRegexp *ClearBgpVrfAfiSafiFlapStatisticsRegexp) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiFlapStatisticsRegexp *ClearBgpVrfAfiSafiFlapStatisticsRegexp) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-regexp"
}

func (clearBgpVrfAfiSafiFlapStatisticsRegexp *ClearBgpVrfAfiSafiFlapStatisticsRegexp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiFlapStatisticsRegexp.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiFlapStatisticsRegexp *ClearBgpVrfAfiSafiFlapStatisticsRegexp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiFlapStatisticsRegexp.Input
    return children
}

func (clearBgpVrfAfiSafiFlapStatisticsRegexp *ClearBgpVrfAfiSafiFlapStatisticsRegexp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiFlapStatisticsRegexp *ClearBgpVrfAfiSafiFlapStatisticsRegexp) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiFlapStatisticsRegexp *ClearBgpVrfAfiSafiFlapStatisticsRegexp) GetYangName() string { return "clear-bgp-vrf-afi-safi-flap-statistics-regexp" }

func (clearBgpVrfAfiSafiFlapStatisticsRegexp *ClearBgpVrfAfiSafiFlapStatisticsRegexp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiFlapStatisticsRegexp *ClearBgpVrfAfiSafiFlapStatisticsRegexp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiFlapStatisticsRegexp *ClearBgpVrfAfiSafiFlapStatisticsRegexp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiFlapStatisticsRegexp *ClearBgpVrfAfiSafiFlapStatisticsRegexp) SetParent(parent types.Entity) { clearBgpVrfAfiSafiFlapStatisticsRegexp.parent = parent }

func (clearBgpVrfAfiSafiFlapStatisticsRegexp *ClearBgpVrfAfiSafiFlapStatisticsRegexp) GetParent() types.Entity { return clearBgpVrfAfiSafiFlapStatisticsRegexp.parent }

func (clearBgpVrfAfiSafiFlapStatisticsRegexp *ClearBgpVrfAfiSafiFlapStatisticsRegexp) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input
type ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // A regular expression to match the BGP AS paths.  Use 'ctrl-v ?' to enter
    // '?'. The type is string. This attribute is mandatory.
    RegexpPattern interface{}
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "regexp-pattern" { return "RegexpPattern" }
    return ""
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["regexp-pattern"] = input.RegexpPattern
    return leafs
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiFlapStatisticsRegexp_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-flap-statistics-regexp" }

// ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy
// Specify a VRF.
// Clear flap statistics.
// Clear flap statistics for routes matching the route policy.
// 
type ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input
}

func (clearBgpVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.YFilter }

func (clearBgpVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.YFilter = yf }

func (clearBgpVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-route-policy"
}

func (clearBgpVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.Input
    return children
}

func (clearBgpVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy) GetYangName() string { return "clear-bgp-vrf-afi-safi-flap-statistics-route-policy" }

func (clearBgpVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy) SetParent(parent types.Entity) { clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.parent = parent }

func (clearBgpVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy) GetParent() types.Entity { return clearBgpVrfAfiSafiFlapStatisticsRoutePolicy.parent }

func (clearBgpVrfAfiSafiFlapStatisticsRoutePolicy *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input
type ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Route Policy name. The type is string. This attribute is mandatory.
    RoutePolicyName interface{}
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["route-policy-name"] = input.RoutePolicyName
    return leafs
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiFlapStatisticsRoutePolicy_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-flap-statistics-route-policy" }

// ClearBgpVrfAfiSafiFlapStatistics
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpVrfAfiSafiFlapStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiFlapStatistics_Input
}

func (clearBgpVrfAfiSafiFlapStatistics *ClearBgpVrfAfiSafiFlapStatistics) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiFlapStatistics.YFilter }

func (clearBgpVrfAfiSafiFlapStatistics *ClearBgpVrfAfiSafiFlapStatistics) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiFlapStatistics.YFilter = yf }

func (clearBgpVrfAfiSafiFlapStatistics *ClearBgpVrfAfiSafiFlapStatistics) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiFlapStatistics *ClearBgpVrfAfiSafiFlapStatistics) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics"
}

func (clearBgpVrfAfiSafiFlapStatistics *ClearBgpVrfAfiSafiFlapStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiFlapStatistics.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiFlapStatistics *ClearBgpVrfAfiSafiFlapStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiFlapStatistics.Input
    return children
}

func (clearBgpVrfAfiSafiFlapStatistics *ClearBgpVrfAfiSafiFlapStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiFlapStatistics *ClearBgpVrfAfiSafiFlapStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiFlapStatistics *ClearBgpVrfAfiSafiFlapStatistics) GetYangName() string { return "clear-bgp-vrf-afi-safi-flap-statistics" }

func (clearBgpVrfAfiSafiFlapStatistics *ClearBgpVrfAfiSafiFlapStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiFlapStatistics *ClearBgpVrfAfiSafiFlapStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiFlapStatistics *ClearBgpVrfAfiSafiFlapStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiFlapStatistics *ClearBgpVrfAfiSafiFlapStatistics) SetParent(parent types.Entity) { clearBgpVrfAfiSafiFlapStatistics.parent = parent }

func (clearBgpVrfAfiSafiFlapStatistics *ClearBgpVrfAfiSafiFlapStatistics) GetParent() types.Entity { return clearBgpVrfAfiSafiFlapStatistics.parent }

func (clearBgpVrfAfiSafiFlapStatistics *ClearBgpVrfAfiSafiFlapStatistics) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiFlapStatistics_Input
type ClearBgpVrfAfiSafiFlapStatistics_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiFlapStatistics_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiFlapStatistics_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiFlapStatistics_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpVrfAfiSafiFlapStatistics_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiFlapStatistics_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiFlapStatistics_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiFlapStatistics_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpVrfAfiSafiFlapStatistics_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiFlapStatistics_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiFlapStatistics_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiFlapStatistics_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiFlapStatistics_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiFlapStatistics_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiFlapStatistics_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiFlapStatistics_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-flap-statistics" }

// ClearBgpVrfAfiSafiNexthopPerformanceStatistics
// Specify a VRF.
// Clear nexthop.
// Performance statistics information related to processing.
// 
type ClearBgpVrfAfiSafiNexthopPerformanceStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input
}

func (clearBgpVrfAfiSafiNexthopPerformanceStatistics *ClearBgpVrfAfiSafiNexthopPerformanceStatistics) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiNexthopPerformanceStatistics.YFilter }

func (clearBgpVrfAfiSafiNexthopPerformanceStatistics *ClearBgpVrfAfiSafiNexthopPerformanceStatistics) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiNexthopPerformanceStatistics.YFilter = yf }

func (clearBgpVrfAfiSafiNexthopPerformanceStatistics *ClearBgpVrfAfiSafiNexthopPerformanceStatistics) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiNexthopPerformanceStatistics *ClearBgpVrfAfiSafiNexthopPerformanceStatistics) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-performance-statistics"
}

func (clearBgpVrfAfiSafiNexthopPerformanceStatistics *ClearBgpVrfAfiSafiNexthopPerformanceStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiNexthopPerformanceStatistics.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiNexthopPerformanceStatistics *ClearBgpVrfAfiSafiNexthopPerformanceStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiNexthopPerformanceStatistics.Input
    return children
}

func (clearBgpVrfAfiSafiNexthopPerformanceStatistics *ClearBgpVrfAfiSafiNexthopPerformanceStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiNexthopPerformanceStatistics *ClearBgpVrfAfiSafiNexthopPerformanceStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiNexthopPerformanceStatistics *ClearBgpVrfAfiSafiNexthopPerformanceStatistics) GetYangName() string { return "clear-bgp-vrf-afi-safi-nexthop-performance-statistics" }

func (clearBgpVrfAfiSafiNexthopPerformanceStatistics *ClearBgpVrfAfiSafiNexthopPerformanceStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiNexthopPerformanceStatistics *ClearBgpVrfAfiSafiNexthopPerformanceStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiNexthopPerformanceStatistics *ClearBgpVrfAfiSafiNexthopPerformanceStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiNexthopPerformanceStatistics *ClearBgpVrfAfiSafiNexthopPerformanceStatistics) SetParent(parent types.Entity) { clearBgpVrfAfiSafiNexthopPerformanceStatistics.parent = parent }

func (clearBgpVrfAfiSafiNexthopPerformanceStatistics *ClearBgpVrfAfiSafiNexthopPerformanceStatistics) GetParent() types.Entity { return clearBgpVrfAfiSafiNexthopPerformanceStatistics.parent }

func (clearBgpVrfAfiSafiNexthopPerformanceStatistics *ClearBgpVrfAfiSafiNexthopPerformanceStatistics) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input
type ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiNexthopPerformanceStatistics_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-nexthop-performance-statistics" }

// ClearBgpVrfAfiSafiNexthopRegistrationIpAddr
// Specify a VRF.
// Clear nexthop.
// Registration with RIB and reregister.
// 
type ClearBgpVrfAfiSafiNexthopRegistrationIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input
}

func (clearBgpVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiNexthopRegistrationIpAddr.YFilter }

func (clearBgpVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiNexthopRegistrationIpAddr.YFilter = yf }

func (clearBgpVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr"
}

func (clearBgpVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiNexthopRegistrationIpAddr.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiNexthopRegistrationIpAddr.Input
    return children
}

func (clearBgpVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr) GetYangName() string { return "clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr" }

func (clearBgpVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr) SetParent(parent types.Entity) { clearBgpVrfAfiSafiNexthopRegistrationIpAddr.parent = parent }

func (clearBgpVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr) GetParent() types.Entity { return clearBgpVrfAfiSafiNexthopRegistrationIpAddr.parent }

func (clearBgpVrfAfiSafiNexthopRegistrationIpAddr *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input
type ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Nexthop address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiNexthopRegistrationIpAddr_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-nexthop-registration-ip-addr" }

// ClearBgpVrfAfiSafiSelfOriginated
// Specify a VRF.
// Clear redistributed, network and aggregate routes originated here.
// 
type ClearBgpVrfAfiSafiSelfOriginated struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiSelfOriginated_Input
}

func (clearBgpVrfAfiSafiSelfOriginated *ClearBgpVrfAfiSafiSelfOriginated) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiSelfOriginated.YFilter }

func (clearBgpVrfAfiSafiSelfOriginated *ClearBgpVrfAfiSafiSelfOriginated) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiSelfOriginated.YFilter = yf }

func (clearBgpVrfAfiSafiSelfOriginated *ClearBgpVrfAfiSafiSelfOriginated) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiSelfOriginated *ClearBgpVrfAfiSafiSelfOriginated) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-self-originated"
}

func (clearBgpVrfAfiSafiSelfOriginated *ClearBgpVrfAfiSafiSelfOriginated) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiSelfOriginated.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiSelfOriginated *ClearBgpVrfAfiSafiSelfOriginated) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiSelfOriginated.Input
    return children
}

func (clearBgpVrfAfiSafiSelfOriginated *ClearBgpVrfAfiSafiSelfOriginated) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiSelfOriginated *ClearBgpVrfAfiSafiSelfOriginated) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiSelfOriginated *ClearBgpVrfAfiSafiSelfOriginated) GetYangName() string { return "clear-bgp-vrf-afi-safi-self-originated" }

func (clearBgpVrfAfiSafiSelfOriginated *ClearBgpVrfAfiSafiSelfOriginated) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiSelfOriginated *ClearBgpVrfAfiSafiSelfOriginated) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiSelfOriginated *ClearBgpVrfAfiSafiSelfOriginated) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiSelfOriginated *ClearBgpVrfAfiSafiSelfOriginated) SetParent(parent types.Entity) { clearBgpVrfAfiSafiSelfOriginated.parent = parent }

func (clearBgpVrfAfiSafiSelfOriginated *ClearBgpVrfAfiSafiSelfOriginated) GetParent() types.Entity { return clearBgpVrfAfiSafiSelfOriginated.parent }

func (clearBgpVrfAfiSafiSelfOriginated *ClearBgpVrfAfiSafiSelfOriginated) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiSelfOriginated_Input
type ClearBgpVrfAfiSafiSelfOriginated_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiSelfOriginated_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiSelfOriginated_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiSelfOriginated_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpVrfAfiSafiSelfOriginated_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiSelfOriginated_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiSelfOriginated_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiSelfOriginated_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpVrfAfiSafiSelfOriginated_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiSelfOriginated_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiSelfOriginated_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiSelfOriginated_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiSelfOriginated_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiSelfOriginated_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiSelfOriginated_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiSelfOriginated_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-self-originated" }

// ClearBgpVrfAfiSafiShutdown
// Specify a VRF.
// Clear all peers which were shut down due to low memory.
// 
type ClearBgpVrfAfiSafiShutdown struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiShutdown_Input
}

func (clearBgpVrfAfiSafiShutdown *ClearBgpVrfAfiSafiShutdown) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiShutdown.YFilter }

func (clearBgpVrfAfiSafiShutdown *ClearBgpVrfAfiSafiShutdown) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiShutdown.YFilter = yf }

func (clearBgpVrfAfiSafiShutdown *ClearBgpVrfAfiSafiShutdown) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiShutdown *ClearBgpVrfAfiSafiShutdown) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-shutdown"
}

func (clearBgpVrfAfiSafiShutdown *ClearBgpVrfAfiSafiShutdown) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiShutdown.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiShutdown *ClearBgpVrfAfiSafiShutdown) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiShutdown.Input
    return children
}

func (clearBgpVrfAfiSafiShutdown *ClearBgpVrfAfiSafiShutdown) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiShutdown *ClearBgpVrfAfiSafiShutdown) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiShutdown *ClearBgpVrfAfiSafiShutdown) GetYangName() string { return "clear-bgp-vrf-afi-safi-shutdown" }

func (clearBgpVrfAfiSafiShutdown *ClearBgpVrfAfiSafiShutdown) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiShutdown *ClearBgpVrfAfiSafiShutdown) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiShutdown *ClearBgpVrfAfiSafiShutdown) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiShutdown *ClearBgpVrfAfiSafiShutdown) SetParent(parent types.Entity) { clearBgpVrfAfiSafiShutdown.parent = parent }

func (clearBgpVrfAfiSafiShutdown *ClearBgpVrfAfiSafiShutdown) GetParent() types.Entity { return clearBgpVrfAfiSafiShutdown.parent }

func (clearBgpVrfAfiSafiShutdown *ClearBgpVrfAfiSafiShutdown) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiShutdown_Input
type ClearBgpVrfAfiSafiShutdown_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiShutdown_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiShutdown_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiShutdown_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpVrfAfiSafiShutdown_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiShutdown_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiShutdown_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiShutdown_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpVrfAfiSafiShutdown_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiShutdown_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiShutdown_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiShutdown_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiShutdown_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiShutdown_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiShutdown_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiShutdown_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-shutdown" }

// ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input
}

func (clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.YFilter }

func (clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.YFilter = yf }

func (clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent"
}

func (clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.Input
    return children
}

func (clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent" }

func (clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) SetParent(parent types.Entity) { clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.parent = parent }

func (clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetParent() types.Entity { return clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent.parent }

func (clearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input
type ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamilyUpdateParent_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-address-family-update-parent" }

// ClearBgpVrfAfiSafiUpdateOutqAddressFamily
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// 
type ClearBgpVrfAfiSafiUpdateOutqAddressFamily struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input
}

func (clearBgpVrfAfiSafiUpdateOutqAddressFamily *ClearBgpVrfAfiSafiUpdateOutqAddressFamily) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiUpdateOutqAddressFamily.YFilter }

func (clearBgpVrfAfiSafiUpdateOutqAddressFamily *ClearBgpVrfAfiSafiUpdateOutqAddressFamily) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiUpdateOutqAddressFamily.YFilter = yf }

func (clearBgpVrfAfiSafiUpdateOutqAddressFamily *ClearBgpVrfAfiSafiUpdateOutqAddressFamily) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiUpdateOutqAddressFamily *ClearBgpVrfAfiSafiUpdateOutqAddressFamily) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-address-family"
}

func (clearBgpVrfAfiSafiUpdateOutqAddressFamily *ClearBgpVrfAfiSafiUpdateOutqAddressFamily) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiUpdateOutqAddressFamily.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiUpdateOutqAddressFamily *ClearBgpVrfAfiSafiUpdateOutqAddressFamily) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiUpdateOutqAddressFamily.Input
    return children
}

func (clearBgpVrfAfiSafiUpdateOutqAddressFamily *ClearBgpVrfAfiSafiUpdateOutqAddressFamily) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiUpdateOutqAddressFamily *ClearBgpVrfAfiSafiUpdateOutqAddressFamily) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiUpdateOutqAddressFamily *ClearBgpVrfAfiSafiUpdateOutqAddressFamily) GetYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-address-family" }

func (clearBgpVrfAfiSafiUpdateOutqAddressFamily *ClearBgpVrfAfiSafiUpdateOutqAddressFamily) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiUpdateOutqAddressFamily *ClearBgpVrfAfiSafiUpdateOutqAddressFamily) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiUpdateOutqAddressFamily *ClearBgpVrfAfiSafiUpdateOutqAddressFamily) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiUpdateOutqAddressFamily *ClearBgpVrfAfiSafiUpdateOutqAddressFamily) SetParent(parent types.Entity) { clearBgpVrfAfiSafiUpdateOutqAddressFamily.parent = parent }

func (clearBgpVrfAfiSafiUpdateOutqAddressFamily *ClearBgpVrfAfiSafiUpdateOutqAddressFamily) GetParent() types.Entity { return clearBgpVrfAfiSafiUpdateOutqAddressFamily.parent }

func (clearBgpVrfAfiSafiUpdateOutqAddressFamily *ClearBgpVrfAfiSafiUpdateOutqAddressFamily) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input
type ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    return ""
}

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    return leafs
}

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqAddressFamily_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-address-family" }

// ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter = yf }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent"
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.Input
    return children
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent" }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) SetParent(parent types.Entity) { clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.parent = parent }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetParent() types.Entity { return clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent.parent }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
type ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh-update-parent" }

// ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// 
type ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.YFilter }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.YFilter = yf }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh"
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.Input
    return children
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh" }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) SetParent(parent types.Entity) { clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.parent = parent }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetParent() types.Entity { return clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh.parent }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input
type ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrRefresh_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-refresh" }

// ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.YFilter }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.YFilter = yf }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent"
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.Input
    return children
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent" }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) SetParent(parent types.Entity) { clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.parent = parent }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetParent() types.Entity { return clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent.parent }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input
type ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddrUpdateParent_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr-update-parent" }

// ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// 
type ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.YFilter }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.YFilter = yf }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr"
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.Input
    return children
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr) GetYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr" }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr) SetParent(parent types.Entity) { clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.parent = parent }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr) GetParent() types.Entity { return clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr.parent }

func (clearBgpVrfAfiSafiUpdateOutqNeighborIpAddr *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input
type ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqNeighborIpAddr_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-neighbor-ip-addr" }

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter = yf }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent"
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.Input
    return children
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent" }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) SetParent(parent types.Entity) { clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.parent = parent }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetParent() types.Entity { return clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent.parent }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "sub-group" { return "SubGroup" }
    return ""
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    leafs["sub-group"] = input.SubGroup
    return leafs
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-update-parent" }

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.YFilter }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.YFilter = yf }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group"
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.Input
    return children
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group" }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup) SetParent(parent types.Entity) { clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.parent = parent }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetParent() types.Entity { return clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup.parent }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "sub-group" { return "SubGroup" }
    return ""
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    leafs["sub-group"] = input.SubGroup
    return leafs
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroup_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group" }

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter = yf }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input
    return children
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent" }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) SetParent(parent types.Entity) { clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.parent = parent }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetParent() types.Entity { return clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.parent }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "refresh-sub-group" { return "RefreshSubGroup" }
    return ""
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    leafs["refresh-sub-group"] = input.RefreshSubGroup
    return leafs
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group-update-parent" }

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter = yf }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group"
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input
    return children
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group" }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) SetParent(parent types.Entity) { clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.parent = parent }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetParent() types.Entity { return clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup.parent }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "refresh-sub-group" { return "RefreshSubGroup" }
    return ""
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    leafs["refresh-sub-group"] = input.RefreshSubGroup
    return leafs
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-update-group-sub-group-refresh-sub-group" }

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.YFilter }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.YFilter = yf }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent"
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.Input
    return children
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent" }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) SetParent(parent types.Entity) { clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.parent = parent }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetParent() types.Entity { return clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent.parent }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    return ""
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    return leafs
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-update-group-update-parent" }

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroup
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// 
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiUpdateOutqUpdateGroup.YFilter }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiUpdateOutqUpdateGroup.YFilter = yf }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-update-outq-update-group"
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiUpdateOutqUpdateGroup.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiUpdateOutqUpdateGroup.Input
    return children
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup) GetYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-update-group" }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup) SetParent(parent types.Entity) { clearBgpVrfAfiSafiUpdateOutqUpdateGroup.parent = parent }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup) GetParent() types.Entity { return clearBgpVrfAfiSafiUpdateOutqUpdateGroup.parent }

func (clearBgpVrfAfiSafiUpdateOutqUpdateGroup *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input
type ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "update-group" { return "UpdateGroup" }
    return ""
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["update-group"] = input.UpdateGroup
    return leafs
}

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiUpdateOutqUpdateGroup_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-update-outq-update-group" }

// ClearBgpVrfAfiSafiDampeningIpv6Prefix
// Specify a VRF.
// Clear route flap dampening information.
// 
type ClearBgpVrfAfiSafiDampeningIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input
}

func (clearBgpVrfAfiSafiDampeningIpv6Prefix *ClearBgpVrfAfiSafiDampeningIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiDampeningIpv6Prefix.YFilter }

func (clearBgpVrfAfiSafiDampeningIpv6Prefix *ClearBgpVrfAfiSafiDampeningIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiDampeningIpv6Prefix.YFilter = yf }

func (clearBgpVrfAfiSafiDampeningIpv6Prefix *ClearBgpVrfAfiSafiDampeningIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiDampeningIpv6Prefix *ClearBgpVrfAfiSafiDampeningIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-dampening-ipv6-prefix"
}

func (clearBgpVrfAfiSafiDampeningIpv6Prefix *ClearBgpVrfAfiSafiDampeningIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiDampeningIpv6Prefix.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiDampeningIpv6Prefix *ClearBgpVrfAfiSafiDampeningIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiDampeningIpv6Prefix.Input
    return children
}

func (clearBgpVrfAfiSafiDampeningIpv6Prefix *ClearBgpVrfAfiSafiDampeningIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiDampeningIpv6Prefix *ClearBgpVrfAfiSafiDampeningIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiDampeningIpv6Prefix *ClearBgpVrfAfiSafiDampeningIpv6Prefix) GetYangName() string { return "clear-bgp-vrf-afi-safi-dampening-ipv6-prefix" }

func (clearBgpVrfAfiSafiDampeningIpv6Prefix *ClearBgpVrfAfiSafiDampeningIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiDampeningIpv6Prefix *ClearBgpVrfAfiSafiDampeningIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiDampeningIpv6Prefix *ClearBgpVrfAfiSafiDampeningIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiDampeningIpv6Prefix *ClearBgpVrfAfiSafiDampeningIpv6Prefix) SetParent(parent types.Entity) { clearBgpVrfAfiSafiDampeningIpv6Prefix.parent = parent }

func (clearBgpVrfAfiSafiDampeningIpv6Prefix *ClearBgpVrfAfiSafiDampeningIpv6Prefix) GetParent() types.Entity { return clearBgpVrfAfiSafiDampeningIpv6Prefix.parent }

func (clearBgpVrfAfiSafiDampeningIpv6Prefix *ClearBgpVrfAfiSafiDampeningIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input
type ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 Network and mask or masklength to clear dampening information. The
    // type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiDampeningIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-dampening-ipv6-prefix" }

// ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix
// Specify a VRF.
// Clear flap statistics.
// 
type ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input
}

func (clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix) GetFilter() yfilter.YFilter { return clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.YFilter }

func (clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix) SetFilter(yf yfilter.YFilter) { clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.YFilter = yf }

func (clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix"
}

func (clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.Input
    }
    return nil
}

func (clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.Input
    return children
}

func (clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix) GetYangName() string { return "clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix" }

func (clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix) SetParent(parent types.Entity) { clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.parent = parent }

func (clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix) GetParent() types.Entity { return clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix.parent }

func (clearBgpVrfAfiSafiFlapStatisticsIpv6Prefix *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input
type ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // AFI and SAFI. The type is AfiSafiType. This attribute is mandatory.
    AfiSafiName interface{}

    // IPv6 Network and mask or masklength to clear flap statistics. The type is
    // string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    // This attribute is mandatory.
    Ipv6Prefix interface{}
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "afi-safi-name" { return "AfiSafiName" }
    if yname == "ipv6-prefix" { return "Ipv6Prefix" }
    return ""
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["afi-safi-name"] = input.AfiSafiName
    leafs["ipv6-prefix"] = input.Ipv6Prefix
    return leafs
}

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfAfiSafiFlapStatisticsIpv6Prefix_Input) GetParentYangName() string { return "clear-bgp-vrf-afi-safi-flap-statistics-ipv6-prefix" }

// ClearBgpVrfNexthopPerformanceStatistics
// Specify a VRF.
// Clear nexthop.
// Performance statistics information related to processing.
// 
type ClearBgpVrfNexthopPerformanceStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfNexthopPerformanceStatistics_Input
}

func (clearBgpVrfNexthopPerformanceStatistics *ClearBgpVrfNexthopPerformanceStatistics) GetFilter() yfilter.YFilter { return clearBgpVrfNexthopPerformanceStatistics.YFilter }

func (clearBgpVrfNexthopPerformanceStatistics *ClearBgpVrfNexthopPerformanceStatistics) SetFilter(yf yfilter.YFilter) { clearBgpVrfNexthopPerformanceStatistics.YFilter = yf }

func (clearBgpVrfNexthopPerformanceStatistics *ClearBgpVrfNexthopPerformanceStatistics) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfNexthopPerformanceStatistics *ClearBgpVrfNexthopPerformanceStatistics) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-performance-statistics"
}

func (clearBgpVrfNexthopPerformanceStatistics *ClearBgpVrfNexthopPerformanceStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfNexthopPerformanceStatistics.Input
    }
    return nil
}

func (clearBgpVrfNexthopPerformanceStatistics *ClearBgpVrfNexthopPerformanceStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfNexthopPerformanceStatistics.Input
    return children
}

func (clearBgpVrfNexthopPerformanceStatistics *ClearBgpVrfNexthopPerformanceStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfNexthopPerformanceStatistics *ClearBgpVrfNexthopPerformanceStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfNexthopPerformanceStatistics *ClearBgpVrfNexthopPerformanceStatistics) GetYangName() string { return "clear-bgp-vrf-nexthop-performance-statistics" }

func (clearBgpVrfNexthopPerformanceStatistics *ClearBgpVrfNexthopPerformanceStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfNexthopPerformanceStatistics *ClearBgpVrfNexthopPerformanceStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfNexthopPerformanceStatistics *ClearBgpVrfNexthopPerformanceStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfNexthopPerformanceStatistics *ClearBgpVrfNexthopPerformanceStatistics) SetParent(parent types.Entity) { clearBgpVrfNexthopPerformanceStatistics.parent = parent }

func (clearBgpVrfNexthopPerformanceStatistics *ClearBgpVrfNexthopPerformanceStatistics) GetParent() types.Entity { return clearBgpVrfNexthopPerformanceStatistics.parent }

func (clearBgpVrfNexthopPerformanceStatistics *ClearBgpVrfNexthopPerformanceStatistics) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfNexthopPerformanceStatistics_Input
type ClearBgpVrfNexthopPerformanceStatistics_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfNexthopPerformanceStatistics_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfNexthopPerformanceStatistics_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfNexthopPerformanceStatistics_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpVrfNexthopPerformanceStatistics_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfNexthopPerformanceStatistics_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfNexthopPerformanceStatistics_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfNexthopPerformanceStatistics_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpVrfNexthopPerformanceStatistics_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfNexthopPerformanceStatistics_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfNexthopPerformanceStatistics_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfNexthopPerformanceStatistics_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfNexthopPerformanceStatistics_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfNexthopPerformanceStatistics_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfNexthopPerformanceStatistics_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfNexthopPerformanceStatistics_Input) GetParentYangName() string { return "clear-bgp-vrf-nexthop-performance-statistics" }

// ClearBgpVrfNexthopRegistrationIpAddr
// Specify a VRF.
// Clear nexthop.
// Registration with RIB and reregister.
// 
type ClearBgpVrfNexthopRegistrationIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfNexthopRegistrationIpAddr_Input
}

func (clearBgpVrfNexthopRegistrationIpAddr *ClearBgpVrfNexthopRegistrationIpAddr) GetFilter() yfilter.YFilter { return clearBgpVrfNexthopRegistrationIpAddr.YFilter }

func (clearBgpVrfNexthopRegistrationIpAddr *ClearBgpVrfNexthopRegistrationIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpVrfNexthopRegistrationIpAddr.YFilter = yf }

func (clearBgpVrfNexthopRegistrationIpAddr *ClearBgpVrfNexthopRegistrationIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfNexthopRegistrationIpAddr *ClearBgpVrfNexthopRegistrationIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-nexthop-registration-ip-addr"
}

func (clearBgpVrfNexthopRegistrationIpAddr *ClearBgpVrfNexthopRegistrationIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfNexthopRegistrationIpAddr.Input
    }
    return nil
}

func (clearBgpVrfNexthopRegistrationIpAddr *ClearBgpVrfNexthopRegistrationIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfNexthopRegistrationIpAddr.Input
    return children
}

func (clearBgpVrfNexthopRegistrationIpAddr *ClearBgpVrfNexthopRegistrationIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfNexthopRegistrationIpAddr *ClearBgpVrfNexthopRegistrationIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfNexthopRegistrationIpAddr *ClearBgpVrfNexthopRegistrationIpAddr) GetYangName() string { return "clear-bgp-vrf-nexthop-registration-ip-addr" }

func (clearBgpVrfNexthopRegistrationIpAddr *ClearBgpVrfNexthopRegistrationIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfNexthopRegistrationIpAddr *ClearBgpVrfNexthopRegistrationIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfNexthopRegistrationIpAddr *ClearBgpVrfNexthopRegistrationIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfNexthopRegistrationIpAddr *ClearBgpVrfNexthopRegistrationIpAddr) SetParent(parent types.Entity) { clearBgpVrfNexthopRegistrationIpAddr.parent = parent }

func (clearBgpVrfNexthopRegistrationIpAddr *ClearBgpVrfNexthopRegistrationIpAddr) GetParent() types.Entity { return clearBgpVrfNexthopRegistrationIpAddr.parent }

func (clearBgpVrfNexthopRegistrationIpAddr *ClearBgpVrfNexthopRegistrationIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfNexthopRegistrationIpAddr_Input
type ClearBgpVrfNexthopRegistrationIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Nexthop address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfNexthopRegistrationIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfNexthopRegistrationIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfNexthopRegistrationIpAddr_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfNexthopRegistrationIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfNexthopRegistrationIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfNexthopRegistrationIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfNexthopRegistrationIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfNexthopRegistrationIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfNexthopRegistrationIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfNexthopRegistrationIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfNexthopRegistrationIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfNexthopRegistrationIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfNexthopRegistrationIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfNexthopRegistrationIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfNexthopRegistrationIpAddr_Input) GetParentYangName() string { return "clear-bgp-vrf-nexthop-registration-ip-addr" }

// ClearBgpVrfPeerDropsAll
// Specify a VRF.
// Clear established/dropped counters for a peer.
// All Neighbors.
// 
type ClearBgpVrfPeerDropsAll struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfPeerDropsAll_Input
}

func (clearBgpVrfPeerDropsAll *ClearBgpVrfPeerDropsAll) GetFilter() yfilter.YFilter { return clearBgpVrfPeerDropsAll.YFilter }

func (clearBgpVrfPeerDropsAll *ClearBgpVrfPeerDropsAll) SetFilter(yf yfilter.YFilter) { clearBgpVrfPeerDropsAll.YFilter = yf }

func (clearBgpVrfPeerDropsAll *ClearBgpVrfPeerDropsAll) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfPeerDropsAll *ClearBgpVrfPeerDropsAll) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-all"
}

func (clearBgpVrfPeerDropsAll *ClearBgpVrfPeerDropsAll) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfPeerDropsAll.Input
    }
    return nil
}

func (clearBgpVrfPeerDropsAll *ClearBgpVrfPeerDropsAll) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfPeerDropsAll.Input
    return children
}

func (clearBgpVrfPeerDropsAll *ClearBgpVrfPeerDropsAll) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfPeerDropsAll *ClearBgpVrfPeerDropsAll) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfPeerDropsAll *ClearBgpVrfPeerDropsAll) GetYangName() string { return "clear-bgp-vrf-peer-drops-all" }

func (clearBgpVrfPeerDropsAll *ClearBgpVrfPeerDropsAll) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfPeerDropsAll *ClearBgpVrfPeerDropsAll) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfPeerDropsAll *ClearBgpVrfPeerDropsAll) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfPeerDropsAll *ClearBgpVrfPeerDropsAll) SetParent(parent types.Entity) { clearBgpVrfPeerDropsAll.parent = parent }

func (clearBgpVrfPeerDropsAll *ClearBgpVrfPeerDropsAll) GetParent() types.Entity { return clearBgpVrfPeerDropsAll.parent }

func (clearBgpVrfPeerDropsAll *ClearBgpVrfPeerDropsAll) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfPeerDropsAll_Input
type ClearBgpVrfPeerDropsAll_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfPeerDropsAll_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfPeerDropsAll_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfPeerDropsAll_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpVrfPeerDropsAll_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfPeerDropsAll_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfPeerDropsAll_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfPeerDropsAll_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpVrfPeerDropsAll_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfPeerDropsAll_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfPeerDropsAll_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfPeerDropsAll_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfPeerDropsAll_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfPeerDropsAll_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfPeerDropsAll_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfPeerDropsAll_Input) GetParentYangName() string { return "clear-bgp-vrf-peer-drops-all" }

// ClearBgpVrfPeerDropsIpAddr
// Specify a VRF.
// Clear established/dropped counters for a peer.
// 
type ClearBgpVrfPeerDropsIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfPeerDropsIpAddr_Input
}

func (clearBgpVrfPeerDropsIpAddr *ClearBgpVrfPeerDropsIpAddr) GetFilter() yfilter.YFilter { return clearBgpVrfPeerDropsIpAddr.YFilter }

func (clearBgpVrfPeerDropsIpAddr *ClearBgpVrfPeerDropsIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpVrfPeerDropsIpAddr.YFilter = yf }

func (clearBgpVrfPeerDropsIpAddr *ClearBgpVrfPeerDropsIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfPeerDropsIpAddr *ClearBgpVrfPeerDropsIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-peer-drops-ip-addr"
}

func (clearBgpVrfPeerDropsIpAddr *ClearBgpVrfPeerDropsIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfPeerDropsIpAddr.Input
    }
    return nil
}

func (clearBgpVrfPeerDropsIpAddr *ClearBgpVrfPeerDropsIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfPeerDropsIpAddr.Input
    return children
}

func (clearBgpVrfPeerDropsIpAddr *ClearBgpVrfPeerDropsIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfPeerDropsIpAddr *ClearBgpVrfPeerDropsIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfPeerDropsIpAddr *ClearBgpVrfPeerDropsIpAddr) GetYangName() string { return "clear-bgp-vrf-peer-drops-ip-addr" }

func (clearBgpVrfPeerDropsIpAddr *ClearBgpVrfPeerDropsIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfPeerDropsIpAddr *ClearBgpVrfPeerDropsIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfPeerDropsIpAddr *ClearBgpVrfPeerDropsIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfPeerDropsIpAddr *ClearBgpVrfPeerDropsIpAddr) SetParent(parent types.Entity) { clearBgpVrfPeerDropsIpAddr.parent = parent }

func (clearBgpVrfPeerDropsIpAddr *ClearBgpVrfPeerDropsIpAddr) GetParent() types.Entity { return clearBgpVrfPeerDropsIpAddr.parent }

func (clearBgpVrfPeerDropsIpAddr *ClearBgpVrfPeerDropsIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfPeerDropsIpAddr_Input
type ClearBgpVrfPeerDropsIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // BGP neighbor IP address. The type is one of the following types: string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfPeerDropsIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfPeerDropsIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfPeerDropsIpAddr_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfPeerDropsIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfPeerDropsIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfPeerDropsIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfPeerDropsIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfPeerDropsIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfPeerDropsIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfPeerDropsIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfPeerDropsIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfPeerDropsIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfPeerDropsIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfPeerDropsIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfPeerDropsIpAddr_Input) GetParentYangName() string { return "clear-bgp-vrf-peer-drops-ip-addr" }

// ClearBgpVrfPerformanceStatistics
// Specify a VRF.
// Clear performance statistics.
// 
type ClearBgpVrfPerformanceStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfPerformanceStatistics_Input
}

func (clearBgpVrfPerformanceStatistics *ClearBgpVrfPerformanceStatistics) GetFilter() yfilter.YFilter { return clearBgpVrfPerformanceStatistics.YFilter }

func (clearBgpVrfPerformanceStatistics *ClearBgpVrfPerformanceStatistics) SetFilter(yf yfilter.YFilter) { clearBgpVrfPerformanceStatistics.YFilter = yf }

func (clearBgpVrfPerformanceStatistics *ClearBgpVrfPerformanceStatistics) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfPerformanceStatistics *ClearBgpVrfPerformanceStatistics) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-performance-statistics"
}

func (clearBgpVrfPerformanceStatistics *ClearBgpVrfPerformanceStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfPerformanceStatistics.Input
    }
    return nil
}

func (clearBgpVrfPerformanceStatistics *ClearBgpVrfPerformanceStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfPerformanceStatistics.Input
    return children
}

func (clearBgpVrfPerformanceStatistics *ClearBgpVrfPerformanceStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfPerformanceStatistics *ClearBgpVrfPerformanceStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfPerformanceStatistics *ClearBgpVrfPerformanceStatistics) GetYangName() string { return "clear-bgp-vrf-performance-statistics" }

func (clearBgpVrfPerformanceStatistics *ClearBgpVrfPerformanceStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfPerformanceStatistics *ClearBgpVrfPerformanceStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfPerformanceStatistics *ClearBgpVrfPerformanceStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfPerformanceStatistics *ClearBgpVrfPerformanceStatistics) SetParent(parent types.Entity) { clearBgpVrfPerformanceStatistics.parent = parent }

func (clearBgpVrfPerformanceStatistics *ClearBgpVrfPerformanceStatistics) GetParent() types.Entity { return clearBgpVrfPerformanceStatistics.parent }

func (clearBgpVrfPerformanceStatistics *ClearBgpVrfPerformanceStatistics) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfPerformanceStatistics_Input
type ClearBgpVrfPerformanceStatistics_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfPerformanceStatistics_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfPerformanceStatistics_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfPerformanceStatistics_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpVrfPerformanceStatistics_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfPerformanceStatistics_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfPerformanceStatistics_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfPerformanceStatistics_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpVrfPerformanceStatistics_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfPerformanceStatistics_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfPerformanceStatistics_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfPerformanceStatistics_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfPerformanceStatistics_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfPerformanceStatistics_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfPerformanceStatistics_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfPerformanceStatistics_Input) GetParentYangName() string { return "clear-bgp-vrf-performance-statistics" }

// ClearBgpVrfShutdown
// Specify a VRF.
// Clear all peers which were shut down due to low memory.
// 
type ClearBgpVrfShutdown struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfShutdown_Input
}

func (clearBgpVrfShutdown *ClearBgpVrfShutdown) GetFilter() yfilter.YFilter { return clearBgpVrfShutdown.YFilter }

func (clearBgpVrfShutdown *ClearBgpVrfShutdown) SetFilter(yf yfilter.YFilter) { clearBgpVrfShutdown.YFilter = yf }

func (clearBgpVrfShutdown *ClearBgpVrfShutdown) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfShutdown *ClearBgpVrfShutdown) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-shutdown"
}

func (clearBgpVrfShutdown *ClearBgpVrfShutdown) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfShutdown.Input
    }
    return nil
}

func (clearBgpVrfShutdown *ClearBgpVrfShutdown) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfShutdown.Input
    return children
}

func (clearBgpVrfShutdown *ClearBgpVrfShutdown) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfShutdown *ClearBgpVrfShutdown) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfShutdown *ClearBgpVrfShutdown) GetYangName() string { return "clear-bgp-vrf-shutdown" }

func (clearBgpVrfShutdown *ClearBgpVrfShutdown) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfShutdown *ClearBgpVrfShutdown) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfShutdown *ClearBgpVrfShutdown) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfShutdown *ClearBgpVrfShutdown) SetParent(parent types.Entity) { clearBgpVrfShutdown.parent = parent }

func (clearBgpVrfShutdown *ClearBgpVrfShutdown) GetParent() types.Entity { return clearBgpVrfShutdown.parent }

func (clearBgpVrfShutdown *ClearBgpVrfShutdown) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfShutdown_Input
type ClearBgpVrfShutdown_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfShutdown_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfShutdown_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfShutdown_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpVrfShutdown_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfShutdown_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfShutdown_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfShutdown_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpVrfShutdown_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfShutdown_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfShutdown_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfShutdown_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfShutdown_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfShutdown_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfShutdown_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfShutdown_Input) GetParentYangName() string { return "clear-bgp-vrf-shutdown" }

// ClearBgpVrfUpdateOutqAddressFamilyUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfUpdateOutqAddressFamilyUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input
}

func (clearBgpVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent) GetFilter() yfilter.YFilter { return clearBgpVrfUpdateOutqAddressFamilyUpdateParent.YFilter }

func (clearBgpVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpVrfUpdateOutqAddressFamilyUpdateParent.YFilter = yf }

func (clearBgpVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family-update-parent"
}

func (clearBgpVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfUpdateOutqAddressFamilyUpdateParent.Input
    }
    return nil
}

func (clearBgpVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfUpdateOutqAddressFamilyUpdateParent.Input
    return children
}

func (clearBgpVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent) GetYangName() string { return "clear-bgp-vrf-update-outq-address-family-update-parent" }

func (clearBgpVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent) SetParent(parent types.Entity) { clearBgpVrfUpdateOutqAddressFamilyUpdateParent.parent = parent }

func (clearBgpVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent) GetParent() types.Entity { return clearBgpVrfUpdateOutqAddressFamilyUpdateParent.parent }

func (clearBgpVrfUpdateOutqAddressFamilyUpdateParent *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input
type ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfUpdateOutqAddressFamilyUpdateParent_Input) GetParentYangName() string { return "clear-bgp-vrf-update-outq-address-family-update-parent" }

// ClearBgpVrfUpdateOutqAddressFamily
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Address-family.
// 
type ClearBgpVrfUpdateOutqAddressFamily struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqAddressFamily_Input
}

func (clearBgpVrfUpdateOutqAddressFamily *ClearBgpVrfUpdateOutqAddressFamily) GetFilter() yfilter.YFilter { return clearBgpVrfUpdateOutqAddressFamily.YFilter }

func (clearBgpVrfUpdateOutqAddressFamily *ClearBgpVrfUpdateOutqAddressFamily) SetFilter(yf yfilter.YFilter) { clearBgpVrfUpdateOutqAddressFamily.YFilter = yf }

func (clearBgpVrfUpdateOutqAddressFamily *ClearBgpVrfUpdateOutqAddressFamily) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfUpdateOutqAddressFamily *ClearBgpVrfUpdateOutqAddressFamily) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-address-family"
}

func (clearBgpVrfUpdateOutqAddressFamily *ClearBgpVrfUpdateOutqAddressFamily) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfUpdateOutqAddressFamily.Input
    }
    return nil
}

func (clearBgpVrfUpdateOutqAddressFamily *ClearBgpVrfUpdateOutqAddressFamily) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfUpdateOutqAddressFamily.Input
    return children
}

func (clearBgpVrfUpdateOutqAddressFamily *ClearBgpVrfUpdateOutqAddressFamily) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfUpdateOutqAddressFamily *ClearBgpVrfUpdateOutqAddressFamily) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfUpdateOutqAddressFamily *ClearBgpVrfUpdateOutqAddressFamily) GetYangName() string { return "clear-bgp-vrf-update-outq-address-family" }

func (clearBgpVrfUpdateOutqAddressFamily *ClearBgpVrfUpdateOutqAddressFamily) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfUpdateOutqAddressFamily *ClearBgpVrfUpdateOutqAddressFamily) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfUpdateOutqAddressFamily *ClearBgpVrfUpdateOutqAddressFamily) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfUpdateOutqAddressFamily *ClearBgpVrfUpdateOutqAddressFamily) SetParent(parent types.Entity) { clearBgpVrfUpdateOutqAddressFamily.parent = parent }

func (clearBgpVrfUpdateOutqAddressFamily *ClearBgpVrfUpdateOutqAddressFamily) GetParent() types.Entity { return clearBgpVrfUpdateOutqAddressFamily.parent }

func (clearBgpVrfUpdateOutqAddressFamily *ClearBgpVrfUpdateOutqAddressFamily) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfUpdateOutqAddressFamily_Input
type ClearBgpVrfUpdateOutqAddressFamily_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}
}

func (input *ClearBgpVrfUpdateOutqAddressFamily_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfUpdateOutqAddressFamily_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfUpdateOutqAddressFamily_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    return ""
}

func (input *ClearBgpVrfUpdateOutqAddressFamily_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfUpdateOutqAddressFamily_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfUpdateOutqAddressFamily_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfUpdateOutqAddressFamily_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    return leafs
}

func (input *ClearBgpVrfUpdateOutqAddressFamily_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfUpdateOutqAddressFamily_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfUpdateOutqAddressFamily_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfUpdateOutqAddressFamily_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfUpdateOutqAddressFamily_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfUpdateOutqAddressFamily_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfUpdateOutqAddressFamily_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfUpdateOutqAddressFamily_Input) GetParentYangName() string { return "clear-bgp-vrf-update-outq-address-family" }

// ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
}

func (clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetFilter() yfilter.YFilter { return clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter }

func (clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.YFilter = yf }

func (clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent"
}

func (clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input
    }
    return nil
}

func (clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.Input
    return children
}

func (clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetYangName() string { return "clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent" }

func (clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) SetParent(parent types.Entity) { clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.parent = parent }

func (clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetParent() types.Entity { return clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent.parent }

func (clearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input
type ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefreshUpdateParent_Input) GetParentYangName() string { return "clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh-update-parent" }

// ClearBgpVrfUpdateOutqNeighborIpAddrRefresh
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Refresh OutQ.
// 
type ClearBgpVrfUpdateOutqNeighborIpAddrRefresh struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input
}

func (clearBgpVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh) GetFilter() yfilter.YFilter { return clearBgpVrfUpdateOutqNeighborIpAddrRefresh.YFilter }

func (clearBgpVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh) SetFilter(yf yfilter.YFilter) { clearBgpVrfUpdateOutqNeighborIpAddrRefresh.YFilter = yf }

func (clearBgpVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh"
}

func (clearBgpVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfUpdateOutqNeighborIpAddrRefresh.Input
    }
    return nil
}

func (clearBgpVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfUpdateOutqNeighborIpAddrRefresh.Input
    return children
}

func (clearBgpVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh) GetYangName() string { return "clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh" }

func (clearBgpVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh) SetParent(parent types.Entity) { clearBgpVrfUpdateOutqNeighborIpAddrRefresh.parent = parent }

func (clearBgpVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh) GetParent() types.Entity { return clearBgpVrfUpdateOutqNeighborIpAddrRefresh.parent }

func (clearBgpVrfUpdateOutqNeighborIpAddrRefresh *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input
type ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrRefresh_Input) GetParentYangName() string { return "clear-bgp-vrf-update-outq-neighbor-ip-addr-refresh" }

// ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input
}

func (clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent) GetFilter() yfilter.YFilter { return clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.YFilter }

func (clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.YFilter = yf }

func (clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent"
}

func (clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.Input
    }
    return nil
}

func (clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.Input
    return children
}

func (clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent) GetYangName() string { return "clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent" }

func (clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent) SetParent(parent types.Entity) { clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.parent = parent }

func (clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent) GetParent() types.Entity { return clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent.parent }

func (clearBgpVrfUpdateOutqNeighborIpAddrUpdateParent *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input
type ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddrUpdateParent_Input) GetParentYangName() string { return "clear-bgp-vrf-update-outq-neighbor-ip-addr-update-parent" }

// ClearBgpVrfUpdateOutqNeighborIpAddr
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Neighbor.
// 
type ClearBgpVrfUpdateOutqNeighborIpAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqNeighborIpAddr_Input
}

func (clearBgpVrfUpdateOutqNeighborIpAddr *ClearBgpVrfUpdateOutqNeighborIpAddr) GetFilter() yfilter.YFilter { return clearBgpVrfUpdateOutqNeighborIpAddr.YFilter }

func (clearBgpVrfUpdateOutqNeighborIpAddr *ClearBgpVrfUpdateOutqNeighborIpAddr) SetFilter(yf yfilter.YFilter) { clearBgpVrfUpdateOutqNeighborIpAddr.YFilter = yf }

func (clearBgpVrfUpdateOutqNeighborIpAddr *ClearBgpVrfUpdateOutqNeighborIpAddr) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfUpdateOutqNeighborIpAddr *ClearBgpVrfUpdateOutqNeighborIpAddr) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-neighbor-ip-addr"
}

func (clearBgpVrfUpdateOutqNeighborIpAddr *ClearBgpVrfUpdateOutqNeighborIpAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfUpdateOutqNeighborIpAddr.Input
    }
    return nil
}

func (clearBgpVrfUpdateOutqNeighborIpAddr *ClearBgpVrfUpdateOutqNeighborIpAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfUpdateOutqNeighborIpAddr.Input
    return children
}

func (clearBgpVrfUpdateOutqNeighborIpAddr *ClearBgpVrfUpdateOutqNeighborIpAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfUpdateOutqNeighborIpAddr *ClearBgpVrfUpdateOutqNeighborIpAddr) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfUpdateOutqNeighborIpAddr *ClearBgpVrfUpdateOutqNeighborIpAddr) GetYangName() string { return "clear-bgp-vrf-update-outq-neighbor-ip-addr" }

func (clearBgpVrfUpdateOutqNeighborIpAddr *ClearBgpVrfUpdateOutqNeighborIpAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfUpdateOutqNeighborIpAddr *ClearBgpVrfUpdateOutqNeighborIpAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfUpdateOutqNeighborIpAddr *ClearBgpVrfUpdateOutqNeighborIpAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfUpdateOutqNeighborIpAddr *ClearBgpVrfUpdateOutqNeighborIpAddr) SetParent(parent types.Entity) { clearBgpVrfUpdateOutqNeighborIpAddr.parent = parent }

func (clearBgpVrfUpdateOutqNeighborIpAddr *ClearBgpVrfUpdateOutqNeighborIpAddr) GetParent() types.Entity { return clearBgpVrfUpdateOutqNeighborIpAddr.parent }

func (clearBgpVrfUpdateOutqNeighborIpAddr *ClearBgpVrfUpdateOutqNeighborIpAddr) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfUpdateOutqNeighborIpAddr_Input
type ClearBgpVrfUpdateOutqNeighborIpAddr_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Neighbor address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?
    // This attribute is mandatory., or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?
    // This attribute is mandatory..
    IpAddr interface{}
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddr_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddr_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddr_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "ip-addr" { return "IpAddr" }
    return ""
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddr_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddr_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddr_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddr_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["ip-addr"] = input.IpAddr
    return leafs
}

func (input *ClearBgpVrfUpdateOutqNeighborIpAddr_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddr_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddr_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddr_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddr_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddr_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddr_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfUpdateOutqNeighborIpAddr_Input) GetParentYangName() string { return "clear-bgp-vrf-update-outq-neighbor-ip-addr" }

// ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.YFilter = yf }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-update-parent"
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.Input
    return children
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetYangName() string { return "clear-bgp-vrf-update-outq-update-group-sub-group-update-parent" }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent) SetParent(parent types.Entity) { clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.parent = parent }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetParent() types.Entity { return clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent.parent }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input
type ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "sub-group" { return "SubGroup" }
    return ""
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["update-group"] = input.UpdateGroup
    leafs["sub-group"] = input.SubGroup
    return leafs
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-vrf-update-outq-update-group-sub-group-update-parent" }

// ClearBgpVrfUpdateOutqUpdateGroupSubGroup
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpVrfUpdateOutqUpdateGroupSubGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroup) GetFilter() yfilter.YFilter { return clearBgpVrfUpdateOutqUpdateGroupSubGroup.YFilter }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroup) SetFilter(yf yfilter.YFilter) { clearBgpVrfUpdateOutqUpdateGroupSubGroup.YFilter = yf }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group"
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfUpdateOutqUpdateGroupSubGroup.Input
    }
    return nil
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfUpdateOutqUpdateGroupSubGroup.Input
    return children
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroup) GetYangName() string { return "clear-bgp-vrf-update-outq-update-group-sub-group" }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroup) SetParent(parent types.Entity) { clearBgpVrfUpdateOutqUpdateGroupSubGroup.parent = parent }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroup) GetParent() types.Entity { return clearBgpVrfUpdateOutqUpdateGroupSubGroup.parent }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input
type ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Sub-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    SubGroup interface{}
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "sub-group" { return "SubGroup" }
    return ""
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["update-group"] = input.UpdateGroup
    leafs["sub-group"] = input.SubGroup
    return leafs
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroup_Input) GetParentYangName() string { return "clear-bgp-vrf-update-outq-update-group-sub-group" }

// ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.YFilter = yf }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent"
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.Input
    return children
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetYangName() string { return "clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent" }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) SetParent(parent types.Entity) { clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.parent = parent }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetParent() types.Entity { return clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent.parent }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input
type ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "refresh-sub-group" { return "RefreshSubGroup" }
    return ""
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["update-group"] = input.UpdateGroup
    leafs["refresh-sub-group"] = input.RefreshSubGroup
    return leafs
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group-update-parent" }

// ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Sub-group.
// 
type ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetFilter() yfilter.YFilter { return clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) SetFilter(yf yfilter.YFilter) { clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.YFilter = yf }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group"
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input
    }
    return nil
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.Input
    return children
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetYangName() string { return "clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group" }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) SetParent(parent types.Entity) { clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.parent = parent }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetParent() types.Entity { return clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup.parent }

func (clearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input
type ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}

    // Refresh Sub-group process ID <x.y:z>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+)(:\d+). This attribute is mandatory.
    RefreshSubGroup interface{}
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "update-group" { return "UpdateGroup" }
    if yname == "refresh-sub-group" { return "RefreshSubGroup" }
    return ""
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["update-group"] = input.UpdateGroup
    leafs["refresh-sub-group"] = input.RefreshSubGroup
    return leafs
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfUpdateOutqUpdateGroupSubGroupRefreshSubGroup_Input) GetParentYangName() string { return "clear-bgp-vrf-update-outq-update-group-sub-group-refresh-sub-group" }

// ClearBgpVrfUpdateOutqUpdateGroupUpdateParent
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// Update parents' OutQ counters too.
// 
type ClearBgpVrfUpdateOutqUpdateGroupUpdateParent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input
}

func (clearBgpVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent) GetFilter() yfilter.YFilter { return clearBgpVrfUpdateOutqUpdateGroupUpdateParent.YFilter }

func (clearBgpVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent) SetFilter(yf yfilter.YFilter) { clearBgpVrfUpdateOutqUpdateGroupUpdateParent.YFilter = yf }

func (clearBgpVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group-update-parent"
}

func (clearBgpVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfUpdateOutqUpdateGroupUpdateParent.Input
    }
    return nil
}

func (clearBgpVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfUpdateOutqUpdateGroupUpdateParent.Input
    return children
}

func (clearBgpVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent) GetYangName() string { return "clear-bgp-vrf-update-outq-update-group-update-parent" }

func (clearBgpVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent) SetParent(parent types.Entity) { clearBgpVrfUpdateOutqUpdateGroupUpdateParent.parent = parent }

func (clearBgpVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent) GetParent() types.Entity { return clearBgpVrfUpdateOutqUpdateGroupUpdateParent.parent }

func (clearBgpVrfUpdateOutqUpdateGroupUpdateParent *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input
type ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "update-group" { return "UpdateGroup" }
    return ""
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["update-group"] = input.UpdateGroup
    return leafs
}

func (input *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfUpdateOutqUpdateGroupUpdateParent_Input) GetParentYangName() string { return "clear-bgp-vrf-update-outq-update-group-update-parent" }

// ClearBgpVrfUpdateOutqUpdateGroup
// Specify a VRF.
// Clear Update information (Do NOT execute without cisco support)(cisco-support).
// Clear Update generation OutQ counters (Do NOT execute without cisco support)(cisco-support).
// Update-group.
// 
type ClearBgpVrfUpdateOutqUpdateGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Input ClearBgpVrfUpdateOutqUpdateGroup_Input
}

func (clearBgpVrfUpdateOutqUpdateGroup *ClearBgpVrfUpdateOutqUpdateGroup) GetFilter() yfilter.YFilter { return clearBgpVrfUpdateOutqUpdateGroup.YFilter }

func (clearBgpVrfUpdateOutqUpdateGroup *ClearBgpVrfUpdateOutqUpdateGroup) SetFilter(yf yfilter.YFilter) { clearBgpVrfUpdateOutqUpdateGroup.YFilter = yf }

func (clearBgpVrfUpdateOutqUpdateGroup *ClearBgpVrfUpdateOutqUpdateGroup) GetGoName(yname string) string {
    if yname == "input" { return "Input" }
    return ""
}

func (clearBgpVrfUpdateOutqUpdateGroup *ClearBgpVrfUpdateOutqUpdateGroup) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-act:clear-bgp-vrf-update-outq-update-group"
}

func (clearBgpVrfUpdateOutqUpdateGroup *ClearBgpVrfUpdateOutqUpdateGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "input" {
        return &clearBgpVrfUpdateOutqUpdateGroup.Input
    }
    return nil
}

func (clearBgpVrfUpdateOutqUpdateGroup *ClearBgpVrfUpdateOutqUpdateGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["input"] = &clearBgpVrfUpdateOutqUpdateGroup.Input
    return children
}

func (clearBgpVrfUpdateOutqUpdateGroup *ClearBgpVrfUpdateOutqUpdateGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clearBgpVrfUpdateOutqUpdateGroup *ClearBgpVrfUpdateOutqUpdateGroup) GetBundleName() string { return "cisco_ios_xr" }

func (clearBgpVrfUpdateOutqUpdateGroup *ClearBgpVrfUpdateOutqUpdateGroup) GetYangName() string { return "clear-bgp-vrf-update-outq-update-group" }

func (clearBgpVrfUpdateOutqUpdateGroup *ClearBgpVrfUpdateOutqUpdateGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clearBgpVrfUpdateOutqUpdateGroup *ClearBgpVrfUpdateOutqUpdateGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clearBgpVrfUpdateOutqUpdateGroup *ClearBgpVrfUpdateOutqUpdateGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clearBgpVrfUpdateOutqUpdateGroup *ClearBgpVrfUpdateOutqUpdateGroup) SetParent(parent types.Entity) { clearBgpVrfUpdateOutqUpdateGroup.parent = parent }

func (clearBgpVrfUpdateOutqUpdateGroup *ClearBgpVrfUpdateOutqUpdateGroup) GetParent() types.Entity { return clearBgpVrfUpdateOutqUpdateGroup.parent }

func (clearBgpVrfUpdateOutqUpdateGroup *ClearBgpVrfUpdateOutqUpdateGroup) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-act" }

// ClearBgpVrfUpdateOutqUpdateGroup_Input
type ClearBgpVrfUpdateOutqUpdateGroup_Input struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name or all. The type is one of the following types: enumeration
    // VrfName This attribute is mandatory., or string This attribute is
    // mandatory..
    VrfAll interface{}

    // Update-group process ID <x.y>. The type is string with pattern:
    // (([0-9]|1[0-5])\.\d+). This attribute is mandatory.
    UpdateGroup interface{}
}

func (input *ClearBgpVrfUpdateOutqUpdateGroup_Input) GetFilter() yfilter.YFilter { return input.YFilter }

func (input *ClearBgpVrfUpdateOutqUpdateGroup_Input) SetFilter(yf yfilter.YFilter) { input.YFilter = yf }

func (input *ClearBgpVrfUpdateOutqUpdateGroup_Input) GetGoName(yname string) string {
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "update-group" { return "UpdateGroup" }
    return ""
}

func (input *ClearBgpVrfUpdateOutqUpdateGroup_Input) GetSegmentPath() string {
    return "input"
}

func (input *ClearBgpVrfUpdateOutqUpdateGroup_Input) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (input *ClearBgpVrfUpdateOutqUpdateGroup_Input) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (input *ClearBgpVrfUpdateOutqUpdateGroup_Input) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-all"] = input.VrfAll
    leafs["update-group"] = input.UpdateGroup
    return leafs
}

func (input *ClearBgpVrfUpdateOutqUpdateGroup_Input) GetBundleName() string { return "cisco_ios_xr" }

func (input *ClearBgpVrfUpdateOutqUpdateGroup_Input) GetYangName() string { return "input" }

func (input *ClearBgpVrfUpdateOutqUpdateGroup_Input) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (input *ClearBgpVrfUpdateOutqUpdateGroup_Input) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (input *ClearBgpVrfUpdateOutqUpdateGroup_Input) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (input *ClearBgpVrfUpdateOutqUpdateGroup_Input) SetParent(parent types.Entity) { input.parent = parent }

func (input *ClearBgpVrfUpdateOutqUpdateGroup_Input) GetParent() types.Entity { return input.parent }

func (input *ClearBgpVrfUpdateOutqUpdateGroup_Input) GetParentYangName() string { return "clear-bgp-vrf-update-outq-update-group" }

